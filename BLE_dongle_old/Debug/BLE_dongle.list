
BLE_dongle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002988  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08002ac4  08002ac4  00012ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002b70  08002b70  00012b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002b74  08002b74  00012b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000004  08002b78  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000314  20000010  08002b84  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20000324  08002b84  00020324  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000e03e  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000020f0  00000000  00000000  0002e07e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000010e0  00000000  00000000  00030170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000ff8  00000000  00000000  00031250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00020183  00000000  00000000  00032248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000c5b0  00000000  00000000  000523cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000ce0dd  00000000  00000000  0005e97b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  0012ca58  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004518  00000000  00000000  0012caac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000010 	.word	0x20000010
 8000158:	00000000 	.word	0x00000000
 800015c:	08002aac 	.word	0x08002aac

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000014 	.word	0x20000014
 8000178:	08002aac 	.word	0x08002aac

0800017c <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 800017c:	b480      	push	{r7}
 800017e:	b083      	sub	sp, #12
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800018c:	f023 0218 	bic.w	r2, r3, #24
 8000190:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	4313      	orrs	r3, r2
 8000198:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800019c:	bf00      	nop
 800019e:	370c      	adds	r7, #12
 80001a0:	46bd      	mov	sp, r7
 80001a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001a6:	4770      	bx	lr

080001a8 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80001a8:	b480      	push	{r7}
 80001aa:	b085      	sub	sp, #20
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80001b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	4313      	orrs	r3, r2
 80001be:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80001c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	4013      	ands	r3, r2
 80001ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001cc:	68fb      	ldr	r3, [r7, #12]
}
 80001ce:	bf00      	nop
 80001d0:	3714      	adds	r7, #20
 80001d2:	46bd      	mov	sp, r7
 80001d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001d8:	4770      	bx	lr

080001da <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001da:	b580      	push	{r7, lr}
 80001dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001de:	f000 fa41 	bl	8000664 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001e2:	f000 f805 	bl	80001f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e6:	f000 f8cf 	bl	8000388 <MX_GPIO_Init>
  MX_USB_PCD_Init();
 80001ea:	f000 f8a5 	bl	8000338 <MX_USB_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001ee:	e7fe      	b.n	80001ee <main+0x14>

080001f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b0ae      	sub	sp, #184	; 0xb8
 80001f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80001fa:	2248      	movs	r2, #72	; 0x48
 80001fc:	2100      	movs	r1, #0
 80001fe:	4618      	mov	r0, r3
 8000200:	f002 fc4c 	bl	8002a9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000204:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000208:	2200      	movs	r2, #0
 800020a:	601a      	str	r2, [r3, #0]
 800020c:	605a      	str	r2, [r3, #4]
 800020e:	609a      	str	r2, [r3, #8]
 8000210:	60da      	str	r2, [r3, #12]
 8000212:	611a      	str	r2, [r3, #16]
 8000214:	615a      	str	r2, [r3, #20]
 8000216:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000218:	1d3b      	adds	r3, r7, #4
 800021a:	2250      	movs	r2, #80	; 0x50
 800021c:	2100      	movs	r1, #0
 800021e:	4618      	mov	r0, r3
 8000220:	f002 fc3c 	bl	8002a9c <memset>

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8000224:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000228:	68db      	ldr	r3, [r3, #12]
 800022a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800022e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000232:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8000234:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000238:	68db      	ldr	r3, [r3, #12]
 800023a:	f023 0303 	bic.w	r3, r3, #3
 800023e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000242:	f043 0301 	orr.w	r3, r3, #1
 8000246:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000248:	f000 fe0e 	bl	8000e68 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800024c:	2000      	movs	r0, #0
 800024e:	f7ff ff95 	bl	800017c <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000252:	4b38      	ldr	r3, [pc, #224]	; (8000334 <SystemClock_Config+0x144>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800025a:	4a36      	ldr	r2, [pc, #216]	; (8000334 <SystemClock_Config+0x144>)
 800025c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000260:	6013      	str	r3, [r2, #0]
 8000262:	4b34      	ldr	r3, [pc, #208]	; (8000334 <SystemClock_Config+0x144>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800026a:	603b      	str	r3, [r7, #0]
 800026c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800026e:	2327      	movs	r3, #39	; 0x27
 8000270:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000272:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000276:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000278:	2301      	movs	r3, #1
 800027a:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800027c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000280:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000282:	2301      	movs	r3, #1
 8000284:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000288:	2340      	movs	r3, #64	; 0x40
 800028a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800028e:	2300      	movs	r3, #0
 8000290:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000294:	2360      	movs	r3, #96	; 0x60
 8000296:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800029a:	2300      	movs	r3, #0
 800029c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002a4:	4618      	mov	r0, r3
 80002a6:	f001 f95b 	bl	8001560 <HAL_RCC_OscConfig>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d001      	beq.n	80002b4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80002b0:	f000 f8b6 	bl	8000420 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80002b4:	236f      	movs	r3, #111	; 0x6f
 80002b6:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80002b8:	2302      	movs	r3, #2
 80002ba:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002bc:	2300      	movs	r3, #0
 80002be:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002c0:	2300      	movs	r3, #0
 80002c2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c4:	2300      	movs	r3, #0
 80002c6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80002c8:	2300      	movs	r3, #0
 80002ca:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80002cc:	2300      	movs	r3, #0
 80002ce:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002d0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80002d4:	2101      	movs	r1, #1
 80002d6:	4618      	mov	r0, r3
 80002d8:	f001 fcce 	bl	8001c78 <HAL_RCC_ClockConfig>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80002e2:	f000 f89d 	bl	8000420 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USB;
 80002e6:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 80002ea:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 80002ec:	2318      	movs	r3, #24
 80002ee:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80002f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80002f4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80002f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80002fa:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80002fc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000300:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000302:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000306:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000308:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800030c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800030e:	2300      	movs	r3, #0
 8000310:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000312:	2300      	movs	r3, #0
 8000314:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000316:	1d3b      	adds	r3, r7, #4
 8000318:	4618      	mov	r0, r3
 800031a:	f002 f8d1 	bl	80024c0 <HAL_RCCEx_PeriphCLKConfig>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <SystemClock_Config+0x138>
  {
    Error_Handler();
 8000324:	f000 f87c 	bl	8000420 <Error_Handler>
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000328:	f002 fa40 	bl	80027ac <HAL_RCCEx_EnableMSIPLLMode>
}
 800032c:	bf00      	nop
 800032e:	37b8      	adds	r7, #184	; 0xb8
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}
 8000334:	58000400 	.word	0x58000400

08000338 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800033c:	4b10      	ldr	r3, [pc, #64]	; (8000380 <MX_USB_PCD_Init+0x48>)
 800033e:	4a11      	ldr	r2, [pc, #68]	; (8000384 <MX_USB_PCD_Init+0x4c>)
 8000340:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000342:	4b0f      	ldr	r3, [pc, #60]	; (8000380 <MX_USB_PCD_Init+0x48>)
 8000344:	2208      	movs	r2, #8
 8000346:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000348:	4b0d      	ldr	r3, [pc, #52]	; (8000380 <MX_USB_PCD_Init+0x48>)
 800034a:	2202      	movs	r2, #2
 800034c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800034e:	4b0c      	ldr	r3, [pc, #48]	; (8000380 <MX_USB_PCD_Init+0x48>)
 8000350:	2202      	movs	r2, #2
 8000352:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000354:	4b0a      	ldr	r3, [pc, #40]	; (8000380 <MX_USB_PCD_Init+0x48>)
 8000356:	2200      	movs	r2, #0
 8000358:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800035a:	4b09      	ldr	r3, [pc, #36]	; (8000380 <MX_USB_PCD_Init+0x48>)
 800035c:	2200      	movs	r2, #0
 800035e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000360:	4b07      	ldr	r3, [pc, #28]	; (8000380 <MX_USB_PCD_Init+0x48>)
 8000362:	2200      	movs	r2, #0
 8000364:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000366:	4b06      	ldr	r3, [pc, #24]	; (8000380 <MX_USB_PCD_Init+0x48>)
 8000368:	2200      	movs	r2, #0
 800036a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800036c:	4804      	ldr	r0, [pc, #16]	; (8000380 <MX_USB_PCD_Init+0x48>)
 800036e:	f000 fc6b 	bl	8000c48 <HAL_PCD_Init>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000378:	f000 f852 	bl	8000420 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800037c:	bf00      	nop
 800037e:	bd80      	pop	{r7, pc}
 8000380:	2000002c 	.word	0x2000002c
 8000384:	40006800 	.word	0x40006800

08000388 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b086      	sub	sp, #24
 800038c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800038e:	1d3b      	adds	r3, r7, #4
 8000390:	2200      	movs	r2, #0
 8000392:	601a      	str	r2, [r3, #0]
 8000394:	605a      	str	r2, [r3, #4]
 8000396:	609a      	str	r2, [r3, #8]
 8000398:	60da      	str	r2, [r3, #12]
 800039a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800039c:	2004      	movs	r0, #4
 800039e:	f7ff ff03 	bl	80001a8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a2:	2001      	movs	r0, #1
 80003a4:	f7ff ff00 	bl	80001a8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003a8:	2002      	movs	r0, #2
 80003aa:	f7ff fefd 	bl	80001a8 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80003ae:	2200      	movs	r2, #0
 80003b0:	2110      	movs	r1, #16
 80003b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003b6:	f000 fc2f 	bl	8000c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin, GPIO_PIN_RESET);
 80003ba:	2200      	movs	r2, #0
 80003bc:	2103      	movs	r1, #3
 80003be:	4817      	ldr	r0, [pc, #92]	; (800041c <MX_GPIO_Init+0x94>)
 80003c0:	f000 fc2a 	bl	8000c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 80003c4:	2310      	movs	r3, #16
 80003c6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c8:	2301      	movs	r3, #1
 80003ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003cc:	2300      	movs	r3, #0
 80003ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d0:	2300      	movs	r3, #0
 80003d2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 80003d4:	1d3b      	adds	r3, r7, #4
 80003d6:	4619      	mov	r1, r3
 80003d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003dc:	f000 faac 	bl	8000938 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin;
 80003e0:	2303      	movs	r3, #3
 80003e2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003e4:	2301      	movs	r3, #1
 80003e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e8:	2300      	movs	r3, #0
 80003ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ec:	2300      	movs	r3, #0
 80003ee:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003f0:	1d3b      	adds	r3, r7, #4
 80003f2:	4619      	mov	r1, r3
 80003f4:	4809      	ldr	r0, [pc, #36]	; (800041c <MX_GPIO_Init+0x94>)
 80003f6:	f000 fa9f 	bl	8000938 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003fe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000400:	2300      	movs	r3, #0
 8000402:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000404:	2300      	movs	r3, #0
 8000406:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000408:	1d3b      	adds	r3, r7, #4
 800040a:	4619      	mov	r1, r3
 800040c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000410:	f000 fa92 	bl	8000938 <HAL_GPIO_Init>

}
 8000414:	bf00      	nop
 8000416:	3718      	adds	r7, #24
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	48000400 	.word	0x48000400

08000420 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000424:	b672      	cpsid	i
}
 8000426:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000428:	e7fe      	b.n	8000428 <Error_Handler+0x8>

0800042a <LL_AHB2_GRP1_EnableClock>:
{
 800042a:	b480      	push	{r7}
 800042c:	b085      	sub	sp, #20
 800042e:	af00      	add	r7, sp, #0
 8000430:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000432:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000436:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000438:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	4313      	orrs	r3, r2
 8000440:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000442:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000446:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	4013      	ands	r3, r2
 800044c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800044e:	68fb      	ldr	r3, [r7, #12]
}
 8000450:	bf00      	nop
 8000452:	3714      	adds	r7, #20
 8000454:	46bd      	mov	sp, r7
 8000456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045a:	4770      	bx	lr

0800045c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800045c:	b480      	push	{r7}
 800045e:	b085      	sub	sp, #20
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000464:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000468:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800046a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	4313      	orrs	r3, r2
 8000472:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000474:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000478:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	4013      	ands	r3, r2
 800047e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000480:	68fb      	ldr	r3, [r7, #12]
}
 8000482:	bf00      	nop
 8000484:	3714      	adds	r7, #20
 8000486:	46bd      	mov	sp, r7
 8000488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048c:	4770      	bx	lr

0800048e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800048e:	b480      	push	{r7}
 8000490:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000492:	bf00      	nop
 8000494:	46bd      	mov	sp, r7
 8000496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049a:	4770      	bx	lr

0800049c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b088      	sub	sp, #32
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a4:	f107 030c 	add.w	r3, r7, #12
 80004a8:	2200      	movs	r2, #0
 80004aa:	601a      	str	r2, [r3, #0]
 80004ac:	605a      	str	r2, [r3, #4]
 80004ae:	609a      	str	r2, [r3, #8]
 80004b0:	60da      	str	r2, [r3, #12]
 80004b2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a0f      	ldr	r2, [pc, #60]	; (80004f8 <HAL_PCD_MspInit+0x5c>)
 80004ba:	4293      	cmp	r3, r2
 80004bc:	d118      	bne.n	80004f0 <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004be:	2001      	movs	r0, #1
 80004c0:	f7ff ffb3 	bl	800042a <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80004c4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80004c8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004ca:	2302      	movs	r3, #2
 80004cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ce:	2300      	movs	r3, #0
 80004d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d2:	2300      	movs	r3, #0
 80004d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80004d6:	230a      	movs	r3, #10
 80004d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004da:	f107 030c 	add.w	r3, r7, #12
 80004de:	4619      	mov	r1, r3
 80004e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004e4:	f000 fa28 	bl	8000938 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80004e8:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80004ec:	f7ff ffb6 	bl	800045c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80004f0:	bf00      	nop
 80004f2:	3720      	adds	r7, #32
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	40006800 	.word	0x40006800

080004fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000500:	e7fe      	b.n	8000500 <NMI_Handler+0x4>

08000502 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000502:	b480      	push	{r7}
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000506:	e7fe      	b.n	8000506 <HardFault_Handler+0x4>

08000508 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800050c:	e7fe      	b.n	800050c <MemManage_Handler+0x4>

0800050e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800050e:	b480      	push	{r7}
 8000510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000512:	e7fe      	b.n	8000512 <BusFault_Handler+0x4>

08000514 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000518:	e7fe      	b.n	8000518 <UsageFault_Handler+0x4>

0800051a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800051a:	b480      	push	{r7}
 800051c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800051e:	bf00      	nop
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr

08000528 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800052c:	bf00      	nop
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr

08000536 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000536:	b480      	push	{r7}
 8000538:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800053a:	bf00      	nop
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr

08000544 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000548:	f000 f8e6 	bl	8000718 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800054c:	bf00      	nop
 800054e:	bd80      	pop	{r7, pc}

08000550 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8000554:	4b24      	ldr	r3, [pc, #144]	; (80005e8 <SystemInit+0x98>)
 8000556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800055a:	4a23      	ldr	r2, [pc, #140]	; (80005e8 <SystemInit+0x98>)
 800055c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000560:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000564:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800056e:	f043 0301 	orr.w	r3, r3, #1
 8000572:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000574:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000578:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800057c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800057e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000582:	681a      	ldr	r2, [r3, #0]
 8000584:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000588:	4b18      	ldr	r3, [pc, #96]	; (80005ec <SystemInit+0x9c>)
 800058a:	4013      	ands	r3, r2
 800058c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800058e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000592:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000596:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800059a:	f023 0305 	bic.w	r3, r3, #5
 800059e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80005a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80005aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80005ae:	f023 0301 	bic.w	r3, r3, #1
 80005b2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80005b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005ba:	4a0d      	ldr	r2, [pc, #52]	; (80005f0 <SystemInit+0xa0>)
 80005bc:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80005be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005c2:	4a0b      	ldr	r2, [pc, #44]	; (80005f0 <SystemInit+0xa0>)
 80005c4:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80005c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80005d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005d4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80005d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005da:	2200      	movs	r2, #0
 80005dc:	619a      	str	r2, [r3, #24]
}
 80005de:	bf00      	nop
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr
 80005e8:	e000ed00 	.word	0xe000ed00
 80005ec:	faf6fefb 	.word	0xfaf6fefb
 80005f0:	22041000 	.word	0x22041000

080005f4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80005f4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005f8:	3304      	adds	r3, #4

080005fa <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005fa:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005fc:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80005fe:	d3f9      	bcc.n	80005f4 <CopyDataInit>
  bx lr
 8000600:	4770      	bx	lr

08000602 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000602:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000604:	3004      	adds	r0, #4

08000606 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000606:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000608:	d3fb      	bcc.n	8000602 <FillZerobss>
  bx lr
 800060a:	4770      	bx	lr

0800060c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800060c:	480c      	ldr	r0, [pc, #48]	; (8000640 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800060e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000610:	f7ff ff9e 	bl	8000550 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000614:	480b      	ldr	r0, [pc, #44]	; (8000644 <LoopForever+0x8>)
 8000616:	490c      	ldr	r1, [pc, #48]	; (8000648 <LoopForever+0xc>)
 8000618:	4a0c      	ldr	r2, [pc, #48]	; (800064c <LoopForever+0x10>)
 800061a:	2300      	movs	r3, #0
 800061c:	f7ff ffed 	bl	80005fa <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000620:	480b      	ldr	r0, [pc, #44]	; (8000650 <LoopForever+0x14>)
 8000622:	490c      	ldr	r1, [pc, #48]	; (8000654 <LoopForever+0x18>)
 8000624:	2300      	movs	r3, #0
 8000626:	f7ff ffee 	bl	8000606 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800062a:	480b      	ldr	r0, [pc, #44]	; (8000658 <LoopForever+0x1c>)
 800062c:	490b      	ldr	r1, [pc, #44]	; (800065c <LoopForever+0x20>)
 800062e:	2300      	movs	r3, #0
 8000630:	f7ff ffe9 	bl	8000606 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000634:	f002 fa0e 	bl	8002a54 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000638:	f7ff fdcf 	bl	80001da <main>

0800063c <LoopForever>:

LoopForever:
  b LoopForever
 800063c:	e7fe      	b.n	800063c <LoopForever>
 800063e:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000640:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000644:	20000004 	.word	0x20000004
 8000648:	20000010 	.word	0x20000010
 800064c:	08002b78 	.word	0x08002b78
  INIT_BSS _sbss, _ebss
 8000650:	20000010 	.word	0x20000010
 8000654:	20000324 	.word	0x20000324
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000658:	20030000 	.word	0x20030000
 800065c:	20030000 	.word	0x20030000

08000660 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000660:	e7fe      	b.n	8000660 <ADC1_IRQHandler>
	...

08000664 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800066a:	2300      	movs	r3, #0
 800066c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800066e:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <HAL_Init+0x3c>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4a0b      	ldr	r2, [pc, #44]	; (80006a0 <HAL_Init+0x3c>)
 8000674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000678:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800067a:	2003      	movs	r0, #3
 800067c:	f000 f92a 	bl	80008d4 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000680:	2000      	movs	r0, #0
 8000682:	f000 f80f 	bl	80006a4 <HAL_InitTick>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d002      	beq.n	8000692 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800068c:	2301      	movs	r3, #1
 800068e:	71fb      	strb	r3, [r7, #7]
 8000690:	e001      	b.n	8000696 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000692:	f7ff fefc 	bl	800048e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000696:	79fb      	ldrb	r3, [r7, #7]
}
 8000698:	4618      	mov	r0, r3
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	58004000 	.word	0x58004000

080006a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006ac:	2300      	movs	r3, #0
 80006ae:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80006b0:	4b17      	ldr	r3, [pc, #92]	; (8000710 <HAL_InitTick+0x6c>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d024      	beq.n	8000702 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 80006b8:	f001 fc8a 	bl	8001fd0 <HAL_RCC_GetHCLKFreq>
 80006bc:	4602      	mov	r2, r0
 80006be:	4b14      	ldr	r3, [pc, #80]	; (8000710 <HAL_InitTick+0x6c>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	4619      	mov	r1, r3
 80006c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006c8:	fbb3 f3f1 	udiv	r3, r3, r1
 80006cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80006d0:	4618      	mov	r0, r3
 80006d2:	f000 f924 	bl	800091e <HAL_SYSTICK_Config>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d10f      	bne.n	80006fc <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2b0f      	cmp	r3, #15
 80006e0:	d809      	bhi.n	80006f6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006e2:	2200      	movs	r2, #0
 80006e4:	6879      	ldr	r1, [r7, #4]
 80006e6:	f04f 30ff 	mov.w	r0, #4294967295
 80006ea:	f000 f8fe 	bl	80008ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006ee:	4a09      	ldr	r2, [pc, #36]	; (8000714 <HAL_InitTick+0x70>)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	6013      	str	r3, [r2, #0]
 80006f4:	e007      	b.n	8000706 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80006f6:	2301      	movs	r3, #1
 80006f8:	73fb      	strb	r3, [r7, #15]
 80006fa:	e004      	b.n	8000706 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 80006fc:	2301      	movs	r3, #1
 80006fe:	73fb      	strb	r3, [r7, #15]
 8000700:	e001      	b.n	8000706 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000702:	2301      	movs	r3, #1
 8000704:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000706:	7bfb      	ldrb	r3, [r7, #15]
}
 8000708:	4618      	mov	r0, r3
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	2000000c 	.word	0x2000000c
 8000714:	20000008 	.word	0x20000008

08000718 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <HAL_IncTick+0x20>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	461a      	mov	r2, r3
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <HAL_IncTick+0x24>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4413      	add	r3, r2
 8000728:	4a04      	ldr	r2, [pc, #16]	; (800073c <HAL_IncTick+0x24>)
 800072a:	6013      	str	r3, [r2, #0]
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	2000000c 	.word	0x2000000c
 800073c:	20000320 	.word	0x20000320

08000740 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  return uwTick;
 8000744:	4b03      	ldr	r3, [pc, #12]	; (8000754 <HAL_GetTick+0x14>)
 8000746:	681b      	ldr	r3, [r3, #0]
}
 8000748:	4618      	mov	r0, r3
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	20000320 	.word	0x20000320

08000758 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800075c:	4b03      	ldr	r3, [pc, #12]	; (800076c <HAL_GetTickPrio+0x14>)
 800075e:	681b      	ldr	r3, [r3, #0]
}
 8000760:	4618      	mov	r0, r3
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	20000008 	.word	0x20000008

08000770 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000770:	b480      	push	{r7}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	f003 0307 	and.w	r3, r3, #7
 800077e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <__NVIC_SetPriorityGrouping+0x44>)
 8000782:	68db      	ldr	r3, [r3, #12]
 8000784:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000786:	68ba      	ldr	r2, [r7, #8]
 8000788:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800078c:	4013      	ands	r3, r2
 800078e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000798:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800079c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007a2:	4a04      	ldr	r2, [pc, #16]	; (80007b4 <__NVIC_SetPriorityGrouping+0x44>)
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	60d3      	str	r3, [r2, #12]
}
 80007a8:	bf00      	nop
 80007aa:	3714      	adds	r7, #20
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	e000ed00 	.word	0xe000ed00

080007b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007bc:	4b04      	ldr	r3, [pc, #16]	; (80007d0 <__NVIC_GetPriorityGrouping+0x18>)
 80007be:	68db      	ldr	r3, [r3, #12]
 80007c0:	0a1b      	lsrs	r3, r3, #8
 80007c2:	f003 0307 	and.w	r3, r3, #7
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	e000ed00 	.word	0xe000ed00

080007d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	6039      	str	r1, [r7, #0]
 80007de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	db0a      	blt.n	80007fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	b2da      	uxtb	r2, r3
 80007ec:	490c      	ldr	r1, [pc, #48]	; (8000820 <__NVIC_SetPriority+0x4c>)
 80007ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f2:	0112      	lsls	r2, r2, #4
 80007f4:	b2d2      	uxtb	r2, r2
 80007f6:	440b      	add	r3, r1
 80007f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007fc:	e00a      	b.n	8000814 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	b2da      	uxtb	r2, r3
 8000802:	4908      	ldr	r1, [pc, #32]	; (8000824 <__NVIC_SetPriority+0x50>)
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	f003 030f 	and.w	r3, r3, #15
 800080a:	3b04      	subs	r3, #4
 800080c:	0112      	lsls	r2, r2, #4
 800080e:	b2d2      	uxtb	r2, r2
 8000810:	440b      	add	r3, r1
 8000812:	761a      	strb	r2, [r3, #24]
}
 8000814:	bf00      	nop
 8000816:	370c      	adds	r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr
 8000820:	e000e100 	.word	0xe000e100
 8000824:	e000ed00 	.word	0xe000ed00

08000828 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000828:	b480      	push	{r7}
 800082a:	b089      	sub	sp, #36	; 0x24
 800082c:	af00      	add	r7, sp, #0
 800082e:	60f8      	str	r0, [r7, #12]
 8000830:	60b9      	str	r1, [r7, #8]
 8000832:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	f003 0307 	and.w	r3, r3, #7
 800083a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800083c:	69fb      	ldr	r3, [r7, #28]
 800083e:	f1c3 0307 	rsb	r3, r3, #7
 8000842:	2b04      	cmp	r3, #4
 8000844:	bf28      	it	cs
 8000846:	2304      	movcs	r3, #4
 8000848:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800084a:	69fb      	ldr	r3, [r7, #28]
 800084c:	3304      	adds	r3, #4
 800084e:	2b06      	cmp	r3, #6
 8000850:	d902      	bls.n	8000858 <NVIC_EncodePriority+0x30>
 8000852:	69fb      	ldr	r3, [r7, #28]
 8000854:	3b03      	subs	r3, #3
 8000856:	e000      	b.n	800085a <NVIC_EncodePriority+0x32>
 8000858:	2300      	movs	r3, #0
 800085a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800085c:	f04f 32ff 	mov.w	r2, #4294967295
 8000860:	69bb      	ldr	r3, [r7, #24]
 8000862:	fa02 f303 	lsl.w	r3, r2, r3
 8000866:	43da      	mvns	r2, r3
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	401a      	ands	r2, r3
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000870:	f04f 31ff 	mov.w	r1, #4294967295
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	fa01 f303 	lsl.w	r3, r1, r3
 800087a:	43d9      	mvns	r1, r3
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000880:	4313      	orrs	r3, r2
         );
}
 8000882:	4618      	mov	r0, r3
 8000884:	3724      	adds	r7, #36	; 0x24
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
	...

08000890 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	3b01      	subs	r3, #1
 800089c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008a0:	d301      	bcc.n	80008a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008a2:	2301      	movs	r3, #1
 80008a4:	e00f      	b.n	80008c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008a6:	4a0a      	ldr	r2, [pc, #40]	; (80008d0 <SysTick_Config+0x40>)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	3b01      	subs	r3, #1
 80008ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008ae:	210f      	movs	r1, #15
 80008b0:	f04f 30ff 	mov.w	r0, #4294967295
 80008b4:	f7ff ff8e 	bl	80007d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008b8:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <SysTick_Config+0x40>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008be:	4b04      	ldr	r3, [pc, #16]	; (80008d0 <SysTick_Config+0x40>)
 80008c0:	2207      	movs	r2, #7
 80008c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008c4:	2300      	movs	r3, #0
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	e000e010 	.word	0xe000e010

080008d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008dc:	6878      	ldr	r0, [r7, #4]
 80008de:	f7ff ff47 	bl	8000770 <__NVIC_SetPriorityGrouping>
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b086      	sub	sp, #24
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	4603      	mov	r3, r0
 80008f2:	60b9      	str	r1, [r7, #8]
 80008f4:	607a      	str	r2, [r7, #4]
 80008f6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80008f8:	f7ff ff5e 	bl	80007b8 <__NVIC_GetPriorityGrouping>
 80008fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008fe:	687a      	ldr	r2, [r7, #4]
 8000900:	68b9      	ldr	r1, [r7, #8]
 8000902:	6978      	ldr	r0, [r7, #20]
 8000904:	f7ff ff90 	bl	8000828 <NVIC_EncodePriority>
 8000908:	4602      	mov	r2, r0
 800090a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800090e:	4611      	mov	r1, r2
 8000910:	4618      	mov	r0, r3
 8000912:	f7ff ff5f 	bl	80007d4 <__NVIC_SetPriority>
}
 8000916:	bf00      	nop
 8000918:	3718      	adds	r7, #24
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800091e:	b580      	push	{r7, lr}
 8000920:	b082      	sub	sp, #8
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000926:	6878      	ldr	r0, [r7, #4]
 8000928:	f7ff ffb2 	bl	8000890 <SysTick_Config>
 800092c:	4603      	mov	r3, r0
}
 800092e:	4618      	mov	r0, r3
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
	...

08000938 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000938:	b480      	push	{r7}
 800093a:	b087      	sub	sp, #28
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000942:	2300      	movs	r3, #0
 8000944:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000946:	e14c      	b.n	8000be2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	2101      	movs	r1, #1
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	fa01 f303 	lsl.w	r3, r1, r3
 8000954:	4013      	ands	r3, r2
 8000956:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	2b00      	cmp	r3, #0
 800095c:	f000 813e 	beq.w	8000bdc <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	2b01      	cmp	r3, #1
 8000966:	d00b      	beq.n	8000980 <HAL_GPIO_Init+0x48>
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	2b02      	cmp	r3, #2
 800096e:	d007      	beq.n	8000980 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000974:	2b11      	cmp	r3, #17
 8000976:	d003      	beq.n	8000980 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	2b12      	cmp	r3, #18
 800097e:	d130      	bne.n	80009e2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	689b      	ldr	r3, [r3, #8]
 8000984:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	005b      	lsls	r3, r3, #1
 800098a:	2203      	movs	r2, #3
 800098c:	fa02 f303 	lsl.w	r3, r2, r3
 8000990:	43db      	mvns	r3, r3
 8000992:	693a      	ldr	r2, [r7, #16]
 8000994:	4013      	ands	r3, r2
 8000996:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	68da      	ldr	r2, [r3, #12]
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	005b      	lsls	r3, r3, #1
 80009a0:	fa02 f303 	lsl.w	r3, r2, r3
 80009a4:	693a      	ldr	r2, [r7, #16]
 80009a6:	4313      	orrs	r3, r2
 80009a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	693a      	ldr	r2, [r7, #16]
 80009ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80009b6:	2201      	movs	r2, #1
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	fa02 f303 	lsl.w	r3, r2, r3
 80009be:	43db      	mvns	r3, r3
 80009c0:	693a      	ldr	r2, [r7, #16]
 80009c2:	4013      	ands	r3, r2
 80009c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	091b      	lsrs	r3, r3, #4
 80009cc:	f003 0201 	and.w	r2, r3, #1
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	fa02 f303 	lsl.w	r3, r2, r3
 80009d6:	693a      	ldr	r2, [r7, #16]
 80009d8:	4313      	orrs	r3, r2
 80009da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	68db      	ldr	r3, [r3, #12]
 80009e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	005b      	lsls	r3, r3, #1
 80009ec:	2203      	movs	r2, #3
 80009ee:	fa02 f303 	lsl.w	r3, r2, r3
 80009f2:	43db      	mvns	r3, r3
 80009f4:	693a      	ldr	r2, [r7, #16]
 80009f6:	4013      	ands	r3, r2
 80009f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	689a      	ldr	r2, [r3, #8]
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	fa02 f303 	lsl.w	r3, r2, r3
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	2b02      	cmp	r3, #2
 8000a18:	d003      	beq.n	8000a22 <HAL_GPIO_Init+0xea>
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	685b      	ldr	r3, [r3, #4]
 8000a1e:	2b12      	cmp	r3, #18
 8000a20:	d123      	bne.n	8000a6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	08da      	lsrs	r2, r3, #3
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	3208      	adds	r2, #8
 8000a2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	f003 0307 	and.w	r3, r3, #7
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	220f      	movs	r2, #15
 8000a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3e:	43db      	mvns	r3, r3
 8000a40:	693a      	ldr	r2, [r7, #16]
 8000a42:	4013      	ands	r3, r2
 8000a44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	691a      	ldr	r2, [r3, #16]
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	f003 0307 	and.w	r3, r3, #7
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	fa02 f303 	lsl.w	r3, r2, r3
 8000a56:	693a      	ldr	r2, [r7, #16]
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	08da      	lsrs	r2, r3, #3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	3208      	adds	r2, #8
 8000a64:	6939      	ldr	r1, [r7, #16]
 8000a66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	2203      	movs	r2, #3
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	43db      	mvns	r3, r3
 8000a7c:	693a      	ldr	r2, [r7, #16]
 8000a7e:	4013      	ands	r3, r2
 8000a80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	f003 0203 	and.w	r2, r3, #3
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	f000 8098 	beq.w	8000bdc <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000aac:	4a54      	ldr	r2, [pc, #336]	; (8000c00 <HAL_GPIO_Init+0x2c8>)
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	089b      	lsrs	r3, r3, #2
 8000ab2:	3302      	adds	r3, #2
 8000ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	f003 0303 	and.w	r3, r3, #3
 8000ac0:	009b      	lsls	r3, r3, #2
 8000ac2:	220f      	movs	r2, #15
 8000ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac8:	43db      	mvns	r3, r3
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	4013      	ands	r3, r2
 8000ace:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ad6:	d019      	beq.n	8000b0c <HAL_GPIO_Init+0x1d4>
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	4a4a      	ldr	r2, [pc, #296]	; (8000c04 <HAL_GPIO_Init+0x2cc>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d013      	beq.n	8000b08 <HAL_GPIO_Init+0x1d0>
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	4a49      	ldr	r2, [pc, #292]	; (8000c08 <HAL_GPIO_Init+0x2d0>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d00d      	beq.n	8000b04 <HAL_GPIO_Init+0x1cc>
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	4a48      	ldr	r2, [pc, #288]	; (8000c0c <HAL_GPIO_Init+0x2d4>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d007      	beq.n	8000b00 <HAL_GPIO_Init+0x1c8>
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	4a47      	ldr	r2, [pc, #284]	; (8000c10 <HAL_GPIO_Init+0x2d8>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d101      	bne.n	8000afc <HAL_GPIO_Init+0x1c4>
 8000af8:	2304      	movs	r3, #4
 8000afa:	e008      	b.n	8000b0e <HAL_GPIO_Init+0x1d6>
 8000afc:	2307      	movs	r3, #7
 8000afe:	e006      	b.n	8000b0e <HAL_GPIO_Init+0x1d6>
 8000b00:	2303      	movs	r3, #3
 8000b02:	e004      	b.n	8000b0e <HAL_GPIO_Init+0x1d6>
 8000b04:	2302      	movs	r3, #2
 8000b06:	e002      	b.n	8000b0e <HAL_GPIO_Init+0x1d6>
 8000b08:	2301      	movs	r3, #1
 8000b0a:	e000      	b.n	8000b0e <HAL_GPIO_Init+0x1d6>
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	697a      	ldr	r2, [r7, #20]
 8000b10:	f002 0203 	and.w	r2, r2, #3
 8000b14:	0092      	lsls	r2, r2, #2
 8000b16:	4093      	lsls	r3, r2
 8000b18:	693a      	ldr	r2, [r7, #16]
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b1e:	4938      	ldr	r1, [pc, #224]	; (8000c00 <HAL_GPIO_Init+0x2c8>)
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	089b      	lsrs	r3, r3, #2
 8000b24:	3302      	adds	r3, #2
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000b2c:	4b39      	ldr	r3, [pc, #228]	; (8000c14 <HAL_GPIO_Init+0x2dc>)
 8000b2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000b32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	43db      	mvns	r3, r3
 8000b38:	693a      	ldr	r2, [r7, #16]
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d003      	beq.n	8000b52 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b52:	4a30      	ldr	r2, [pc, #192]	; (8000c14 <HAL_GPIO_Init+0x2dc>)
 8000b54:	693b      	ldr	r3, [r7, #16]
 8000b56:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8000b5a:	4b2e      	ldr	r3, [pc, #184]	; (8000c14 <HAL_GPIO_Init+0x2dc>)
 8000b5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000b60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	43db      	mvns	r3, r3
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	4013      	ands	r3, r2
 8000b6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d003      	beq.n	8000b80 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000b78:	693a      	ldr	r2, [r7, #16]
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b80:	4a24      	ldr	r2, [pc, #144]	; (8000c14 <HAL_GPIO_Init+0x2dc>)
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b88:	4b22      	ldr	r3, [pc, #136]	; (8000c14 <HAL_GPIO_Init+0x2dc>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	43db      	mvns	r3, r3
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	4013      	ands	r3, r2
 8000b96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d003      	beq.n	8000bac <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8000ba4:	693a      	ldr	r2, [r7, #16]
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000bac:	4a19      	ldr	r2, [pc, #100]	; (8000c14 <HAL_GPIO_Init+0x2dc>)
 8000bae:	693b      	ldr	r3, [r7, #16]
 8000bb0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000bb2:	4b18      	ldr	r3, [pc, #96]	; (8000c14 <HAL_GPIO_Init+0x2dc>)
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	43db      	mvns	r3, r3
 8000bbc:	693a      	ldr	r2, [r7, #16]
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d003      	beq.n	8000bd6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000bd6:	4a0f      	ldr	r2, [pc, #60]	; (8000c14 <HAL_GPIO_Init+0x2dc>)
 8000bd8:	693b      	ldr	r3, [r7, #16]
 8000bda:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	3301      	adds	r3, #1
 8000be0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	fa22 f303 	lsr.w	r3, r2, r3
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	f47f aeab 	bne.w	8000948 <HAL_GPIO_Init+0x10>
  }
}
 8000bf2:	bf00      	nop
 8000bf4:	bf00      	nop
 8000bf6:	371c      	adds	r7, #28
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	40010000 	.word	0x40010000
 8000c04:	48000400 	.word	0x48000400
 8000c08:	48000800 	.word	0x48000800
 8000c0c:	48000c00 	.word	0x48000c00
 8000c10:	48001000 	.word	0x48001000
 8000c14:	58000800 	.word	0x58000800

08000c18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	460b      	mov	r3, r1
 8000c22:	807b      	strh	r3, [r7, #2]
 8000c24:	4613      	mov	r3, r2
 8000c26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c28:	787b      	ldrb	r3, [r7, #1]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d003      	beq.n	8000c36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c2e:	887a      	ldrh	r2, [r7, #2]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c34:	e002      	b.n	8000c3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c36:	887a      	ldrh	r2, [r7, #2]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c4a:	b08b      	sub	sp, #44	; 0x2c
 8000c4c:	af06      	add	r7, sp, #24
 8000c4e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d101      	bne.n	8000c5a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
 8000c58:	e0d7      	b.n	8000e0a <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d106      	bne.n	8000c74 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2200      	movs	r2, #0
 8000c6a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000c6e:	6878      	ldr	r0, [r7, #4]
 8000c70:	f7ff fc14 	bl	800049c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2203      	movs	r2, #3
 8000c78:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f001 feaa 	bl	80029da <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c86:	2300      	movs	r3, #0
 8000c88:	73fb      	strb	r3, [r7, #15]
 8000c8a:	e04c      	b.n	8000d26 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000c8c:	7bfb      	ldrb	r3, [r7, #15]
 8000c8e:	6879      	ldr	r1, [r7, #4]
 8000c90:	1c5a      	adds	r2, r3, #1
 8000c92:	4613      	mov	r3, r2
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	4413      	add	r3, r2
 8000c98:	00db      	lsls	r3, r3, #3
 8000c9a:	440b      	add	r3, r1
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000ca2:	7bfb      	ldrb	r3, [r7, #15]
 8000ca4:	6879      	ldr	r1, [r7, #4]
 8000ca6:	1c5a      	adds	r2, r3, #1
 8000ca8:	4613      	mov	r3, r2
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	4413      	add	r3, r2
 8000cae:	00db      	lsls	r3, r3, #3
 8000cb0:	440b      	add	r3, r1
 8000cb2:	7bfa      	ldrb	r2, [r7, #15]
 8000cb4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000cb6:	7bfa      	ldrb	r2, [r7, #15]
 8000cb8:	7bfb      	ldrb	r3, [r7, #15]
 8000cba:	b298      	uxth	r0, r3
 8000cbc:	6879      	ldr	r1, [r7, #4]
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	4413      	add	r3, r2
 8000cc4:	00db      	lsls	r3, r3, #3
 8000cc6:	440b      	add	r3, r1
 8000cc8:	3336      	adds	r3, #54	; 0x36
 8000cca:	4602      	mov	r2, r0
 8000ccc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000cce:	7bfb      	ldrb	r3, [r7, #15]
 8000cd0:	6879      	ldr	r1, [r7, #4]
 8000cd2:	1c5a      	adds	r2, r3, #1
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	4413      	add	r3, r2
 8000cda:	00db      	lsls	r3, r3, #3
 8000cdc:	440b      	add	r3, r1
 8000cde:	3303      	adds	r3, #3
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000ce4:	7bfa      	ldrb	r2, [r7, #15]
 8000ce6:	6879      	ldr	r1, [r7, #4]
 8000ce8:	4613      	mov	r3, r2
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	4413      	add	r3, r2
 8000cee:	00db      	lsls	r3, r3, #3
 8000cf0:	440b      	add	r3, r1
 8000cf2:	3338      	adds	r3, #56	; 0x38
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000cf8:	7bfa      	ldrb	r2, [r7, #15]
 8000cfa:	6879      	ldr	r1, [r7, #4]
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	4413      	add	r3, r2
 8000d02:	00db      	lsls	r3, r3, #3
 8000d04:	440b      	add	r3, r1
 8000d06:	333c      	adds	r3, #60	; 0x3c
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000d0c:	7bfa      	ldrb	r2, [r7, #15]
 8000d0e:	6879      	ldr	r1, [r7, #4]
 8000d10:	4613      	mov	r3, r2
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	4413      	add	r3, r2
 8000d16:	00db      	lsls	r3, r3, #3
 8000d18:	440b      	add	r3, r1
 8000d1a:	3340      	adds	r3, #64	; 0x40
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
 8000d22:	3301      	adds	r3, #1
 8000d24:	73fb      	strb	r3, [r7, #15]
 8000d26:	7bfa      	ldrb	r2, [r7, #15]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d3ad      	bcc.n	8000c8c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d30:	2300      	movs	r3, #0
 8000d32:	73fb      	strb	r3, [r7, #15]
 8000d34:	e044      	b.n	8000dc0 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000d36:	7bfa      	ldrb	r2, [r7, #15]
 8000d38:	6879      	ldr	r1, [r7, #4]
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	4413      	add	r3, r2
 8000d40:	00db      	lsls	r3, r3, #3
 8000d42:	440b      	add	r3, r1
 8000d44:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000d48:	2200      	movs	r2, #0
 8000d4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000d4c:	7bfa      	ldrb	r2, [r7, #15]
 8000d4e:	6879      	ldr	r1, [r7, #4]
 8000d50:	4613      	mov	r3, r2
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	4413      	add	r3, r2
 8000d56:	00db      	lsls	r3, r3, #3
 8000d58:	440b      	add	r3, r1
 8000d5a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000d5e:	7bfa      	ldrb	r2, [r7, #15]
 8000d60:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000d62:	7bfa      	ldrb	r2, [r7, #15]
 8000d64:	6879      	ldr	r1, [r7, #4]
 8000d66:	4613      	mov	r3, r2
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	4413      	add	r3, r2
 8000d6c:	00db      	lsls	r3, r3, #3
 8000d6e:	440b      	add	r3, r1
 8000d70:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000d74:	2200      	movs	r2, #0
 8000d76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000d78:	7bfa      	ldrb	r2, [r7, #15]
 8000d7a:	6879      	ldr	r1, [r7, #4]
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	4413      	add	r3, r2
 8000d82:	00db      	lsls	r3, r3, #3
 8000d84:	440b      	add	r3, r1
 8000d86:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000d8e:	7bfa      	ldrb	r2, [r7, #15]
 8000d90:	6879      	ldr	r1, [r7, #4]
 8000d92:	4613      	mov	r3, r2
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	4413      	add	r3, r2
 8000d98:	00db      	lsls	r3, r3, #3
 8000d9a:	440b      	add	r3, r1
 8000d9c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000da4:	7bfa      	ldrb	r2, [r7, #15]
 8000da6:	6879      	ldr	r1, [r7, #4]
 8000da8:	4613      	mov	r3, r2
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	4413      	add	r3, r2
 8000dae:	00db      	lsls	r3, r3, #3
 8000db0:	440b      	add	r3, r1
 8000db2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000dba:	7bfb      	ldrb	r3, [r7, #15]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	73fb      	strb	r3, [r7, #15]
 8000dc0:	7bfa      	ldrb	r2, [r7, #15]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	d3b5      	bcc.n	8000d36 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	603b      	str	r3, [r7, #0]
 8000dd0:	687e      	ldr	r6, [r7, #4]
 8000dd2:	466d      	mov	r5, sp
 8000dd4:	f106 0410 	add.w	r4, r6, #16
 8000dd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ddc:	6823      	ldr	r3, [r4, #0]
 8000dde:	602b      	str	r3, [r5, #0]
 8000de0:	1d33      	adds	r3, r6, #4
 8000de2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000de4:	6838      	ldr	r0, [r7, #0]
 8000de6:	f001 fe13 	bl	8002a10 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2200      	movs	r2, #0
 8000dee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2201      	movs	r2, #1
 8000df6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	69db      	ldr	r3, [r3, #28]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d102      	bne.n	8000e08 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f000 f805 	bl	8000e12 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3714      	adds	r7, #20
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e12 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8000e12:	b480      	push	{r7}
 8000e14:	b085      	sub	sp, #20
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2201      	movs	r2, #1
 8000e24:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	b29a      	uxth	r2, r3
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8000e4a:	b29b      	uxth	r3, r3
 8000e4c:	f043 0302 	orr.w	r3, r3, #2
 8000e50:	b29a      	uxth	r2, r3
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3714      	adds	r7, #20
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
	...

08000e68 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000e6c:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a04      	ldr	r2, [pc, #16]	; (8000e84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000e72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e76:	6013      	str	r3, [r2, #0]
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	58000400 	.word	0x58000400

08000e88 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000e8c:	4b04      	ldr	r3, [pc, #16]	; (8000ea0 <HAL_PWREx_GetVoltageRange+0x18>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	58000400 	.word	0x58000400

08000ea4 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8000ea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000eb6:	d101      	bne.n	8000ebc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8000eb8:	2301      	movs	r3, #1
 8000eba:	e000      	b.n	8000ebe <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <LL_RCC_HSE_Enable>:
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000ecc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ed6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eda:	6013      	str	r3, [r2, #0]
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <LL_RCC_HSE_Disable>:
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8000eea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ef4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ef8:	6013      	str	r3, [r2, #0]
}
 8000efa:	bf00      	nop
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <LL_RCC_HSE_IsReady>:
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8000f08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000f16:	d101      	bne.n	8000f1c <LL_RCC_HSE_IsReady+0x18>
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e000      	b.n	8000f1e <LL_RCC_HSE_IsReady+0x1a>
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <LL_RCC_HSI_Enable>:
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000f2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f3a:	6013      	str	r3, [r2, #0]
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <LL_RCC_HSI_Disable>:
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8000f4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f58:	6013      	str	r3, [r2, #0]
}
 8000f5a:	bf00      	nop
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <LL_RCC_HSI_IsReady>:
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000f68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f76:	d101      	bne.n	8000f7c <LL_RCC_HSI_IsReady+0x18>
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e000      	b.n	8000f7e <LL_RCC_HSI_IsReady+0x1a>
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <LL_RCC_HSI_SetCalibTrimming>:
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000f90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	061b      	lsls	r3, r3, #24
 8000f9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	604b      	str	r3, [r1, #4]
}
 8000fa6:	bf00      	nop
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <LL_RCC_HSI48_Enable>:
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8000fb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000fbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000fc2:	f043 0301 	orr.w	r3, r3, #1
 8000fc6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8000fca:	bf00      	nop
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <LL_RCC_HSI48_Disable>:
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8000fd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fdc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000fe0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000fe4:	f023 0301 	bic.w	r3, r3, #1
 8000fe8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr

08000ff6 <LL_RCC_HSI48_IsReady>:
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8000ffa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ffe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	2b02      	cmp	r3, #2
 8001008:	d101      	bne.n	800100e <LL_RCC_HSI48_IsReady+0x18>
 800100a:	2301      	movs	r3, #1
 800100c:	e000      	b.n	8001010 <LL_RCC_HSI48_IsReady+0x1a>
 800100e:	2300      	movs	r3, #0
}
 8001010:	4618      	mov	r0, r3
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <LL_RCC_LSE_Enable>:
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800101e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001026:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800102a:	f043 0301 	orr.w	r3, r3, #1
 800102e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001032:	bf00      	nop
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <LL_RCC_LSE_Disable>:
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001040:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001048:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800104c:	f023 0301 	bic.w	r3, r3, #1
 8001050:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <LL_RCC_LSE_EnableBypass>:
{
 800105e:	b480      	push	{r7}
 8001060:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001062:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800106a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800106e:	f043 0304 	orr.w	r3, r3, #4
 8001072:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001076:	bf00      	nop
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <LL_RCC_LSE_DisableBypass>:
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001084:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800108c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001090:	f023 0304 	bic.w	r3, r3, #4
 8001094:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80010a2:	b480      	push	{r7}
 80010a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80010a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d101      	bne.n	80010ba <LL_RCC_LSE_IsReady+0x18>
 80010b6:	2301      	movs	r3, #1
 80010b8:	e000      	b.n	80010bc <LL_RCC_LSE_IsReady+0x1a>
 80010ba:	2300      	movs	r3, #0
}
 80010bc:	4618      	mov	r0, r3
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr

080010c6 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 80010c6:	b480      	push	{r7}
 80010c8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80010ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010d6:	f043 0301 	orr.w	r3, r3, #1
 80010da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80010de:	bf00      	nop
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80010ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010f8:	f023 0301 	bic.w	r3, r3, #1
 80010fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr

0800110a <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800110e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001112:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	2b02      	cmp	r3, #2
 800111c:	d101      	bne.n	8001122 <LL_RCC_LSI1_IsReady+0x18>
 800111e:	2301      	movs	r3, #1
 8001120:	e000      	b.n	8001124 <LL_RCC_LSI1_IsReady+0x1a>
 8001122:	2300      	movs	r3, #0
}
 8001124:	4618      	mov	r0, r3
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800112e:	b480      	push	{r7}
 8001130:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001132:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001136:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800113a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800113e:	f043 0304 	orr.w	r3, r3, #4
 8001142:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001146:	bf00      	nop
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001154:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001158:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800115c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001160:	f023 0304 	bic.w	r3, r3, #4
 8001164:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001168:	bf00      	nop
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr

08001172 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001172:	b480      	push	{r7}
 8001174:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001176:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800117a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800117e:	f003 0308 	and.w	r3, r3, #8
 8001182:	2b08      	cmp	r3, #8
 8001184:	d101      	bne.n	800118a <LL_RCC_LSI2_IsReady+0x18>
 8001186:	2301      	movs	r3, #1
 8001188:	e000      	b.n	800118c <LL_RCC_LSI2_IsReady+0x1a>
 800118a:	2300      	movs	r3, #0
}
 800118c:	4618      	mov	r0, r3
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001196:	b480      	push	{r7}
 8001198:	b083      	sub	sp, #12
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800119e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011a6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	021b      	lsls	r3, r3, #8
 80011ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011b2:	4313      	orrs	r3, r2
 80011b4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80011b8:	bf00      	nop
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80011c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011d2:	f043 0301 	orr.w	r3, r3, #1
 80011d6:	6013      	str	r3, [r2, #0]
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80011e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011f0:	f023 0301 	bic.w	r3, r3, #1
 80011f4:	6013      	str	r3, [r2, #0]
}
 80011f6:	bf00      	nop
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001204:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	2b02      	cmp	r3, #2
 8001210:	d101      	bne.n	8001216 <LL_RCC_MSI_IsReady+0x16>
 8001212:	2301      	movs	r3, #1
 8001214:	e000      	b.n	8001218 <LL_RCC_MSI_IsReady+0x18>
 8001216:	2300      	movs	r3, #0
}
 8001218:	4618      	mov	r0, r3
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001222:	b480      	push	{r7}
 8001224:	b083      	sub	sp, #12
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800122a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001234:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4313      	orrs	r3, r2
 800123c:	600b      	str	r3, [r1, #0]
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800124a:	b480      	push	{r7}
 800124c:	b083      	sub	sp, #12
 800124e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001250:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800125a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2bb0      	cmp	r3, #176	; 0xb0
 8001260:	d901      	bls.n	8001266 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001262:	23b0      	movs	r3, #176	; 0xb0
 8001264:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001266:	687b      	ldr	r3, [r7, #4]
}
 8001268:	4618      	mov	r0, r3
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800127c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	021b      	lsls	r3, r3, #8
 800128a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800128e:	4313      	orrs	r3, r2
 8001290:	604b      	str	r3, [r1, #4]
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800129e:	b480      	push	{r7}
 80012a0:	b083      	sub	sp, #12
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80012a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	f023 0203 	bic.w	r2, r3, #3
 80012b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	608b      	str	r3, [r1, #8]
}
 80012ba:	bf00      	nop
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80012ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	f003 030c 	and.w	r3, r3, #12
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80012de:	b480      	push	{r7}
 80012e0:	b083      	sub	sp, #12
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80012e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	608b      	str	r3, [r1, #8]
}
 80012fa:	bf00      	nop
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr

08001306 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001306:	b480      	push	{r7}
 8001308:	b083      	sub	sp, #12
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800130e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001312:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001316:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800131a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4313      	orrs	r3, r2
 8001322:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001326:	bf00      	nop
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001332:	b480      	push	{r7}
 8001334:	b083      	sub	sp, #12
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800133a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800133e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001342:	f023 020f 	bic.w	r2, r3, #15
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	091b      	lsrs	r3, r3, #4
 800134a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800134e:	4313      	orrs	r3, r2
 8001350:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001368:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001372:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4313      	orrs	r3, r2
 800137a:	608b      	str	r3, [r1, #8]
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001390:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800139a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	608b      	str	r3, [r1, #8]
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80013b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80013cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013d0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80013d4:	011b      	lsls	r3, r3, #4
 80013d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80013e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013f6:	6013      	str	r3, [r2, #0]
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001406:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001410:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001414:	6013      	str	r3, [r2, #0]
}
 8001416:	bf00      	nop
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001424:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800142e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001432:	d101      	bne.n	8001438 <LL_RCC_PLL_IsReady+0x18>
 8001434:	2301      	movs	r3, #1
 8001436:	e000      	b.n	800143a <LL_RCC_PLL_IsReady+0x1a>
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001448:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	0a1b      	lsrs	r3, r3, #8
 8001450:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001454:	4618      	mov	r0, r3
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001462:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800146c:	4618      	mov	r0, r3
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr

08001476 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800147a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001484:	4618      	mov	r0, r3
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800148e:	b480      	push	{r7}
 8001490:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001492:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	f003 0303 	and.w	r3, r3, #3
}
 800149c:	4618      	mov	r0, r3
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80014a6:	b480      	push	{r7}
 80014a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80014aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014b8:	d101      	bne.n	80014be <LL_RCC_IsActiveFlag_HPRE+0x18>
 80014ba:	2301      	movs	r3, #1
 80014bc:	e000      	b.n	80014c0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80014be:	2300      	movs	r3, #0
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr

080014ca <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80014ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014d2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80014d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80014de:	d101      	bne.n	80014e4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80014e0:	2301      	movs	r3, #1
 80014e2:	e000      	b.n	80014e6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80014f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014f8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80014fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001500:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001504:	d101      	bne.n	800150a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001506:	2301      	movs	r3, #1
 8001508:	e000      	b.n	800150c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800150a:	2300      	movs	r3, #0
}
 800150c:	4618      	mov	r0, r3
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001516:	b480      	push	{r7}
 8001518:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800151a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001524:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001528:	d101      	bne.n	800152e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800152a:	2301      	movs	r3, #1
 800152c:	e000      	b.n	8001530 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800152e:	2300      	movs	r3, #0
}
 8001530:	4618      	mov	r0, r3
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800153a:	b480      	push	{r7}
 800153c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800153e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001548:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800154c:	d101      	bne.n	8001552 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800154e:	2301      	movs	r3, #1
 8001550:	e000      	b.n	8001554 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001552:	2300      	movs	r3, #0
}
 8001554:	4618      	mov	r0, r3
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
	...

08001560 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001560:	b590      	push	{r4, r7, lr}
 8001562:	b08d      	sub	sp, #52	; 0x34
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d101      	bne.n	8001572 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e37e      	b.n	8001c70 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0320 	and.w	r3, r3, #32
 800157a:	2b00      	cmp	r3, #0
 800157c:	f000 8092 	beq.w	80016a4 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001580:	f7ff fea1 	bl	80012c6 <LL_RCC_GetSysClkSource>
 8001584:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001586:	f7ff ff82 	bl	800148e <LL_RCC_PLL_GetMainSource>
 800158a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800158c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800158e:	2b00      	cmp	r3, #0
 8001590:	d005      	beq.n	800159e <HAL_RCC_OscConfig+0x3e>
 8001592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001594:	2b0c      	cmp	r3, #12
 8001596:	d14c      	bne.n	8001632 <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800159a:	2b01      	cmp	r3, #1
 800159c:	d149      	bne.n	8001632 <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800159e:	f7ff fe2f 	bl	8001200 <LL_RCC_MSI_IsReady>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d005      	beq.n	80015b4 <HAL_RCC_OscConfig+0x54>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	69db      	ldr	r3, [r3, #28]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d101      	bne.n	80015b4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e35d      	b.n	8001c70 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80015b8:	f7ff fe47 	bl	800124a <LL_RCC_MSI_GetRange>
 80015bc:	4603      	mov	r3, r0
 80015be:	429c      	cmp	r4, r3
 80015c0:	d914      	bls.n	80015ec <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c6:	4618      	mov	r0, r3
 80015c8:	f000 fd16 	bl	8001ff8 <RCC_SetFlashLatencyFromMSIRange>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e34c      	b.n	8001c70 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff fe21 	bl	8001222 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a1b      	ldr	r3, [r3, #32]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff fe45 	bl	8001274 <LL_RCC_MSI_SetCalibTrimming>
 80015ea:	e013      	b.n	8001614 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff fe16 	bl	8001222 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a1b      	ldr	r3, [r3, #32]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff fe3a 	bl	8001274 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001604:	4618      	mov	r0, r3
 8001606:	f000 fcf7 	bl	8001ff8 <RCC_SetFlashLatencyFromMSIRange>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e32d      	b.n	8001c70 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001614:	f000 fcdc 	bl	8001fd0 <HAL_RCC_GetHCLKFreq>
 8001618:	4603      	mov	r3, r0
 800161a:	4ab3      	ldr	r2, [pc, #716]	; (80018e8 <HAL_RCC_OscConfig+0x388>)
 800161c:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800161e:	4bb3      	ldr	r3, [pc, #716]	; (80018ec <HAL_RCC_OscConfig+0x38c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff f83e 	bl	80006a4 <HAL_InitTick>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d039      	beq.n	80016a2 <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e31e      	b.n	8001c70 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d01e      	beq.n	8001678 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800163a:	f7ff fdc3 	bl	80011c4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800163e:	f7ff f87f 	bl	8000740 <HAL_GetTick>
 8001642:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001644:	e008      	b.n	8001658 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001646:	f7ff f87b 	bl	8000740 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e30b      	b.n	8001c70 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001658:	f7ff fdd2 	bl	8001200 <LL_RCC_MSI_IsReady>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d0f1      	beq.n	8001646 <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff fddb 	bl	8001222 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6a1b      	ldr	r3, [r3, #32]
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff fdff 	bl	8001274 <LL_RCC_MSI_SetCalibTrimming>
 8001676:	e015      	b.n	80016a4 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001678:	f7ff fdb3 	bl	80011e2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800167c:	f7ff f860 	bl	8000740 <HAL_GetTick>
 8001680:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001684:	f7ff f85c 	bl	8000740 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b02      	cmp	r3, #2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e2ec      	b.n	8001c70 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001696:	f7ff fdb3 	bl	8001200 <LL_RCC_MSI_IsReady>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d1f1      	bne.n	8001684 <HAL_RCC_OscConfig+0x124>
 80016a0:	e000      	b.n	80016a4 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016a2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d04e      	beq.n	800174e <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016b0:	f7ff fe09 	bl	80012c6 <LL_RCC_GetSysClkSource>
 80016b4:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016b6:	f7ff feea 	bl	800148e <LL_RCC_PLL_GetMainSource>
 80016ba:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80016bc:	6a3b      	ldr	r3, [r7, #32]
 80016be:	2b08      	cmp	r3, #8
 80016c0:	d005      	beq.n	80016ce <HAL_RCC_OscConfig+0x16e>
 80016c2:	6a3b      	ldr	r3, [r7, #32]
 80016c4:	2b0c      	cmp	r3, #12
 80016c6:	d10d      	bne.n	80016e4 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	2b03      	cmp	r3, #3
 80016cc:	d10a      	bne.n	80016e4 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ce:	f7ff fc19 	bl	8000f04 <LL_RCC_HSE_IsReady>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d039      	beq.n	800174c <HAL_RCC_OscConfig+0x1ec>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d135      	bne.n	800174c <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e2c5      	b.n	8001c70 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016ec:	d102      	bne.n	80016f4 <HAL_RCC_OscConfig+0x194>
 80016ee:	f7ff fbeb 	bl	8000ec8 <LL_RCC_HSE_Enable>
 80016f2:	e001      	b.n	80016f8 <HAL_RCC_OscConfig+0x198>
 80016f4:	f7ff fbf7 	bl	8000ee6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d012      	beq.n	8001726 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001700:	f7ff f81e 	bl	8000740 <HAL_GetTick>
 8001704:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001708:	f7ff f81a 	bl	8000740 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b64      	cmp	r3, #100	; 0x64
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e2aa      	b.n	8001c70 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 800171a:	f7ff fbf3 	bl	8000f04 <LL_RCC_HSE_IsReady>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d0f1      	beq.n	8001708 <HAL_RCC_OscConfig+0x1a8>
 8001724:	e013      	b.n	800174e <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001726:	f7ff f80b 	bl	8000740 <HAL_GetTick>
 800172a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800172c:	e008      	b.n	8001740 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800172e:	f7ff f807 	bl	8000740 <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	2b64      	cmp	r3, #100	; 0x64
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e297      	b.n	8001c70 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001740:	f7ff fbe0 	bl	8000f04 <LL_RCC_HSE_IsReady>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d1f1      	bne.n	800172e <HAL_RCC_OscConfig+0x1ce>
 800174a:	e000      	b.n	800174e <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800174c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d051      	beq.n	80017fe <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800175a:	f7ff fdb4 	bl	80012c6 <LL_RCC_GetSysClkSource>
 800175e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001760:	f7ff fe95 	bl	800148e <LL_RCC_PLL_GetMainSource>
 8001764:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	2b04      	cmp	r3, #4
 800176a:	d005      	beq.n	8001778 <HAL_RCC_OscConfig+0x218>
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	2b0c      	cmp	r3, #12
 8001770:	d113      	bne.n	800179a <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	2b02      	cmp	r3, #2
 8001776:	d110      	bne.n	800179a <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001778:	f7ff fbf4 	bl	8000f64 <LL_RCC_HSI_IsReady>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d005      	beq.n	800178e <HAL_RCC_OscConfig+0x22e>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d101      	bne.n	800178e <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e270      	b.n	8001c70 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff fbf8 	bl	8000f88 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001798:	e031      	b.n	80017fe <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d019      	beq.n	80017d6 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017a2:	f7ff fbc1 	bl	8000f28 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a6:	f7fe ffcb 	bl	8000740 <HAL_GetTick>
 80017aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80017ac:	e008      	b.n	80017c0 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017ae:	f7fe ffc7 	bl	8000740 <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d901      	bls.n	80017c0 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e257      	b.n	8001c70 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 80017c0:	f7ff fbd0 	bl	8000f64 <LL_RCC_HSI_IsReady>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d0f1      	beq.n	80017ae <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	691b      	ldr	r3, [r3, #16]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff fbda 	bl	8000f88 <LL_RCC_HSI_SetCalibTrimming>
 80017d4:	e013      	b.n	80017fe <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017d6:	f7ff fbb6 	bl	8000f46 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017da:	f7fe ffb1 	bl	8000740 <HAL_GetTick>
 80017de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80017e0:	e008      	b.n	80017f4 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017e2:	f7fe ffad 	bl	8000740 <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e23d      	b.n	8001c70 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 80017f4:	f7ff fbb6 	bl	8000f64 <LL_RCC_HSI_IsReady>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d1f1      	bne.n	80017e2 <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0308 	and.w	r3, r3, #8
 8001806:	2b00      	cmp	r3, #0
 8001808:	d106      	bne.n	8001818 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001812:	2b00      	cmp	r3, #0
 8001814:	f000 80a3 	beq.w	800195e <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	695b      	ldr	r3, [r3, #20]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d076      	beq.n	800190e <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0310 	and.w	r3, r3, #16
 8001828:	2b00      	cmp	r3, #0
 800182a:	d046      	beq.n	80018ba <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800182c:	f7ff fc6d 	bl	800110a <LL_RCC_LSI1_IsReady>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d113      	bne.n	800185e <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8001836:	f7ff fc46 	bl	80010c6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800183a:	f7fe ff81 	bl	8000740 <HAL_GetTick>
 800183e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001840:	e008      	b.n	8001854 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001842:	f7fe ff7d 	bl	8000740 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d901      	bls.n	8001854 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e20d      	b.n	8001c70 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001854:	f7ff fc59 	bl	800110a <LL_RCC_LSI1_IsReady>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d0f1      	beq.n	8001842 <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800185e:	f7ff fc66 	bl	800112e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001862:	f7fe ff6d 	bl	8000740 <HAL_GetTick>
 8001866:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001868:	e008      	b.n	800187c <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800186a:	f7fe ff69 	bl	8000740 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b03      	cmp	r3, #3
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e1f9      	b.n	8001c70 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800187c:	f7ff fc79 	bl	8001172 <LL_RCC_LSI2_IsReady>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d0f1      	beq.n	800186a <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	699b      	ldr	r3, [r3, #24]
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff fc83 	bl	8001196 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8001890:	f7ff fc2a 	bl	80010e8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001894:	f7fe ff54 	bl	8000740 <HAL_GetTick>
 8001898:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800189c:	f7fe ff50 	bl	8000740 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e1e0      	b.n	8001c70 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80018ae:	f7ff fc2c 	bl	800110a <LL_RCC_LSI1_IsReady>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d1f1      	bne.n	800189c <HAL_RCC_OscConfig+0x33c>
 80018b8:	e051      	b.n	800195e <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80018ba:	f7ff fc04 	bl	80010c6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018be:	f7fe ff3f 	bl	8000740 <HAL_GetTick>
 80018c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80018c4:	e008      	b.n	80018d8 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80018c6:	f7fe ff3b 	bl	8000740 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e1cb      	b.n	8001c70 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80018d8:	f7ff fc17 	bl	800110a <LL_RCC_LSI1_IsReady>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d0f1      	beq.n	80018c6 <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80018e2:	f7ff fc35 	bl	8001150 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80018e6:	e00c      	b.n	8001902 <HAL_RCC_OscConfig+0x3a2>
 80018e8:	20000004 	.word	0x20000004
 80018ec:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80018f0:	f7fe ff26 	bl	8000740 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b03      	cmp	r3, #3
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e1b6      	b.n	8001c70 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001902:	f7ff fc36 	bl	8001172 <LL_RCC_LSI2_IsReady>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d1f1      	bne.n	80018f0 <HAL_RCC_OscConfig+0x390>
 800190c:	e027      	b.n	800195e <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800190e:	f7ff fc1f 	bl	8001150 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001912:	f7fe ff15 	bl	8000740 <HAL_GetTick>
 8001916:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001918:	e008      	b.n	800192c <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800191a:	f7fe ff11 	bl	8000740 <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	2b03      	cmp	r3, #3
 8001926:	d901      	bls.n	800192c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e1a1      	b.n	8001c70 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800192c:	f7ff fc21 	bl	8001172 <LL_RCC_LSI2_IsReady>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1f1      	bne.n	800191a <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8001936:	f7ff fbd7 	bl	80010e8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800193a:	f7fe ff01 	bl	8000740 <HAL_GetTick>
 800193e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001940:	e008      	b.n	8001954 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001942:	f7fe fefd 	bl	8000740 <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e18d      	b.n	8001c70 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001954:	f7ff fbd9 	bl	800110a <LL_RCC_LSI1_IsReady>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1f1      	bne.n	8001942 <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0304 	and.w	r3, r3, #4
 8001966:	2b00      	cmp	r3, #0
 8001968:	d05b      	beq.n	8001a22 <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800196a:	4bb5      	ldr	r3, [pc, #724]	; (8001c40 <HAL_RCC_OscConfig+0x6e0>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001972:	2b00      	cmp	r3, #0
 8001974:	d114      	bne.n	80019a0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001976:	f7ff fa77 	bl	8000e68 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800197a:	f7fe fee1 	bl	8000740 <HAL_GetTick>
 800197e:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001980:	e008      	b.n	8001994 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001982:	f7fe fedd 	bl	8000740 <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	2b02      	cmp	r3, #2
 800198e:	d901      	bls.n	8001994 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e16d      	b.n	8001c70 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001994:	4baa      	ldr	r3, [pc, #680]	; (8001c40 <HAL_RCC_OscConfig+0x6e0>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800199c:	2b00      	cmp	r3, #0
 800199e:	d0f0      	beq.n	8001982 <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d102      	bne.n	80019ae <HAL_RCC_OscConfig+0x44e>
 80019a8:	f7ff fb37 	bl	800101a <LL_RCC_LSE_Enable>
 80019ac:	e00c      	b.n	80019c8 <HAL_RCC_OscConfig+0x468>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	2b05      	cmp	r3, #5
 80019b4:	d104      	bne.n	80019c0 <HAL_RCC_OscConfig+0x460>
 80019b6:	f7ff fb52 	bl	800105e <LL_RCC_LSE_EnableBypass>
 80019ba:	f7ff fb2e 	bl	800101a <LL_RCC_LSE_Enable>
 80019be:	e003      	b.n	80019c8 <HAL_RCC_OscConfig+0x468>
 80019c0:	f7ff fb3c 	bl	800103c <LL_RCC_LSE_Disable>
 80019c4:	f7ff fb5c 	bl	8001080 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d014      	beq.n	80019fa <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d0:	f7fe feb6 	bl	8000740 <HAL_GetTick>
 80019d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80019d6:	e00a      	b.n	80019ee <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019d8:	f7fe feb2 	bl	8000740 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e140      	b.n	8001c70 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 80019ee:	f7ff fb58 	bl	80010a2 <LL_RCC_LSE_IsReady>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d0ef      	beq.n	80019d8 <HAL_RCC_OscConfig+0x478>
 80019f8:	e013      	b.n	8001a22 <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019fa:	f7fe fea1 	bl	8000740 <HAL_GetTick>
 80019fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001a00:	e00a      	b.n	8001a18 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a02:	f7fe fe9d 	bl	8000740 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e12b      	b.n	8001c70 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001a18:	f7ff fb43 	bl	80010a2 <LL_RCC_LSE_IsReady>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1ef      	bne.n	8001a02 <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d02c      	beq.n	8001a88 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d014      	beq.n	8001a60 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a36:	f7ff fabc 	bl	8000fb2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a3a:	f7fe fe81 	bl	8000740 <HAL_GetTick>
 8001a3e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8001a40:	e008      	b.n	8001a54 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a42:	f7fe fe7d 	bl	8000740 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e10d      	b.n	8001c70 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8001a54:	f7ff facf 	bl	8000ff6 <LL_RCC_HSI48_IsReady>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d0f1      	beq.n	8001a42 <HAL_RCC_OscConfig+0x4e2>
 8001a5e:	e013      	b.n	8001a88 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a60:	f7ff fab8 	bl	8000fd4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a64:	f7fe fe6c 	bl	8000740 <HAL_GetTick>
 8001a68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a6c:	f7fe fe68 	bl	8000740 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e0f8      	b.n	8001c70 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8001a7e:	f7ff faba 	bl	8000ff6 <LL_RCC_HSI48_IsReady>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d1f1      	bne.n	8001a6c <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	f000 80ee 	beq.w	8001c6e <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a92:	f7ff fc18 	bl	80012c6 <LL_RCC_GetSysClkSource>
 8001a96:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8001a98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	f040 80af 	bne.w	8001c08 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f003 0203 	and.w	r2, r3, #3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d123      	bne.n	8001b00 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d11c      	bne.n	8001b00 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	0a1b      	lsrs	r3, r3, #8
 8001aca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d114      	bne.n	8001b00 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d10d      	bne.n	8001b00 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d106      	bne.n	8001b00 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d05d      	beq.n	8001bbc <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	2b0c      	cmp	r3, #12
 8001b04:	d058      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e0ab      	b.n	8001c70 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b18:	f7ff fc73 	bl	8001402 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b1c:	f7fe fe10 	bl	8000740 <HAL_GetTick>
 8001b20:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b24:	f7fe fe0c 	bl	8000740 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e09c      	b.n	8001c70 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d1ef      	bne.n	8001b24 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b48:	68da      	ldr	r2, [r3, #12]
 8001b4a:	4b3e      	ldr	r3, [pc, #248]	; (8001c44 <HAL_RCC_OscConfig+0x6e4>)
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b56:	4311      	orrs	r1, r2
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b5c:	0212      	lsls	r2, r2, #8
 8001b5e:	4311      	orrs	r1, r2
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001b64:	4311      	orrs	r1, r2
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b6a:	4311      	orrs	r1, r2
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001b70:	430a      	orrs	r2, r1
 8001b72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b76:	4313      	orrs	r3, r2
 8001b78:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b7a:	f7ff fc33 	bl	80013e4 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b8c:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b8e:	f7fe fdd7 	bl	8000740 <HAL_GetTick>
 8001b92:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b94:	e008      	b.n	8001ba8 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b96:	f7fe fdd3 	bl	8000740 <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d901      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e063      	b.n	8001c70 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ba8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d0ef      	beq.n	8001b96 <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bb6:	e05a      	b.n	8001c6e <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e059      	b.n	8001c70 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d151      	bne.n	8001c6e <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001bca:	f7ff fc0b 	bl	80013e4 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bdc:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001bde:	f7fe fdaf 	bl	8000740 <HAL_GetTick>
 8001be2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001be4:	e008      	b.n	8001bf8 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001be6:	f7fe fdab 	bl	8000740 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d901      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e03b      	b.n	8001c70 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d0ef      	beq.n	8001be6 <HAL_RCC_OscConfig+0x686>
 8001c06:	e032      	b.n	8001c6e <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	2b0c      	cmp	r3, #12
 8001c0c:	d02d      	beq.n	8001c6a <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c0e:	f7ff fbf8 	bl	8001402 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001c12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c1c:	f023 0303 	bic.w	r3, r3, #3
 8001c20:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8001c22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c2c:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8001c30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c34:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c36:	f7fe fd83 	bl	8000740 <HAL_GetTick>
 8001c3a:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c3c:	e00d      	b.n	8001c5a <HAL_RCC_OscConfig+0x6fa>
 8001c3e:	bf00      	nop
 8001c40:	58000400 	.word	0x58000400
 8001c44:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c48:	f7fe fd7a 	bl	8000740 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e00a      	b.n	8001c70 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1ef      	bne.n	8001c48 <HAL_RCC_OscConfig+0x6e8>
 8001c68:	e001      	b.n	8001c6e <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e000      	b.n	8001c70 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8001c6e:	2300      	movs	r3, #0
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3734      	adds	r7, #52	; 0x34
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd90      	pop	{r4, r7, pc}

08001c78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d101      	bne.n	8001c8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e12d      	b.n	8001ee8 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c8c:	4b98      	ldr	r3, [pc, #608]	; (8001ef0 <HAL_RCC_ClockConfig+0x278>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0307 	and.w	r3, r3, #7
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d91b      	bls.n	8001cd2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c9a:	4b95      	ldr	r3, [pc, #596]	; (8001ef0 <HAL_RCC_ClockConfig+0x278>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f023 0207 	bic.w	r2, r3, #7
 8001ca2:	4993      	ldr	r1, [pc, #588]	; (8001ef0 <HAL_RCC_ClockConfig+0x278>)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001caa:	f7fe fd49 	bl	8000740 <HAL_GetTick>
 8001cae:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cb0:	e008      	b.n	8001cc4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001cb2:	f7fe fd45 	bl	8000740 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e111      	b.n	8001ee8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cc4:	4b8a      	ldr	r3, [pc, #552]	; (8001ef0 <HAL_RCC_ClockConfig+0x278>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0307 	and.w	r3, r3, #7
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d1ef      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d016      	beq.n	8001d0c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff fafb 	bl	80012de <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001ce8:	f7fe fd2a 	bl	8000740 <HAL_GetTick>
 8001cec:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001cf0:	f7fe fd26 	bl	8000740 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e0f2      	b.n	8001ee8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001d02:	f7ff fbd0 	bl	80014a6 <LL_RCC_IsActiveFlag_HPRE>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d0f1      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0320 	and.w	r3, r3, #32
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d016      	beq.n	8001d46 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	695b      	ldr	r3, [r3, #20]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff faf2 	bl	8001306 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001d22:	f7fe fd0d 	bl	8000740 <HAL_GetTick>
 8001d26:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001d28:	e008      	b.n	8001d3c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001d2a:	f7fe fd09 	bl	8000740 <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d901      	bls.n	8001d3c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e0d5      	b.n	8001ee8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001d3c:	f7ff fbc5 	bl	80014ca <LL_RCC_IsActiveFlag_C2HPRE>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d0f1      	beq.n	8001d2a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d016      	beq.n	8001d80 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff faeb 	bl	8001332 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001d5c:	f7fe fcf0 	bl	8000740 <HAL_GetTick>
 8001d60:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001d64:	f7fe fcec 	bl	8000740 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e0b8      	b.n	8001ee8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001d76:	f7ff fbbb 	bl	80014f0 <LL_RCC_IsActiveFlag_SHDHPRE>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d0f1      	beq.n	8001d64 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0304 	and.w	r3, r3, #4
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d016      	beq.n	8001dba <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff fae5 	bl	8001360 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001d96:	f7fe fcd3 	bl	8000740 <HAL_GetTick>
 8001d9a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001d9e:	f7fe fccf 	bl	8000740 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e09b      	b.n	8001ee8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001db0:	f7ff fbb1 	bl	8001516 <LL_RCC_IsActiveFlag_PPRE1>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d0f1      	beq.n	8001d9e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0308 	and.w	r3, r3, #8
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d017      	beq.n	8001df6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff fadb 	bl	8001388 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001dd2:	f7fe fcb5 	bl	8000740 <HAL_GetTick>
 8001dd6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001dd8:	e008      	b.n	8001dec <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001dda:	f7fe fcb1 	bl	8000740 <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e07d      	b.n	8001ee8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001dec:	f7ff fba5 	bl	800153a <LL_RCC_IsActiveFlag_PPRE2>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d0f1      	beq.n	8001dda <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d043      	beq.n	8001e8a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d106      	bne.n	8001e18 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8001e0a:	f7ff f87b 	bl	8000f04 <LL_RCC_HSE_IsReady>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d11e      	bne.n	8001e52 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e067      	b.n	8001ee8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	2b03      	cmp	r3, #3
 8001e1e:	d106      	bne.n	8001e2e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8001e20:	f7ff fafe 	bl	8001420 <LL_RCC_PLL_IsReady>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d113      	bne.n	8001e52 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e05c      	b.n	8001ee8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d106      	bne.n	8001e44 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8001e36:	f7ff f9e3 	bl	8001200 <LL_RCC_MSI_IsReady>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d108      	bne.n	8001e52 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e051      	b.n	8001ee8 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8001e44:	f7ff f88e 	bl	8000f64 <LL_RCC_HSI_IsReady>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e04a      	b.n	8001ee8 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff fa21 	bl	800129e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e5c:	f7fe fc70 	bl	8000740 <HAL_GetTick>
 8001e60:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e62:	e00a      	b.n	8001e7a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e64:	f7fe fc6c 	bl	8000740 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e036      	b.n	8001ee8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e7a:	f7ff fa24 	bl	80012c6 <LL_RCC_GetSysClkSource>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d1ec      	bne.n	8001e64 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e8a:	4b19      	ldr	r3, [pc, #100]	; (8001ef0 <HAL_RCC_ClockConfig+0x278>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	683a      	ldr	r2, [r7, #0]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d21b      	bcs.n	8001ed0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e98:	4b15      	ldr	r3, [pc, #84]	; (8001ef0 <HAL_RCC_ClockConfig+0x278>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f023 0207 	bic.w	r2, r3, #7
 8001ea0:	4913      	ldr	r1, [pc, #76]	; (8001ef0 <HAL_RCC_ClockConfig+0x278>)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ea8:	f7fe fc4a 	bl	8000740 <HAL_GetTick>
 8001eac:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001eb0:	f7fe fc46 	bl	8000740 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e012      	b.n	8001ee8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ec2:	4b0b      	ldr	r3, [pc, #44]	; (8001ef0 <HAL_RCC_ClockConfig+0x278>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	683a      	ldr	r2, [r7, #0]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d1ef      	bne.n	8001eb0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001ed0:	f000 f87e 	bl	8001fd0 <HAL_RCC_GetHCLKFreq>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	4a07      	ldr	r2, [pc, #28]	; (8001ef4 <HAL_RCC_ClockConfig+0x27c>)
 8001ed8:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8001eda:	f7fe fc3d 	bl	8000758 <HAL_GetTickPrio>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7fe fbdf 	bl	80006a4 <HAL_InitTick>
 8001ee6:	4603      	mov	r3, r0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3710      	adds	r7, #16
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	58004000 	.word	0x58004000
 8001ef4:	20000004 	.word	0x20000004

08001ef8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ef8:	b590      	push	{r4, r7, lr}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001efe:	f7ff f9e2 	bl	80012c6 <LL_RCC_GetSysClkSource>
 8001f02:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d10a      	bne.n	8001f20 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001f0a:	f7ff f99e 	bl	800124a <LL_RCC_MSI_GetRange>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	091b      	lsrs	r3, r3, #4
 8001f12:	f003 030f 	and.w	r3, r3, #15
 8001f16:	4a2b      	ldr	r2, [pc, #172]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f1c:	60fb      	str	r3, [r7, #12]
 8001f1e:	e04b      	b.n	8001fb8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2b04      	cmp	r3, #4
 8001f24:	d102      	bne.n	8001f2c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f26:	4b28      	ldr	r3, [pc, #160]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	e045      	b.n	8001fb8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2b08      	cmp	r3, #8
 8001f30:	d10a      	bne.n	8001f48 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001f32:	f7fe ffb7 	bl	8000ea4 <LL_RCC_HSE_IsEnabledDiv2>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d102      	bne.n	8001f42 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8001f3c:	4b22      	ldr	r3, [pc, #136]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	e03a      	b.n	8001fb8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8001f42:	4b22      	ldr	r3, [pc, #136]	; (8001fcc <HAL_RCC_GetSysClockFreq+0xd4>)
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	e037      	b.n	8001fb8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8001f48:	f7ff faa1 	bl	800148e <LL_RCC_PLL_GetMainSource>
 8001f4c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d003      	beq.n	8001f5c <HAL_RCC_GetSysClockFreq+0x64>
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	2b03      	cmp	r3, #3
 8001f58:	d003      	beq.n	8001f62 <HAL_RCC_GetSysClockFreq+0x6a>
 8001f5a:	e00d      	b.n	8001f78 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8001f5c:	4b1a      	ldr	r3, [pc, #104]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001f5e:	60bb      	str	r3, [r7, #8]
        break;
 8001f60:	e015      	b.n	8001f8e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001f62:	f7fe ff9f 	bl	8000ea4 <LL_RCC_HSE_IsEnabledDiv2>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d102      	bne.n	8001f72 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8001f6c:	4b16      	ldr	r3, [pc, #88]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001f6e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8001f70:	e00d      	b.n	8001f8e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8001f72:	4b16      	ldr	r3, [pc, #88]	; (8001fcc <HAL_RCC_GetSysClockFreq+0xd4>)
 8001f74:	60bb      	str	r3, [r7, #8]
        break;
 8001f76:	e00a      	b.n	8001f8e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001f78:	f7ff f967 	bl	800124a <LL_RCC_MSI_GetRange>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	091b      	lsrs	r3, r3, #4
 8001f80:	f003 030f 	and.w	r3, r3, #15
 8001f84:	4a0f      	ldr	r2, [pc, #60]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f8a:	60bb      	str	r3, [r7, #8]
        break;
 8001f8c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8001f8e:	f7ff fa59 	bl	8001444 <LL_RCC_PLL_GetN>
 8001f92:	4602      	mov	r2, r0
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	fb03 f402 	mul.w	r4, r3, r2
 8001f9a:	f7ff fa6c 	bl	8001476 <LL_RCC_PLL_GetDivider>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	091b      	lsrs	r3, r3, #4
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	fbb4 f4f3 	udiv	r4, r4, r3
 8001fa8:	f7ff fa59 	bl	800145e <LL_RCC_PLL_GetR>
 8001fac:	4603      	mov	r3, r0
 8001fae:	0f5b      	lsrs	r3, r3, #29
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	fbb4 f3f3 	udiv	r3, r4, r3
 8001fb6:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3714      	adds	r7, #20
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd90      	pop	{r4, r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	08002b30 	.word	0x08002b30
 8001fc8:	00f42400 	.word	0x00f42400
 8001fcc:	01e84800 	.word	0x01e84800

08001fd0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fd0:	b598      	push	{r3, r4, r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8001fd4:	f7ff ff90 	bl	8001ef8 <HAL_RCC_GetSysClockFreq>
 8001fd8:	4604      	mov	r4, r0
 8001fda:	f7ff f9e9 	bl	80013b0 <LL_RCC_GetAHBPrescaler>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	091b      	lsrs	r3, r3, #4
 8001fe2:	f003 030f 	and.w	r3, r3, #15
 8001fe6:	4a03      	ldr	r2, [pc, #12]	; (8001ff4 <HAL_RCC_GetHCLKFreq+0x24>)
 8001fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fec:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	bd98      	pop	{r3, r4, r7, pc}
 8001ff4:	08002af0 	.word	0x08002af0

08001ff8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8001ff8:	b590      	push	{r4, r7, lr}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2bb0      	cmp	r3, #176	; 0xb0
 8002004:	d903      	bls.n	800200e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002006:	4b15      	ldr	r3, [pc, #84]	; (800205c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	e007      	b.n	800201e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	091b      	lsrs	r3, r3, #4
 8002012:	f003 030f 	and.w	r3, r3, #15
 8002016:	4a11      	ldr	r2, [pc, #68]	; (800205c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800201c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800201e:	f7ff f9d3 	bl	80013c8 <LL_RCC_GetAHB4Prescaler>
 8002022:	4603      	mov	r3, r0
 8002024:	091b      	lsrs	r3, r3, #4
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	4a0d      	ldr	r2, [pc, #52]	; (8002060 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800202c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	fbb2 f3f3 	udiv	r3, r2, r3
 8002036:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	4a0a      	ldr	r2, [pc, #40]	; (8002064 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800203c:	fba2 2303 	umull	r2, r3, r2, r3
 8002040:	0c9c      	lsrs	r4, r3, #18
 8002042:	f7fe ff21 	bl	8000e88 <HAL_PWREx_GetVoltageRange>
 8002046:	4603      	mov	r3, r0
 8002048:	4619      	mov	r1, r3
 800204a:	4620      	mov	r0, r4
 800204c:	f000 f80c 	bl	8002068 <RCC_SetFlashLatency>
 8002050:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8002052:	4618      	mov	r0, r3
 8002054:	3714      	adds	r7, #20
 8002056:	46bd      	mov	sp, r7
 8002058:	bd90      	pop	{r4, r7, pc}
 800205a:	bf00      	nop
 800205c:	08002b30 	.word	0x08002b30
 8002060:	08002af0 	.word	0x08002af0
 8002064:	431bde83 	.word	0x431bde83

08002068 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002068:	b590      	push	{r4, r7, lr}
 800206a:	b093      	sub	sp, #76	; 0x4c
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002072:	4b39      	ldr	r3, [pc, #228]	; (8002158 <RCC_SetFlashLatency+0xf0>)
 8002074:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002078:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800207a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800207e:	4a37      	ldr	r2, [pc, #220]	; (800215c <RCC_SetFlashLatency+0xf4>)
 8002080:	f107 031c 	add.w	r3, r7, #28
 8002084:	ca07      	ldmia	r2, {r0, r1, r2}
 8002086:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800208a:	4b35      	ldr	r3, [pc, #212]	; (8002160 <RCC_SetFlashLatency+0xf8>)
 800208c:	f107 040c 	add.w	r4, r7, #12
 8002090:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002092:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002096:	2300      	movs	r3, #0
 8002098:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020a0:	d11c      	bne.n	80020dc <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80020a2:	2300      	movs	r3, #0
 80020a4:	643b      	str	r3, [r7, #64]	; 0x40
 80020a6:	e015      	b.n	80020d4 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80020a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80020b0:	4413      	add	r3, r2
 80020b2:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d808      	bhi.n	80020ce <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80020bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80020c4:	4413      	add	r3, r2
 80020c6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80020ca:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80020cc:	e022      	b.n	8002114 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80020ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020d0:	3301      	adds	r3, #1
 80020d2:	643b      	str	r3, [r7, #64]	; 0x40
 80020d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020d6:	2b03      	cmp	r3, #3
 80020d8:	d9e6      	bls.n	80020a8 <RCC_SetFlashLatency+0x40>
 80020da:	e01b      	b.n	8002114 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80020dc:	2300      	movs	r3, #0
 80020de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020e0:	e015      	b.n	800210e <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80020e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80020ea:	4413      	add	r3, r2
 80020ec:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d808      	bhi.n	8002108 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80020f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80020fe:	4413      	add	r3, r2
 8002100:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002104:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002106:	e005      	b.n	8002114 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800210a:	3301      	adds	r3, #1
 800210c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800210e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002110:	2b02      	cmp	r3, #2
 8002112:	d9e6      	bls.n	80020e2 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8002114:	4b13      	ldr	r3, [pc, #76]	; (8002164 <RCC_SetFlashLatency+0xfc>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f023 0207 	bic.w	r2, r3, #7
 800211c:	4911      	ldr	r1, [pc, #68]	; (8002164 <RCC_SetFlashLatency+0xfc>)
 800211e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002120:	4313      	orrs	r3, r2
 8002122:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002124:	f7fe fb0c 	bl	8000740 <HAL_GetTick>
 8002128:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800212a:	e008      	b.n	800213e <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800212c:	f7fe fb08 	bl	8000740 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b02      	cmp	r3, #2
 8002138:	d901      	bls.n	800213e <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e007      	b.n	800214e <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800213e:	4b09      	ldr	r3, [pc, #36]	; (8002164 <RCC_SetFlashLatency+0xfc>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0307 	and.w	r3, r3, #7
 8002146:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002148:	429a      	cmp	r2, r3
 800214a:	d1ef      	bne.n	800212c <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	374c      	adds	r7, #76	; 0x4c
 8002152:	46bd      	mov	sp, r7
 8002154:	bd90      	pop	{r4, r7, pc}
 8002156:	bf00      	nop
 8002158:	08002ac4 	.word	0x08002ac4
 800215c:	08002ad4 	.word	0x08002ad4
 8002160:	08002ae0 	.word	0x08002ae0
 8002164:	58004000 	.word	0x58004000

08002168 <LL_RCC_LSE_IsEnabled>:
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800216c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	2b01      	cmp	r3, #1
 800217a:	d101      	bne.n	8002180 <LL_RCC_LSE_IsEnabled+0x18>
 800217c:	2301      	movs	r3, #1
 800217e:	e000      	b.n	8002182 <LL_RCC_LSE_IsEnabled+0x1a>
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <LL_RCC_LSE_IsReady>:
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002190:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b02      	cmp	r3, #2
 800219e:	d101      	bne.n	80021a4 <LL_RCC_LSE_IsReady+0x18>
 80021a0:	2301      	movs	r3, #1
 80021a2:	e000      	b.n	80021a6 <LL_RCC_LSE_IsReady+0x1a>
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <LL_RCC_MSI_EnablePLLMode>:
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80021b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021be:	f043 0304 	orr.w	r3, r3, #4
 80021c2:	6013      	str	r3, [r2, #0]
}
 80021c4:	bf00      	nop
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <LL_RCC_SetRFWKPClockSource>:
{
 80021ce:	b480      	push	{r7}
 80021d0:	b083      	sub	sp, #12
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80021d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021de:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80021e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80021ee:	bf00      	nop
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr

080021fa <LL_RCC_SetSMPSClockSource>:
{
 80021fa:	b480      	push	{r7}
 80021fc:	b083      	sub	sp, #12
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002202:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002208:	f023 0203 	bic.w	r2, r3, #3
 800220c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4313      	orrs	r3, r2
 8002214:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002216:	bf00      	nop
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <LL_RCC_SetSMPSPrescaler>:
{
 8002222:	b480      	push	{r7}
 8002224:	b083      	sub	sp, #12
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800222a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800222e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002230:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002234:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4313      	orrs	r3, r2
 800223c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800223e:	bf00      	nop
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr

0800224a <LL_RCC_SetUSARTClockSource>:
{
 800224a:	b480      	push	{r7}
 800224c:	b083      	sub	sp, #12
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002252:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800225a:	f023 0203 	bic.w	r2, r3, #3
 800225e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4313      	orrs	r3, r2
 8002266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800226a:	bf00      	nop
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr

08002276 <LL_RCC_SetLPUARTClockSource>:
{
 8002276:	b480      	push	{r7}
 8002278:	b083      	sub	sp, #12
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800227e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002286:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800228a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4313      	orrs	r3, r2
 8002292:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr

080022a2 <LL_RCC_SetI2CClockSource>:
{
 80022a2:	b480      	push	{r7}
 80022a4:	b083      	sub	sp, #12
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80022aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	091b      	lsrs	r3, r3, #4
 80022b6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80022ba:	43db      	mvns	r3, r3
 80022bc:	401a      	ands	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	011b      	lsls	r3, r3, #4
 80022c2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80022c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022ca:	4313      	orrs	r3, r2
 80022cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <LL_RCC_SetLPTIMClockSource>:
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80022e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022e8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	0c1b      	lsrs	r3, r3, #16
 80022f0:	041b      	lsls	r3, r3, #16
 80022f2:	43db      	mvns	r3, r3
 80022f4:	401a      	ands	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	041b      	lsls	r3, r3, #16
 80022fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022fe:	4313      	orrs	r3, r2
 8002300:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <LL_RCC_SetSAIClockSource>:
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002318:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800231c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002320:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002324:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4313      	orrs	r3, r2
 800232c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <LL_RCC_SetRNGClockSource>:
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002344:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002350:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4313      	orrs	r3, r2
 8002358:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <LL_RCC_SetCLK48ClockSource>:
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002370:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002378:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800237c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4313      	orrs	r3, r2
 8002384:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <LL_RCC_SetUSBClockSource>:
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f7ff ffe3 	bl	8002368 <LL_RCC_SetCLK48ClockSource>
}
 80023a2:	bf00      	nop
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <LL_RCC_SetADCClockSource>:
{
 80023aa:	b480      	push	{r7}
 80023ac:	b083      	sub	sp, #12
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80023b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80023be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80023ca:	bf00      	nop
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr

080023d6 <LL_RCC_SetRTCClockSource>:
{
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80023de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80023f6:	bf00      	nop
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <LL_RCC_GetRTCClockSource>:
{
 8002402:	b480      	push	{r7}
 8002404:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002406:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800240a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800240e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002412:	4618      	mov	r0, r3
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <LL_RCC_ForceBackupDomainReset>:
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002420:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002428:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800242c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002430:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002434:	bf00      	nop
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr

0800243e <LL_RCC_ReleaseBackupDomainReset>:
{
 800243e:	b480      	push	{r7}
 8002440:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002442:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800244a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800244e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002452:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002456:	bf00      	nop
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <LL_RCC_PLLSAI1_Enable>:
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002464:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800246e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002472:	6013      	str	r3, [r2, #0]
}
 8002474:	bf00      	nop
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <LL_RCC_PLLSAI1_Disable>:
{
 800247e:	b480      	push	{r7}
 8002480:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002482:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800248c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002490:	6013      	str	r3, [r2, #0]
}
 8002492:	bf00      	nop
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <LL_RCC_PLLSAI1_IsReady>:
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80024a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024ae:	d101      	bne.n	80024b4 <LL_RCC_PLLSAI1_IsReady+0x18>
 80024b0:	2301      	movs	r3, #1
 80024b2:	e000      	b.n	80024b6 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b088      	sub	sp, #32
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80024c8:	2300      	movs	r3, #0
 80024ca:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80024cc:	2300      	movs	r3, #0
 80024ce:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d034      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80024e4:	d021      	beq.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80024e6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80024ea:	d81b      	bhi.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80024ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80024f0:	d01d      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80024f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80024f6:	d815      	bhi.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d00b      	beq.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80024fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002500:	d110      	bne.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002502:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800250c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002510:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8002512:	e00d      	b.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	3304      	adds	r3, #4
 8002518:	4618      	mov	r0, r3
 800251a:	f000 f94d 	bl	80027b8 <RCCEx_PLLSAI1_ConfigNP>
 800251e:	4603      	mov	r3, r0
 8002520:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002522:	e005      	b.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	77fb      	strb	r3, [r7, #31]
        break;
 8002528:	e002      	b.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800252a:	bf00      	nop
 800252c:	e000      	b.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800252e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002530:	7ffb      	ldrb	r3, [r7, #31]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d105      	bne.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	4618      	mov	r0, r3
 800253c:	f7ff fee8 	bl	8002310 <LL_RCC_SetSAIClockSource>
 8002540:	e001      	b.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002542:	7ffb      	ldrb	r3, [r7, #31]
 8002544:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800254e:	2b00      	cmp	r3, #0
 8002550:	d046      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8002552:	f7ff ff56 	bl	8002402 <LL_RCC_GetRTCClockSource>
 8002556:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	429a      	cmp	r2, r3
 8002560:	d03c      	beq.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002562:	f7fe fc81 	bl	8000e68 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d105      	bne.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff ff30 	bl	80023d6 <LL_RCC_SetRTCClockSource>
 8002576:	e02e      	b.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8002578:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800257c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002580:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8002582:	f7ff ff4b 	bl	800241c <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8002586:	f7ff ff5a 	bl	800243e <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002594:	4313      	orrs	r3, r2
 8002596:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8002598:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80025a2:	f7ff fde1 	bl	8002168 <LL_RCC_LSE_IsEnabled>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d114      	bne.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80025ac:	f7fe f8c8 	bl	8000740 <HAL_GetTick>
 80025b0:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80025b2:	e00b      	b.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025b4:	f7fe f8c4 	bl	8000740 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d902      	bls.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	77fb      	strb	r3, [r7, #31]
              break;
 80025ca:	e004      	b.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80025cc:	f7ff fdde 	bl	800218c <LL_RCC_LSE_IsReady>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d1ee      	bne.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80025d6:	7ffb      	ldrb	r3, [r7, #31]
 80025d8:	77bb      	strb	r3, [r7, #30]
 80025da:	e001      	b.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025dc:	7ffb      	ldrb	r3, [r7, #31]
 80025de:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d004      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff fe2a 	bl	800224a <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d004      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	69db      	ldr	r3, [r3, #28]
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff fe35 	bl	8002276 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0310 	and.w	r3, r3, #16
 8002614:	2b00      	cmp	r3, #0
 8002616:	d004      	beq.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff fe5d 	bl	80022dc <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0320 	and.w	r3, r3, #32
 800262a:	2b00      	cmp	r3, #0
 800262c:	d004      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff fe52 	bl	80022dc <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	2b00      	cmp	r3, #0
 8002642:	d004      	beq.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a1b      	ldr	r3, [r3, #32]
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff fe2a 	bl	80022a2 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0308 	and.w	r3, r3, #8
 8002656:	2b00      	cmp	r3, #0
 8002658:	d004      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff fe1f 	bl	80022a2 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800266c:	2b00      	cmp	r3, #0
 800266e:	d022      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff fe8d 	bl	8002394 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800267e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002682:	d107      	bne.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8002684:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800268e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002692:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002698:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800269c:	d10b      	bne.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	3304      	adds	r3, #4
 80026a2:	4618      	mov	r0, r3
 80026a4:	f000 f8e3 	bl	800286e <RCCEx_PLLSAI1_ConfigNQ>
 80026a8:	4603      	mov	r3, r0
 80026aa:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80026ac:	7ffb      	ldrb	r3, [r7, #31]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 80026b2:	7ffb      	ldrb	r3, [r7, #31]
 80026b4:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d02b      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ca:	d008      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80026d4:	d003      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d105      	bne.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff fe2a 	bl	800233c <LL_RCC_SetRNGClockSource>
 80026e8:	e00a      	b.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026f2:	60fb      	str	r3, [r7, #12]
 80026f4:	2000      	movs	r0, #0
 80026f6:	f7ff fe21 	bl	800233c <LL_RCC_SetRNGClockSource>
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	f7ff fe34 	bl	8002368 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002704:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002708:	d107      	bne.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800270a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002714:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002718:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002722:	2b00      	cmp	r3, #0
 8002724:	d022      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800272a:	4618      	mov	r0, r3
 800272c:	f7ff fe3d 	bl	80023aa <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002734:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002738:	d107      	bne.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800273a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002748:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800274e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002752:	d10b      	bne.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3304      	adds	r3, #4
 8002758:	4618      	mov	r0, r3
 800275a:	f000 f8e3 	bl	8002924 <RCCEx_PLLSAI1_ConfigNR>
 800275e:	4603      	mov	r3, r0
 8002760:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8002762:	7ffb      	ldrb	r3, [r7, #31]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 8002768:	7ffb      	ldrb	r3, [r7, #31]
 800276a:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d004      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff fd26 	bl	80021ce <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d009      	beq.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002792:	4618      	mov	r0, r3
 8002794:	f7ff fd45 	bl	8002222 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff fd2c 	bl	80021fa <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 80027a2:	7fbb      	ldrb	r3, [r7, #30]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3720      	adds	r7, #32
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 80027b0:	f7ff fcfe 	bl	80021b0 <LL_RCC_MSI_EnablePLLMode>
}
 80027b4:	bf00      	nop
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027c0:	2300      	movs	r3, #0
 80027c2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80027c4:	f7ff fe5b 	bl	800247e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80027c8:	f7fd ffba 	bl	8000740 <HAL_GetTick>
 80027cc:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80027ce:	e009      	b.n	80027e4 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027d0:	f7fd ffb6 	bl	8000740 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d902      	bls.n	80027e4 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	73fb      	strb	r3, [r7, #15]
      break;
 80027e2:	e004      	b.n	80027ee <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80027e4:	f7ff fe5a 	bl	800249c <LL_RCC_PLLSAI1_IsReady>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1f0      	bne.n	80027d0 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80027ee:	7bfb      	ldrb	r3, [r7, #15]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d137      	bne.n	8002864 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80027f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	021b      	lsls	r3, r3, #8
 8002804:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002808:	4313      	orrs	r3, r2
 800280a:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800280c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800281e:	4313      	orrs	r3, r2
 8002820:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002822:	f7ff fe1d 	bl	8002460 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002826:	f7fd ff8b 	bl	8000740 <HAL_GetTick>
 800282a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800282c:	e009      	b.n	8002842 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800282e:	f7fd ff87 	bl	8000740 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d902      	bls.n	8002842 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	73fb      	strb	r3, [r7, #15]
        break;
 8002840:	e004      	b.n	800284c <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002842:	f7ff fe2b 	bl	800249c <LL_RCC_PLLSAI1_IsReady>
 8002846:	4603      	mov	r3, r0
 8002848:	2b01      	cmp	r3, #1
 800284a:	d1f0      	bne.n	800282e <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800284c:	7bfb      	ldrb	r3, [r7, #15]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d108      	bne.n	8002864 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002852:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002856:	691a      	ldr	r2, [r3, #16]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002860:	4313      	orrs	r3, r2
 8002862:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002864:	7bfb      	ldrb	r3, [r7, #15]
}
 8002866:	4618      	mov	r0, r3
 8002868:	3710      	adds	r7, #16
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b084      	sub	sp, #16
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002876:	2300      	movs	r3, #0
 8002878:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800287a:	f7ff fe00 	bl	800247e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800287e:	f7fd ff5f 	bl	8000740 <HAL_GetTick>
 8002882:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002884:	e009      	b.n	800289a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002886:	f7fd ff5b 	bl	8000740 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d902      	bls.n	800289a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	73fb      	strb	r3, [r7, #15]
      break;
 8002898:	e004      	b.n	80028a4 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800289a:	f7ff fdff 	bl	800249c <LL_RCC_PLLSAI1_IsReady>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d1f0      	bne.n	8002886 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80028a4:	7bfb      	ldrb	r3, [r7, #15]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d137      	bne.n	800291a <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80028aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	021b      	lsls	r3, r3, #8
 80028ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028be:	4313      	orrs	r3, r2
 80028c0:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80028c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028d4:	4313      	orrs	r3, r2
 80028d6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80028d8:	f7ff fdc2 	bl	8002460 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028dc:	f7fd ff30 	bl	8000740 <HAL_GetTick>
 80028e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80028e2:	e009      	b.n	80028f8 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80028e4:	f7fd ff2c 	bl	8000740 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d902      	bls.n	80028f8 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	73fb      	strb	r3, [r7, #15]
        break;
 80028f6:	e004      	b.n	8002902 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80028f8:	f7ff fdd0 	bl	800249c <LL_RCC_PLLSAI1_IsReady>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d1f0      	bne.n	80028e4 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8002902:	7bfb      	ldrb	r3, [r7, #15]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d108      	bne.n	800291a <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002908:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800290c:	691a      	ldr	r2, [r3, #16]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002916:	4313      	orrs	r3, r2
 8002918:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800291a:	7bfb      	ldrb	r3, [r7, #15]
}
 800291c:	4618      	mov	r0, r3
 800291e:	3710      	adds	r7, #16
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800292c:	2300      	movs	r3, #0
 800292e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002930:	f7ff fda5 	bl	800247e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002934:	f7fd ff04 	bl	8000740 <HAL_GetTick>
 8002938:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800293a:	e009      	b.n	8002950 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800293c:	f7fd ff00 	bl	8000740 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d902      	bls.n	8002950 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	73fb      	strb	r3, [r7, #15]
      break;
 800294e:	e004      	b.n	800295a <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002950:	f7ff fda4 	bl	800249c <LL_RCC_PLLSAI1_IsReady>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1f0      	bne.n	800293c <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800295a:	7bfb      	ldrb	r3, [r7, #15]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d137      	bne.n	80029d0 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002960:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	021b      	lsls	r3, r3, #8
 8002970:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002974:	4313      	orrs	r3, r2
 8002976:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8002978:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800298a:	4313      	orrs	r3, r2
 800298c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800298e:	f7ff fd67 	bl	8002460 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002992:	f7fd fed5 	bl	8000740 <HAL_GetTick>
 8002996:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002998:	e009      	b.n	80029ae <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800299a:	f7fd fed1 	bl	8000740 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d902      	bls.n	80029ae <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	73fb      	strb	r3, [r7, #15]
        break;
 80029ac:	e004      	b.n	80029b8 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80029ae:	f7ff fd75 	bl	800249c <LL_RCC_PLLSAI1_IsReady>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d1f0      	bne.n	800299a <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80029b8:	7bfb      	ldrb	r3, [r7, #15]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d108      	bne.n	80029d0 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80029be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029c2:	691a      	ldr	r2, [r3, #16]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029cc:	4313      	orrs	r3, r2
 80029ce:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80029d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80029da:	b480      	push	{r7}
 80029dc:	b085      	sub	sp, #20
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80029e2:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80029e6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	43db      	mvns	r3, r3
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	4013      	ands	r3, r2
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3714      	adds	r7, #20
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002a10:	b084      	sub	sp, #16
 8002a12:	b480      	push	{r7}
 8002a14:	b083      	sub	sp, #12
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
 8002a1a:	f107 0014 	add.w	r0, r7, #20
 8002a1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	b004      	add	sp, #16
 8002a50:	4770      	bx	lr
	...

08002a54 <__libc_init_array>:
 8002a54:	b570      	push	{r4, r5, r6, lr}
 8002a56:	4d0d      	ldr	r5, [pc, #52]	; (8002a8c <__libc_init_array+0x38>)
 8002a58:	4c0d      	ldr	r4, [pc, #52]	; (8002a90 <__libc_init_array+0x3c>)
 8002a5a:	1b64      	subs	r4, r4, r5
 8002a5c:	10a4      	asrs	r4, r4, #2
 8002a5e:	2600      	movs	r6, #0
 8002a60:	42a6      	cmp	r6, r4
 8002a62:	d109      	bne.n	8002a78 <__libc_init_array+0x24>
 8002a64:	4d0b      	ldr	r5, [pc, #44]	; (8002a94 <__libc_init_array+0x40>)
 8002a66:	4c0c      	ldr	r4, [pc, #48]	; (8002a98 <__libc_init_array+0x44>)
 8002a68:	f000 f820 	bl	8002aac <_init>
 8002a6c:	1b64      	subs	r4, r4, r5
 8002a6e:	10a4      	asrs	r4, r4, #2
 8002a70:	2600      	movs	r6, #0
 8002a72:	42a6      	cmp	r6, r4
 8002a74:	d105      	bne.n	8002a82 <__libc_init_array+0x2e>
 8002a76:	bd70      	pop	{r4, r5, r6, pc}
 8002a78:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a7c:	4798      	blx	r3
 8002a7e:	3601      	adds	r6, #1
 8002a80:	e7ee      	b.n	8002a60 <__libc_init_array+0xc>
 8002a82:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a86:	4798      	blx	r3
 8002a88:	3601      	adds	r6, #1
 8002a8a:	e7f2      	b.n	8002a72 <__libc_init_array+0x1e>
 8002a8c:	08002b70 	.word	0x08002b70
 8002a90:	08002b70 	.word	0x08002b70
 8002a94:	08002b70 	.word	0x08002b70
 8002a98:	08002b74 	.word	0x08002b74

08002a9c <memset>:
 8002a9c:	4402      	add	r2, r0
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d100      	bne.n	8002aa6 <memset+0xa>
 8002aa4:	4770      	bx	lr
 8002aa6:	f803 1b01 	strb.w	r1, [r3], #1
 8002aaa:	e7f9      	b.n	8002aa0 <memset+0x4>

08002aac <_init>:
 8002aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aae:	bf00      	nop
 8002ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ab2:	bc08      	pop	{r3}
 8002ab4:	469e      	mov	lr, r3
 8002ab6:	4770      	bx	lr

08002ab8 <_fini>:
 8002ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aba:	bf00      	nop
 8002abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002abe:	bc08      	pop	{r3}
 8002ac0:	469e      	mov	lr, r3
 8002ac2:	4770      	bx	lr
