
Mesh_Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dbfc  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e0  0800dd38  0800dd38  0001dd38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e018  0800e018  0001e018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e020  0800e020  0001e020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e024  0800e024  0001e024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000019c  20000004  0800e028  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  200001a0  0800e1c4  000201a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 0000003d  2000023c  0800e25d  0002023c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  2000027c  0800e29a  0002027c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 BLE_APP_CONTEXT 00000088  20000290  0800e2ab  00020290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00001c34  20000318  0800e333  00020318  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20001f4c  0800e333  00021f4c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020318  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 15 MB_MEM1       000001b7  20030028  20030028  00030000  2**2
                  ALLOC
 16 MB_MEM2       00000877  200301e0  200301e0  00030000  2**2
                  ALLOC
 17 .debug_info   00048cef  00000000  00000000  00020348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00008233  00000000  00000000  00069037  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00002f00  00000000  00000000  00071270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00002be8  00000000  00000000  00074170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0003019c  00000000  00000000  00076d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   0003518a  00000000  00000000  000a6ef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    001026af  00000000  00000000  000dc07e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000053  00000000  00000000  001de72d  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000c4a0  00000000  00000000  001de780  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000318 	.word	0x20000318
 8000158:	00000000 	.word	0x00000000
 800015c:	0800dd20 	.word	0x0800dd20

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000031c 	.word	0x2000031c
 8000178:	0800dd20 	.word	0x0800dd20

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b96e 	b.w	8000480 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9d08      	ldr	r5, [sp, #32]
 80001c2:	4604      	mov	r4, r0
 80001c4:	468c      	mov	ip, r1
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	f040 8083 	bne.w	80002d2 <__udivmoddi4+0x116>
 80001cc:	428a      	cmp	r2, r1
 80001ce:	4617      	mov	r7, r2
 80001d0:	d947      	bls.n	8000262 <__udivmoddi4+0xa6>
 80001d2:	fab2 f282 	clz	r2, r2
 80001d6:	b142      	cbz	r2, 80001ea <__udivmoddi4+0x2e>
 80001d8:	f1c2 0020 	rsb	r0, r2, #32
 80001dc:	fa24 f000 	lsr.w	r0, r4, r0
 80001e0:	4091      	lsls	r1, r2
 80001e2:	4097      	lsls	r7, r2
 80001e4:	ea40 0c01 	orr.w	ip, r0, r1
 80001e8:	4094      	lsls	r4, r2
 80001ea:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001ee:	0c23      	lsrs	r3, r4, #16
 80001f0:	fbbc f6f8 	udiv	r6, ip, r8
 80001f4:	fa1f fe87 	uxth.w	lr, r7
 80001f8:	fb08 c116 	mls	r1, r8, r6, ip
 80001fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000200:	fb06 f10e 	mul.w	r1, r6, lr
 8000204:	4299      	cmp	r1, r3
 8000206:	d909      	bls.n	800021c <__udivmoddi4+0x60>
 8000208:	18fb      	adds	r3, r7, r3
 800020a:	f106 30ff 	add.w	r0, r6, #4294967295
 800020e:	f080 8119 	bcs.w	8000444 <__udivmoddi4+0x288>
 8000212:	4299      	cmp	r1, r3
 8000214:	f240 8116 	bls.w	8000444 <__udivmoddi4+0x288>
 8000218:	3e02      	subs	r6, #2
 800021a:	443b      	add	r3, r7
 800021c:	1a5b      	subs	r3, r3, r1
 800021e:	b2a4      	uxth	r4, r4
 8000220:	fbb3 f0f8 	udiv	r0, r3, r8
 8000224:	fb08 3310 	mls	r3, r8, r0, r3
 8000228:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800022c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000230:	45a6      	cmp	lr, r4
 8000232:	d909      	bls.n	8000248 <__udivmoddi4+0x8c>
 8000234:	193c      	adds	r4, r7, r4
 8000236:	f100 33ff 	add.w	r3, r0, #4294967295
 800023a:	f080 8105 	bcs.w	8000448 <__udivmoddi4+0x28c>
 800023e:	45a6      	cmp	lr, r4
 8000240:	f240 8102 	bls.w	8000448 <__udivmoddi4+0x28c>
 8000244:	3802      	subs	r0, #2
 8000246:	443c      	add	r4, r7
 8000248:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800024c:	eba4 040e 	sub.w	r4, r4, lr
 8000250:	2600      	movs	r6, #0
 8000252:	b11d      	cbz	r5, 800025c <__udivmoddi4+0xa0>
 8000254:	40d4      	lsrs	r4, r2
 8000256:	2300      	movs	r3, #0
 8000258:	e9c5 4300 	strd	r4, r3, [r5]
 800025c:	4631      	mov	r1, r6
 800025e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000262:	b902      	cbnz	r2, 8000266 <__udivmoddi4+0xaa>
 8000264:	deff      	udf	#255	; 0xff
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	2a00      	cmp	r2, #0
 800026c:	d150      	bne.n	8000310 <__udivmoddi4+0x154>
 800026e:	1bcb      	subs	r3, r1, r7
 8000270:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000274:	fa1f f887 	uxth.w	r8, r7
 8000278:	2601      	movs	r6, #1
 800027a:	fbb3 fcfe 	udiv	ip, r3, lr
 800027e:	0c21      	lsrs	r1, r4, #16
 8000280:	fb0e 331c 	mls	r3, lr, ip, r3
 8000284:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000288:	fb08 f30c 	mul.w	r3, r8, ip
 800028c:	428b      	cmp	r3, r1
 800028e:	d907      	bls.n	80002a0 <__udivmoddi4+0xe4>
 8000290:	1879      	adds	r1, r7, r1
 8000292:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000296:	d202      	bcs.n	800029e <__udivmoddi4+0xe2>
 8000298:	428b      	cmp	r3, r1
 800029a:	f200 80e9 	bhi.w	8000470 <__udivmoddi4+0x2b4>
 800029e:	4684      	mov	ip, r0
 80002a0:	1ac9      	subs	r1, r1, r3
 80002a2:	b2a3      	uxth	r3, r4
 80002a4:	fbb1 f0fe 	udiv	r0, r1, lr
 80002a8:	fb0e 1110 	mls	r1, lr, r0, r1
 80002ac:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002b0:	fb08 f800 	mul.w	r8, r8, r0
 80002b4:	45a0      	cmp	r8, r4
 80002b6:	d907      	bls.n	80002c8 <__udivmoddi4+0x10c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	d202      	bcs.n	80002c6 <__udivmoddi4+0x10a>
 80002c0:	45a0      	cmp	r8, r4
 80002c2:	f200 80d9 	bhi.w	8000478 <__udivmoddi4+0x2bc>
 80002c6:	4618      	mov	r0, r3
 80002c8:	eba4 0408 	sub.w	r4, r4, r8
 80002cc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002d0:	e7bf      	b.n	8000252 <__udivmoddi4+0x96>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d909      	bls.n	80002ea <__udivmoddi4+0x12e>
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	f000 80b1 	beq.w	800043e <__udivmoddi4+0x282>
 80002dc:	2600      	movs	r6, #0
 80002de:	e9c5 0100 	strd	r0, r1, [r5]
 80002e2:	4630      	mov	r0, r6
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	fab3 f683 	clz	r6, r3
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	d14a      	bne.n	8000388 <__udivmoddi4+0x1cc>
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0x140>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80b8 	bhi.w	800046c <__udivmoddi4+0x2b0>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb61 0103 	sbc.w	r1, r1, r3
 8000302:	2001      	movs	r0, #1
 8000304:	468c      	mov	ip, r1
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0a8      	beq.n	800025c <__udivmoddi4+0xa0>
 800030a:	e9c5 4c00 	strd	r4, ip, [r5]
 800030e:	e7a5      	b.n	800025c <__udivmoddi4+0xa0>
 8000310:	f1c2 0320 	rsb	r3, r2, #32
 8000314:	fa20 f603 	lsr.w	r6, r0, r3
 8000318:	4097      	lsls	r7, r2
 800031a:	fa01 f002 	lsl.w	r0, r1, r2
 800031e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000322:	40d9      	lsrs	r1, r3
 8000324:	4330      	orrs	r0, r6
 8000326:	0c03      	lsrs	r3, r0, #16
 8000328:	fbb1 f6fe 	udiv	r6, r1, lr
 800032c:	fa1f f887 	uxth.w	r8, r7
 8000330:	fb0e 1116 	mls	r1, lr, r6, r1
 8000334:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000338:	fb06 f108 	mul.w	r1, r6, r8
 800033c:	4299      	cmp	r1, r3
 800033e:	fa04 f402 	lsl.w	r4, r4, r2
 8000342:	d909      	bls.n	8000358 <__udivmoddi4+0x19c>
 8000344:	18fb      	adds	r3, r7, r3
 8000346:	f106 3cff 	add.w	ip, r6, #4294967295
 800034a:	f080 808d 	bcs.w	8000468 <__udivmoddi4+0x2ac>
 800034e:	4299      	cmp	r1, r3
 8000350:	f240 808a 	bls.w	8000468 <__udivmoddi4+0x2ac>
 8000354:	3e02      	subs	r6, #2
 8000356:	443b      	add	r3, r7
 8000358:	1a5b      	subs	r3, r3, r1
 800035a:	b281      	uxth	r1, r0
 800035c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000360:	fb0e 3310 	mls	r3, lr, r0, r3
 8000364:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000368:	fb00 f308 	mul.w	r3, r0, r8
 800036c:	428b      	cmp	r3, r1
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x1c4>
 8000370:	1879      	adds	r1, r7, r1
 8000372:	f100 3cff 	add.w	ip, r0, #4294967295
 8000376:	d273      	bcs.n	8000460 <__udivmoddi4+0x2a4>
 8000378:	428b      	cmp	r3, r1
 800037a:	d971      	bls.n	8000460 <__udivmoddi4+0x2a4>
 800037c:	3802      	subs	r0, #2
 800037e:	4439      	add	r1, r7
 8000380:	1acb      	subs	r3, r1, r3
 8000382:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000386:	e778      	b.n	800027a <__udivmoddi4+0xbe>
 8000388:	f1c6 0c20 	rsb	ip, r6, #32
 800038c:	fa03 f406 	lsl.w	r4, r3, r6
 8000390:	fa22 f30c 	lsr.w	r3, r2, ip
 8000394:	431c      	orrs	r4, r3
 8000396:	fa20 f70c 	lsr.w	r7, r0, ip
 800039a:	fa01 f306 	lsl.w	r3, r1, r6
 800039e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003a2:	fa21 f10c 	lsr.w	r1, r1, ip
 80003a6:	431f      	orrs	r7, r3
 80003a8:	0c3b      	lsrs	r3, r7, #16
 80003aa:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ae:	fa1f f884 	uxth.w	r8, r4
 80003b2:	fb0e 1119 	mls	r1, lr, r9, r1
 80003b6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003ba:	fb09 fa08 	mul.w	sl, r9, r8
 80003be:	458a      	cmp	sl, r1
 80003c0:	fa02 f206 	lsl.w	r2, r2, r6
 80003c4:	fa00 f306 	lsl.w	r3, r0, r6
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x220>
 80003ca:	1861      	adds	r1, r4, r1
 80003cc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d0:	d248      	bcs.n	8000464 <__udivmoddi4+0x2a8>
 80003d2:	458a      	cmp	sl, r1
 80003d4:	d946      	bls.n	8000464 <__udivmoddi4+0x2a8>
 80003d6:	f1a9 0902 	sub.w	r9, r9, #2
 80003da:	4421      	add	r1, r4
 80003dc:	eba1 010a 	sub.w	r1, r1, sl
 80003e0:	b2bf      	uxth	r7, r7
 80003e2:	fbb1 f0fe 	udiv	r0, r1, lr
 80003e6:	fb0e 1110 	mls	r1, lr, r0, r1
 80003ea:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80003ee:	fb00 f808 	mul.w	r8, r0, r8
 80003f2:	45b8      	cmp	r8, r7
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x24a>
 80003f6:	19e7      	adds	r7, r4, r7
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d22e      	bcs.n	800045c <__udivmoddi4+0x2a0>
 80003fe:	45b8      	cmp	r8, r7
 8000400:	d92c      	bls.n	800045c <__udivmoddi4+0x2a0>
 8000402:	3802      	subs	r0, #2
 8000404:	4427      	add	r7, r4
 8000406:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800040a:	eba7 0708 	sub.w	r7, r7, r8
 800040e:	fba0 8902 	umull	r8, r9, r0, r2
 8000412:	454f      	cmp	r7, r9
 8000414:	46c6      	mov	lr, r8
 8000416:	4649      	mov	r1, r9
 8000418:	d31a      	bcc.n	8000450 <__udivmoddi4+0x294>
 800041a:	d017      	beq.n	800044c <__udivmoddi4+0x290>
 800041c:	b15d      	cbz	r5, 8000436 <__udivmoddi4+0x27a>
 800041e:	ebb3 020e 	subs.w	r2, r3, lr
 8000422:	eb67 0701 	sbc.w	r7, r7, r1
 8000426:	fa07 fc0c 	lsl.w	ip, r7, ip
 800042a:	40f2      	lsrs	r2, r6
 800042c:	ea4c 0202 	orr.w	r2, ip, r2
 8000430:	40f7      	lsrs	r7, r6
 8000432:	e9c5 2700 	strd	r2, r7, [r5]
 8000436:	2600      	movs	r6, #0
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	462e      	mov	r6, r5
 8000440:	4628      	mov	r0, r5
 8000442:	e70b      	b.n	800025c <__udivmoddi4+0xa0>
 8000444:	4606      	mov	r6, r0
 8000446:	e6e9      	b.n	800021c <__udivmoddi4+0x60>
 8000448:	4618      	mov	r0, r3
 800044a:	e6fd      	b.n	8000248 <__udivmoddi4+0x8c>
 800044c:	4543      	cmp	r3, r8
 800044e:	d2e5      	bcs.n	800041c <__udivmoddi4+0x260>
 8000450:	ebb8 0e02 	subs.w	lr, r8, r2
 8000454:	eb69 0104 	sbc.w	r1, r9, r4
 8000458:	3801      	subs	r0, #1
 800045a:	e7df      	b.n	800041c <__udivmoddi4+0x260>
 800045c:	4608      	mov	r0, r1
 800045e:	e7d2      	b.n	8000406 <__udivmoddi4+0x24a>
 8000460:	4660      	mov	r0, ip
 8000462:	e78d      	b.n	8000380 <__udivmoddi4+0x1c4>
 8000464:	4681      	mov	r9, r0
 8000466:	e7b9      	b.n	80003dc <__udivmoddi4+0x220>
 8000468:	4666      	mov	r6, ip
 800046a:	e775      	b.n	8000358 <__udivmoddi4+0x19c>
 800046c:	4630      	mov	r0, r6
 800046e:	e74a      	b.n	8000306 <__udivmoddi4+0x14a>
 8000470:	f1ac 0c02 	sub.w	ip, ip, #2
 8000474:	4439      	add	r1, r7
 8000476:	e713      	b.n	80002a0 <__udivmoddi4+0xe4>
 8000478:	3802      	subs	r0, #2
 800047a:	443c      	add	r4, r7
 800047c:	e724      	b.n	80002c8 <__udivmoddi4+0x10c>
 800047e:	bf00      	nop

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000484:	b5b0      	push	{r4, r5, r7, lr}
 8000486:	b088      	sub	sp, #32
 8000488:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 800048a:	4b0b      	ldr	r3, [pc, #44]	; (80004b8 <APPD_EnableCPU2+0x34>)
 800048c:	1d3c      	adds	r4, r7, #4
 800048e:	461d      	mov	r5, r3
 8000490:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000492:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000494:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000498:	c403      	stmia	r4!, {r0, r1}
 800049a:	8022      	strh	r2, [r4, #0]
 800049c:	3402      	adds	r4, #2
 800049e:	0c13      	lsrs	r3, r2, #16
 80004a0:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80004a2:	f00b fe3b 	bl	800c11c <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80004a6:	1d3b      	adds	r3, r7, #4
 80004a8:	4618      	mov	r0, r3
 80004aa:	f00b fa0c 	bl	800b8c6 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80004ae:	bf00      	nop
}
 80004b0:	3720      	adds	r7, #32
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bdb0      	pop	{r4, r5, r7, pc}
 80004b6:	bf00      	nop
 80004b8:	0800dd38 	.word	0x0800dd38

080004bc <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80004bc:	b480      	push	{r7}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80004c4:	4b07      	ldr	r3, [pc, #28]	; (80004e4 <LL_C2_PWR_SetPowerMode+0x28>)
 80004c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80004ca:	f023 0207 	bic.w	r2, r3, #7
 80004ce:	4905      	ldr	r1, [pc, #20]	; (80004e4 <LL_C2_PWR_SetPowerMode+0x28>)
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	4313      	orrs	r3, r2
 80004d4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80004d8:	bf00      	nop
 80004da:	370c      	adds	r7, #12
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr
 80004e4:	58000400 	.word	0x58000400

080004e8 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80004f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004f4:	689b      	ldr	r3, [r3, #8]
 80004f6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80004fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	4313      	orrs	r3, r2
 8000502:	608b      	str	r3, [r1, #8]
}
 8000504:	bf00      	nop
 8000506:	370c      	adds	r7, #12
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr

08000510 <APPE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 8000514:	f000 f80a 	bl	800052c <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000518:	4903      	ldr	r1, [pc, #12]	; (8000528 <APPE_Init+0x18>)
 800051a:	2000      	movs	r0, #0
 800051c:	f000 fbf2 	bl	8000d04 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000520:	f000 f812 	bl	8000548 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000524:	bf00      	nop
}
 8000526:	bd80      	pop	{r7, pc}
 8000528:	20000710 	.word	0x20000710

0800052c <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000530:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000534:	f7ff ffd8 	bl	80004e8 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000538:	f00d f928 	bl	800d78c <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 800053c:	2004      	movs	r0, #4
 800053e:	f7ff ffbd 	bl	80004bc <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8000542:	bf00      	nop
}
 8000544:	bd80      	pop	{r7, pc}
	...

08000548 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b088      	sub	sp, #32
 800054c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800054e:	f00b fca1 	bl	800be94 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 8000552:	4a11      	ldr	r2, [pc, #68]	; (8000598 <appe_Tl_Init+0x50>)
 8000554:	2100      	movs	r1, #0
 8000556:	2008      	movs	r0, #8
 8000558:	f00d fa70 	bl	800da3c <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 800055c:	4b0f      	ldr	r3, [pc, #60]	; (800059c <appe_Tl_Init+0x54>)
 800055e:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000560:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <appe_Tl_Init+0x58>)
 8000562:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000564:	463b      	mov	r3, r7
 8000566:	4619      	mov	r1, r3
 8000568:	480e      	ldr	r0, [pc, #56]	; (80005a4 <appe_Tl_Init+0x5c>)
 800056a:	f00b fb59 	bl	800bc20 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800056e:	4b0e      	ldr	r3, [pc, #56]	; (80005a8 <appe_Tl_Init+0x60>)
 8000570:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000572:	4b0e      	ldr	r3, [pc, #56]	; (80005ac <appe_Tl_Init+0x64>)
 8000574:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000576:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <appe_Tl_Init+0x68>)
 8000578:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800057a:	f240 533c 	movw	r3, #1340	; 0x53c
 800057e:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8000580:	f107 0308 	add.w	r3, r7, #8
 8000584:	4618      	mov	r0, r3
 8000586:	f00b fd55 	bl	800c034 <TL_MM_Init>

  TL_Enable();
 800058a:	f00b fc7d 	bl	800be88 <TL_Enable>

  return;
 800058e:	bf00      	nop
}
 8000590:	3720      	adds	r7, #32
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	0800bc59 	.word	0x0800bc59
 800059c:	20030724 	.word	0x20030724
 80005a0:	080005b5 	.word	0x080005b5
 80005a4:	080005cb 	.word	0x080005cb
 80005a8:	2003093c 	.word	0x2003093c
 80005ac:	20030830 	.word	0x20030830
 80005b0:	200301e8 	.word	0x200301e8

080005b4 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80005be:	bf00      	nop
}
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr

080005ca <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 80005ca:	b580      	push	{r7, lr}
 80005cc:	b082      	sub	sp, #8
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	6078      	str	r0, [r7, #4]
  UNUSED(pPayload);
  /* Traces channel initialization */
  APPD_EnableCPU2( );
 80005d2:	f7ff ff57 	bl	8000484 <APPD_EnableCPU2>

  APP_BLE_Init( );
 80005d6:	f00b ff13 	bl	800c400 <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80005da:	2100      	movs	r1, #0
 80005dc:	2001      	movs	r0, #1
 80005de:	f00d f8e7 	bl	800d7b0 <UTIL_LPM_SetOffMode>
  return;
 80005e2:	bf00      	nop
}
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}

080005ea <UTIL_SEQ_Idle>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void UTIL_SEQ_Idle( void )
{
 80005ea:	b480      	push	{r7}
 80005ec:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
 80005ee:	bf00      	nop
}
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr

080005f8 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8000602:	f04f 30ff 	mov.w	r0, #4294967295
 8000606:	f00d f935 	bl	800d874 <UTIL_SEQ_Run>
}
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}

08000612 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000612:	b580      	push	{r7, lr}
 8000614:	b082      	sub	sp, #8
 8000616:	af00      	add	r7, sp, #0
 8000618:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800061a:	2100      	movs	r1, #0
 800061c:	2008      	movs	r0, #8
 800061e:	f00d fa2f 	bl	800da80 <UTIL_SEQ_SetTask>
  return;
 8000622:	bf00      	nop
}
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}

0800062a <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 800062a:	b580      	push	{r7, lr}
 800062c:	b082      	sub	sp, #8
 800062e:	af00      	add	r7, sp, #0
 8000630:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000632:	2002      	movs	r0, #2
 8000634:	f00d fa90 	bl	800db58 <UTIL_SEQ_SetEvt>
  return;
 8000638:	bf00      	nop
}
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}

08000640 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000648:	2002      	movs	r0, #2
 800064a:	f00d faa5 	bl	800db98 <UTIL_SEQ_WaitEvt>
  return;
 800064e:	bf00      	nop
}
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
	...

08000658 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <LL_EXTI_EnableIT_0_31+0x24>)
 8000662:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000666:	4905      	ldr	r1, [pc, #20]	; (800067c <LL_EXTI_EnableIT_0_31+0x24>)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	4313      	orrs	r3, r2
 800066c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000670:	bf00      	nop
 8000672:	370c      	adds	r7, #12
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr
 800067c:	58000800 	.word	0x58000800

08000680 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000688:	4b05      	ldr	r3, [pc, #20]	; (80006a0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800068a:	681a      	ldr	r2, [r3, #0]
 800068c:	4904      	ldr	r1, [pc, #16]	; (80006a0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4313      	orrs	r3, r2
 8000692:	600b      	str	r3, [r1, #0]

}
 8000694:	bf00      	nop
 8000696:	370c      	adds	r7, #12
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	58000800 	.word	0x58000800

080006a4 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80006aa:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <ReadRtcSsrValue+0x3c>)
 80006ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006ae:	b29b      	uxth	r3, r3
 80006b0:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80006b2:	4b0b      	ldr	r3, [pc, #44]	; (80006e0 <ReadRtcSsrValue+0x3c>)
 80006b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006b6:	b29b      	uxth	r3, r3
 80006b8:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80006ba:	e005      	b.n	80006c8 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80006c0:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <ReadRtcSsrValue+0x3c>)
 80006c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006c4:	b29b      	uxth	r3, r3
 80006c6:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80006c8:	687a      	ldr	r2, [r7, #4]
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	429a      	cmp	r2, r3
 80006ce:	d1f5      	bne.n	80006bc <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80006d0:	683b      	ldr	r3, [r7, #0]
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	40002800 	.word	0x40002800

080006e4 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	460a      	mov	r2, r1
 80006ee:	71fb      	strb	r3, [r7, #7]
 80006f0:	4613      	mov	r3, r2
 80006f2:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80006f4:	79ba      	ldrb	r2, [r7, #6]
 80006f6:	491d      	ldr	r1, [pc, #116]	; (800076c <LinkTimerAfter+0x88>)
 80006f8:	4613      	mov	r3, r2
 80006fa:	005b      	lsls	r3, r3, #1
 80006fc:	4413      	add	r3, r2
 80006fe:	00db      	lsls	r3, r3, #3
 8000700:	440b      	add	r3, r1
 8000702:	3315      	adds	r3, #21
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000708:	7bfb      	ldrb	r3, [r7, #15]
 800070a:	2b06      	cmp	r3, #6
 800070c:	d009      	beq.n	8000722 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 800070e:	7bfa      	ldrb	r2, [r7, #15]
 8000710:	4916      	ldr	r1, [pc, #88]	; (800076c <LinkTimerAfter+0x88>)
 8000712:	4613      	mov	r3, r2
 8000714:	005b      	lsls	r3, r3, #1
 8000716:	4413      	add	r3, r2
 8000718:	00db      	lsls	r3, r3, #3
 800071a:	440b      	add	r3, r1
 800071c:	3314      	adds	r3, #20
 800071e:	79fa      	ldrb	r2, [r7, #7]
 8000720:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000722:	79fa      	ldrb	r2, [r7, #7]
 8000724:	4911      	ldr	r1, [pc, #68]	; (800076c <LinkTimerAfter+0x88>)
 8000726:	4613      	mov	r3, r2
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	4413      	add	r3, r2
 800072c:	00db      	lsls	r3, r3, #3
 800072e:	440b      	add	r3, r1
 8000730:	3315      	adds	r3, #21
 8000732:	7bfa      	ldrb	r2, [r7, #15]
 8000734:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000736:	79fa      	ldrb	r2, [r7, #7]
 8000738:	490c      	ldr	r1, [pc, #48]	; (800076c <LinkTimerAfter+0x88>)
 800073a:	4613      	mov	r3, r2
 800073c:	005b      	lsls	r3, r3, #1
 800073e:	4413      	add	r3, r2
 8000740:	00db      	lsls	r3, r3, #3
 8000742:	440b      	add	r3, r1
 8000744:	3314      	adds	r3, #20
 8000746:	79ba      	ldrb	r2, [r7, #6]
 8000748:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 800074a:	79ba      	ldrb	r2, [r7, #6]
 800074c:	4907      	ldr	r1, [pc, #28]	; (800076c <LinkTimerAfter+0x88>)
 800074e:	4613      	mov	r3, r2
 8000750:	005b      	lsls	r3, r3, #1
 8000752:	4413      	add	r3, r2
 8000754:	00db      	lsls	r3, r3, #3
 8000756:	440b      	add	r3, r1
 8000758:	3315      	adds	r3, #21
 800075a:	79fa      	ldrb	r2, [r7, #7]
 800075c:	701a      	strb	r2, [r3, #0]

  return;
 800075e:	bf00      	nop
}
 8000760:	3714      	adds	r7, #20
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	200001a0 	.word	0x200001a0

08000770 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000770:	b480      	push	{r7}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	460a      	mov	r2, r1
 800077a:	71fb      	strb	r3, [r7, #7]
 800077c:	4613      	mov	r3, r2
 800077e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000780:	4b29      	ldr	r3, [pc, #164]	; (8000828 <LinkTimerBefore+0xb8>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	b2db      	uxtb	r3, r3
 8000786:	79ba      	ldrb	r2, [r7, #6]
 8000788:	429a      	cmp	r2, r3
 800078a:	d032      	beq.n	80007f2 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 800078c:	79ba      	ldrb	r2, [r7, #6]
 800078e:	4927      	ldr	r1, [pc, #156]	; (800082c <LinkTimerBefore+0xbc>)
 8000790:	4613      	mov	r3, r2
 8000792:	005b      	lsls	r3, r3, #1
 8000794:	4413      	add	r3, r2
 8000796:	00db      	lsls	r3, r3, #3
 8000798:	440b      	add	r3, r1
 800079a:	3314      	adds	r3, #20
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80007a0:	7bfa      	ldrb	r2, [r7, #15]
 80007a2:	4922      	ldr	r1, [pc, #136]	; (800082c <LinkTimerBefore+0xbc>)
 80007a4:	4613      	mov	r3, r2
 80007a6:	005b      	lsls	r3, r3, #1
 80007a8:	4413      	add	r3, r2
 80007aa:	00db      	lsls	r3, r3, #3
 80007ac:	440b      	add	r3, r1
 80007ae:	3315      	adds	r3, #21
 80007b0:	79fa      	ldrb	r2, [r7, #7]
 80007b2:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80007b4:	79fa      	ldrb	r2, [r7, #7]
 80007b6:	491d      	ldr	r1, [pc, #116]	; (800082c <LinkTimerBefore+0xbc>)
 80007b8:	4613      	mov	r3, r2
 80007ba:	005b      	lsls	r3, r3, #1
 80007bc:	4413      	add	r3, r2
 80007be:	00db      	lsls	r3, r3, #3
 80007c0:	440b      	add	r3, r1
 80007c2:	3315      	adds	r3, #21
 80007c4:	79ba      	ldrb	r2, [r7, #6]
 80007c6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80007c8:	79fa      	ldrb	r2, [r7, #7]
 80007ca:	4918      	ldr	r1, [pc, #96]	; (800082c <LinkTimerBefore+0xbc>)
 80007cc:	4613      	mov	r3, r2
 80007ce:	005b      	lsls	r3, r3, #1
 80007d0:	4413      	add	r3, r2
 80007d2:	00db      	lsls	r3, r3, #3
 80007d4:	440b      	add	r3, r1
 80007d6:	3314      	adds	r3, #20
 80007d8:	7bfa      	ldrb	r2, [r7, #15]
 80007da:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80007dc:	79ba      	ldrb	r2, [r7, #6]
 80007de:	4913      	ldr	r1, [pc, #76]	; (800082c <LinkTimerBefore+0xbc>)
 80007e0:	4613      	mov	r3, r2
 80007e2:	005b      	lsls	r3, r3, #1
 80007e4:	4413      	add	r3, r2
 80007e6:	00db      	lsls	r3, r3, #3
 80007e8:	440b      	add	r3, r1
 80007ea:	3314      	adds	r3, #20
 80007ec:	79fa      	ldrb	r2, [r7, #7]
 80007ee:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80007f0:	e014      	b.n	800081c <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80007f2:	79fa      	ldrb	r2, [r7, #7]
 80007f4:	490d      	ldr	r1, [pc, #52]	; (800082c <LinkTimerBefore+0xbc>)
 80007f6:	4613      	mov	r3, r2
 80007f8:	005b      	lsls	r3, r3, #1
 80007fa:	4413      	add	r3, r2
 80007fc:	00db      	lsls	r3, r3, #3
 80007fe:	440b      	add	r3, r1
 8000800:	3315      	adds	r3, #21
 8000802:	79ba      	ldrb	r2, [r7, #6]
 8000804:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000806:	79ba      	ldrb	r2, [r7, #6]
 8000808:	4908      	ldr	r1, [pc, #32]	; (800082c <LinkTimerBefore+0xbc>)
 800080a:	4613      	mov	r3, r2
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	4413      	add	r3, r2
 8000810:	00db      	lsls	r3, r3, #3
 8000812:	440b      	add	r3, r1
 8000814:	3314      	adds	r3, #20
 8000816:	79fa      	ldrb	r2, [r7, #7]
 8000818:	701a      	strb	r2, [r3, #0]
  return;
 800081a:	bf00      	nop
}
 800081c:	3714      	adds	r7, #20
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	20000230 	.word	0x20000230
 800082c:	200001a0 	.word	0x200001a0

08000830 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800083a:	4b4e      	ldr	r3, [pc, #312]	; (8000974 <linkTimer+0x144>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	b2db      	uxtb	r3, r3
 8000840:	2b06      	cmp	r3, #6
 8000842:	d118      	bne.n	8000876 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000844:	4b4b      	ldr	r3, [pc, #300]	; (8000974 <linkTimer+0x144>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	b2da      	uxtb	r2, r3
 800084a:	4b4b      	ldr	r3, [pc, #300]	; (8000978 <linkTimer+0x148>)
 800084c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 800084e:	4a49      	ldr	r2, [pc, #292]	; (8000974 <linkTimer+0x144>)
 8000850:	79fb      	ldrb	r3, [r7, #7]
 8000852:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000854:	79fa      	ldrb	r2, [r7, #7]
 8000856:	4949      	ldr	r1, [pc, #292]	; (800097c <linkTimer+0x14c>)
 8000858:	4613      	mov	r3, r2
 800085a:	005b      	lsls	r3, r3, #1
 800085c:	4413      	add	r3, r2
 800085e:	00db      	lsls	r3, r3, #3
 8000860:	440b      	add	r3, r1
 8000862:	3315      	adds	r3, #21
 8000864:	2206      	movs	r2, #6
 8000866:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000868:	4b45      	ldr	r3, [pc, #276]	; (8000980 <linkTimer+0x150>)
 800086a:	f04f 32ff 	mov.w	r2, #4294967295
 800086e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000870:	2300      	movs	r3, #0
 8000872:	81fb      	strh	r3, [r7, #14]
 8000874:	e078      	b.n	8000968 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000876:	f000 f909 	bl	8000a8c <ReturnTimeElapsed>
 800087a:	4603      	mov	r3, r0
 800087c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 800087e:	79fa      	ldrb	r2, [r7, #7]
 8000880:	493e      	ldr	r1, [pc, #248]	; (800097c <linkTimer+0x14c>)
 8000882:	4613      	mov	r3, r2
 8000884:	005b      	lsls	r3, r3, #1
 8000886:	4413      	add	r3, r2
 8000888:	00db      	lsls	r3, r3, #3
 800088a:	440b      	add	r3, r1
 800088c:	3308      	adds	r3, #8
 800088e:	6819      	ldr	r1, [r3, #0]
 8000890:	89fb      	ldrh	r3, [r7, #14]
 8000892:	79fa      	ldrb	r2, [r7, #7]
 8000894:	4419      	add	r1, r3
 8000896:	4839      	ldr	r0, [pc, #228]	; (800097c <linkTimer+0x14c>)
 8000898:	4613      	mov	r3, r2
 800089a:	005b      	lsls	r3, r3, #1
 800089c:	4413      	add	r3, r2
 800089e:	00db      	lsls	r3, r3, #3
 80008a0:	4403      	add	r3, r0
 80008a2:	3308      	adds	r3, #8
 80008a4:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80008a6:	79fa      	ldrb	r2, [r7, #7]
 80008a8:	4934      	ldr	r1, [pc, #208]	; (800097c <linkTimer+0x14c>)
 80008aa:	4613      	mov	r3, r2
 80008ac:	005b      	lsls	r3, r3, #1
 80008ae:	4413      	add	r3, r2
 80008b0:	00db      	lsls	r3, r3, #3
 80008b2:	440b      	add	r3, r1
 80008b4:	3308      	adds	r3, #8
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80008ba:	4b2e      	ldr	r3, [pc, #184]	; (8000974 <linkTimer+0x144>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	4619      	mov	r1, r3
 80008c2:	4a2e      	ldr	r2, [pc, #184]	; (800097c <linkTimer+0x14c>)
 80008c4:	460b      	mov	r3, r1
 80008c6:	005b      	lsls	r3, r3, #1
 80008c8:	440b      	add	r3, r1
 80008ca:	00db      	lsls	r3, r3, #3
 80008cc:	4413      	add	r3, r2
 80008ce:	3308      	adds	r3, #8
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	68ba      	ldr	r2, [r7, #8]
 80008d4:	429a      	cmp	r2, r3
 80008d6:	d337      	bcc.n	8000948 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 80008d8:	4b26      	ldr	r3, [pc, #152]	; (8000974 <linkTimer+0x144>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 80008de:	7b7a      	ldrb	r2, [r7, #13]
 80008e0:	4926      	ldr	r1, [pc, #152]	; (800097c <linkTimer+0x14c>)
 80008e2:	4613      	mov	r3, r2
 80008e4:	005b      	lsls	r3, r3, #1
 80008e6:	4413      	add	r3, r2
 80008e8:	00db      	lsls	r3, r3, #3
 80008ea:	440b      	add	r3, r1
 80008ec:	3315      	adds	r3, #21
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80008f2:	e013      	b.n	800091c <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80008f4:	7b7a      	ldrb	r2, [r7, #13]
 80008f6:	4921      	ldr	r1, [pc, #132]	; (800097c <linkTimer+0x14c>)
 80008f8:	4613      	mov	r3, r2
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	4413      	add	r3, r2
 80008fe:	00db      	lsls	r3, r3, #3
 8000900:	440b      	add	r3, r1
 8000902:	3315      	adds	r3, #21
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000908:	7b7a      	ldrb	r2, [r7, #13]
 800090a:	491c      	ldr	r1, [pc, #112]	; (800097c <linkTimer+0x14c>)
 800090c:	4613      	mov	r3, r2
 800090e:	005b      	lsls	r3, r3, #1
 8000910:	4413      	add	r3, r2
 8000912:	00db      	lsls	r3, r3, #3
 8000914:	440b      	add	r3, r1
 8000916:	3315      	adds	r3, #21
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800091c:	7b3b      	ldrb	r3, [r7, #12]
 800091e:	2b06      	cmp	r3, #6
 8000920:	d00b      	beq.n	800093a <linkTimer+0x10a>
 8000922:	7b3a      	ldrb	r2, [r7, #12]
 8000924:	4915      	ldr	r1, [pc, #84]	; (800097c <linkTimer+0x14c>)
 8000926:	4613      	mov	r3, r2
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	4413      	add	r3, r2
 800092c:	00db      	lsls	r3, r3, #3
 800092e:	440b      	add	r3, r1
 8000930:	3308      	adds	r3, #8
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	68ba      	ldr	r2, [r7, #8]
 8000936:	429a      	cmp	r2, r3
 8000938:	d2dc      	bcs.n	80008f4 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800093a:	7b7a      	ldrb	r2, [r7, #13]
 800093c:	79fb      	ldrb	r3, [r7, #7]
 800093e:	4611      	mov	r1, r2
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff fecf 	bl	80006e4 <LinkTimerAfter>
 8000946:	e00f      	b.n	8000968 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000948:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <linkTimer+0x144>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	b2da      	uxtb	r2, r3
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	4611      	mov	r1, r2
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff ff0c 	bl	8000770 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <linkTimer+0x144>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	b2da      	uxtb	r2, r3
 800095e:	4b06      	ldr	r3, [pc, #24]	; (8000978 <linkTimer+0x148>)
 8000960:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000962:	4a04      	ldr	r2, [pc, #16]	; (8000974 <linkTimer+0x144>)
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000968:	89fb      	ldrh	r3, [r7, #14]
}
 800096a:	4618      	mov	r0, r3
 800096c:	3710      	adds	r7, #16
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000230 	.word	0x20000230
 8000978:	20000231 	.word	0x20000231
 800097c:	200001a0 	.word	0x200001a0
 8000980:	20000234 	.word	0x20000234

08000984 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	460a      	mov	r2, r1
 800098e:	71fb      	strb	r3, [r7, #7]
 8000990:	4613      	mov	r3, r2
 8000992:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000994:	4b39      	ldr	r3, [pc, #228]	; (8000a7c <UnlinkTimer+0xf8>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	b2db      	uxtb	r3, r3
 800099a:	79fa      	ldrb	r2, [r7, #7]
 800099c:	429a      	cmp	r2, r3
 800099e:	d111      	bne.n	80009c4 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80009a0:	4b36      	ldr	r3, [pc, #216]	; (8000a7c <UnlinkTimer+0xf8>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	b2da      	uxtb	r2, r3
 80009a6:	4b36      	ldr	r3, [pc, #216]	; (8000a80 <UnlinkTimer+0xfc>)
 80009a8:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80009aa:	79fa      	ldrb	r2, [r7, #7]
 80009ac:	4935      	ldr	r1, [pc, #212]	; (8000a84 <UnlinkTimer+0x100>)
 80009ae:	4613      	mov	r3, r2
 80009b0:	005b      	lsls	r3, r3, #1
 80009b2:	4413      	add	r3, r2
 80009b4:	00db      	lsls	r3, r3, #3
 80009b6:	440b      	add	r3, r1
 80009b8:	3315      	adds	r3, #21
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	b2da      	uxtb	r2, r3
 80009be:	4b2f      	ldr	r3, [pc, #188]	; (8000a7c <UnlinkTimer+0xf8>)
 80009c0:	701a      	strb	r2, [r3, #0]
 80009c2:	e03e      	b.n	8000a42 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80009c4:	79fa      	ldrb	r2, [r7, #7]
 80009c6:	492f      	ldr	r1, [pc, #188]	; (8000a84 <UnlinkTimer+0x100>)
 80009c8:	4613      	mov	r3, r2
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	4413      	add	r3, r2
 80009ce:	00db      	lsls	r3, r3, #3
 80009d0:	440b      	add	r3, r1
 80009d2:	3314      	adds	r3, #20
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 80009d8:	79fa      	ldrb	r2, [r7, #7]
 80009da:	492a      	ldr	r1, [pc, #168]	; (8000a84 <UnlinkTimer+0x100>)
 80009dc:	4613      	mov	r3, r2
 80009de:	005b      	lsls	r3, r3, #1
 80009e0:	4413      	add	r3, r2
 80009e2:	00db      	lsls	r3, r3, #3
 80009e4:	440b      	add	r3, r1
 80009e6:	3315      	adds	r3, #21
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80009ec:	79f9      	ldrb	r1, [r7, #7]
 80009ee:	7bfa      	ldrb	r2, [r7, #15]
 80009f0:	4824      	ldr	r0, [pc, #144]	; (8000a84 <UnlinkTimer+0x100>)
 80009f2:	460b      	mov	r3, r1
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	440b      	add	r3, r1
 80009f8:	00db      	lsls	r3, r3, #3
 80009fa:	4403      	add	r3, r0
 80009fc:	3315      	adds	r3, #21
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	b2d8      	uxtb	r0, r3
 8000a02:	4920      	ldr	r1, [pc, #128]	; (8000a84 <UnlinkTimer+0x100>)
 8000a04:	4613      	mov	r3, r2
 8000a06:	005b      	lsls	r3, r3, #1
 8000a08:	4413      	add	r3, r2
 8000a0a:	00db      	lsls	r3, r3, #3
 8000a0c:	440b      	add	r3, r1
 8000a0e:	3315      	adds	r3, #21
 8000a10:	4602      	mov	r2, r0
 8000a12:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000a14:	7bbb      	ldrb	r3, [r7, #14]
 8000a16:	2b06      	cmp	r3, #6
 8000a18:	d013      	beq.n	8000a42 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000a1a:	79f9      	ldrb	r1, [r7, #7]
 8000a1c:	7bba      	ldrb	r2, [r7, #14]
 8000a1e:	4819      	ldr	r0, [pc, #100]	; (8000a84 <UnlinkTimer+0x100>)
 8000a20:	460b      	mov	r3, r1
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	440b      	add	r3, r1
 8000a26:	00db      	lsls	r3, r3, #3
 8000a28:	4403      	add	r3, r0
 8000a2a:	3314      	adds	r3, #20
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	b2d8      	uxtb	r0, r3
 8000a30:	4914      	ldr	r1, [pc, #80]	; (8000a84 <UnlinkTimer+0x100>)
 8000a32:	4613      	mov	r3, r2
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	4413      	add	r3, r2
 8000a38:	00db      	lsls	r3, r3, #3
 8000a3a:	440b      	add	r3, r1
 8000a3c:	3314      	adds	r3, #20
 8000a3e:	4602      	mov	r2, r0
 8000a40:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000a42:	79fa      	ldrb	r2, [r7, #7]
 8000a44:	490f      	ldr	r1, [pc, #60]	; (8000a84 <UnlinkTimer+0x100>)
 8000a46:	4613      	mov	r3, r2
 8000a48:	005b      	lsls	r3, r3, #1
 8000a4a:	4413      	add	r3, r2
 8000a4c:	00db      	lsls	r3, r3, #3
 8000a4e:	440b      	add	r3, r1
 8000a50:	330c      	adds	r3, #12
 8000a52:	2201      	movs	r2, #1
 8000a54:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000a56:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <UnlinkTimer+0xf8>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	2b06      	cmp	r3, #6
 8000a5e:	d107      	bne.n	8000a70 <UnlinkTimer+0xec>
 8000a60:	79bb      	ldrb	r3, [r7, #6]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d104      	bne.n	8000a70 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000a66:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <UnlinkTimer+0x104>)
 8000a68:	f04f 32ff 	mov.w	r2, #4294967295
 8000a6c:	601a      	str	r2, [r3, #0]
  }

  return;
 8000a6e:	bf00      	nop
 8000a70:	bf00      	nop
}
 8000a72:	3714      	adds	r7, #20
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr
 8000a7c:	20000230 	.word	0x20000230
 8000a80:	20000231 	.word	0x20000231
 8000a84:	200001a0 	.word	0x200001a0
 8000a88:	20000234 	.word	0x20000234

08000a8c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000a92:	4b1a      	ldr	r3, [pc, #104]	; (8000afc <ReturnTimeElapsed+0x70>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a9a:	d026      	beq.n	8000aea <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000a9c:	f7ff fe02 	bl	80006a4 <ReadRtcSsrValue>
 8000aa0:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000aa2:	4b16      	ldr	r3, [pc, #88]	; (8000afc <ReturnTimeElapsed+0x70>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	687a      	ldr	r2, [r7, #4]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d805      	bhi.n	8000ab8 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000aac:	4b13      	ldr	r3, [pc, #76]	; (8000afc <ReturnTimeElapsed+0x70>)
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	1ad3      	subs	r3, r2, r3
 8000ab4:	607b      	str	r3, [r7, #4]
 8000ab6:	e00a      	b.n	8000ace <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000ab8:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <ReturnTimeElapsed+0x74>)
 8000aba:	881b      	ldrh	r3, [r3, #0]
 8000abc:	461a      	mov	r2, r3
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000ac4:	4b0d      	ldr	r3, [pc, #52]	; (8000afc <ReturnTimeElapsed+0x70>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	683a      	ldr	r2, [r7, #0]
 8000aca:	4413      	add	r3, r2
 8000acc:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000ace:	4b0d      	ldr	r3, [pc, #52]	; (8000b04 <ReturnTimeElapsed+0x78>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	fb02 f303 	mul.w	r3, r2, r3
 8000ada:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000adc:	4b0a      	ldr	r3, [pc, #40]	; (8000b08 <ReturnTimeElapsed+0x7c>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	40d3      	lsrs	r3, r2
 8000ae6:	607b      	str	r3, [r7, #4]
 8000ae8:	e001      	b.n	8000aee <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	b29b      	uxth	r3, r3
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20000234 	.word	0x20000234
 8000b00:	2000033a 	.word	0x2000033a
 8000b04:	20000339 	.word	0x20000339
 8000b08:	20000338 	.word	0x20000338

08000b0c <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8000b16:	88fb      	ldrh	r3, [r7, #6]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d108      	bne.n	8000b2e <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000b1c:	f7ff fdc2 	bl	80006a4 <ReadRtcSsrValue>
 8000b20:	4603      	mov	r3, r0
 8000b22:	4a24      	ldr	r2, [pc, #144]	; (8000bb4 <RestartWakeupCounter+0xa8>)
 8000b24:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000b26:	2003      	movs	r0, #3
 8000b28:	f001 f963 	bl	8001df2 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000b2c:	e03e      	b.n	8000bac <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000b2e:	88fb      	ldrh	r3, [r7, #6]
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d803      	bhi.n	8000b3c <RestartWakeupCounter+0x30>
 8000b34:	4b20      	ldr	r3, [pc, #128]	; (8000bb8 <RestartWakeupCounter+0xac>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d002      	beq.n	8000b42 <RestartWakeupCounter+0x36>
      Value -= 1;
 8000b3c:	88fb      	ldrh	r3, [r7, #6]
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000b42:	bf00      	nop
 8000b44:	4b1d      	ldr	r3, [pc, #116]	; (8000bbc <RestartWakeupCounter+0xb0>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	f003 0304 	and.w	r3, r3, #4
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d0f7      	beq.n	8000b44 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000b54:	4b19      	ldr	r3, [pc, #100]	; (8000bbc <RestartWakeupCounter+0xb0>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	b2da      	uxtb	r2, r3
 8000b5e:	4b17      	ldr	r3, [pc, #92]	; (8000bbc <RestartWakeupCounter+0xb0>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000b68:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000b6a:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <RestartWakeupCounter+0xb4>)
 8000b6c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000b70:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000b72:	2003      	movs	r0, #3
 8000b74:	f001 f94b 	bl	8001e0e <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000b78:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <RestartWakeupCounter+0xb8>)
 8000b7a:	695b      	ldr	r3, [r3, #20]
 8000b7c:	0c1b      	lsrs	r3, r3, #16
 8000b7e:	041b      	lsls	r3, r3, #16
 8000b80:	88fa      	ldrh	r2, [r7, #6]
 8000b82:	4910      	ldr	r1, [pc, #64]	; (8000bc4 <RestartWakeupCounter+0xb8>)
 8000b84:	4313      	orrs	r3, r2
 8000b86:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000b88:	f7ff fd8c 	bl	80006a4 <ReadRtcSsrValue>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	4a09      	ldr	r2, [pc, #36]	; (8000bb4 <RestartWakeupCounter+0xa8>)
 8000b90:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8000b92:	4b0a      	ldr	r3, [pc, #40]	; (8000bbc <RestartWakeupCounter+0xb0>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	689a      	ldr	r2, [r3, #8]
 8000b9a:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <RestartWakeupCounter+0xb0>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000ba4:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000ba6:	f3af 8000 	nop.w
  return ;
 8000baa:	bf00      	nop
}
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000234 	.word	0x20000234
 8000bb8:	20000338 	.word	0x20000338
 8000bbc:	20000334 	.word	0x20000334
 8000bc0:	58000800 	.word	0x58000800
 8000bc4:	40002800 	.word	0x40002800

08000bc8 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000bce:	4b47      	ldr	r3, [pc, #284]	; (8000cec <RescheduleTimerList+0x124>)
 8000bd0:	689b      	ldr	r3, [r3, #8]
 8000bd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bda:	d108      	bne.n	8000bee <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000bdc:	bf00      	nop
 8000bde:	4b44      	ldr	r3, [pc, #272]	; (8000cf0 <RescheduleTimerList+0x128>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	68db      	ldr	r3, [r3, #12]
 8000be6:	f003 0304 	and.w	r3, r3, #4
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d1f7      	bne.n	8000bde <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000bee:	4b40      	ldr	r3, [pc, #256]	; (8000cf0 <RescheduleTimerList+0x128>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	689a      	ldr	r2, [r3, #8]
 8000bf6:	4b3e      	ldr	r3, [pc, #248]	; (8000cf0 <RescheduleTimerList+0x128>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000c00:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000c02:	4b3c      	ldr	r3, [pc, #240]	; (8000cf4 <RescheduleTimerList+0x12c>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000c08:	7bfa      	ldrb	r2, [r7, #15]
 8000c0a:	493b      	ldr	r1, [pc, #236]	; (8000cf8 <RescheduleTimerList+0x130>)
 8000c0c:	4613      	mov	r3, r2
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	4413      	add	r3, r2
 8000c12:	00db      	lsls	r3, r3, #3
 8000c14:	440b      	add	r3, r1
 8000c16:	3308      	adds	r3, #8
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000c1c:	f7ff ff36 	bl	8000a8c <ReturnTimeElapsed>
 8000c20:	4603      	mov	r3, r0
 8000c22:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000c24:	88fb      	ldrh	r3, [r7, #6]
 8000c26:	68ba      	ldr	r2, [r7, #8]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d205      	bcs.n	8000c38 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000c30:	4b32      	ldr	r3, [pc, #200]	; (8000cfc <RescheduleTimerList+0x134>)
 8000c32:	2201      	movs	r2, #1
 8000c34:	701a      	strb	r2, [r3, #0]
 8000c36:	e04d      	b.n	8000cd4 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000c38:	88fb      	ldrh	r3, [r7, #6]
 8000c3a:	4a31      	ldr	r2, [pc, #196]	; (8000d00 <RescheduleTimerList+0x138>)
 8000c3c:	8812      	ldrh	r2, [r2, #0]
 8000c3e:	b292      	uxth	r2, r2
 8000c40:	4413      	add	r3, r2
 8000c42:	461a      	mov	r2, r3
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d906      	bls.n	8000c58 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000c4a:	4b2d      	ldr	r3, [pc, #180]	; (8000d00 <RescheduleTimerList+0x138>)
 8000c4c:	881b      	ldrh	r3, [r3, #0]
 8000c4e:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000c50:	4b2a      	ldr	r3, [pc, #168]	; (8000cfc <RescheduleTimerList+0x134>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	701a      	strb	r2, [r3, #0]
 8000c56:	e03d      	b.n	8000cd4 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	b29a      	uxth	r2, r3
 8000c5c:	88fb      	ldrh	r3, [r7, #6]
 8000c5e:	1ad3      	subs	r3, r2, r3
 8000c60:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000c62:	4b26      	ldr	r3, [pc, #152]	; (8000cfc <RescheduleTimerList+0x134>)
 8000c64:	2201      	movs	r2, #1
 8000c66:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000c68:	e034      	b.n	8000cd4 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000c6a:	7bfa      	ldrb	r2, [r7, #15]
 8000c6c:	4922      	ldr	r1, [pc, #136]	; (8000cf8 <RescheduleTimerList+0x130>)
 8000c6e:	4613      	mov	r3, r2
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	4413      	add	r3, r2
 8000c74:	00db      	lsls	r3, r3, #3
 8000c76:	440b      	add	r3, r1
 8000c78:	3308      	adds	r3, #8
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	88fb      	ldrh	r3, [r7, #6]
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	d20a      	bcs.n	8000c98 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000c82:	7bfa      	ldrb	r2, [r7, #15]
 8000c84:	491c      	ldr	r1, [pc, #112]	; (8000cf8 <RescheduleTimerList+0x130>)
 8000c86:	4613      	mov	r3, r2
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	4413      	add	r3, r2
 8000c8c:	00db      	lsls	r3, r3, #3
 8000c8e:	440b      	add	r3, r1
 8000c90:	3308      	adds	r3, #8
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	e013      	b.n	8000cc0 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000c98:	7bfa      	ldrb	r2, [r7, #15]
 8000c9a:	4917      	ldr	r1, [pc, #92]	; (8000cf8 <RescheduleTimerList+0x130>)
 8000c9c:	4613      	mov	r3, r2
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	4413      	add	r3, r2
 8000ca2:	00db      	lsls	r3, r3, #3
 8000ca4:	440b      	add	r3, r1
 8000ca6:	3308      	adds	r3, #8
 8000ca8:	6819      	ldr	r1, [r3, #0]
 8000caa:	88fb      	ldrh	r3, [r7, #6]
 8000cac:	7bfa      	ldrb	r2, [r7, #15]
 8000cae:	1ac9      	subs	r1, r1, r3
 8000cb0:	4811      	ldr	r0, [pc, #68]	; (8000cf8 <RescheduleTimerList+0x130>)
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	4413      	add	r3, r2
 8000cb8:	00db      	lsls	r3, r3, #3
 8000cba:	4403      	add	r3, r0
 8000cbc:	3308      	adds	r3, #8
 8000cbe:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000cc0:	7bfa      	ldrb	r2, [r7, #15]
 8000cc2:	490d      	ldr	r1, [pc, #52]	; (8000cf8 <RescheduleTimerList+0x130>)
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	4413      	add	r3, r2
 8000cca:	00db      	lsls	r3, r3, #3
 8000ccc:	440b      	add	r3, r1
 8000cce:	3315      	adds	r3, #21
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000cd4:	7bfb      	ldrb	r3, [r7, #15]
 8000cd6:	2b06      	cmp	r3, #6
 8000cd8:	d1c7      	bne.n	8000c6a <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000cda:	89bb      	ldrh	r3, [r7, #12]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff ff15 	bl	8000b0c <RestartWakeupCounter>

  return ;
 8000ce2:	bf00      	nop
}
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40002800 	.word	0x40002800
 8000cf0:	20000334 	.word	0x20000334
 8000cf4:	20000230 	.word	0x20000230
 8000cf8:	200001a0 	.word	0x200001a0
 8000cfc:	20000238 	.word	0x20000238
 8000d00:	2000033c 	.word	0x2000033c

08000d04 <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b088      	sub	sp, #32
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	6039      	str	r1, [r7, #0]
 8000d0e:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8000d10:	4a64      	ldr	r2, [pc, #400]	; (8000ea4 <HW_TS_Init+0x1a0>)
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000d16:	4b63      	ldr	r3, [pc, #396]	; (8000ea4 <HW_TS_Init+0x1a0>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	22ca      	movs	r2, #202	; 0xca
 8000d1e:	625a      	str	r2, [r3, #36]	; 0x24
 8000d20:	4b60      	ldr	r3, [pc, #384]	; (8000ea4 <HW_TS_Init+0x1a0>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	2253      	movs	r2, #83	; 0x53
 8000d28:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000d2a:	4b5f      	ldr	r3, [pc, #380]	; (8000ea8 <HW_TS_Init+0x1a4>)
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	4a5e      	ldr	r2, [pc, #376]	; (8000ea8 <HW_TS_Init+0x1a4>)
 8000d30:	f043 0320 	orr.w	r3, r3, #32
 8000d34:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8000d36:	4b5c      	ldr	r3, [pc, #368]	; (8000ea8 <HW_TS_Init+0x1a4>)
 8000d38:	689b      	ldr	r3, [r3, #8]
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	f003 0307 	and.w	r3, r3, #7
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	f1c3 0304 	rsb	r3, r3, #4
 8000d46:	b2da      	uxtb	r2, r3
 8000d48:	4b58      	ldr	r3, [pc, #352]	; (8000eac <HW_TS_Init+0x1a8>)
 8000d4a:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8000d4c:	4b56      	ldr	r3, [pc, #344]	; (8000ea8 <HW_TS_Init+0x1a4>)
 8000d4e:	691b      	ldr	r3, [r3, #16]
 8000d50:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000d54:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8000d58:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	fa92 f2a2 	rbit	r2, r2
 8000d60:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d62:	68fa      	ldr	r2, [r7, #12]
 8000d64:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000d66:	697a      	ldr	r2, [r7, #20]
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	d101      	bne.n	8000d70 <HW_TS_Init+0x6c>
  {
    return 32U;
 8000d6c:	2220      	movs	r2, #32
 8000d6e:	e003      	b.n	8000d78 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 8000d70:	697a      	ldr	r2, [r7, #20]
 8000d72:	fab2 f282 	clz	r2, r2
 8000d76:	b2d2      	uxtb	r2, r2
 8000d78:	40d3      	lsrs	r3, r2
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	b2da      	uxtb	r2, r3
 8000d80:	4b4b      	ldr	r3, [pc, #300]	; (8000eb0 <HW_TS_Init+0x1ac>)
 8000d82:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8000d84:	4b48      	ldr	r3, [pc, #288]	; (8000ea8 <HW_TS_Init+0x1a4>)
 8000d86:	691b      	ldr	r3, [r3, #16]
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	3301      	adds	r3, #1
 8000d92:	b29a      	uxth	r2, r3
 8000d94:	4b47      	ldr	r3, [pc, #284]	; (8000eb4 <HW_TS_Init+0x1b0>)
 8000d96:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8000d98:	4b46      	ldr	r3, [pc, #280]	; (8000eb4 <HW_TS_Init+0x1b0>)
 8000d9a:	881b      	ldrh	r3, [r3, #0]
 8000d9c:	3b01      	subs	r3, #1
 8000d9e:	4a44      	ldr	r2, [pc, #272]	; (8000eb0 <HW_TS_Init+0x1ac>)
 8000da0:	7812      	ldrb	r2, [r2, #0]
 8000da2:	fb02 f303 	mul.w	r3, r2, r3
 8000da6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8000daa:	4a40      	ldr	r2, [pc, #256]	; (8000eac <HW_TS_Init+0x1a8>)
 8000dac:	7812      	ldrb	r2, [r2, #0]
 8000dae:	40d3      	lsrs	r3, r2
 8000db0:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8000db2:	69bb      	ldr	r3, [r7, #24]
 8000db4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d904      	bls.n	8000dc6 <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8000dbc:	4b3e      	ldr	r3, [pc, #248]	; (8000eb8 <HW_TS_Init+0x1b4>)
 8000dbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dc2:	801a      	strh	r2, [r3, #0]
 8000dc4:	e003      	b.n	8000dce <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8000dc6:	69bb      	ldr	r3, [r7, #24]
 8000dc8:	b29a      	uxth	r2, r3
 8000dca:	4b3b      	ldr	r3, [pc, #236]	; (8000eb8 <HW_TS_Init+0x1b4>)
 8000dcc:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000dce:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000dd2:	f7ff fc55 	bl	8000680 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000dd6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000dda:	f7ff fc3d 	bl	8000658 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d143      	bne.n	8000e6c <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000de4:	4b35      	ldr	r3, [pc, #212]	; (8000ebc <HW_TS_Init+0x1b8>)
 8000de6:	2201      	movs	r2, #1
 8000de8:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000dea:	4b35      	ldr	r3, [pc, #212]	; (8000ec0 <HW_TS_Init+0x1bc>)
 8000dec:	f04f 32ff 	mov.w	r2, #4294967295
 8000df0:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000df2:	2300      	movs	r3, #0
 8000df4:	77fb      	strb	r3, [r7, #31]
 8000df6:	e00c      	b.n	8000e12 <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8000df8:	7ffa      	ldrb	r2, [r7, #31]
 8000dfa:	4932      	ldr	r1, [pc, #200]	; (8000ec4 <HW_TS_Init+0x1c0>)
 8000dfc:	4613      	mov	r3, r2
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	4413      	add	r3, r2
 8000e02:	00db      	lsls	r3, r3, #3
 8000e04:	440b      	add	r3, r1
 8000e06:	330c      	adds	r3, #12
 8000e08:	2200      	movs	r2, #0
 8000e0a:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000e0c:	7ffb      	ldrb	r3, [r7, #31]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	77fb      	strb	r3, [r7, #31]
 8000e12:	7ffb      	ldrb	r3, [r7, #31]
 8000e14:	2b05      	cmp	r3, #5
 8000e16:	d9ef      	bls.n	8000df8 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8000e18:	4b2b      	ldr	r3, [pc, #172]	; (8000ec8 <HW_TS_Init+0x1c4>)
 8000e1a:	2206      	movs	r2, #6
 8000e1c:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8000e1e:	4b21      	ldr	r3, [pc, #132]	; (8000ea4 <HW_TS_Init+0x1a0>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	689a      	ldr	r2, [r3, #8]
 8000e26:	4b1f      	ldr	r3, [pc, #124]	; (8000ea4 <HW_TS_Init+0x1a0>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e30:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8000e32:	4b1c      	ldr	r3, [pc, #112]	; (8000ea4 <HW_TS_Init+0x1a0>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	68db      	ldr	r3, [r3, #12]
 8000e3a:	b2da      	uxtb	r2, r3
 8000e3c:	4b19      	ldr	r3, [pc, #100]	; (8000ea4 <HW_TS_Init+0x1a0>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000e46:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8000e48:	4b20      	ldr	r3, [pc, #128]	; (8000ecc <HW_TS_Init+0x1c8>)
 8000e4a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000e4e:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8000e50:	2003      	movs	r0, #3
 8000e52:	f000 ffdc 	bl	8001e0e <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8000e56:	4b13      	ldr	r3, [pc, #76]	; (8000ea4 <HW_TS_Init+0x1a0>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	689a      	ldr	r2, [r3, #8]
 8000e5e:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <HW_TS_Init+0x1a0>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000e68:	609a      	str	r2, [r3, #8]
 8000e6a:	e00a      	b.n	8000e82 <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8000e6c:	4b0d      	ldr	r3, [pc, #52]	; (8000ea4 <HW_TS_Init+0x1a0>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d002      	beq.n	8000e82 <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000e7c:	2003      	movs	r0, #3
 8000e7e:	f000 ffb8 	bl	8001df2 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000e82:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <HW_TS_Init+0x1a0>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	22ff      	movs	r2, #255	; 0xff
 8000e8a:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2103      	movs	r1, #3
 8000e90:	2003      	movs	r0, #3
 8000e92:	f000 ff6c 	bl	8001d6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000e96:	2003      	movs	r0, #3
 8000e98:	f000 ff83 	bl	8001da2 <HAL_NVIC_EnableIRQ>

  return;
 8000e9c:	bf00      	nop
}
 8000e9e:	3720      	adds	r7, #32
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20000334 	.word	0x20000334
 8000ea8:	40002800 	.word	0x40002800
 8000eac:	20000338 	.word	0x20000338
 8000eb0:	20000339 	.word	0x20000339
 8000eb4:	2000033a 	.word	0x2000033a
 8000eb8:	2000033c 	.word	0x2000033c
 8000ebc:	20000238 	.word	0x20000238
 8000ec0:	20000234 	.word	0x20000234
 8000ec4:	200001a0 	.word	0x200001a0
 8000ec8:	20000230 	.word	0x20000230
 8000ecc:	58000800 	.word	0x58000800

08000ed0 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b08b      	sub	sp, #44	; 0x2c
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	603b      	str	r3, [r7, #0]
 8000edc:	4613      	mov	r3, r2
 8000ede:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000ee6:	f3ef 8310 	mrs	r3, PRIMASK
 8000eea:	61fb      	str	r3, [r7, #28]
  return(result);
 8000eec:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000eee:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8000ef0:	b672      	cpsid	i
}
 8000ef2:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8000ef4:	e004      	b.n	8000f00 <HW_TS_Create+0x30>
  {
    loop++;
 8000ef6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000efa:	3301      	adds	r3, #1
 8000efc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8000f00:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f04:	2b05      	cmp	r3, #5
 8000f06:	d80c      	bhi.n	8000f22 <HW_TS_Create+0x52>
 8000f08:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000f0c:	492c      	ldr	r1, [pc, #176]	; (8000fc0 <HW_TS_Create+0xf0>)
 8000f0e:	4613      	mov	r3, r2
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	4413      	add	r3, r2
 8000f14:	00db      	lsls	r3, r3, #3
 8000f16:	440b      	add	r3, r1
 8000f18:	330c      	adds	r3, #12
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d1e9      	bne.n	8000ef6 <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000f22:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f26:	2b06      	cmp	r3, #6
 8000f28:	d038      	beq.n	8000f9c <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8000f2a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000f2e:	4924      	ldr	r1, [pc, #144]	; (8000fc0 <HW_TS_Create+0xf0>)
 8000f30:	4613      	mov	r3, r2
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	4413      	add	r3, r2
 8000f36:	00db      	lsls	r3, r3, #3
 8000f38:	440b      	add	r3, r1
 8000f3a:	330c      	adds	r3, #12
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	701a      	strb	r2, [r3, #0]
 8000f40:	6a3b      	ldr	r3, [r7, #32]
 8000f42:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	f383 8810 	msr	PRIMASK, r3
}
 8000f4a:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8000f4c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000f50:	491b      	ldr	r1, [pc, #108]	; (8000fc0 <HW_TS_Create+0xf0>)
 8000f52:	4613      	mov	r3, r2
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	4413      	add	r3, r2
 8000f58:	00db      	lsls	r3, r3, #3
 8000f5a:	440b      	add	r3, r1
 8000f5c:	3310      	adds	r3, #16
 8000f5e:	68fa      	ldr	r2, [r7, #12]
 8000f60:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8000f62:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000f66:	4916      	ldr	r1, [pc, #88]	; (8000fc0 <HW_TS_Create+0xf0>)
 8000f68:	4613      	mov	r3, r2
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	4413      	add	r3, r2
 8000f6e:	00db      	lsls	r3, r3, #3
 8000f70:	440b      	add	r3, r1
 8000f72:	330d      	adds	r3, #13
 8000f74:	79fa      	ldrb	r2, [r7, #7]
 8000f76:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8000f78:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000f7c:	4910      	ldr	r1, [pc, #64]	; (8000fc0 <HW_TS_Create+0xf0>)
 8000f7e:	4613      	mov	r3, r2
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	4413      	add	r3, r2
 8000f84:	00db      	lsls	r3, r3, #3
 8000f86:	440b      	add	r3, r1
 8000f88:	683a      	ldr	r2, [r7, #0]
 8000f8a:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000f92:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8000f94:	2300      	movs	r3, #0
 8000f96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000f9a:	e008      	b.n	8000fae <HW_TS_Create+0xde>
 8000f9c:	6a3b      	ldr	r3, [r7, #32]
 8000f9e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	f383 8810 	msr	PRIMASK, r3
}
 8000fa6:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8000fae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	372c      	adds	r7, #44	; 0x2c
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	200001a0 	.word	0x200001a0

08000fc4 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000fce:	f3ef 8310 	mrs	r3, PRIMASK
 8000fd2:	60fb      	str	r3, [r7, #12]
  return(result);
 8000fd4:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000fd6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd8:	b672      	cpsid	i
}
 8000fda:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8000fdc:	2003      	movs	r0, #3
 8000fde:	f000 feee 	bl	8001dbe <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000fe2:	4b38      	ldr	r3, [pc, #224]	; (80010c4 <HW_TS_Stop+0x100>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	22ca      	movs	r2, #202	; 0xca
 8000fea:	625a      	str	r2, [r3, #36]	; 0x24
 8000fec:	4b35      	ldr	r3, [pc, #212]	; (80010c4 <HW_TS_Stop+0x100>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2253      	movs	r2, #83	; 0x53
 8000ff4:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8000ff6:	79fa      	ldrb	r2, [r7, #7]
 8000ff8:	4933      	ldr	r1, [pc, #204]	; (80010c8 <HW_TS_Stop+0x104>)
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	4413      	add	r3, r2
 8001000:	00db      	lsls	r3, r3, #3
 8001002:	440b      	add	r3, r1
 8001004:	330c      	adds	r3, #12
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2b02      	cmp	r3, #2
 800100c:	d148      	bne.n	80010a0 <HW_TS_Stop+0xdc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	2100      	movs	r1, #0
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff fcb6 	bl	8000984 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001018:	4b2c      	ldr	r3, [pc, #176]	; (80010cc <HW_TS_Stop+0x108>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800101e:	7cfb      	ldrb	r3, [r7, #19]
 8001020:	2b06      	cmp	r3, #6
 8001022:	d135      	bne.n	8001090 <HW_TS_Stop+0xcc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001024:	4b2a      	ldr	r3, [pc, #168]	; (80010d0 <HW_TS_Stop+0x10c>)
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800102c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001030:	d108      	bne.n	8001044 <HW_TS_Stop+0x80>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001032:	bf00      	nop
 8001034:	4b23      	ldr	r3, [pc, #140]	; (80010c4 <HW_TS_Stop+0x100>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	f003 0304 	and.w	r3, r3, #4
 8001040:	2b00      	cmp	r3, #0
 8001042:	d1f7      	bne.n	8001034 <HW_TS_Stop+0x70>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8001044:	4b1f      	ldr	r3, [pc, #124]	; (80010c4 <HW_TS_Stop+0x100>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	689a      	ldr	r2, [r3, #8]
 800104c:	4b1d      	ldr	r3, [pc, #116]	; (80010c4 <HW_TS_Stop+0x100>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001056:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001058:	bf00      	nop
 800105a:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <HW_TS_Stop+0x100>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	68db      	ldr	r3, [r3, #12]
 8001062:	f003 0304 	and.w	r3, r3, #4
 8001066:	2b00      	cmp	r3, #0
 8001068:	d0f7      	beq.n	800105a <HW_TS_Stop+0x96>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800106a:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <HW_TS_Stop+0x100>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	68db      	ldr	r3, [r3, #12]
 8001072:	b2da      	uxtb	r2, r3
 8001074:	4b13      	ldr	r3, [pc, #76]	; (80010c4 <HW_TS_Stop+0x100>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800107e:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001080:	4b14      	ldr	r3, [pc, #80]	; (80010d4 <HW_TS_Stop+0x110>)
 8001082:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001086:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001088:	2003      	movs	r0, #3
 800108a:	f000 fec0 	bl	8001e0e <HAL_NVIC_ClearPendingIRQ>
 800108e:	e007      	b.n	80010a0 <HW_TS_Stop+0xdc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001090:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <HW_TS_Stop+0x114>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	b2db      	uxtb	r3, r3
 8001096:	7cfa      	ldrb	r2, [r7, #19]
 8001098:	429a      	cmp	r2, r3
 800109a:	d001      	beq.n	80010a0 <HW_TS_Stop+0xdc>
    {
      RescheduleTimerList();
 800109c:	f7ff fd94 	bl	8000bc8 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80010a0:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <HW_TS_Stop+0x100>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	22ff      	movs	r2, #255	; 0xff
 80010a8:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80010aa:	2003      	movs	r0, #3
 80010ac:	f000 fe79 	bl	8001da2 <HAL_NVIC_EnableIRQ>
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	f383 8810 	msr	PRIMASK, r3
}
 80010ba:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80010bc:	bf00      	nop
}
 80010be:	3718      	adds	r7, #24
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000334 	.word	0x20000334
 80010c8:	200001a0 	.word	0x200001a0
 80010cc:	20000230 	.word	0x20000230
 80010d0:	40002800 	.word	0x40002800
 80010d4:	58000800 	.word	0x58000800
 80010d8:	20000231 	.word	0x20000231

080010dc <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	6039      	str	r1, [r7, #0]
 80010e6:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80010e8:	79fa      	ldrb	r2, [r7, #7]
 80010ea:	493c      	ldr	r1, [pc, #240]	; (80011dc <HW_TS_Start+0x100>)
 80010ec:	4613      	mov	r3, r2
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	4413      	add	r3, r2
 80010f2:	00db      	lsls	r3, r3, #3
 80010f4:	440b      	add	r3, r1
 80010f6:	330c      	adds	r3, #12
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d103      	bne.n	8001108 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff ff5e 	bl	8000fc4 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001108:	f3ef 8310 	mrs	r3, PRIMASK
 800110c:	60fb      	str	r3, [r7, #12]
  return(result);
 800110e:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001110:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001112:	b672      	cpsid	i
}
 8001114:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001116:	2003      	movs	r0, #3
 8001118:	f000 fe51 	bl	8001dbe <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800111c:	4b30      	ldr	r3, [pc, #192]	; (80011e0 <HW_TS_Start+0x104>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	22ca      	movs	r2, #202	; 0xca
 8001124:	625a      	str	r2, [r3, #36]	; 0x24
 8001126:	4b2e      	ldr	r3, [pc, #184]	; (80011e0 <HW_TS_Start+0x104>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2253      	movs	r2, #83	; 0x53
 800112e:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001130:	79fa      	ldrb	r2, [r7, #7]
 8001132:	492a      	ldr	r1, [pc, #168]	; (80011dc <HW_TS_Start+0x100>)
 8001134:	4613      	mov	r3, r2
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	4413      	add	r3, r2
 800113a:	00db      	lsls	r3, r3, #3
 800113c:	440b      	add	r3, r1
 800113e:	330c      	adds	r3, #12
 8001140:	2202      	movs	r2, #2
 8001142:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001144:	79fa      	ldrb	r2, [r7, #7]
 8001146:	4925      	ldr	r1, [pc, #148]	; (80011dc <HW_TS_Start+0x100>)
 8001148:	4613      	mov	r3, r2
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	4413      	add	r3, r2
 800114e:	00db      	lsls	r3, r3, #3
 8001150:	440b      	add	r3, r1
 8001152:	3308      	adds	r3, #8
 8001154:	683a      	ldr	r2, [r7, #0]
 8001156:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001158:	79fa      	ldrb	r2, [r7, #7]
 800115a:	4920      	ldr	r1, [pc, #128]	; (80011dc <HW_TS_Start+0x100>)
 800115c:	4613      	mov	r3, r2
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	4413      	add	r3, r2
 8001162:	00db      	lsls	r3, r3, #3
 8001164:	440b      	add	r3, r1
 8001166:	3304      	adds	r3, #4
 8001168:	683a      	ldr	r2, [r7, #0]
 800116a:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff fb5e 	bl	8000830 <linkTimer>
 8001174:	4603      	mov	r3, r0
 8001176:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001178:	4b1a      	ldr	r3, [pc, #104]	; (80011e4 <HW_TS_Start+0x108>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800117e:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <HW_TS_Start+0x10c>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	b2db      	uxtb	r3, r3
 8001184:	7c7a      	ldrb	r2, [r7, #17]
 8001186:	429a      	cmp	r2, r3
 8001188:	d002      	beq.n	8001190 <HW_TS_Start+0xb4>
  {
    RescheduleTimerList();
 800118a:	f7ff fd1d 	bl	8000bc8 <RescheduleTimerList>
 800118e:	e013      	b.n	80011b8 <HW_TS_Start+0xdc>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001190:	79fa      	ldrb	r2, [r7, #7]
 8001192:	4912      	ldr	r1, [pc, #72]	; (80011dc <HW_TS_Start+0x100>)
 8001194:	4613      	mov	r3, r2
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	4413      	add	r3, r2
 800119a:	00db      	lsls	r3, r3, #3
 800119c:	440b      	add	r3, r1
 800119e:	3308      	adds	r3, #8
 80011a0:	6819      	ldr	r1, [r3, #0]
 80011a2:	8a7b      	ldrh	r3, [r7, #18]
 80011a4:	79fa      	ldrb	r2, [r7, #7]
 80011a6:	1ac9      	subs	r1, r1, r3
 80011a8:	480c      	ldr	r0, [pc, #48]	; (80011dc <HW_TS_Start+0x100>)
 80011aa:	4613      	mov	r3, r2
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	4413      	add	r3, r2
 80011b0:	00db      	lsls	r3, r3, #3
 80011b2:	4403      	add	r3, r0
 80011b4:	3308      	adds	r3, #8
 80011b6:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80011b8:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <HW_TS_Start+0x104>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	22ff      	movs	r2, #255	; 0xff
 80011c0:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80011c2:	2003      	movs	r0, #3
 80011c4:	f000 fded 	bl	8001da2 <HAL_NVIC_EnableIRQ>
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	f383 8810 	msr	PRIMASK, r3
}
 80011d2:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80011d4:	bf00      	nop
}
 80011d6:	3718      	adds	r7, #24
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	200001a0 	.word	0x200001a0
 80011e0:	20000334 	.word	0x20000334
 80011e4:	20000230 	.word	0x20000230
 80011e8:	20000231 	.word	0x20000231

080011ec <LL_RCC_LSE_SetDriveCapability>:
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80011f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011fc:	f023 0218 	bic.w	r2, r3, #24
 8001200:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4313      	orrs	r3, r2
 8001208:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001224:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001226:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4313      	orrs	r3, r2
 800122e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001230:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001234:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4013      	ands	r3, r2
 800123a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800123c:	68fb      	ldr	r3, [r7, #12]
}
 800123e:	bf00      	nop
 8001240:	3714      	adds	r7, #20
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
	...

0800124c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001250:	f000 fba8 	bl	80019a4 <HAL_Init>

  /* USER CODE BEGIN Init */

  UTIL_SEQ_Init();
 8001254:	f00c fadc 	bl	800d810 <UTIL_SEQ_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001258:	f000 f82a 	bl	80012b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800125c:	f000 f9b2 	bl	80015c4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001260:	f000 f962 	bl	8001528 <MX_USART1_UART_Init>
  MX_RF_Init();
 8001264:	f000 f8d0 	bl	8001408 <MX_RF_Init>
  MX_RTC_Init();
 8001268:	f000 f8d6 	bl	8001418 <MX_RTC_Init>
  MX_TIM1_Init();
 800126c:	f000 f908 	bl	8001480 <MX_TIM1_Init>
  MX_USB_Device_Init();
 8001270:	f00b fd76 	bl	800cd60 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET); //LD1 is BLUE led
 8001274:	2201      	movs	r2, #1
 8001276:	2120      	movs	r1, #32
 8001278:	480c      	ldr	r0, [pc, #48]	; (80012ac <main+0x60>)
 800127a:	f000 ff47 	bl	800210c <HAL_GPIO_WritePin>
  	    HAL_Delay(20);
 800127e:	2014      	movs	r0, #20
 8001280:	f000 fc16 	bl	8001ab0 <HAL_Delay>
  	    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET); // LD2 is GREEN
 8001284:	2201      	movs	r2, #1
 8001286:	2101      	movs	r1, #1
 8001288:	4808      	ldr	r0, [pc, #32]	; (80012ac <main+0x60>)
 800128a:	f000 ff3f 	bl	800210c <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  APPE_Init();
 800128e:	f7ff f93f 	bl	8000510 <APPE_Init>
  //while (1)
  //{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  UTIL_SEQ_Run(~0);
 8001292:	f04f 30ff 	mov.w	r0, #4294967295
 8001296:	f00c faed 	bl	800d874 <UTIL_SEQ_Run>
	  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET); //LD1 is BLUE led
 800129a:	2200      	movs	r2, #0
 800129c:	2120      	movs	r1, #32
 800129e:	4803      	ldr	r0, [pc, #12]	; (80012ac <main+0x60>)
 80012a0:	f000 ff34 	bl	800210c <HAL_GPIO_WritePin>
 80012a4:	2300      	movs	r3, #0
 // }
  /* USER CODE END 3 */
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	48000400 	.word	0x48000400

080012b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b0ae      	sub	sp, #184	; 0xb8
 80012b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012b6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80012ba:	2248      	movs	r2, #72	; 0x48
 80012bc:	2100      	movs	r1, #0
 80012be:	4618      	mov	r0, r3
 80012c0:	f00c fd26 	bl	800dd10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
 80012d4:	615a      	str	r2, [r3, #20]
 80012d6:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012d8:	1d3b      	adds	r3, r7, #4
 80012da:	2250      	movs	r2, #80	; 0x50
 80012dc:	2100      	movs	r1, #0
 80012de:	4618      	mov	r0, r3
 80012e0:	f00c fd16 	bl	800dd10 <memset>

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80012e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80012f2:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 80012f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012f8:	68db      	ldr	r3, [r3, #12]
 80012fa:	f023 0303 	bic.w	r3, r3, #3
 80012fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001302:	f043 0301 	orr.w	r3, r3, #1
 8001306:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001308:	f002 fbd0 	bl	8003aac <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800130c:	2000      	movs	r0, #0
 800130e:	f7ff ff6d 	bl	80011ec <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001312:	4b3c      	ldr	r3, [pc, #240]	; (8001404 <SystemClock_Config+0x154>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800131a:	4a3a      	ldr	r2, [pc, #232]	; (8001404 <SystemClock_Config+0x154>)
 800131c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001320:	6013      	str	r3, [r2, #0]
 8001322:	4b38      	ldr	r3, [pc, #224]	; (8001404 <SystemClock_Config+0x154>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800132a:	603b      	str	r3, [r7, #0]
 800132c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800132e:	2327      	movs	r3, #39	; 0x27
 8001330:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001332:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001336:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001338:	2301      	movs	r3, #1
 800133a:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800133c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001340:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001342:	2301      	movs	r3, #1
 8001344:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001348:	2340      	movs	r3, #64	; 0x40
 800134a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800134e:	2300      	movs	r3, #0
 8001350:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001354:	2360      	movs	r3, #96	; 0x60
 8001356:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800135a:	2300      	movs	r3, #0
 800135c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001360:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001364:	4618      	mov	r0, r3
 8001366:	f002 ff45 	bl	80041f4 <HAL_RCC_OscConfig>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001370:	f000 f970 	bl	8001654 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001374:	236f      	movs	r3, #111	; 0x6f
 8001376:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001378:	2302      	movs	r3, #2
 800137a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800137c:	2300      	movs	r3, #0
 800137e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001380:	2300      	movs	r3, #0
 8001382:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001384:	2300      	movs	r3, #0
 8001386:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001388:	2300      	movs	r3, #0
 800138a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800138c:	2300      	movs	r3, #0
 800138e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001390:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001394:	2101      	movs	r1, #1
 8001396:	4618      	mov	r0, r3
 8001398:	f003 fab8 	bl	800490c <HAL_RCC_ClockConfig>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80013a2:	f000 f957 	bl	8001654 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 80013a6:	f643 1301 	movw	r3, #14593	; 0x3901
 80013aa:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 80013ac:	2318      	movs	r3, #24
 80013ae:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80013b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013b4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80013b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013ba:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80013bc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80013c0:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 80013c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013c6:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 80013c8:	2301      	movs	r3, #1
 80013ca:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80013cc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80013d0:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80013d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013d6:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80013d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013dc:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80013de:	2300      	movs	r3, #0
 80013e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013e6:	1d3b      	adds	r3, r7, #4
 80013e8:	4618      	mov	r0, r3
 80013ea:	f003 fedf 	bl	80051ac <HAL_RCCEx_PeriphCLKConfig>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <SystemClock_Config+0x148>
  {
    Error_Handler();
 80013f4:	f000 f92e 	bl	8001654 <Error_Handler>
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80013f8:	f004 f84e 	bl	8005498 <HAL_RCCEx_EnableMSIPLLMode>
}
 80013fc:	bf00      	nop
 80013fe:	37b8      	adds	r7, #184	; 0xb8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	58000400 	.word	0x58000400

08001408 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
	...

08001418 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800141c:	4b16      	ldr	r3, [pc, #88]	; (8001478 <MX_RTC_Init+0x60>)
 800141e:	4a17      	ldr	r2, [pc, #92]	; (800147c <MX_RTC_Init+0x64>)
 8001420:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001422:	4b15      	ldr	r3, [pc, #84]	; (8001478 <MX_RTC_Init+0x60>)
 8001424:	2200      	movs	r2, #0
 8001426:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001428:	4b13      	ldr	r3, [pc, #76]	; (8001478 <MX_RTC_Init+0x60>)
 800142a:	220f      	movs	r2, #15
 800142c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800142e:	4b12      	ldr	r3, [pc, #72]	; (8001478 <MX_RTC_Init+0x60>)
 8001430:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001434:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001436:	4b10      	ldr	r3, [pc, #64]	; (8001478 <MX_RTC_Init+0x60>)
 8001438:	2200      	movs	r2, #0
 800143a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800143c:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <MX_RTC_Init+0x60>)
 800143e:	2200      	movs	r2, #0
 8001440:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001442:	4b0d      	ldr	r3, [pc, #52]	; (8001478 <MX_RTC_Init+0x60>)
 8001444:	2200      	movs	r2, #0
 8001446:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001448:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <MX_RTC_Init+0x60>)
 800144a:	2200      	movs	r2, #0
 800144c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800144e:	480a      	ldr	r0, [pc, #40]	; (8001478 <MX_RTC_Init+0x60>)
 8001450:	f004 f939 	bl	80056c6 <HAL_RTC_Init>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_RTC_Init+0x46>
  {
    Error_Handler();
 800145a:	f000 f8fb 	bl	8001654 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800145e:	2200      	movs	r2, #0
 8001460:	2100      	movs	r1, #0
 8001462:	4805      	ldr	r0, [pc, #20]	; (8001478 <MX_RTC_Init+0x60>)
 8001464:	f004 fa1d 	bl	80058a2 <HAL_RTCEx_SetWakeUpTimer>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800146e:	f000 f8f1 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000710 	.word	0x20000710
 800147c:	40002800 	.word	0x40002800

08001480 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b088      	sub	sp, #32
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001486:	f107 0310 	add.w	r3, r7, #16
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	609a      	str	r2, [r3, #8]
 8001492:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001494:	1d3b      	adds	r3, r7, #4
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800149e:	4b20      	ldr	r3, [pc, #128]	; (8001520 <MX_TIM1_Init+0xa0>)
 80014a0:	4a20      	ldr	r2, [pc, #128]	; (8001524 <MX_TIM1_Init+0xa4>)
 80014a2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80014a4:	4b1e      	ldr	r3, [pc, #120]	; (8001520 <MX_TIM1_Init+0xa0>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014aa:	4b1d      	ldr	r3, [pc, #116]	; (8001520 <MX_TIM1_Init+0xa0>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80014b0:	4b1b      	ldr	r3, [pc, #108]	; (8001520 <MX_TIM1_Init+0xa0>)
 80014b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b8:	4b19      	ldr	r3, [pc, #100]	; (8001520 <MX_TIM1_Init+0xa0>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014be:	4b18      	ldr	r3, [pc, #96]	; (8001520 <MX_TIM1_Init+0xa0>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c4:	4b16      	ldr	r3, [pc, #88]	; (8001520 <MX_TIM1_Init+0xa0>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014ca:	4815      	ldr	r0, [pc, #84]	; (8001520 <MX_TIM1_Init+0xa0>)
 80014cc:	f004 fa84 	bl	80059d8 <HAL_TIM_Base_Init>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80014d6:	f000 f8bd 	bl	8001654 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014e0:	f107 0310 	add.w	r3, r7, #16
 80014e4:	4619      	mov	r1, r3
 80014e6:	480e      	ldr	r0, [pc, #56]	; (8001520 <MX_TIM1_Init+0xa0>)
 80014e8:	f004 facd 	bl	8005a86 <HAL_TIM_ConfigClockSource>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80014f2:	f000 f8af 	bl	8001654 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014f6:	2300      	movs	r3, #0
 80014f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014fa:	2300      	movs	r3, #0
 80014fc:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014fe:	2300      	movs	r3, #0
 8001500:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001502:	1d3b      	adds	r3, r7, #4
 8001504:	4619      	mov	r1, r3
 8001506:	4806      	ldr	r0, [pc, #24]	; (8001520 <MX_TIM1_Init+0xa0>)
 8001508:	f004 fc84 	bl	8005e14 <HAL_TIMEx_MasterConfigSynchronization>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001512:	f000 f89f 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001516:	bf00      	nop
 8001518:	3720      	adds	r7, #32
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20000734 	.word	0x20000734
 8001524:	40012c00 	.word	0x40012c00

08001528 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800152c:	4b23      	ldr	r3, [pc, #140]	; (80015bc <MX_USART1_UART_Init+0x94>)
 800152e:	4a24      	ldr	r2, [pc, #144]	; (80015c0 <MX_USART1_UART_Init+0x98>)
 8001530:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001532:	4b22      	ldr	r3, [pc, #136]	; (80015bc <MX_USART1_UART_Init+0x94>)
 8001534:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001538:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 800153a:	4b20      	ldr	r3, [pc, #128]	; (80015bc <MX_USART1_UART_Init+0x94>)
 800153c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001540:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001542:	4b1e      	ldr	r3, [pc, #120]	; (80015bc <MX_USART1_UART_Init+0x94>)
 8001544:	2200      	movs	r2, #0
 8001546:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001548:	4b1c      	ldr	r3, [pc, #112]	; (80015bc <MX_USART1_UART_Init+0x94>)
 800154a:	2200      	movs	r2, #0
 800154c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800154e:	4b1b      	ldr	r3, [pc, #108]	; (80015bc <MX_USART1_UART_Init+0x94>)
 8001550:	220c      	movs	r2, #12
 8001552:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001554:	4b19      	ldr	r3, [pc, #100]	; (80015bc <MX_USART1_UART_Init+0x94>)
 8001556:	2200      	movs	r2, #0
 8001558:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800155a:	4b18      	ldr	r3, [pc, #96]	; (80015bc <MX_USART1_UART_Init+0x94>)
 800155c:	2200      	movs	r2, #0
 800155e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001560:	4b16      	ldr	r3, [pc, #88]	; (80015bc <MX_USART1_UART_Init+0x94>)
 8001562:	2200      	movs	r2, #0
 8001564:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001566:	4b15      	ldr	r3, [pc, #84]	; (80015bc <MX_USART1_UART_Init+0x94>)
 8001568:	2200      	movs	r2, #0
 800156a:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800156c:	4b13      	ldr	r3, [pc, #76]	; (80015bc <MX_USART1_UART_Init+0x94>)
 800156e:	2200      	movs	r2, #0
 8001570:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001572:	4812      	ldr	r0, [pc, #72]	; (80015bc <MX_USART1_UART_Init+0x94>)
 8001574:	f004 fcce 	bl	8005f14 <HAL_UART_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800157e:	f000 f869 	bl	8001654 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001582:	2100      	movs	r1, #0
 8001584:	480d      	ldr	r0, [pc, #52]	; (80015bc <MX_USART1_UART_Init+0x94>)
 8001586:	f005 f8c1 	bl	800670c <HAL_UARTEx_SetTxFifoThreshold>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8001590:	f000 f860 	bl	8001654 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001594:	2100      	movs	r1, #0
 8001596:	4809      	ldr	r0, [pc, #36]	; (80015bc <MX_USART1_UART_Init+0x94>)
 8001598:	f005 f8f6 	bl	8006788 <HAL_UARTEx_SetRxFifoThreshold>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 80015a2:	f000 f857 	bl	8001654 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80015a6:	4805      	ldr	r0, [pc, #20]	; (80015bc <MX_USART1_UART_Init+0x94>)
 80015a8:	f005 f877 	bl	800669a <HAL_UARTEx_DisableFifoMode>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 80015b2:	f000 f84f 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20000680 	.word	0x20000680
 80015c0:	40013800 	.word	0x40013800

080015c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ca:	1d3b      	adds	r3, r7, #4
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
 80015d6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015d8:	2004      	movs	r0, #4
 80015da:	f7ff fe1d 	bl	8001218 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015de:	2002      	movs	r0, #2
 80015e0:	f7ff fe1a 	bl	8001218 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e4:	2001      	movs	r0, #1
 80015e6:	f7ff fe17 	bl	8001218 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ea:	2008      	movs	r0, #8
 80015ec:	f7ff fe14 	bl	8001218 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 80015f0:	2200      	movs	r2, #0
 80015f2:	2123      	movs	r1, #35	; 0x23
 80015f4:	4814      	ldr	r0, [pc, #80]	; (8001648 <MX_GPIO_Init+0x84>)
 80015f6:	f000 fd89 	bl	800210c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015fa:	2310      	movs	r3, #16
 80015fc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015fe:	2300      	movs	r3, #0
 8001600:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001606:	1d3b      	adds	r3, r7, #4
 8001608:	4619      	mov	r1, r3
 800160a:	4810      	ldr	r0, [pc, #64]	; (800164c <MX_GPIO_Init+0x88>)
 800160c:	f000 fc0e 	bl	8001e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8001610:	2323      	movs	r3, #35	; 0x23
 8001612:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001614:	2301      	movs	r3, #1
 8001616:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161c:	2300      	movs	r3, #0
 800161e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001620:	1d3b      	adds	r3, r7, #4
 8001622:	4619      	mov	r1, r3
 8001624:	4808      	ldr	r0, [pc, #32]	; (8001648 <MX_GPIO_Init+0x84>)
 8001626:	f000 fc01 	bl	8001e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 800162a:	2303      	movs	r3, #3
 800162c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800162e:	2300      	movs	r3, #0
 8001630:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001636:	1d3b      	adds	r3, r7, #4
 8001638:	4619      	mov	r1, r3
 800163a:	4805      	ldr	r0, [pc, #20]	; (8001650 <MX_GPIO_Init+0x8c>)
 800163c:	f000 fbf6 	bl	8001e2c <HAL_GPIO_Init>

}
 8001640:	bf00      	nop
 8001642:	3718      	adds	r7, #24
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	48000400 	.word	0x48000400
 800164c:	48000800 	.word	0x48000800
 8001650:	48000c00 	.word	0x48000c00

08001654 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001658:	b672      	cpsid	i
}
 800165a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800165c:	e7fe      	b.n	800165c <Error_Handler+0x8>

0800165e <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800166a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800166e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001672:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001676:	bf00      	nop
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <LL_AHB2_GRP1_EnableClock>:
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001688:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800168c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800168e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4313      	orrs	r3, r2
 8001696:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001698:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800169c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4013      	ands	r3, r2
 80016a2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016a4:	68fb      	ldr	r3, [r7, #12]
}
 80016a6:	bf00      	nop
 80016a8:	3714      	adds	r7, #20
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr

080016b2 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80016b2:	b480      	push	{r7}
 80016b4:	b085      	sub	sp, #20
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80016ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80016ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4013      	ands	r3, r2
 80016d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016d6:	68fb      	ldr	r3, [r7, #12]
}
 80016d8:	bf00      	nop
 80016da:	3714      	adds	r7, #20
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80016ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80016f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80016fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001700:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4013      	ands	r3, r2
 8001706:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001708:	68fb      	ldr	r3, [r7, #12]
}
 800170a:	bf00      	nop
 800170c:	3714      	adds	r7, #20
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001716:	b480      	push	{r7}
 8001718:	b085      	sub	sp, #20
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800171e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001722:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001724:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4313      	orrs	r3, r2
 800172c:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800172e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001732:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	4013      	ands	r3, r2
 8001738:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800173a:	68fb      	ldr	r3, [r7, #12]
}
 800173c:	bf00      	nop
 800173e:	3714      	adds	r7, #20
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800174c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001750:	f7ff ffaf 	bl	80016b2 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8001754:	2200      	movs	r2, #0
 8001756:	2100      	movs	r1, #0
 8001758:	202e      	movs	r0, #46	; 0x2e
 800175a:	f000 fb08 	bl	8001d6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 800175e:	202e      	movs	r0, #46	; 0x2e
 8001760:	f000 fb1f 	bl	8001da2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001764:	bf00      	nop
 8001766:	bd80      	pop	{r7, pc}

08001768 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a06      	ldr	r2, [pc, #24]	; (8001790 <HAL_RTC_MspInit+0x28>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d105      	bne.n	8001786 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800177a:	f7ff ff70 	bl	800165e <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800177e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001782:	f7ff ffaf 	bl	80016e4 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001786:	bf00      	nop
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40002800 	.word	0x40002800

08001794 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a05      	ldr	r2, [pc, #20]	; (80017b8 <HAL_TIM_Base_MspInit+0x24>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d103      	bne.n	80017ae <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017a6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80017aa:	f7ff ffb4 	bl	8001716 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40012c00 	.word	0x40012c00

080017bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b088      	sub	sp, #32
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c4:	f107 030c 	add.w	r3, r7, #12
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a0e      	ldr	r2, [pc, #56]	; (8001814 <HAL_UART_MspInit+0x58>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d116      	bne.n	800180c <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017de:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80017e2:	f7ff ff98 	bl	8001716 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e6:	2002      	movs	r0, #2
 80017e8:	f7ff ff4a 	bl	8001680 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80017ec:	23c0      	movs	r3, #192	; 0xc0
 80017ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f0:	2302      	movs	r3, #2
 80017f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017f4:	2301      	movs	r3, #1
 80017f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f8:	2300      	movs	r3, #0
 80017fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017fc:	2307      	movs	r3, #7
 80017fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001800:	f107 030c 	add.w	r3, r7, #12
 8001804:	4619      	mov	r1, r3
 8001806:	4804      	ldr	r0, [pc, #16]	; (8001818 <HAL_UART_MspInit+0x5c>)
 8001808:	f000 fb10 	bl	8001e2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800180c:	bf00      	nop
 800180e:	3720      	adds	r7, #32
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40013800 	.word	0x40013800
 8001818:	48000400 	.word	0x48000400

0800181c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001820:	e7fe      	b.n	8001820 <NMI_Handler+0x4>

08001822 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001826:	e7fe      	b.n	8001826 <HardFault_Handler+0x4>

08001828 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800182c:	e7fe      	b.n	800182c <MemManage_Handler+0x4>

0800182e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001832:	e7fe      	b.n	8001832 <BusFault_Handler+0x4>

08001834 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001838:	e7fe      	b.n	8001838 <UsageFault_Handler+0x4>

0800183a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800183a:	b480      	push	{r7}
 800183c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800183e:	bf00      	nop
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001868:	f000 f8f6 	bl	8001a58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}

08001870 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001874:	4802      	ldr	r0, [pc, #8]	; (8001880 <USB_LP_IRQHandler+0x10>)
 8001876:	f000 fd8c 	bl	8002392 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	20001c58 	.word	0x20001c58

08001884 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001888:	f000 fc58 	bl	800213c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 800188c:	bf00      	nop
 800188e:	bd80      	pop	{r7, pc}

08001890 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8001894:	4b24      	ldr	r3, [pc, #144]	; (8001928 <SystemInit+0x98>)
 8001896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800189a:	4a23      	ldr	r2, [pc, #140]	; (8001928 <SystemInit+0x98>)
 800189c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80018a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018ae:	f043 0301 	orr.w	r3, r3, #1
 80018b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80018b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018b8:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80018bc:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80018be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018c8:	4b18      	ldr	r3, [pc, #96]	; (800192c <SystemInit+0x9c>)
 80018ca:	4013      	ands	r3, r2
 80018cc:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80018ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018da:	f023 0305 	bic.w	r3, r3, #5
 80018de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80018e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018ee:	f023 0301 	bic.w	r3, r3, #1
 80018f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80018f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018fa:	4a0d      	ldr	r2, [pc, #52]	; (8001930 <SystemInit+0xa0>)
 80018fc:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80018fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001902:	4a0b      	ldr	r2, [pc, #44]	; (8001930 <SystemInit+0xa0>)
 8001904:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001906:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001910:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001914:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001916:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800191a:	2200      	movs	r2, #0
 800191c:	619a      	str	r2, [r3, #24]
}
 800191e:	bf00      	nop
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	e000ed00 	.word	0xe000ed00
 800192c:	faf6fefb 	.word	0xfaf6fefb
 8001930:	22041000 	.word	0x22041000

08001934 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001934:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001936:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001938:	3304      	adds	r3, #4

0800193a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800193a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800193c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800193e:	d3f9      	bcc.n	8001934 <CopyDataInit>
  bx lr
 8001940:	4770      	bx	lr

08001942 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001942:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001944:	3004      	adds	r0, #4

08001946 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001946:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001948:	d3fb      	bcc.n	8001942 <FillZerobss>
  bx lr
 800194a:	4770      	bx	lr

0800194c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800194c:	480c      	ldr	r0, [pc, #48]	; (8001980 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800194e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001950:	f7ff ff9e 	bl	8001890 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001954:	480b      	ldr	r0, [pc, #44]	; (8001984 <LoopForever+0x8>)
 8001956:	490c      	ldr	r1, [pc, #48]	; (8001988 <LoopForever+0xc>)
 8001958:	4a0c      	ldr	r2, [pc, #48]	; (800198c <LoopForever+0x10>)
 800195a:	2300      	movs	r3, #0
 800195c:	f7ff ffed 	bl	800193a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001960:	480b      	ldr	r0, [pc, #44]	; (8001990 <LoopForever+0x14>)
 8001962:	490c      	ldr	r1, [pc, #48]	; (8001994 <LoopForever+0x18>)
 8001964:	2300      	movs	r3, #0
 8001966:	f7ff ffee 	bl	8001946 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800196a:	480b      	ldr	r0, [pc, #44]	; (8001998 <LoopForever+0x1c>)
 800196c:	490b      	ldr	r1, [pc, #44]	; (800199c <LoopForever+0x20>)
 800196e:	2300      	movs	r3, #0
 8001970:	f7ff ffe9 	bl	8001946 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001974:	f00c f99a 	bl	800dcac <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001978:	f7ff fc68 	bl	800124c <main>

0800197c <LoopForever>:

LoopForever:
  b LoopForever
 800197c:	e7fe      	b.n	800197c <LoopForever>
 800197e:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001980:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001984:	20000004 	.word	0x20000004
 8001988:	200001a0 	.word	0x200001a0
 800198c:	0800e028 	.word	0x0800e028
  INIT_BSS _sbss, _ebss
 8001990:	20000318 	.word	0x20000318
 8001994:	20001f4c 	.word	0x20001f4c
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001998:	200301e0 	.word	0x200301e0
 800199c:	20030a57 	.word	0x20030a57

080019a0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019a0:	e7fe      	b.n	80019a0 <ADC1_IRQHandler>
	...

080019a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019aa:	2300      	movs	r3, #0
 80019ac:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019ae:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <HAL_Init+0x3c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a0b      	ldr	r2, [pc, #44]	; (80019e0 <HAL_Init+0x3c>)
 80019b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019b8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019ba:	2003      	movs	r0, #3
 80019bc:	f000 f9cc 	bl	8001d58 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019c0:	2000      	movs	r0, #0
 80019c2:	f000 f80f 	bl	80019e4 <HAL_InitTick>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d002      	beq.n	80019d2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	71fb      	strb	r3, [r7, #7]
 80019d0:	e001      	b.n	80019d6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019d2:	f7ff feb9 	bl	8001748 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019d6:	79fb      	ldrb	r3, [r7, #7]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	58004000 	.word	0x58004000

080019e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019ec:	2300      	movs	r3, #0
 80019ee:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80019f0:	4b17      	ldr	r3, [pc, #92]	; (8001a50 <HAL_InitTick+0x6c>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d024      	beq.n	8001a42 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 80019f8:	f003 f934 	bl	8004c64 <HAL_RCC_GetHCLKFreq>
 80019fc:	4602      	mov	r2, r0
 80019fe:	4b14      	ldr	r3, [pc, #80]	; (8001a50 <HAL_InitTick+0x6c>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	4619      	mov	r1, r3
 8001a04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a08:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a10:	4618      	mov	r0, r3
 8001a12:	f000 f9e2 	bl	8001dda <HAL_SYSTICK_Config>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d10f      	bne.n	8001a3c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2b0f      	cmp	r3, #15
 8001a20:	d809      	bhi.n	8001a36 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a22:	2200      	movs	r2, #0
 8001a24:	6879      	ldr	r1, [r7, #4]
 8001a26:	f04f 30ff 	mov.w	r0, #4294967295
 8001a2a:	f000 f9a0 	bl	8001d6e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a2e:	4a09      	ldr	r2, [pc, #36]	; (8001a54 <HAL_InitTick+0x70>)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6013      	str	r3, [r2, #0]
 8001a34:	e007      	b.n	8001a46 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	73fb      	strb	r3, [r7, #15]
 8001a3a:	e004      	b.n	8001a46 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	73fb      	strb	r3, [r7, #15]
 8001a40:	e001      	b.n	8001a46 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3710      	adds	r7, #16
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	2000000c 	.word	0x2000000c
 8001a54:	20000008 	.word	0x20000008

08001a58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a5c:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <HAL_IncTick+0x20>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	461a      	mov	r2, r3
 8001a62:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <HAL_IncTick+0x24>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4413      	add	r3, r2
 8001a68:	4a04      	ldr	r2, [pc, #16]	; (8001a7c <HAL_IncTick+0x24>)
 8001a6a:	6013      	str	r3, [r2, #0]
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	2000000c 	.word	0x2000000c
 8001a7c:	20000780 	.word	0x20000780

08001a80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  return uwTick;
 8001a84:	4b03      	ldr	r3, [pc, #12]	; (8001a94 <HAL_GetTick+0x14>)
 8001a86:	681b      	ldr	r3, [r3, #0]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	20000780 	.word	0x20000780

08001a98 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001a9c:	4b03      	ldr	r3, [pc, #12]	; (8001aac <HAL_GetTickPrio+0x14>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	20000008 	.word	0x20000008

08001ab0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8001ab8:	f7ff ffe2 	bl	8001a80 <HAL_GetTick>
 8001abc:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ac8:	d005      	beq.n	8001ad6 <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 8001aca:	4b0a      	ldr	r3, [pc, #40]	; (8001af4 <HAL_Delay+0x44>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	461a      	mov	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8001ad6:	bf00      	nop
 8001ad8:	f7ff ffd2 	bl	8001a80 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d8f7      	bhi.n	8001ad8 <HAL_Delay+0x28>
    {
    }
  }
 8001ae8:	bf00      	nop
 8001aea:	bf00      	nop
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	2000000c 	.word	0x2000000c

08001af8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f003 0307 	and.w	r3, r3, #7
 8001b06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b08:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <__NVIC_SetPriorityGrouping+0x44>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b0e:	68ba      	ldr	r2, [r7, #8]
 8001b10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b14:	4013      	ands	r3, r2
 8001b16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b2a:	4a04      	ldr	r2, [pc, #16]	; (8001b3c <__NVIC_SetPriorityGrouping+0x44>)
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	60d3      	str	r3, [r2, #12]
}
 8001b30:	bf00      	nop
 8001b32:	3714      	adds	r7, #20
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	e000ed00 	.word	0xe000ed00

08001b40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b44:	4b04      	ldr	r3, [pc, #16]	; (8001b58 <__NVIC_GetPriorityGrouping+0x18>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	0a1b      	lsrs	r3, r3, #8
 8001b4a:	f003 0307 	and.w	r3, r3, #7
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	db0b      	blt.n	8001b86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b6e:	79fb      	ldrb	r3, [r7, #7]
 8001b70:	f003 021f 	and.w	r2, r3, #31
 8001b74:	4907      	ldr	r1, [pc, #28]	; (8001b94 <__NVIC_EnableIRQ+0x38>)
 8001b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7a:	095b      	lsrs	r3, r3, #5
 8001b7c:	2001      	movs	r0, #1
 8001b7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	e000e100 	.word	0xe000e100

08001b98 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	db12      	blt.n	8001bd0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	f003 021f 	and.w	r2, r3, #31
 8001bb0:	490a      	ldr	r1, [pc, #40]	; (8001bdc <__NVIC_DisableIRQ+0x44>)
 8001bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb6:	095b      	lsrs	r3, r3, #5
 8001bb8:	2001      	movs	r0, #1
 8001bba:	fa00 f202 	lsl.w	r2, r0, r2
 8001bbe:	3320      	adds	r3, #32
 8001bc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001bc4:	f3bf 8f4f 	dsb	sy
}
 8001bc8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bca:	f3bf 8f6f 	isb	sy
}
 8001bce:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	e000e100 	.word	0xe000e100

08001be0 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	db0c      	blt.n	8001c0c <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
 8001bf4:	f003 021f 	and.w	r2, r3, #31
 8001bf8:	4907      	ldr	r1, [pc, #28]	; (8001c18 <__NVIC_SetPendingIRQ+0x38>)
 8001bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfe:	095b      	lsrs	r3, r3, #5
 8001c00:	2001      	movs	r0, #1
 8001c02:	fa00 f202 	lsl.w	r2, r0, r2
 8001c06:	3340      	adds	r3, #64	; 0x40
 8001c08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	e000e100 	.word	0xe000e100

08001c1c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	db0c      	blt.n	8001c48 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c2e:	79fb      	ldrb	r3, [r7, #7]
 8001c30:	f003 021f 	and.w	r2, r3, #31
 8001c34:	4907      	ldr	r1, [pc, #28]	; (8001c54 <__NVIC_ClearPendingIRQ+0x38>)
 8001c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3a:	095b      	lsrs	r3, r3, #5
 8001c3c:	2001      	movs	r0, #1
 8001c3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c42:	3360      	adds	r3, #96	; 0x60
 8001c44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c48:	bf00      	nop
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	e000e100 	.word	0xe000e100

08001c58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	6039      	str	r1, [r7, #0]
 8001c62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	db0a      	blt.n	8001c82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	b2da      	uxtb	r2, r3
 8001c70:	490c      	ldr	r1, [pc, #48]	; (8001ca4 <__NVIC_SetPriority+0x4c>)
 8001c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c76:	0112      	lsls	r2, r2, #4
 8001c78:	b2d2      	uxtb	r2, r2
 8001c7a:	440b      	add	r3, r1
 8001c7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c80:	e00a      	b.n	8001c98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	b2da      	uxtb	r2, r3
 8001c86:	4908      	ldr	r1, [pc, #32]	; (8001ca8 <__NVIC_SetPriority+0x50>)
 8001c88:	79fb      	ldrb	r3, [r7, #7]
 8001c8a:	f003 030f 	and.w	r3, r3, #15
 8001c8e:	3b04      	subs	r3, #4
 8001c90:	0112      	lsls	r2, r2, #4
 8001c92:	b2d2      	uxtb	r2, r2
 8001c94:	440b      	add	r3, r1
 8001c96:	761a      	strb	r2, [r3, #24]
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	e000e100 	.word	0xe000e100
 8001ca8:	e000ed00 	.word	0xe000ed00

08001cac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b089      	sub	sp, #36	; 0x24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	f1c3 0307 	rsb	r3, r3, #7
 8001cc6:	2b04      	cmp	r3, #4
 8001cc8:	bf28      	it	cs
 8001cca:	2304      	movcs	r3, #4
 8001ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	3304      	adds	r3, #4
 8001cd2:	2b06      	cmp	r3, #6
 8001cd4:	d902      	bls.n	8001cdc <NVIC_EncodePriority+0x30>
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	3b03      	subs	r3, #3
 8001cda:	e000      	b.n	8001cde <NVIC_EncodePriority+0x32>
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	43da      	mvns	r2, r3
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	401a      	ands	r2, r3
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfe:	43d9      	mvns	r1, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d04:	4313      	orrs	r3, r2
         );
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3724      	adds	r7, #36	; 0x24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
	...

08001d14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d24:	d301      	bcc.n	8001d2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d26:	2301      	movs	r3, #1
 8001d28:	e00f      	b.n	8001d4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d2a:	4a0a      	ldr	r2, [pc, #40]	; (8001d54 <SysTick_Config+0x40>)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d32:	210f      	movs	r1, #15
 8001d34:	f04f 30ff 	mov.w	r0, #4294967295
 8001d38:	f7ff ff8e 	bl	8001c58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d3c:	4b05      	ldr	r3, [pc, #20]	; (8001d54 <SysTick_Config+0x40>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d42:	4b04      	ldr	r3, [pc, #16]	; (8001d54 <SysTick_Config+0x40>)
 8001d44:	2207      	movs	r2, #7
 8001d46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	e000e010 	.word	0xe000e010

08001d58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f7ff fec9 	bl	8001af8 <__NVIC_SetPriorityGrouping>
}
 8001d66:	bf00      	nop
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b086      	sub	sp, #24
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	4603      	mov	r3, r0
 8001d76:	60b9      	str	r1, [r7, #8]
 8001d78:	607a      	str	r2, [r7, #4]
 8001d7a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d7c:	f7ff fee0 	bl	8001b40 <__NVIC_GetPriorityGrouping>
 8001d80:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	68b9      	ldr	r1, [r7, #8]
 8001d86:	6978      	ldr	r0, [r7, #20]
 8001d88:	f7ff ff90 	bl	8001cac <NVIC_EncodePriority>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d92:	4611      	mov	r1, r2
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff ff5f 	bl	8001c58 <__NVIC_SetPriority>
}
 8001d9a:	bf00      	nop
 8001d9c:	3718      	adds	r7, #24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b082      	sub	sp, #8
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	4603      	mov	r3, r0
 8001daa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff fed3 	bl	8001b5c <__NVIC_EnableIRQ>
}
 8001db6:	bf00      	nop
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b082      	sub	sp, #8
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff fee3 	bl	8001b98 <__NVIC_DisableIRQ>
}
 8001dd2:	bf00      	nop
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b082      	sub	sp, #8
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7ff ff96 	bl	8001d14 <SysTick_Config>
 8001de8:	4603      	mov	r3, r0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b082      	sub	sp, #8
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	4603      	mov	r3, r0
 8001dfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8001dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff feed 	bl	8001be0 <__NVIC_SetPendingIRQ>
}
 8001e06:	bf00      	nop
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b082      	sub	sp, #8
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	4603      	mov	r3, r0
 8001e16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8001e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff fefd 	bl	8001c1c <__NVIC_ClearPendingIRQ>
}
 8001e22:	bf00      	nop
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
	...

08001e2c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b087      	sub	sp, #28
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e36:	2300      	movs	r3, #0
 8001e38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e3a:	e14c      	b.n	80020d6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	2101      	movs	r1, #1
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	fa01 f303 	lsl.w	r3, r1, r3
 8001e48:	4013      	ands	r3, r2
 8001e4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f000 813e 	beq.w	80020d0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d00b      	beq.n	8001e74 <HAL_GPIO_Init+0x48>
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d007      	beq.n	8001e74 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e68:	2b11      	cmp	r3, #17
 8001e6a:	d003      	beq.n	8001e74 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	2b12      	cmp	r3, #18
 8001e72:	d130      	bne.n	8001ed6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	2203      	movs	r2, #3
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	43db      	mvns	r3, r3
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	68da      	ldr	r2, [r3, #12]
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001eaa:	2201      	movs	r2, #1
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	091b      	lsrs	r3, r3, #4
 8001ec0:	f003 0201 	and.w	r2, r3, #1
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	2203      	movs	r2, #3
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	4013      	ands	r3, r2
 8001eec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	689a      	ldr	r2, [r3, #8]
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d003      	beq.n	8001f16 <HAL_GPIO_Init+0xea>
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	2b12      	cmp	r3, #18
 8001f14:	d123      	bne.n	8001f5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	08da      	lsrs	r2, r3, #3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	3208      	adds	r2, #8
 8001f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	f003 0307 	and.w	r3, r3, #7
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	220f      	movs	r2, #15
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	43db      	mvns	r3, r3
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	4013      	ands	r3, r2
 8001f38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	691a      	ldr	r2, [r3, #16]
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	f003 0307 	and.w	r3, r3, #7
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	08da      	lsrs	r2, r3, #3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3208      	adds	r2, #8
 8001f58:	6939      	ldr	r1, [r7, #16]
 8001f5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	2203      	movs	r2, #3
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	4013      	ands	r3, r2
 8001f74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f003 0203 	and.w	r2, r3, #3
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f000 8098 	beq.w	80020d0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001fa0:	4a54      	ldr	r2, [pc, #336]	; (80020f4 <HAL_GPIO_Init+0x2c8>)
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	089b      	lsrs	r3, r3, #2
 8001fa6:	3302      	adds	r3, #2
 8001fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	f003 0303 	and.w	r3, r3, #3
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	220f      	movs	r2, #15
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001fca:	d019      	beq.n	8002000 <HAL_GPIO_Init+0x1d4>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a4a      	ldr	r2, [pc, #296]	; (80020f8 <HAL_GPIO_Init+0x2cc>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d013      	beq.n	8001ffc <HAL_GPIO_Init+0x1d0>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a49      	ldr	r2, [pc, #292]	; (80020fc <HAL_GPIO_Init+0x2d0>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d00d      	beq.n	8001ff8 <HAL_GPIO_Init+0x1cc>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a48      	ldr	r2, [pc, #288]	; (8002100 <HAL_GPIO_Init+0x2d4>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d007      	beq.n	8001ff4 <HAL_GPIO_Init+0x1c8>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a47      	ldr	r2, [pc, #284]	; (8002104 <HAL_GPIO_Init+0x2d8>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d101      	bne.n	8001ff0 <HAL_GPIO_Init+0x1c4>
 8001fec:	2304      	movs	r3, #4
 8001fee:	e008      	b.n	8002002 <HAL_GPIO_Init+0x1d6>
 8001ff0:	2307      	movs	r3, #7
 8001ff2:	e006      	b.n	8002002 <HAL_GPIO_Init+0x1d6>
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e004      	b.n	8002002 <HAL_GPIO_Init+0x1d6>
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	e002      	b.n	8002002 <HAL_GPIO_Init+0x1d6>
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e000      	b.n	8002002 <HAL_GPIO_Init+0x1d6>
 8002000:	2300      	movs	r3, #0
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	f002 0203 	and.w	r2, r2, #3
 8002008:	0092      	lsls	r2, r2, #2
 800200a:	4093      	lsls	r3, r2
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	4313      	orrs	r3, r2
 8002010:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002012:	4938      	ldr	r1, [pc, #224]	; (80020f4 <HAL_GPIO_Init+0x2c8>)
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	089b      	lsrs	r3, r3, #2
 8002018:	3302      	adds	r3, #2
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002020:	4b39      	ldr	r3, [pc, #228]	; (8002108 <HAL_GPIO_Init+0x2dc>)
 8002022:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002026:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	43db      	mvns	r3, r3
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	4013      	ands	r3, r2
 8002030:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d003      	beq.n	8002046 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	4313      	orrs	r3, r2
 8002044:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002046:	4a30      	ldr	r2, [pc, #192]	; (8002108 <HAL_GPIO_Init+0x2dc>)
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800204e:	4b2e      	ldr	r3, [pc, #184]	; (8002108 <HAL_GPIO_Init+0x2dc>)
 8002050:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002054:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	43db      	mvns	r3, r3
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	4013      	ands	r3, r2
 800205e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d003      	beq.n	8002074 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	4313      	orrs	r3, r2
 8002072:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002074:	4a24      	ldr	r2, [pc, #144]	; (8002108 <HAL_GPIO_Init+0x2dc>)
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800207c:	4b22      	ldr	r3, [pc, #136]	; (8002108 <HAL_GPIO_Init+0x2dc>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	43db      	mvns	r3, r3
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	4013      	ands	r3, r2
 800208a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d003      	beq.n	80020a0 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	4313      	orrs	r3, r2
 800209e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020a0:	4a19      	ldr	r2, [pc, #100]	; (8002108 <HAL_GPIO_Init+0x2dc>)
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80020a6:	4b18      	ldr	r3, [pc, #96]	; (8002108 <HAL_GPIO_Init+0x2dc>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	43db      	mvns	r3, r3
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	4013      	ands	r3, r2
 80020b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d003      	beq.n	80020ca <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020ca:	4a0f      	ldr	r2, [pc, #60]	; (8002108 <HAL_GPIO_Init+0x2dc>)
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	3301      	adds	r3, #1
 80020d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	fa22 f303 	lsr.w	r3, r2, r3
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f47f aeab 	bne.w	8001e3c <HAL_GPIO_Init+0x10>
  }
}
 80020e6:	bf00      	nop
 80020e8:	bf00      	nop
 80020ea:	371c      	adds	r7, #28
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	40010000 	.word	0x40010000
 80020f8:	48000400 	.word	0x48000400
 80020fc:	48000800 	.word	0x48000800
 8002100:	48000c00 	.word	0x48000c00
 8002104:	48001000 	.word	0x48001000
 8002108:	58000800 	.word	0x58000800

0800210c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	460b      	mov	r3, r1
 8002116:	807b      	strh	r3, [r7, #2]
 8002118:	4613      	mov	r3, r2
 800211a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800211c:	787b      	ldrb	r3, [r7, #1]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002122:	887a      	ldrh	r2, [r7, #2]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002128:	e002      	b.n	8002130 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800212a:	887a      	ldrh	r2, [r7, #2]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8002142:	4b0a      	ldr	r3, [pc, #40]	; (800216c <HAL_HSEM_IRQHandler+0x30>)
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8002148:	4b08      	ldr	r3, [pc, #32]	; (800216c <HAL_HSEM_IRQHandler+0x30>)
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	43db      	mvns	r3, r3
 8002150:	4906      	ldr	r1, [pc, #24]	; (800216c <HAL_HSEM_IRQHandler+0x30>)
 8002152:	4013      	ands	r3, r2
 8002154:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8002156:	4a05      	ldr	r2, [pc, #20]	; (800216c <HAL_HSEM_IRQHandler+0x30>)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f000 f807 	bl	8002170 <HAL_HSEM_FreeCallback>
}
 8002162:	bf00      	nop
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	58001500 	.word	0x58001500

08002170 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002186:	b08b      	sub	sp, #44	; 0x2c
 8002188:	af06      	add	r7, sp, #24
 800218a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e0d7      	b.n	8002346 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d106      	bne.n	80021b0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f00a ffea 	bl	800d184 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2203      	movs	r2, #3
 80021b4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4618      	mov	r0, r3
 80021be:	f004 fb86 	bl	80068ce <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021c2:	2300      	movs	r3, #0
 80021c4:	73fb      	strb	r3, [r7, #15]
 80021c6:	e04c      	b.n	8002262 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80021c8:	7bfb      	ldrb	r3, [r7, #15]
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	1c5a      	adds	r2, r3, #1
 80021ce:	4613      	mov	r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	4413      	add	r3, r2
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	440b      	add	r3, r1
 80021d8:	3301      	adds	r3, #1
 80021da:	2201      	movs	r2, #1
 80021dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80021de:	7bfb      	ldrb	r3, [r7, #15]
 80021e0:	6879      	ldr	r1, [r7, #4]
 80021e2:	1c5a      	adds	r2, r3, #1
 80021e4:	4613      	mov	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	4413      	add	r3, r2
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	440b      	add	r3, r1
 80021ee:	7bfa      	ldrb	r2, [r7, #15]
 80021f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80021f2:	7bfa      	ldrb	r2, [r7, #15]
 80021f4:	7bfb      	ldrb	r3, [r7, #15]
 80021f6:	b298      	uxth	r0, r3
 80021f8:	6879      	ldr	r1, [r7, #4]
 80021fa:	4613      	mov	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4413      	add	r3, r2
 8002200:	00db      	lsls	r3, r3, #3
 8002202:	440b      	add	r3, r1
 8002204:	3336      	adds	r3, #54	; 0x36
 8002206:	4602      	mov	r2, r0
 8002208:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800220a:	7bfb      	ldrb	r3, [r7, #15]
 800220c:	6879      	ldr	r1, [r7, #4]
 800220e:	1c5a      	adds	r2, r3, #1
 8002210:	4613      	mov	r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	4413      	add	r3, r2
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	440b      	add	r3, r1
 800221a:	3303      	adds	r3, #3
 800221c:	2200      	movs	r2, #0
 800221e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002220:	7bfa      	ldrb	r2, [r7, #15]
 8002222:	6879      	ldr	r1, [r7, #4]
 8002224:	4613      	mov	r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4413      	add	r3, r2
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	440b      	add	r3, r1
 800222e:	3338      	adds	r3, #56	; 0x38
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002234:	7bfa      	ldrb	r2, [r7, #15]
 8002236:	6879      	ldr	r1, [r7, #4]
 8002238:	4613      	mov	r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	4413      	add	r3, r2
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	440b      	add	r3, r1
 8002242:	333c      	adds	r3, #60	; 0x3c
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002248:	7bfa      	ldrb	r2, [r7, #15]
 800224a:	6879      	ldr	r1, [r7, #4]
 800224c:	4613      	mov	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	4413      	add	r3, r2
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	440b      	add	r3, r1
 8002256:	3340      	adds	r3, #64	; 0x40
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800225c:	7bfb      	ldrb	r3, [r7, #15]
 800225e:	3301      	adds	r3, #1
 8002260:	73fb      	strb	r3, [r7, #15]
 8002262:	7bfa      	ldrb	r2, [r7, #15]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	429a      	cmp	r2, r3
 800226a:	d3ad      	bcc.n	80021c8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800226c:	2300      	movs	r3, #0
 800226e:	73fb      	strb	r3, [r7, #15]
 8002270:	e044      	b.n	80022fc <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002272:	7bfa      	ldrb	r2, [r7, #15]
 8002274:	6879      	ldr	r1, [r7, #4]
 8002276:	4613      	mov	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	4413      	add	r3, r2
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	440b      	add	r3, r1
 8002280:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002284:	2200      	movs	r2, #0
 8002286:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002288:	7bfa      	ldrb	r2, [r7, #15]
 800228a:	6879      	ldr	r1, [r7, #4]
 800228c:	4613      	mov	r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	4413      	add	r3, r2
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	440b      	add	r3, r1
 8002296:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800229a:	7bfa      	ldrb	r2, [r7, #15]
 800229c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800229e:	7bfa      	ldrb	r2, [r7, #15]
 80022a0:	6879      	ldr	r1, [r7, #4]
 80022a2:	4613      	mov	r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4413      	add	r3, r2
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	440b      	add	r3, r1
 80022ac:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80022b0:	2200      	movs	r2, #0
 80022b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80022b4:	7bfa      	ldrb	r2, [r7, #15]
 80022b6:	6879      	ldr	r1, [r7, #4]
 80022b8:	4613      	mov	r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	4413      	add	r3, r2
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	440b      	add	r3, r1
 80022c2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80022c6:	2200      	movs	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80022ca:	7bfa      	ldrb	r2, [r7, #15]
 80022cc:	6879      	ldr	r1, [r7, #4]
 80022ce:	4613      	mov	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4413      	add	r3, r2
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	440b      	add	r3, r1
 80022d8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80022e0:	7bfa      	ldrb	r2, [r7, #15]
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	4613      	mov	r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	4413      	add	r3, r2
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	440b      	add	r3, r1
 80022ee:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80022f2:	2200      	movs	r2, #0
 80022f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
 80022f8:	3301      	adds	r3, #1
 80022fa:	73fb      	strb	r3, [r7, #15]
 80022fc:	7bfa      	ldrb	r2, [r7, #15]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	429a      	cmp	r2, r3
 8002304:	d3b5      	bcc.n	8002272 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	603b      	str	r3, [r7, #0]
 800230c:	687e      	ldr	r6, [r7, #4]
 800230e:	466d      	mov	r5, sp
 8002310:	f106 0410 	add.w	r4, r6, #16
 8002314:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002316:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002318:	6823      	ldr	r3, [r4, #0]
 800231a:	602b      	str	r3, [r5, #0]
 800231c:	1d33      	adds	r3, r6, #4
 800231e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002320:	6838      	ldr	r0, [r7, #0]
 8002322:	f004 faef 	bl	8006904 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2201      	movs	r2, #1
 8002332:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	69db      	ldr	r3, [r3, #28]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d102      	bne.n	8002344 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f001 fb8a 	bl	8003a58 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3714      	adds	r7, #20
 800234a:	46bd      	mov	sp, r7
 800234c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800234e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b082      	sub	sp, #8
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800235c:	2b01      	cmp	r3, #1
 800235e:	d101      	bne.n	8002364 <HAL_PCD_Start+0x16>
 8002360:	2302      	movs	r3, #2
 8002362:	e012      	b.n	800238a <HAL_PCD_Start+0x3c>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4618      	mov	r0, r3
 8002372:	f004 fa95 	bl	80068a0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4618      	mov	r0, r3
 800237c:	f006 fc49 	bl	8008c12 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002392:	b580      	push	{r7, lr}
 8002394:	b082      	sub	sp, #8
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f006 fc4e 	bl	8008c40 <USB_ReadInterrupts>
 80023a4:	4603      	mov	r3, r0
 80023a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023ae:	d102      	bne.n	80023b6 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 fb4d 	bl	8002a50 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f006 fc40 	bl	8008c40 <USB_ReadInterrupts>
 80023c0:	4603      	mov	r3, r0
 80023c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023ca:	d112      	bne.n	80023f2 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023de:	b292      	uxth	r2, r2
 80023e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f00a ff5a 	bl	800d29e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80023ea:	2100      	movs	r1, #0
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 f91e 	bl	800262e <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f006 fc22 	bl	8008c40 <USB_ReadInterrupts>
 80023fc:	4603      	mov	r3, r0
 80023fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002402:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002406:	d10b      	bne.n	8002420 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002410:	b29a      	uxth	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800241a:	b292      	uxth	r2, r2
 800241c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4618      	mov	r0, r3
 8002426:	f006 fc0b 	bl	8008c40 <USB_ReadInterrupts>
 800242a:	4603      	mov	r3, r0
 800242c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002430:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002434:	d10b      	bne.n	800244e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800243e:	b29a      	uxth	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002448:	b292      	uxth	r2, r2
 800244a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f006 fbf4 	bl	8008c40 <USB_ReadInterrupts>
 8002458:	4603      	mov	r3, r0
 800245a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800245e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002462:	d133      	bne.n	80024cc <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800246c:	b29a      	uxth	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f022 0204 	bic.w	r2, r2, #4
 8002476:	b292      	uxth	r2, r2
 8002478:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002484:	b29a      	uxth	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 0208 	bic.w	r2, r2, #8
 800248e:	b292      	uxth	r2, r2
 8002490:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800249a:	2b01      	cmp	r3, #1
 800249c:	d107      	bne.n	80024ae <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80024a6:	2100      	movs	r1, #0
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f00b f8ef 	bl	800d68c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f00a ff2e 	bl	800d310 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024bc:	b29a      	uxth	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80024c6:	b292      	uxth	r2, r2
 80024c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f006 fbb5 	bl	8008c40 <USB_ReadInterrupts>
 80024d6:	4603      	mov	r3, r0
 80024d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024e0:	d126      	bne.n	8002530 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f042 0208 	orr.w	r2, r2, #8
 80024f4:	b292      	uxth	r2, r2
 80024f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002502:	b29a      	uxth	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800250c:	b292      	uxth	r2, r2
 800250e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800251a:	b29a      	uxth	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f042 0204 	orr.w	r2, r2, #4
 8002524:	b292      	uxth	r2, r2
 8002526:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f00a fed6 	bl	800d2dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4618      	mov	r0, r3
 8002536:	f006 fb83 	bl	8008c40 <USB_ReadInterrupts>
 800253a:	4603      	mov	r3, r0
 800253c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002540:	2b80      	cmp	r3, #128	; 0x80
 8002542:	d13f      	bne.n	80025c4 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800254c:	b29a      	uxth	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002556:	b292      	uxth	r2, r2
 8002558:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d12b      	bne.n	80025be <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800256e:	b29a      	uxth	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f042 0204 	orr.w	r2, r2, #4
 8002578:	b292      	uxth	r2, r2
 800257a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002586:	b29a      	uxth	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f042 0208 	orr.w	r2, r2, #8
 8002590:	b292      	uxth	r2, r2
 8002592:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2201      	movs	r2, #1
 800259a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	089b      	lsrs	r3, r3, #2
 80025aa:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80025b4:	2101      	movs	r1, #1
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f00b f868 	bl	800d68c <HAL_PCDEx_LPM_Callback>
 80025bc:	e002      	b.n	80025c4 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f00a fe8c 	bl	800d2dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f006 fb39 	bl	8008c40 <USB_ReadInterrupts>
 80025ce:	4603      	mov	r3, r0
 80025d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025d8:	d10e      	bne.n	80025f8 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80025ec:	b292      	uxth	r2, r2
 80025ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f00a fe45 	bl	800d282 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f006 fb1f 	bl	8008c40 <USB_ReadInterrupts>
 8002602:	4603      	mov	r3, r0
 8002604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002608:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800260c:	d10b      	bne.n	8002626 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002616:	b29a      	uxth	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002620:	b292      	uxth	r2, r2
 8002622:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002626:	bf00      	nop
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b082      	sub	sp, #8
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
 8002636:	460b      	mov	r3, r1
 8002638:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002640:	2b01      	cmp	r3, #1
 8002642:	d101      	bne.n	8002648 <HAL_PCD_SetAddress+0x1a>
 8002644:	2302      	movs	r3, #2
 8002646:	e013      	b.n	8002670 <HAL_PCD_SetAddress+0x42>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	78fa      	ldrb	r2, [r7, #3]
 8002654:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	78fa      	ldrb	r2, [r7, #3]
 800265e:	4611      	mov	r1, r2
 8002660:	4618      	mov	r0, r3
 8002662:	f006 fac2 	bl	8008bea <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3708      	adds	r7, #8
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	4608      	mov	r0, r1
 8002682:	4611      	mov	r1, r2
 8002684:	461a      	mov	r2, r3
 8002686:	4603      	mov	r3, r0
 8002688:	70fb      	strb	r3, [r7, #3]
 800268a:	460b      	mov	r3, r1
 800268c:	803b      	strh	r3, [r7, #0]
 800268e:	4613      	mov	r3, r2
 8002690:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002692:	2300      	movs	r3, #0
 8002694:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002696:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800269a:	2b00      	cmp	r3, #0
 800269c:	da0e      	bge.n	80026bc <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800269e:	78fb      	ldrb	r3, [r7, #3]
 80026a0:	f003 0307 	and.w	r3, r3, #7
 80026a4:	1c5a      	adds	r2, r3, #1
 80026a6:	4613      	mov	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	4413      	add	r3, r2
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	4413      	add	r3, r2
 80026b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2201      	movs	r2, #1
 80026b8:	705a      	strb	r2, [r3, #1]
 80026ba:	e00e      	b.n	80026da <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026bc:	78fb      	ldrb	r3, [r7, #3]
 80026be:	f003 0207 	and.w	r2, r3, #7
 80026c2:	4613      	mov	r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	4413      	add	r3, r2
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	4413      	add	r3, r2
 80026d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2200      	movs	r2, #0
 80026d8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80026da:	78fb      	ldrb	r3, [r7, #3]
 80026dc:	f003 0307 	and.w	r3, r3, #7
 80026e0:	b2da      	uxtb	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80026e6:	883a      	ldrh	r2, [r7, #0]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	78ba      	ldrb	r2, [r7, #2]
 80026f0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	785b      	ldrb	r3, [r3, #1]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d004      	beq.n	8002704 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	b29a      	uxth	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002704:	78bb      	ldrb	r3, [r7, #2]
 8002706:	2b02      	cmp	r3, #2
 8002708:	d102      	bne.n	8002710 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2200      	movs	r2, #0
 800270e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002716:	2b01      	cmp	r3, #1
 8002718:	d101      	bne.n	800271e <HAL_PCD_EP_Open+0xa6>
 800271a:	2302      	movs	r3, #2
 800271c:	e00e      	b.n	800273c <HAL_PCD_EP_Open+0xc4>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68f9      	ldr	r1, [r7, #12]
 800272c:	4618      	mov	r0, r3
 800272e:	f004 f90b 	bl	8006948 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800273a:	7afb      	ldrb	r3, [r7, #11]
}
 800273c:	4618      	mov	r0, r3
 800273e:	3710      	adds	r7, #16
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	460b      	mov	r3, r1
 800274e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002750:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002754:	2b00      	cmp	r3, #0
 8002756:	da0e      	bge.n	8002776 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002758:	78fb      	ldrb	r3, [r7, #3]
 800275a:	f003 0307 	and.w	r3, r3, #7
 800275e:	1c5a      	adds	r2, r3, #1
 8002760:	4613      	mov	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4413      	add	r3, r2
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	4413      	add	r3, r2
 800276c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2201      	movs	r2, #1
 8002772:	705a      	strb	r2, [r3, #1]
 8002774:	e00e      	b.n	8002794 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002776:	78fb      	ldrb	r3, [r7, #3]
 8002778:	f003 0207 	and.w	r2, r3, #7
 800277c:	4613      	mov	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	4413      	add	r3, r2
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	4413      	add	r3, r2
 800278c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002794:	78fb      	ldrb	r3, [r7, #3]
 8002796:	f003 0307 	and.w	r3, r3, #7
 800279a:	b2da      	uxtb	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d101      	bne.n	80027ae <HAL_PCD_EP_Close+0x6a>
 80027aa:	2302      	movs	r3, #2
 80027ac:	e00e      	b.n	80027cc <HAL_PCD_EP_Close+0x88>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2201      	movs	r2, #1
 80027b2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68f9      	ldr	r1, [r7, #12]
 80027bc:	4618      	mov	r0, r3
 80027be:	f004 fc31 	bl	8007024 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	607a      	str	r2, [r7, #4]
 80027de:	603b      	str	r3, [r7, #0]
 80027e0:	460b      	mov	r3, r1
 80027e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027e4:	7afb      	ldrb	r3, [r7, #11]
 80027e6:	f003 0207 	and.w	r2, r3, #7
 80027ea:	4613      	mov	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	4413      	add	r3, r2
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	4413      	add	r3, r2
 80027fa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	2200      	movs	r2, #0
 800280c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	2200      	movs	r2, #0
 8002812:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002814:	7afb      	ldrb	r3, [r7, #11]
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	b2da      	uxtb	r2, r3
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002820:	7afb      	ldrb	r3, [r7, #11]
 8002822:	f003 0307 	and.w	r3, r3, #7
 8002826:	2b00      	cmp	r3, #0
 8002828:	d106      	bne.n	8002838 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	6979      	ldr	r1, [r7, #20]
 8002830:	4618      	mov	r0, r3
 8002832:	f004 fde4 	bl	80073fe <USB_EPStartXfer>
 8002836:	e005      	b.n	8002844 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	6979      	ldr	r1, [r7, #20]
 800283e:	4618      	mov	r0, r3
 8002840:	f004 fddd 	bl	80073fe <USB_EPStartXfer>
  }

  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3718      	adds	r7, #24
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800284e:	b480      	push	{r7}
 8002850:	b083      	sub	sp, #12
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
 8002856:	460b      	mov	r3, r1
 8002858:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800285a:	78fb      	ldrb	r3, [r7, #3]
 800285c:	f003 0207 	and.w	r2, r3, #7
 8002860:	6879      	ldr	r1, [r7, #4]
 8002862:	4613      	mov	r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	4413      	add	r3, r2
 8002868:	00db      	lsls	r3, r3, #3
 800286a:	440b      	add	r3, r1
 800286c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002870:	681b      	ldr	r3, [r3, #0]
}
 8002872:	4618      	mov	r0, r3
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b086      	sub	sp, #24
 8002882:	af00      	add	r7, sp, #0
 8002884:	60f8      	str	r0, [r7, #12]
 8002886:	607a      	str	r2, [r7, #4]
 8002888:	603b      	str	r3, [r7, #0]
 800288a:	460b      	mov	r3, r1
 800288c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800288e:	7afb      	ldrb	r3, [r7, #11]
 8002890:	f003 0307 	and.w	r3, r3, #7
 8002894:	1c5a      	adds	r2, r3, #1
 8002896:	4613      	mov	r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4413      	add	r3, r2
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	4413      	add	r3, r2
 80028a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	683a      	ldr	r2, [r7, #0]
 80028bc:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	2200      	movs	r2, #0
 80028c2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	2201      	movs	r2, #1
 80028c8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028ca:	7afb      	ldrb	r3, [r7, #11]
 80028cc:	f003 0307 	and.w	r3, r3, #7
 80028d0:	b2da      	uxtb	r2, r3
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028d6:	7afb      	ldrb	r3, [r7, #11]
 80028d8:	f003 0307 	and.w	r3, r3, #7
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d106      	bne.n	80028ee <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6979      	ldr	r1, [r7, #20]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f004 fd89 	bl	80073fe <USB_EPStartXfer>
 80028ec:	e005      	b.n	80028fa <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	6979      	ldr	r1, [r7, #20]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f004 fd82 	bl	80073fe <USB_EPStartXfer>
  }

  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3718      	adds	r7, #24
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	460b      	mov	r3, r1
 800290e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002910:	78fb      	ldrb	r3, [r7, #3]
 8002912:	f003 0207 	and.w	r2, r3, #7
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	429a      	cmp	r2, r3
 800291c:	d901      	bls.n	8002922 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e03e      	b.n	80029a0 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002922:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002926:	2b00      	cmp	r3, #0
 8002928:	da0e      	bge.n	8002948 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800292a:	78fb      	ldrb	r3, [r7, #3]
 800292c:	f003 0307 	and.w	r3, r3, #7
 8002930:	1c5a      	adds	r2, r3, #1
 8002932:	4613      	mov	r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4413      	add	r3, r2
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	4413      	add	r3, r2
 800293e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2201      	movs	r2, #1
 8002944:	705a      	strb	r2, [r3, #1]
 8002946:	e00c      	b.n	8002962 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002948:	78fa      	ldrb	r2, [r7, #3]
 800294a:	4613      	mov	r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	4413      	add	r3, r2
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	4413      	add	r3, r2
 800295a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2200      	movs	r2, #0
 8002960:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2201      	movs	r2, #1
 8002966:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002968:	78fb      	ldrb	r3, [r7, #3]
 800296a:	f003 0307 	and.w	r3, r3, #7
 800296e:	b2da      	uxtb	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800297a:	2b01      	cmp	r3, #1
 800297c:	d101      	bne.n	8002982 <HAL_PCD_EP_SetStall+0x7e>
 800297e:	2302      	movs	r3, #2
 8002980:	e00e      	b.n	80029a0 <HAL_PCD_EP_SetStall+0x9c>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2201      	movs	r2, #1
 8002986:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68f9      	ldr	r1, [r7, #12]
 8002990:	4618      	mov	r0, r3
 8002992:	f006 f82b 	bl	80089ec <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3710      	adds	r7, #16
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	460b      	mov	r3, r1
 80029b2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80029b4:	78fb      	ldrb	r3, [r7, #3]
 80029b6:	f003 020f 	and.w	r2, r3, #15
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d901      	bls.n	80029c6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e040      	b.n	8002a48 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80029c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	da0e      	bge.n	80029ec <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029ce:	78fb      	ldrb	r3, [r7, #3]
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	1c5a      	adds	r2, r3, #1
 80029d6:	4613      	mov	r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	4413      	add	r3, r2
 80029dc:	00db      	lsls	r3, r3, #3
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	4413      	add	r3, r2
 80029e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2201      	movs	r2, #1
 80029e8:	705a      	strb	r2, [r3, #1]
 80029ea:	e00e      	b.n	8002a0a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029ec:	78fb      	ldrb	r3, [r7, #3]
 80029ee:	f003 0207 	and.w	r2, r3, #7
 80029f2:	4613      	mov	r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	4413      	add	r3, r2
 80029f8:	00db      	lsls	r3, r3, #3
 80029fa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	4413      	add	r3, r2
 8002a02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a10:	78fb      	ldrb	r3, [r7, #3]
 8002a12:	f003 0307 	and.w	r3, r3, #7
 8002a16:	b2da      	uxtb	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d101      	bne.n	8002a2a <HAL_PCD_EP_ClrStall+0x82>
 8002a26:	2302      	movs	r3, #2
 8002a28:	e00e      	b.n	8002a48 <HAL_PCD_EP_ClrStall+0xa0>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68f9      	ldr	r1, [r7, #12]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f006 f828 	bl	8008a8e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b08e      	sub	sp, #56	; 0x38
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002a58:	e2d6      	b.n	8003008 <PCD_EP_ISR_Handler+0x5b8>
  {
    wIstr = hpcd->Instance->ISTR;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a62:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002a64:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	f003 030f 	and.w	r3, r3, #15
 8002a6c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002a70:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f040 815b 	bne.w	8002d30 <PCD_EP_ISR_Handler+0x2e0>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002a7a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002a7c:	f003 0310 	and.w	r3, r3, #16
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d150      	bne.n	8002b26 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	881b      	ldrh	r3, [r3, #0]
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002a90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a94:	81fb      	strh	r3, [r7, #14]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	89fb      	ldrh	r3, [r7, #14]
 8002a9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002aa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	3328      	adds	r3, #40	; 0x28
 8002aac:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	461a      	mov	r2, r3
 8002aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	4413      	add	r3, r2
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	6812      	ldr	r2, [r2, #0]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002acc:	881b      	ldrh	r3, [r3, #0]
 8002ace:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad8:	695a      	ldr	r2, [r3, #20]
 8002ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	441a      	add	r2, r3
 8002ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f00a fbb1 	bl	800d24e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f000 8287 	beq.w	8003008 <PCD_EP_ISR_Handler+0x5b8>
 8002afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f040 8282 	bne.w	8003008 <PCD_EP_ISR_Handler+0x5b8>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002b10:	b2da      	uxtb	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	b292      	uxth	r2, r2
 8002b18:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002b24:	e270      	b.n	8003008 <PCD_EP_ISR_Handler+0x5b8>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b2c:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	881b      	ldrh	r3, [r3, #0]
 8002b34:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002b36:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002b38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d032      	beq.n	8002ba6 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	4413      	add	r3, r2
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	6812      	ldr	r2, [r2, #0]
 8002b58:	4413      	add	r3, r2
 8002b5a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b5e:	881b      	ldrh	r3, [r3, #0]
 8002b60:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b66:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6818      	ldr	r0, [r3, #0]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b74:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b78:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	f006 f8b2 	bl	8008ce4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	881b      	ldrh	r3, [r3, #0]
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	823b      	strh	r3, [r7, #16]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	8a3a      	ldrh	r2, [r7, #16]
 8002b96:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b9a:	b292      	uxth	r2, r2
 8002b9c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f00a fb28 	bl	800d1f4 <HAL_PCD_SetupStageCallback>
 8002ba4:	e230      	b.n	8003008 <PCD_EP_ISR_Handler+0x5b8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002ba6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	f280 822c 	bge.w	8003008 <PCD_EP_ISR_Handler+0x5b8>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	881b      	ldrh	r3, [r3, #0]
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	83bb      	strh	r3, [r7, #28]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	8bba      	ldrh	r2, [r7, #28]
 8002bc6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002bca:	b292      	uxth	r2, r2
 8002bcc:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	461a      	mov	r2, r3
 8002bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	4413      	add	r3, r2
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	6812      	ldr	r2, [r2, #0]
 8002be6:	4413      	add	r3, r2
 8002be8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002bec:	881b      	ldrh	r3, [r3, #0]
 8002bee:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d019      	beq.n	8002c32 <PCD_EP_ISR_Handler+0x1e2>
 8002bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d015      	beq.n	8002c32 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6818      	ldr	r0, [r3, #0]
 8002c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0c:	6959      	ldr	r1, [r3, #20]
 8002c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c10:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c14:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	f006 f864 	bl	8008ce4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1e:	695a      	ldr	r2, [r3, #20]
 8002c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c22:	69db      	ldr	r3, [r3, #28]
 8002c24:	441a      	add	r2, r3
 8002c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c28:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f00a faf3 	bl	800d218 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	881b      	ldrh	r3, [r3, #0]
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	f040 81e2 	bne.w	8003008 <PCD_EP_ISR_Handler+0x5b8>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	61bb      	str	r3, [r7, #24]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	461a      	mov	r2, r3
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	4413      	add	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002c62:	617b      	str	r3, [r7, #20]
 8002c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d112      	bne.n	8002c92 <PCD_EP_ISR_Handler+0x242>
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	881b      	ldrh	r3, [r3, #0]
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	801a      	strh	r2, [r3, #0]
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	881b      	ldrh	r3, [r3, #0]
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	801a      	strh	r2, [r3, #0]
 8002c90:	e02f      	b.n	8002cf2 <PCD_EP_ISR_Handler+0x2a2>
 8002c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	2b3e      	cmp	r3, #62	; 0x3e
 8002c98:	d813      	bhi.n	8002cc2 <PCD_EP_ISR_Handler+0x272>
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	085b      	lsrs	r3, r3, #1
 8002ca0:	633b      	str	r3, [r7, #48]	; 0x30
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d002      	beq.n	8002cb4 <PCD_EP_ISR_Handler+0x264>
 8002cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	633b      	str	r3, [r7, #48]	; 0x30
 8002cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	029b      	lsls	r3, r3, #10
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	801a      	strh	r2, [r3, #0]
 8002cc0:	e017      	b.n	8002cf2 <PCD_EP_ISR_Handler+0x2a2>
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	095b      	lsrs	r3, r3, #5
 8002cc8:	633b      	str	r3, [r7, #48]	; 0x30
 8002cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	f003 031f 	and.w	r3, r3, #31
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d102      	bne.n	8002cdc <PCD_EP_ISR_Handler+0x28c>
 8002cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	633b      	str	r3, [r7, #48]	; 0x30
 8002cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	029b      	lsls	r3, r3, #10
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ce8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cec:	b29a      	uxth	r2, r3
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	881b      	ldrh	r3, [r3, #0]
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d02:	827b      	strh	r3, [r7, #18]
 8002d04:	8a7b      	ldrh	r3, [r7, #18]
 8002d06:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002d0a:	827b      	strh	r3, [r7, #18]
 8002d0c:	8a7b      	ldrh	r3, [r7, #18]
 8002d0e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002d12:	827b      	strh	r3, [r7, #18]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	8a7b      	ldrh	r3, [r7, #18]
 8002d1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	8013      	strh	r3, [r2, #0]
 8002d2e:	e16b      	b.n	8003008 <PCD_EP_ISR_Handler+0x5b8>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	461a      	mov	r2, r3
 8002d36:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	4413      	add	r3, r2
 8002d3e:	881b      	ldrh	r3, [r3, #0]
 8002d40:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002d42:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f280 80e4 	bge.w	8002f14 <PCD_EP_ISR_Handler+0x4c4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	461a      	mov	r2, r3
 8002d52:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	4413      	add	r3, r2
 8002d5a:	881b      	ldrh	r3, [r3, #0]
 8002d5c:	b29a      	uxth	r2, r3
 8002d5e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002d62:	4013      	ands	r3, r2
 8002d64:	853b      	strh	r3, [r7, #40]	; 0x28
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	4413      	add	r3, r2
 8002d74:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002d76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d7a:	b292      	uxth	r2, r2
 8002d7c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002d7e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002d82:	4613      	mov	r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	4413      	add	r3, r2
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	4413      	add	r3, r2
 8002d92:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d96:	7b1b      	ldrb	r3, [r3, #12]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d120      	bne.n	8002dde <PCD_EP_ISR_Handler+0x38e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	461a      	mov	r2, r3
 8002da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	00db      	lsls	r3, r3, #3
 8002dae:	4413      	add	r3, r2
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	6812      	ldr	r2, [r2, #0]
 8002db4:	4413      	add	r3, r2
 8002db6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002dba:	881b      	ldrh	r3, [r3, #0]
 8002dbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dc0:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002dc2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 8083 	beq.w	8002ed0 <PCD_EP_ISR_Handler+0x480>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6818      	ldr	r0, [r3, #0]
 8002dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd0:	6959      	ldr	r1, [r3, #20]
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd4:	88da      	ldrh	r2, [r3, #6]
 8002dd6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002dd8:	f005 ff84 	bl	8008ce4 <USB_ReadPMA>
 8002ddc:	e078      	b.n	8002ed0 <PCD_EP_ISR_Handler+0x480>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de0:	78db      	ldrb	r3, [r3, #3]
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d108      	bne.n	8002df8 <PCD_EP_ISR_Handler+0x3a8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002de6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002de8:	461a      	mov	r2, r3
 8002dea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f000 f919 	bl	8003024 <HAL_PCD_EP_DB_Receive>
 8002df2:	4603      	mov	r3, r0
 8002df4:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002df6:	e06b      	b.n	8002ed0 <PCD_EP_ISR_Handler+0x480>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4413      	add	r3, r2
 8002e06:	881b      	ldrh	r3, [r3, #0]
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e12:	847b      	strh	r3, [r7, #34]	; 0x22
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	461a      	mov	r2, r3
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	441a      	add	r2, r3
 8002e22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002e24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e30:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4413      	add	r3, r2
 8002e46:	881b      	ldrh	r3, [r3, #0]
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d01f      	beq.n	8002e92 <PCD_EP_ISR_Handler+0x442>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	4413      	add	r3, r2
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	6812      	ldr	r2, [r2, #0]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002e70:	881b      	ldrh	r3, [r3, #0]
 8002e72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e76:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002e78:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d028      	beq.n	8002ed0 <PCD_EP_ISR_Handler+0x480>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6818      	ldr	r0, [r3, #0]
 8002e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e84:	6959      	ldr	r1, [r3, #20]
 8002e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e88:	891a      	ldrh	r2, [r3, #8]
 8002e8a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002e8c:	f005 ff2a 	bl	8008ce4 <USB_ReadPMA>
 8002e90:	e01e      	b.n	8002ed0 <PCD_EP_ISR_Handler+0x480>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	4413      	add	r3, r2
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	6812      	ldr	r2, [r2, #0]
 8002eaa:	4413      	add	r3, r2
 8002eac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002eb0:	881b      	ldrh	r3, [r3, #0]
 8002eb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002eb6:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002eb8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d008      	beq.n	8002ed0 <PCD_EP_ISR_Handler+0x480>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6818      	ldr	r0, [r3, #0]
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec4:	6959      	ldr	r1, [r3, #20]
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec8:	895a      	ldrh	r2, [r3, #10]
 8002eca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002ecc:	f005 ff0a 	bl	8008ce4 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed2:	69da      	ldr	r2, [r3, #28]
 8002ed4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002ed6:	441a      	add	r2, r3
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eda:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ede:	695a      	ldr	r2, [r3, #20]
 8002ee0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002ee2:	441a      	add	r2, r3
 8002ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d004      	beq.n	8002efa <PCD_EP_ISR_Handler+0x4aa>
 8002ef0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d206      	bcs.n	8002f08 <PCD_EP_ISR_Handler+0x4b8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	4619      	mov	r1, r3
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f00a f989 	bl	800d218 <HAL_PCD_DataOutStageCallback>
 8002f06:	e005      	b.n	8002f14 <PCD_EP_ISR_Handler+0x4c4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f004 fa75 	bl	80073fe <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002f14:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d074      	beq.n	8003008 <PCD_EP_ISR_Handler+0x5b8>
      {
        ep = &hpcd->IN_ep[epindex];
 8002f1e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002f22:	1c5a      	adds	r2, r3, #1
 8002f24:	4613      	mov	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	4413      	add	r3, r2
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	4413      	add	r3, r2
 8002f30:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	461a      	mov	r2, r3
 8002f38:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	4413      	add	r3, r2
 8002f40:	881b      	ldrh	r3, [r3, #0]
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002f48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f4c:	843b      	strh	r3, [r7, #32]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	461a      	mov	r2, r3
 8002f54:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	441a      	add	r2, r3
 8002f5c:	8c3b      	ldrh	r3, [r7, #32]
 8002f5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	8013      	strh	r3, [r2, #0]

        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6c:	78db      	ldrb	r3, [r3, #3]
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d144      	bne.n	8002ffc <PCD_EP_ISR_Handler+0x5ac>
 8002f72:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d13f      	bne.n	8002ffc <PCD_EP_ISR_Handler+0x5ac>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	461a      	mov	r2, r3
 8002f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	00db      	lsls	r3, r3, #3
 8002f8e:	4413      	add	r3, r2
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	6812      	ldr	r2, [r2, #0]
 8002f94:	4413      	add	r3, r2
 8002f96:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f9a:	881b      	ldrh	r3, [r3, #0]
 8002f9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fa0:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa4:	699a      	ldr	r2, [r3, #24]
 8002fa6:	8bfb      	ldrh	r3, [r7, #30]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d906      	bls.n	8002fba <PCD_EP_ISR_Handler+0x56a>
          {
            ep->xfer_len -= TxByteNbre;
 8002fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fae:	699a      	ldr	r2, [r3, #24]
 8002fb0:	8bfb      	ldrh	r3, [r7, #30]
 8002fb2:	1ad2      	subs	r2, r2, r3
 8002fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb6:	619a      	str	r2, [r3, #24]
 8002fb8:	e002      	b.n	8002fc0 <PCD_EP_ISR_Handler+0x570>
          }
          else
          {
            ep->xfer_len = 0U;
 8002fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d106      	bne.n	8002fd6 <PCD_EP_ISR_Handler+0x586>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	4619      	mov	r1, r3
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f00a f93d 	bl	800d24e <HAL_PCD_DataInStageCallback>
 8002fd4:	e018      	b.n	8003008 <PCD_EP_ISR_Handler+0x5b8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd8:	695a      	ldr	r2, [r3, #20]
 8002fda:	8bfb      	ldrh	r3, [r7, #30]
 8002fdc:	441a      	add	r2, r3
 8002fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe0:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe4:	69da      	ldr	r2, [r3, #28]
 8002fe6:	8bfb      	ldrh	r3, [r7, #30]
 8002fe8:	441a      	add	r2, r3
 8002fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fec:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f004 fa02 	bl	80073fe <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002ffa:	e005      	b.n	8003008 <PCD_EP_ISR_Handler+0x5b8>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002ffc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002ffe:	461a      	mov	r2, r3
 8003000:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 f917 	bl	8003236 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003010:	b29b      	uxth	r3, r3
 8003012:	b21b      	sxth	r3, r3
 8003014:	2b00      	cmp	r3, #0
 8003016:	f6ff ad20 	blt.w	8002a5a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	3738      	adds	r7, #56	; 0x38
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b088      	sub	sp, #32
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	4613      	mov	r3, r2
 8003030:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003032:	88fb      	ldrh	r3, [r7, #6]
 8003034:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d07c      	beq.n	8003136 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003044:	b29b      	uxth	r3, r3
 8003046:	461a      	mov	r2, r3
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	00db      	lsls	r3, r3, #3
 800304e:	4413      	add	r3, r2
 8003050:	68fa      	ldr	r2, [r7, #12]
 8003052:	6812      	ldr	r2, [r2, #0]
 8003054:	4413      	add	r3, r2
 8003056:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800305a:	881b      	ldrh	r3, [r3, #0]
 800305c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003060:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	699a      	ldr	r2, [r3, #24]
 8003066:	8b7b      	ldrh	r3, [r7, #26]
 8003068:	429a      	cmp	r2, r3
 800306a:	d306      	bcc.n	800307a <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	699a      	ldr	r2, [r3, #24]
 8003070:	8b7b      	ldrh	r3, [r7, #26]
 8003072:	1ad2      	subs	r2, r2, r3
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	619a      	str	r2, [r3, #24]
 8003078:	e002      	b.n	8003080 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	2200      	movs	r2, #0
 800307e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d123      	bne.n	80030d0 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	461a      	mov	r2, r3
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4413      	add	r3, r2
 8003096:	881b      	ldrh	r3, [r3, #0]
 8003098:	b29b      	uxth	r3, r3
 800309a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800309e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030a2:	833b      	strh	r3, [r7, #24]
 80030a4:	8b3b      	ldrh	r3, [r7, #24]
 80030a6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80030aa:	833b      	strh	r3, [r7, #24]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	461a      	mov	r2, r3
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	441a      	add	r2, r3
 80030ba:	8b3b      	ldrh	r3, [r7, #24]
 80030bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80030d0:	88fb      	ldrh	r3, [r7, #6]
 80030d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d01f      	beq.n	800311a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	461a      	mov	r2, r3
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4413      	add	r3, r2
 80030e8:	881b      	ldrh	r3, [r3, #0]
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030f4:	82fb      	strh	r3, [r7, #22]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	461a      	mov	r2, r3
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	441a      	add	r2, r3
 8003104:	8afb      	ldrh	r3, [r7, #22]
 8003106:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800310a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800310e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003112:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003116:	b29b      	uxth	r3, r3
 8003118:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800311a:	8b7b      	ldrh	r3, [r7, #26]
 800311c:	2b00      	cmp	r3, #0
 800311e:	f000 8085 	beq.w	800322c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6818      	ldr	r0, [r3, #0]
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	6959      	ldr	r1, [r3, #20]
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	891a      	ldrh	r2, [r3, #8]
 800312e:	8b7b      	ldrh	r3, [r7, #26]
 8003130:	f005 fdd8 	bl	8008ce4 <USB_ReadPMA>
 8003134:	e07a      	b.n	800322c <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800313e:	b29b      	uxth	r3, r3
 8003140:	461a      	mov	r2, r3
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	4413      	add	r3, r2
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	6812      	ldr	r2, [r2, #0]
 800314e:	4413      	add	r3, r2
 8003150:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003154:	881b      	ldrh	r3, [r3, #0]
 8003156:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800315a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	699a      	ldr	r2, [r3, #24]
 8003160:	8b7b      	ldrh	r3, [r7, #26]
 8003162:	429a      	cmp	r2, r3
 8003164:	d306      	bcc.n	8003174 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	699a      	ldr	r2, [r3, #24]
 800316a:	8b7b      	ldrh	r3, [r7, #26]
 800316c:	1ad2      	subs	r2, r2, r3
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	619a      	str	r2, [r3, #24]
 8003172:	e002      	b.n	800317a <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	2200      	movs	r2, #0
 8003178:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d123      	bne.n	80031ca <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	461a      	mov	r2, r3
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	4413      	add	r3, r2
 8003190:	881b      	ldrh	r3, [r3, #0]
 8003192:	b29b      	uxth	r3, r3
 8003194:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003198:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800319c:	83fb      	strh	r3, [r7, #30]
 800319e:	8bfb      	ldrh	r3, [r7, #30]
 80031a0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80031a4:	83fb      	strh	r3, [r7, #30]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	461a      	mov	r2, r3
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	441a      	add	r2, r3
 80031b4:	8bfb      	ldrh	r3, [r7, #30]
 80031b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80031ca:	88fb      	ldrh	r3, [r7, #6]
 80031cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d11f      	bne.n	8003214 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	461a      	mov	r2, r3
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	4413      	add	r3, r2
 80031e2:	881b      	ldrh	r3, [r3, #0]
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ee:	83bb      	strh	r3, [r7, #28]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	461a      	mov	r2, r3
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	441a      	add	r2, r3
 80031fe:	8bbb      	ldrh	r3, [r7, #28]
 8003200:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003204:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003208:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800320c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003210:	b29b      	uxth	r3, r3
 8003212:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003214:	8b7b      	ldrh	r3, [r7, #26]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d008      	beq.n	800322c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6818      	ldr	r0, [r3, #0]
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	6959      	ldr	r1, [r3, #20]
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	895a      	ldrh	r2, [r3, #10]
 8003226:	8b7b      	ldrh	r3, [r7, #26]
 8003228:	f005 fd5c 	bl	8008ce4 <USB_ReadPMA>
    }
  }

  return count;
 800322c:	8b7b      	ldrh	r3, [r7, #26]
}
 800322e:	4618      	mov	r0, r3
 8003230:	3720      	adds	r7, #32
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	b0a2      	sub	sp, #136	; 0x88
 800323a:	af00      	add	r7, sp, #0
 800323c:	60f8      	str	r0, [r7, #12]
 800323e:	60b9      	str	r1, [r7, #8]
 8003240:	4613      	mov	r3, r2
 8003242:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003244:	88fb      	ldrh	r3, [r7, #6]
 8003246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800324a:	2b00      	cmp	r3, #0
 800324c:	f000 81c5 	beq.w	80035da <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003258:	b29b      	uxth	r3, r3
 800325a:	461a      	mov	r2, r3
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	00db      	lsls	r3, r3, #3
 8003262:	4413      	add	r3, r2
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	6812      	ldr	r2, [r2, #0]
 8003268:	4413      	add	r3, r2
 800326a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800326e:	881b      	ldrh	r3, [r3, #0]
 8003270:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003274:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	699a      	ldr	r2, [r3, #24]
 800327c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003280:	429a      	cmp	r2, r3
 8003282:	d907      	bls.n	8003294 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxByteNbre;
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	699a      	ldr	r2, [r3, #24]
 8003288:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800328c:	1ad2      	subs	r2, r2, r3
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	619a      	str	r2, [r3, #24]
 8003292:	e002      	b.n	800329a <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	2200      	movs	r2, #0
 8003298:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f040 80b9 	bne.w	8003416 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	785b      	ldrb	r3, [r3, #1]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d126      	bne.n	80032fa <HAL_PCD_EP_DB_Transmit+0xc4>
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	461a      	mov	r2, r3
 80032be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c0:	4413      	add	r3, r2
 80032c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	00da      	lsls	r2, r3, #3
 80032ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032cc:	4413      	add	r3, r2
 80032ce:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80032d2:	627b      	str	r3, [r7, #36]	; 0x24
 80032d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d6:	881b      	ldrh	r3, [r3, #0]
 80032d8:	b29b      	uxth	r3, r3
 80032da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80032de:	b29a      	uxth	r2, r3
 80032e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e2:	801a      	strh	r2, [r3, #0]
 80032e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e6:	881b      	ldrh	r3, [r3, #0]
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f6:	801a      	strh	r2, [r3, #0]
 80032f8:	e01a      	b.n	8003330 <HAL_PCD_EP_DB_Transmit+0xfa>
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	785b      	ldrb	r3, [r3, #1]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d116      	bne.n	8003330 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	633b      	str	r3, [r7, #48]	; 0x30
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003310:	b29b      	uxth	r3, r3
 8003312:	461a      	mov	r2, r3
 8003314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003316:	4413      	add	r3, r2
 8003318:	633b      	str	r3, [r7, #48]	; 0x30
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	00da      	lsls	r2, r3, #3
 8003320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003322:	4413      	add	r3, r2
 8003324:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003328:	62fb      	str	r3, [r7, #44]	; 0x2c
 800332a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800332c:	2200      	movs	r2, #0
 800332e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	623b      	str	r3, [r7, #32]
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	785b      	ldrb	r3, [r3, #1]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d126      	bne.n	800338c <HAL_PCD_EP_DB_Transmit+0x156>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	61bb      	str	r3, [r7, #24]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800334c:	b29b      	uxth	r3, r3
 800334e:	461a      	mov	r2, r3
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	4413      	add	r3, r2
 8003354:	61bb      	str	r3, [r7, #24]
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	00da      	lsls	r2, r3, #3
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	4413      	add	r3, r2
 8003360:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003364:	617b      	str	r3, [r7, #20]
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	881b      	ldrh	r3, [r3, #0]
 800336a:	b29b      	uxth	r3, r3
 800336c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003370:	b29a      	uxth	r2, r3
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	801a      	strh	r2, [r3, #0]
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	881b      	ldrh	r3, [r3, #0]
 800337a:	b29b      	uxth	r3, r3
 800337c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003380:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003384:	b29a      	uxth	r2, r3
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	801a      	strh	r2, [r3, #0]
 800338a:	e017      	b.n	80033bc <HAL_PCD_EP_DB_Transmit+0x186>
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	785b      	ldrb	r3, [r3, #1]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d113      	bne.n	80033bc <HAL_PCD_EP_DB_Transmit+0x186>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800339c:	b29b      	uxth	r3, r3
 800339e:	461a      	mov	r2, r3
 80033a0:	6a3b      	ldr	r3, [r7, #32]
 80033a2:	4413      	add	r3, r2
 80033a4:	623b      	str	r3, [r7, #32]
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	00da      	lsls	r2, r3, #3
 80033ac:	6a3b      	ldr	r3, [r7, #32]
 80033ae:	4413      	add	r3, r2
 80033b0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80033b4:	61fb      	str	r3, [r7, #28]
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	2200      	movs	r2, #0
 80033ba:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	4619      	mov	r1, r3
 80033c2:	68f8      	ldr	r0, [r7, #12]
 80033c4:	f009 ff43 	bl	800d24e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80033c8:	88fb      	ldrh	r3, [r7, #6]
 80033ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f000 82d2 	beq.w	8003978 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	461a      	mov	r2, r3
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	4413      	add	r3, r2
 80033e2:	881b      	ldrh	r3, [r3, #0]
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ee:	827b      	strh	r3, [r7, #18]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	461a      	mov	r2, r3
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	441a      	add	r2, r3
 80033fe:	8a7b      	ldrh	r3, [r7, #18]
 8003400:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003404:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003408:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800340c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003410:	b29b      	uxth	r3, r3
 8003412:	8013      	strh	r3, [r2, #0]
 8003414:	e2b0      	b.n	8003978 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003416:	88fb      	ldrh	r3, [r7, #6]
 8003418:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d021      	beq.n	8003464 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	461a      	mov	r2, r3
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4413      	add	r3, r2
 800342e:	881b      	ldrh	r3, [r3, #0]
 8003430:	b29b      	uxth	r3, r3
 8003432:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800343a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	461a      	mov	r2, r3
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	441a      	add	r2, r3
 800344c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003450:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003454:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003458:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800345c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003460:	b29b      	uxth	r3, r3
 8003462:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800346a:	2b01      	cmp	r3, #1
 800346c:	f040 8284 	bne.w	8003978 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxByteNbre;
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	695a      	ldr	r2, [r3, #20]
 8003474:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003478:	441a      	add	r2, r3
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	69da      	ldr	r2, [r3, #28]
 8003482:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003486:	441a      	add	r2, r3
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	6a1a      	ldr	r2, [r3, #32]
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	429a      	cmp	r2, r3
 8003496:	d309      	bcc.n	80034ac <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	691b      	ldr	r3, [r3, #16]
 800349c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	6a1a      	ldr	r2, [r3, #32]
 80034a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034a4:	1ad2      	subs	r2, r2, r3
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	621a      	str	r2, [r3, #32]
 80034aa:	e015      	b.n	80034d8 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d107      	bne.n	80034c4 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxByteNbre;
 80034b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80034b8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80034c2:	e009      	b.n	80034d8 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	6a1b      	ldr	r3, [r3, #32]
 80034d0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	2200      	movs	r2, #0
 80034d6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	785b      	ldrb	r3, [r3, #1]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d155      	bne.n	800358c <HAL_PCD_EP_DB_Transmit+0x356>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	461a      	mov	r2, r3
 80034f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034f4:	4413      	add	r3, r2
 80034f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	00da      	lsls	r2, r3, #3
 80034fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003500:	4413      	add	r3, r2
 8003502:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003506:	637b      	str	r3, [r7, #52]	; 0x34
 8003508:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800350a:	2b00      	cmp	r3, #0
 800350c:	d112      	bne.n	8003534 <HAL_PCD_EP_DB_Transmit+0x2fe>
 800350e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003510:	881b      	ldrh	r3, [r3, #0]
 8003512:	b29b      	uxth	r3, r3
 8003514:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003518:	b29a      	uxth	r2, r3
 800351a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800351c:	801a      	strh	r2, [r3, #0]
 800351e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003520:	881b      	ldrh	r3, [r3, #0]
 8003522:	b29b      	uxth	r3, r3
 8003524:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003528:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800352c:	b29a      	uxth	r2, r3
 800352e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003530:	801a      	strh	r2, [r3, #0]
 8003532:	e047      	b.n	80035c4 <HAL_PCD_EP_DB_Transmit+0x38e>
 8003534:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003536:	2b3e      	cmp	r3, #62	; 0x3e
 8003538:	d811      	bhi.n	800355e <HAL_PCD_EP_DB_Transmit+0x328>
 800353a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800353c:	085b      	lsrs	r3, r3, #1
 800353e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003540:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	d002      	beq.n	8003550 <HAL_PCD_EP_DB_Transmit+0x31a>
 800354a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800354c:	3301      	adds	r3, #1
 800354e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003550:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003552:	b29b      	uxth	r3, r3
 8003554:	029b      	lsls	r3, r3, #10
 8003556:	b29a      	uxth	r2, r3
 8003558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800355a:	801a      	strh	r2, [r3, #0]
 800355c:	e032      	b.n	80035c4 <HAL_PCD_EP_DB_Transmit+0x38e>
 800355e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003560:	095b      	lsrs	r3, r3, #5
 8003562:	64bb      	str	r3, [r7, #72]	; 0x48
 8003564:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003566:	f003 031f 	and.w	r3, r3, #31
 800356a:	2b00      	cmp	r3, #0
 800356c:	d102      	bne.n	8003574 <HAL_PCD_EP_DB_Transmit+0x33e>
 800356e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003570:	3b01      	subs	r3, #1
 8003572:	64bb      	str	r3, [r7, #72]	; 0x48
 8003574:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003576:	b29b      	uxth	r3, r3
 8003578:	029b      	lsls	r3, r3, #10
 800357a:	b29b      	uxth	r3, r3
 800357c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003580:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003584:	b29a      	uxth	r2, r3
 8003586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003588:	801a      	strh	r2, [r3, #0]
 800358a:	e01b      	b.n	80035c4 <HAL_PCD_EP_DB_Transmit+0x38e>
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	785b      	ldrb	r3, [r3, #1]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d117      	bne.n	80035c4 <HAL_PCD_EP_DB_Transmit+0x38e>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	643b      	str	r3, [r7, #64]	; 0x40
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	461a      	mov	r2, r3
 80035a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035a8:	4413      	add	r3, r2
 80035aa:	643b      	str	r3, [r7, #64]	; 0x40
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	00da      	lsls	r2, r3, #3
 80035b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035b4:	4413      	add	r3, r2
 80035b6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80035ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035be:	b29a      	uxth	r2, r3
 80035c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035c2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6818      	ldr	r0, [r3, #0]
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	6959      	ldr	r1, [r3, #20]
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	891a      	ldrh	r2, [r3, #8]
 80035d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	f005 fb44 	bl	8008c60 <USB_WritePMA>
 80035d8:	e1ce      	b.n	8003978 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	461a      	mov	r2, r3
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	4413      	add	r3, r2
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	6812      	ldr	r2, [r2, #0]
 80035f2:	4413      	add	r3, r2
 80035f4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80035f8:	881b      	ldrh	r3, [r3, #0]
 80035fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035fe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	699a      	ldr	r2, [r3, #24]
 8003606:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800360a:	429a      	cmp	r2, r3
 800360c:	d307      	bcc.n	800361e <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxByteNbre;
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	699a      	ldr	r2, [r3, #24]
 8003612:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003616:	1ad2      	subs	r2, r2, r3
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	619a      	str	r2, [r3, #24]
 800361c:	e002      	b.n	8003624 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	2200      	movs	r2, #0
 8003622:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	699b      	ldr	r3, [r3, #24]
 8003628:	2b00      	cmp	r3, #0
 800362a:	f040 80c4 	bne.w	80037b6 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	785b      	ldrb	r3, [r3, #1]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d126      	bne.n	8003684 <HAL_PCD_EP_DB_Transmit+0x44e>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003644:	b29b      	uxth	r3, r3
 8003646:	461a      	mov	r2, r3
 8003648:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800364a:	4413      	add	r3, r2
 800364c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	00da      	lsls	r2, r3, #3
 8003654:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003656:	4413      	add	r3, r2
 8003658:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800365c:	66bb      	str	r3, [r7, #104]	; 0x68
 800365e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003660:	881b      	ldrh	r3, [r3, #0]
 8003662:	b29b      	uxth	r3, r3
 8003664:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003668:	b29a      	uxth	r2, r3
 800366a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800366c:	801a      	strh	r2, [r3, #0]
 800366e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003670:	881b      	ldrh	r3, [r3, #0]
 8003672:	b29b      	uxth	r3, r3
 8003674:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003678:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800367c:	b29a      	uxth	r2, r3
 800367e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003680:	801a      	strh	r2, [r3, #0]
 8003682:	e01a      	b.n	80036ba <HAL_PCD_EP_DB_Transmit+0x484>
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	785b      	ldrb	r3, [r3, #1]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d116      	bne.n	80036ba <HAL_PCD_EP_DB_Transmit+0x484>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	677b      	str	r3, [r7, #116]	; 0x74
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800369a:	b29b      	uxth	r3, r3
 800369c:	461a      	mov	r2, r3
 800369e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036a0:	4413      	add	r3, r2
 80036a2:	677b      	str	r3, [r7, #116]	; 0x74
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	00da      	lsls	r2, r3, #3
 80036aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036ac:	4413      	add	r3, r2
 80036ae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80036b2:	673b      	str	r3, [r7, #112]	; 0x70
 80036b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036b6:	2200      	movs	r2, #0
 80036b8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	67bb      	str	r3, [r7, #120]	; 0x78
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	785b      	ldrb	r3, [r3, #1]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d12f      	bne.n	8003728 <HAL_PCD_EP_DB_Transmit+0x4f2>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036d8:	b29b      	uxth	r3, r3
 80036da:	461a      	mov	r2, r3
 80036dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80036e0:	4413      	add	r3, r2
 80036e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	00da      	lsls	r2, r3, #3
 80036ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80036f0:	4413      	add	r3, r2
 80036f2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80036f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80036fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80036fe:	881b      	ldrh	r3, [r3, #0]
 8003700:	b29b      	uxth	r3, r3
 8003702:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003706:	b29a      	uxth	r2, r3
 8003708:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800370c:	801a      	strh	r2, [r3, #0]
 800370e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003712:	881b      	ldrh	r3, [r3, #0]
 8003714:	b29b      	uxth	r3, r3
 8003716:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800371a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800371e:	b29a      	uxth	r2, r3
 8003720:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003724:	801a      	strh	r2, [r3, #0]
 8003726:	e017      	b.n	8003758 <HAL_PCD_EP_DB_Transmit+0x522>
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	785b      	ldrb	r3, [r3, #1]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d113      	bne.n	8003758 <HAL_PCD_EP_DB_Transmit+0x522>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003738:	b29b      	uxth	r3, r3
 800373a:	461a      	mov	r2, r3
 800373c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800373e:	4413      	add	r3, r2
 8003740:	67bb      	str	r3, [r7, #120]	; 0x78
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	00da      	lsls	r2, r3, #3
 8003748:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800374a:	4413      	add	r3, r2
 800374c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003750:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003752:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003754:	2200      	movs	r2, #0
 8003756:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	4619      	mov	r1, r3
 800375e:	68f8      	ldr	r0, [r7, #12]
 8003760:	f009 fd75 	bl	800d24e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003764:	88fb      	ldrh	r3, [r7, #6]
 8003766:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800376a:	2b00      	cmp	r3, #0
 800376c:	f040 8104 	bne.w	8003978 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	461a      	mov	r2, r3
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	4413      	add	r3, r2
 800377e:	881b      	ldrh	r3, [r3, #0]
 8003780:	b29b      	uxth	r3, r3
 8003782:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800378a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	461a      	mov	r2, r3
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	441a      	add	r2, r3
 800379c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80037a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	8013      	strh	r3, [r2, #0]
 80037b4:	e0e0      	b.n	8003978 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80037b6:	88fb      	ldrh	r3, [r7, #6]
 80037b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d121      	bne.n	8003804 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	461a      	mov	r2, r3
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	4413      	add	r3, r2
 80037ce:	881b      	ldrh	r3, [r3, #0]
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037da:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	461a      	mov	r2, r3
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	441a      	add	r2, r3
 80037ec:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80037f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003800:	b29b      	uxth	r3, r3
 8003802:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800380a:	2b01      	cmp	r3, #1
 800380c:	f040 80b4 	bne.w	8003978 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxByteNbre;
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	695a      	ldr	r2, [r3, #20]
 8003814:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003818:	441a      	add	r2, r3
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	69da      	ldr	r2, [r3, #28]
 8003822:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003826:	441a      	add	r2, r3
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	6a1a      	ldr	r2, [r3, #32]
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	429a      	cmp	r2, r3
 8003836:	d309      	bcc.n	800384c <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	6a1a      	ldr	r2, [r3, #32]
 8003842:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003844:	1ad2      	subs	r2, r2, r3
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	621a      	str	r2, [r3, #32]
 800384a:	e015      	b.n	8003878 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	6a1b      	ldr	r3, [r3, #32]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d107      	bne.n	8003864 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxByteNbre;
 8003854:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003858:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003862:	e009      	b.n	8003878 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	2200      	movs	r2, #0
 800386e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	667b      	str	r3, [r7, #100]	; 0x64
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	785b      	ldrb	r3, [r3, #1]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d155      	bne.n	8003932 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003894:	b29b      	uxth	r3, r3
 8003896:	461a      	mov	r2, r3
 8003898:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800389a:	4413      	add	r3, r2
 800389c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	00da      	lsls	r2, r3, #3
 80038a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038a6:	4413      	add	r3, r2
 80038a8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80038ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80038ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d112      	bne.n	80038da <HAL_PCD_EP_DB_Transmit+0x6a4>
 80038b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80038b6:	881b      	ldrh	r3, [r3, #0]
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80038be:	b29a      	uxth	r2, r3
 80038c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80038c2:	801a      	strh	r2, [r3, #0]
 80038c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80038c6:	881b      	ldrh	r3, [r3, #0]
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80038d6:	801a      	strh	r2, [r3, #0]
 80038d8:	e044      	b.n	8003964 <HAL_PCD_EP_DB_Transmit+0x72e>
 80038da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038dc:	2b3e      	cmp	r3, #62	; 0x3e
 80038de:	d811      	bhi.n	8003904 <HAL_PCD_EP_DB_Transmit+0x6ce>
 80038e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038e2:	085b      	lsrs	r3, r3, #1
 80038e4:	657b      	str	r3, [r7, #84]	; 0x54
 80038e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038e8:	f003 0301 	and.w	r3, r3, #1
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d002      	beq.n	80038f6 <HAL_PCD_EP_DB_Transmit+0x6c0>
 80038f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038f2:	3301      	adds	r3, #1
 80038f4:	657b      	str	r3, [r7, #84]	; 0x54
 80038f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	029b      	lsls	r3, r3, #10
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003900:	801a      	strh	r2, [r3, #0]
 8003902:	e02f      	b.n	8003964 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003904:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003906:	095b      	lsrs	r3, r3, #5
 8003908:	657b      	str	r3, [r7, #84]	; 0x54
 800390a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800390c:	f003 031f 	and.w	r3, r3, #31
 8003910:	2b00      	cmp	r3, #0
 8003912:	d102      	bne.n	800391a <HAL_PCD_EP_DB_Transmit+0x6e4>
 8003914:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003916:	3b01      	subs	r3, #1
 8003918:	657b      	str	r3, [r7, #84]	; 0x54
 800391a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800391c:	b29b      	uxth	r3, r3
 800391e:	029b      	lsls	r3, r3, #10
 8003920:	b29b      	uxth	r3, r3
 8003922:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003926:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800392a:	b29a      	uxth	r2, r3
 800392c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800392e:	801a      	strh	r2, [r3, #0]
 8003930:	e018      	b.n	8003964 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	785b      	ldrb	r3, [r3, #1]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d114      	bne.n	8003964 <HAL_PCD_EP_DB_Transmit+0x72e>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003942:	b29b      	uxth	r3, r3
 8003944:	461a      	mov	r2, r3
 8003946:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003948:	4413      	add	r3, r2
 800394a:	667b      	str	r3, [r7, #100]	; 0x64
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	00da      	lsls	r2, r3, #3
 8003952:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003954:	4413      	add	r3, r2
 8003956:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800395a:	663b      	str	r3, [r7, #96]	; 0x60
 800395c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800395e:	b29a      	uxth	r2, r3
 8003960:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003962:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6818      	ldr	r0, [r3, #0]
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	6959      	ldr	r1, [r3, #20]
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	895a      	ldrh	r2, [r3, #10]
 8003970:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003972:	b29b      	uxth	r3, r3
 8003974:	f005 f974 	bl	8008c60 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	461a      	mov	r2, r3
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	4413      	add	r3, r2
 8003986:	881b      	ldrh	r3, [r3, #0]
 8003988:	b29b      	uxth	r3, r3
 800398a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800398e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003992:	823b      	strh	r3, [r7, #16]
 8003994:	8a3b      	ldrh	r3, [r7, #16]
 8003996:	f083 0310 	eor.w	r3, r3, #16
 800399a:	823b      	strh	r3, [r7, #16]
 800399c:	8a3b      	ldrh	r3, [r7, #16]
 800399e:	f083 0320 	eor.w	r3, r3, #32
 80039a2:	823b      	strh	r3, [r7, #16]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	461a      	mov	r2, r3
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	441a      	add	r2, r3
 80039b2:	8a3b      	ldrh	r3, [r7, #16]
 80039b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3788      	adds	r7, #136	; 0x88
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80039d2:	b480      	push	{r7}
 80039d4:	b087      	sub	sp, #28
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	60f8      	str	r0, [r7, #12]
 80039da:	607b      	str	r3, [r7, #4]
 80039dc:	460b      	mov	r3, r1
 80039de:	817b      	strh	r3, [r7, #10]
 80039e0:	4613      	mov	r3, r2
 80039e2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80039e4:	897b      	ldrh	r3, [r7, #10]
 80039e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00b      	beq.n	8003a08 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039f0:	897b      	ldrh	r3, [r7, #10]
 80039f2:	f003 0307 	and.w	r3, r3, #7
 80039f6:	1c5a      	adds	r2, r3, #1
 80039f8:	4613      	mov	r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	4413      	add	r3, r2
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	4413      	add	r3, r2
 8003a04:	617b      	str	r3, [r7, #20]
 8003a06:	e009      	b.n	8003a1c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a08:	897a      	ldrh	r2, [r7, #10]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	4413      	add	r3, r2
 8003a10:	00db      	lsls	r3, r3, #3
 8003a12:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	4413      	add	r3, r2
 8003a1a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003a1c:	893b      	ldrh	r3, [r7, #8]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d107      	bne.n	8003a32 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	2200      	movs	r2, #0
 8003a26:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	b29a      	uxth	r2, r3
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	80da      	strh	r2, [r3, #6]
 8003a30:	e00b      	b.n	8003a4a <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	2201      	movs	r2, #1
 8003a36:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	b29a      	uxth	r2, r3
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	0c1b      	lsrs	r3, r3, #16
 8003a44:	b29a      	uxth	r2, r3
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	371c      	adds	r7, #28
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b085      	sub	sp, #20
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	f043 0301 	orr.w	r3, r3, #1
 8003a82:	b29a      	uxth	r2, r3
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	f043 0302 	orr.w	r3, r3, #2
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3714      	adds	r7, #20
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ab0:	4b05      	ldr	r3, [pc, #20]	; (8003ac8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a04      	ldr	r2, [pc, #16]	; (8003ac8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003ab6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aba:	6013      	str	r3, [r2, #0]
}
 8003abc:	bf00      	nop
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	58000400 	.word	0x58000400

08003acc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003acc:	b480      	push	{r7}
 8003ace:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003ad0:	4b04      	ldr	r3, [pc, #16]	; (8003ae4 <HAL_PWREx_GetVoltageRange+0x18>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	58000400 	.word	0x58000400

08003ae8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003aec:	4b05      	ldr	r3, [pc, #20]	; (8003b04 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	4a04      	ldr	r2, [pc, #16]	; (8003b04 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003af2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003af6:	6053      	str	r3, [r2, #4]
}
 8003af8:	bf00      	nop
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	58000400 	.word	0x58000400

08003b08 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003b0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b1a:	d101      	bne.n	8003b20 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e000      	b.n	8003b22 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <LL_RCC_HSE_Enable>:
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003b30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b3e:	6013      	str	r3, [r2, #0]
}
 8003b40:	bf00      	nop
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr

08003b4a <LL_RCC_HSE_Disable>:
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003b4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b5c:	6013      	str	r3, [r2, #0]
}
 8003b5e:	bf00      	nop
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <LL_RCC_HSE_IsReady>:
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003b6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b7a:	d101      	bne.n	8003b80 <LL_RCC_HSE_IsReady+0x18>
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e000      	b.n	8003b82 <LL_RCC_HSE_IsReady+0x1a>
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <LL_RCC_HSI_Enable>:
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003b90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b9e:	6013      	str	r3, [r2, #0]
}
 8003ba0:	bf00      	nop
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr

08003baa <LL_RCC_HSI_Disable>:
{
 8003baa:	b480      	push	{r7}
 8003bac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003bae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bbc:	6013      	str	r3, [r2, #0]
}
 8003bbe:	bf00      	nop
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <LL_RCC_HSI_IsReady>:
{
 8003bc8:	b480      	push	{r7}
 8003bca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bda:	d101      	bne.n	8003be0 <LL_RCC_HSI_IsReady+0x18>
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e000      	b.n	8003be2 <LL_RCC_HSI_IsReady+0x1a>
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <LL_RCC_HSI_SetCalibTrimming>:
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003bf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	061b      	lsls	r3, r3, #24
 8003c02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c06:	4313      	orrs	r3, r2
 8003c08:	604b      	str	r3, [r1, #4]
}
 8003c0a:	bf00      	nop
 8003c0c:	370c      	adds	r7, #12
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr

08003c16 <LL_RCC_HSI48_Enable>:
{
 8003c16:	b480      	push	{r7}
 8003c18:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003c1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c26:	f043 0301 	orr.w	r3, r3, #1
 8003c2a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003c2e:	bf00      	nop
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <LL_RCC_HSI48_Disable>:
{
 8003c38:	b480      	push	{r7}
 8003c3a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003c3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c48:	f023 0301 	bic.w	r3, r3, #1
 8003c4c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003c50:	bf00      	nop
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr

08003c5a <LL_RCC_HSI48_IsReady>:
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003c5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d101      	bne.n	8003c72 <LL_RCC_HSI48_IsReady+0x18>
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e000      	b.n	8003c74 <LL_RCC_HSI48_IsReady+0x1a>
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr

08003c7e <LL_RCC_LSE_Enable>:
{
 8003c7e:	b480      	push	{r7}
 8003c80:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003c82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c8e:	f043 0301 	orr.w	r3, r3, #1
 8003c92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003c96:	bf00      	nop
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <LL_RCC_LSE_Disable>:
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003ca4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cb0:	f023 0301 	bic.w	r3, r3, #1
 8003cb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003cb8:	bf00      	nop
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr

08003cc2 <LL_RCC_LSE_EnableBypass>:
{
 8003cc2:	b480      	push	{r7}
 8003cc4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003cc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cd2:	f043 0304 	orr.w	r3, r3, #4
 8003cd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003cda:	bf00      	nop
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <LL_RCC_LSE_DisableBypass>:
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003ce8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cf0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cf4:	f023 0304 	bic.w	r3, r3, #4
 8003cf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003cfc:	bf00      	nop
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr

08003d06 <LL_RCC_LSE_IsReady>:
{
 8003d06:	b480      	push	{r7}
 8003d08:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003d0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d101      	bne.n	8003d1e <LL_RCC_LSE_IsReady+0x18>
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e000      	b.n	8003d20 <LL_RCC_LSE_IsReady+0x1a>
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr

08003d2a <LL_RCC_LSI1_Enable>:
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003d2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d3a:	f043 0301 	orr.w	r3, r3, #1
 8003d3e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003d42:	bf00      	nop
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <LL_RCC_LSI1_Disable>:
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003d50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d5c:	f023 0301 	bic.w	r3, r3, #1
 8003d60:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003d64:	bf00      	nop
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr

08003d6e <LL_RCC_LSI1_IsReady>:
{
 8003d6e:	b480      	push	{r7}
 8003d70:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003d72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d7a:	f003 0302 	and.w	r3, r3, #2
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d101      	bne.n	8003d86 <LL_RCC_LSI1_IsReady+0x18>
 8003d82:	2301      	movs	r3, #1
 8003d84:	e000      	b.n	8003d88 <LL_RCC_LSI1_IsReady+0x1a>
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr

08003d92 <LL_RCC_LSI2_Enable>:
{
 8003d92:	b480      	push	{r7}
 8003d94:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003d96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003da2:	f043 0304 	orr.w	r3, r3, #4
 8003da6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003daa:	bf00      	nop
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <LL_RCC_LSI2_Disable>:
{
 8003db4:	b480      	push	{r7}
 8003db6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003db8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dc4:	f023 0304 	bic.w	r3, r3, #4
 8003dc8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003dcc:	bf00      	nop
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr

08003dd6 <LL_RCC_LSI2_IsReady>:
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003dda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003de2:	f003 0308 	and.w	r3, r3, #8
 8003de6:	2b08      	cmp	r3, #8
 8003de8:	d101      	bne.n	8003dee <LL_RCC_LSI2_IsReady+0x18>
 8003dea:	2301      	movs	r3, #1
 8003dec:	e000      	b.n	8003df0 <LL_RCC_LSI2_IsReady+0x1a>
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr

08003dfa <LL_RCC_LSI2_SetTrimming>:
{
 8003dfa:	b480      	push	{r7}
 8003dfc:	b083      	sub	sp, #12
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003e02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e0a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	021b      	lsls	r3, r3, #8
 8003e12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e16:	4313      	orrs	r3, r2
 8003e18:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003e1c:	bf00      	nop
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <LL_RCC_MSI_Enable>:
{
 8003e28:	b480      	push	{r7}
 8003e2a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003e2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e36:	f043 0301 	orr.w	r3, r3, #1
 8003e3a:	6013      	str	r3, [r2, #0]
}
 8003e3c:	bf00      	nop
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr

08003e46 <LL_RCC_MSI_Disable>:
{
 8003e46:	b480      	push	{r7}
 8003e48:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003e4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e54:	f023 0301 	bic.w	r3, r3, #1
 8003e58:	6013      	str	r3, [r2, #0]
}
 8003e5a:	bf00      	nop
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <LL_RCC_MSI_IsReady>:
{
 8003e64:	b480      	push	{r7}
 8003e66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003e68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d101      	bne.n	8003e7a <LL_RCC_MSI_IsReady+0x16>
 8003e76:	2301      	movs	r3, #1
 8003e78:	e000      	b.n	8003e7c <LL_RCC_MSI_IsReady+0x18>
 8003e7a:	2300      	movs	r3, #0
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr

08003e86 <LL_RCC_MSI_SetRange>:
{
 8003e86:	b480      	push	{r7}
 8003e88:	b083      	sub	sp, #12
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003e8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	600b      	str	r3, [r1, #0]
}
 8003ea2:	bf00      	nop
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <LL_RCC_MSI_GetRange>:
{
 8003eae:	b480      	push	{r7}
 8003eb0:	b083      	sub	sp, #12
 8003eb2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ebe:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2bb0      	cmp	r3, #176	; 0xb0
 8003ec4:	d901      	bls.n	8003eca <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8003ec6:	23b0      	movs	r3, #176	; 0xb0
 8003ec8:	607b      	str	r3, [r7, #4]
  return msiRange;
 8003eca:	687b      	ldr	r3, [r7, #4]
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <LL_RCC_MSI_SetCalibTrimming>:
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003ee0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	021b      	lsls	r3, r3, #8
 8003eee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	604b      	str	r3, [r1, #4]
}
 8003ef6:	bf00      	nop
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <LL_RCC_SetSysClkSource>:
{
 8003f02:	b480      	push	{r7}
 8003f04:	b083      	sub	sp, #12
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003f0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f023 0203 	bic.w	r2, r3, #3
 8003f14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	608b      	str	r3, [r1, #8]
}
 8003f1e:	bf00      	nop
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr

08003f2a <LL_RCC_GetSysClkSource>:
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003f2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f003 030c 	and.w	r3, r3, #12
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr

08003f42 <LL_RCC_SetAHBPrescaler>:
{
 8003f42:	b480      	push	{r7}
 8003f44:	b083      	sub	sp, #12
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003f4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	608b      	str	r3, [r1, #8]
}
 8003f5e:	bf00      	nop
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr

08003f6a <LL_C2_RCC_SetAHBPrescaler>:
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	b083      	sub	sp, #12
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003f72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f76:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003f7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003f8a:	bf00      	nop
 8003f8c:	370c      	adds	r7, #12
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr

08003f96 <LL_RCC_SetAHB4Prescaler>:
{
 8003f96:	b480      	push	{r7}
 8003f98:	b083      	sub	sp, #12
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fa2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003fa6:	f023 020f 	bic.w	r2, r3, #15
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	091b      	lsrs	r3, r3, #4
 8003fae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <LL_RCC_SetAPB1Prescaler>:
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	608b      	str	r3, [r1, #8]
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <LL_RCC_SetAPB2Prescaler>:
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003ff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ffe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4313      	orrs	r3, r2
 8004006:	608b      	str	r3, [r1, #8]
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <LL_RCC_GetAHBPrescaler>:
{
 8004014:	b480      	push	{r7}
 8004016:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004018:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004022:	4618      	mov	r0, r3
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <LL_RCC_GetAHB4Prescaler>:
{
 800402c:	b480      	push	{r7}
 800402e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004030:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004034:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004038:	011b      	lsls	r3, r3, #4
 800403a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800403e:	4618      	mov	r0, r3
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <LL_RCC_GetAPB1Prescaler>:
{
 8004048:	b480      	push	{r7}
 800404a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800404c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004056:	4618      	mov	r0, r3
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <LL_RCC_GetAPB2Prescaler>:
{
 8004060:	b480      	push	{r7}
 8004062:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004064:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800406e:	4618      	mov	r0, r3
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004078:	b480      	push	{r7}
 800407a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800407c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004086:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800408a:	6013      	str	r3, [r2, #0]
}
 800408c:	bf00      	nop
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr

08004096 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004096:	b480      	push	{r7}
 8004098:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800409a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040a8:	6013      	str	r3, [r2, #0]
}
 80040aa:	bf00      	nop
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80040b4:	b480      	push	{r7}
 80040b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80040b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040c6:	d101      	bne.n	80040cc <LL_RCC_PLL_IsReady+0x18>
 80040c8:	2301      	movs	r3, #1
 80040ca:	e000      	b.n	80040ce <LL_RCC_PLL_IsReady+0x1a>
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80040d8:	b480      	push	{r7}
 80040da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80040dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	0a1b      	lsrs	r3, r3, #8
 80040e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr

080040f2 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80040f2:	b480      	push	{r7}
 80040f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80040f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004100:	4618      	mov	r0, r3
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr

0800410a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800410a:	b480      	push	{r7}
 800410c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800410e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004118:	4618      	mov	r0, r3
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr

08004122 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004122:	b480      	push	{r7}
 8004124:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004126:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	f003 0303 	and.w	r3, r3, #3
}
 8004130:	4618      	mov	r0, r3
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr

0800413a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800413a:	b480      	push	{r7}
 800413c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800413e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800414c:	d101      	bne.n	8004152 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800414e:	2301      	movs	r3, #1
 8004150:	e000      	b.n	8004154 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr

0800415e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800415e:	b480      	push	{r7}
 8004160:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004162:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004166:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800416a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800416e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004172:	d101      	bne.n	8004178 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004174:	2301      	movs	r3, #1
 8004176:	e000      	b.n	800417a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004184:	b480      	push	{r7}
 8004186:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800418c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004190:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004198:	d101      	bne.n	800419e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800419a:	2301      	movs	r3, #1
 800419c:	e000      	b.n	80041a0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr

080041aa <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80041aa:	b480      	push	{r7}
 80041ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80041ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041bc:	d101      	bne.n	80041c2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80041be:	2301      	movs	r3, #1
 80041c0:	e000      	b.n	80041c4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr

080041ce <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80041ce:	b480      	push	{r7}
 80041d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80041d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80041e0:	d101      	bne.n	80041e6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80041e2:	2301      	movs	r3, #1
 80041e4:	e000      	b.n	80041e8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
	...

080041f4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041f4:	b590      	push	{r4, r7, lr}
 80041f6:	b08d      	sub	sp, #52	; 0x34
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d101      	bne.n	8004206 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e37e      	b.n	8004904 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0320 	and.w	r3, r3, #32
 800420e:	2b00      	cmp	r3, #0
 8004210:	f000 8092 	beq.w	8004338 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004214:	f7ff fe89 	bl	8003f2a <LL_RCC_GetSysClkSource>
 8004218:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800421a:	f7ff ff82 	bl	8004122 <LL_RCC_PLL_GetMainSource>
 800421e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004222:	2b00      	cmp	r3, #0
 8004224:	d005      	beq.n	8004232 <HAL_RCC_OscConfig+0x3e>
 8004226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004228:	2b0c      	cmp	r3, #12
 800422a:	d14c      	bne.n	80042c6 <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800422c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800422e:	2b01      	cmp	r3, #1
 8004230:	d149      	bne.n	80042c6 <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004232:	f7ff fe17 	bl	8003e64 <LL_RCC_MSI_IsReady>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d005      	beq.n	8004248 <HAL_RCC_OscConfig+0x54>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	69db      	ldr	r3, [r3, #28]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d101      	bne.n	8004248 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e35d      	b.n	8004904 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800424c:	f7ff fe2f 	bl	8003eae <LL_RCC_MSI_GetRange>
 8004250:	4603      	mov	r3, r0
 8004252:	429c      	cmp	r4, r3
 8004254:	d914      	bls.n	8004280 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425a:	4618      	mov	r0, r3
 800425c:	f000 fd42 	bl	8004ce4 <RCC_SetFlashLatencyFromMSIRange>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d001      	beq.n	800426a <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e34c      	b.n	8004904 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426e:	4618      	mov	r0, r3
 8004270:	f7ff fe09 	bl	8003e86 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a1b      	ldr	r3, [r3, #32]
 8004278:	4618      	mov	r0, r3
 800427a:	f7ff fe2d 	bl	8003ed8 <LL_RCC_MSI_SetCalibTrimming>
 800427e:	e013      	b.n	80042a8 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004284:	4618      	mov	r0, r3
 8004286:	f7ff fdfe 	bl	8003e86 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a1b      	ldr	r3, [r3, #32]
 800428e:	4618      	mov	r0, r3
 8004290:	f7ff fe22 	bl	8003ed8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004298:	4618      	mov	r0, r3
 800429a:	f000 fd23 	bl	8004ce4 <RCC_SetFlashLatencyFromMSIRange>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d001      	beq.n	80042a8 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e32d      	b.n	8004904 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80042a8:	f000 fcdc 	bl	8004c64 <HAL_RCC_GetHCLKFreq>
 80042ac:	4603      	mov	r3, r0
 80042ae:	4ab3      	ldr	r2, [pc, #716]	; (800457c <HAL_RCC_OscConfig+0x388>)
 80042b0:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80042b2:	4bb3      	ldr	r3, [pc, #716]	; (8004580 <HAL_RCC_OscConfig+0x38c>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4618      	mov	r0, r3
 80042b8:	f7fd fb94 	bl	80019e4 <HAL_InitTick>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d039      	beq.n	8004336 <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e31e      	b.n	8004904 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	69db      	ldr	r3, [r3, #28]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d01e      	beq.n	800430c <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80042ce:	f7ff fdab 	bl	8003e28 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80042d2:	f7fd fbd5 	bl	8001a80 <HAL_GetTick>
 80042d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80042d8:	e008      	b.n	80042ec <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042da:	f7fd fbd1 	bl	8001a80 <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d901      	bls.n	80042ec <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e30b      	b.n	8004904 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 80042ec:	f7ff fdba 	bl	8003e64 <LL_RCC_MSI_IsReady>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d0f1      	beq.n	80042da <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7ff fdc3 	bl	8003e86 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a1b      	ldr	r3, [r3, #32]
 8004304:	4618      	mov	r0, r3
 8004306:	f7ff fde7 	bl	8003ed8 <LL_RCC_MSI_SetCalibTrimming>
 800430a:	e015      	b.n	8004338 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800430c:	f7ff fd9b 	bl	8003e46 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004310:	f7fd fbb6 	bl	8001a80 <HAL_GetTick>
 8004314:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004316:	e008      	b.n	800432a <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004318:	f7fd fbb2 	bl	8001a80 <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	2b02      	cmp	r3, #2
 8004324:	d901      	bls.n	800432a <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e2ec      	b.n	8004904 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 800432a:	f7ff fd9b 	bl	8003e64 <LL_RCC_MSI_IsReady>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d1f1      	bne.n	8004318 <HAL_RCC_OscConfig+0x124>
 8004334:	e000      	b.n	8004338 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004336:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0301 	and.w	r3, r3, #1
 8004340:	2b00      	cmp	r3, #0
 8004342:	d04e      	beq.n	80043e2 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004344:	f7ff fdf1 	bl	8003f2a <LL_RCC_GetSysClkSource>
 8004348:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800434a:	f7ff feea 	bl	8004122 <LL_RCC_PLL_GetMainSource>
 800434e:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004350:	6a3b      	ldr	r3, [r7, #32]
 8004352:	2b08      	cmp	r3, #8
 8004354:	d005      	beq.n	8004362 <HAL_RCC_OscConfig+0x16e>
 8004356:	6a3b      	ldr	r3, [r7, #32]
 8004358:	2b0c      	cmp	r3, #12
 800435a:	d10d      	bne.n	8004378 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	2b03      	cmp	r3, #3
 8004360:	d10a      	bne.n	8004378 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004362:	f7ff fc01 	bl	8003b68 <LL_RCC_HSE_IsReady>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d039      	beq.n	80043e0 <HAL_RCC_OscConfig+0x1ec>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d135      	bne.n	80043e0 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e2c5      	b.n	8004904 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004380:	d102      	bne.n	8004388 <HAL_RCC_OscConfig+0x194>
 8004382:	f7ff fbd3 	bl	8003b2c <LL_RCC_HSE_Enable>
 8004386:	e001      	b.n	800438c <HAL_RCC_OscConfig+0x198>
 8004388:	f7ff fbdf 	bl	8003b4a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d012      	beq.n	80043ba <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004394:	f7fd fb74 	bl	8001a80 <HAL_GetTick>
 8004398:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800439a:	e008      	b.n	80043ae <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800439c:	f7fd fb70 	bl	8001a80 <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	2b64      	cmp	r3, #100	; 0x64
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e2aa      	b.n	8004904 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 80043ae:	f7ff fbdb 	bl	8003b68 <LL_RCC_HSE_IsReady>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d0f1      	beq.n	800439c <HAL_RCC_OscConfig+0x1a8>
 80043b8:	e013      	b.n	80043e2 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ba:	f7fd fb61 	bl	8001a80 <HAL_GetTick>
 80043be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80043c0:	e008      	b.n	80043d4 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043c2:	f7fd fb5d 	bl	8001a80 <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	2b64      	cmp	r3, #100	; 0x64
 80043ce:	d901      	bls.n	80043d4 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e297      	b.n	8004904 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 80043d4:	f7ff fbc8 	bl	8003b68 <LL_RCC_HSE_IsReady>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1f1      	bne.n	80043c2 <HAL_RCC_OscConfig+0x1ce>
 80043de:	e000      	b.n	80043e2 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d051      	beq.n	8004492 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043ee:	f7ff fd9c 	bl	8003f2a <LL_RCC_GetSysClkSource>
 80043f2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043f4:	f7ff fe95 	bl	8004122 <LL_RCC_PLL_GetMainSource>
 80043f8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	2b04      	cmp	r3, #4
 80043fe:	d005      	beq.n	800440c <HAL_RCC_OscConfig+0x218>
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	2b0c      	cmp	r3, #12
 8004404:	d113      	bne.n	800442e <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	2b02      	cmp	r3, #2
 800440a:	d110      	bne.n	800442e <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800440c:	f7ff fbdc 	bl	8003bc8 <LL_RCC_HSI_IsReady>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d005      	beq.n	8004422 <HAL_RCC_OscConfig+0x22e>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d101      	bne.n	8004422 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e270      	b.n	8004904 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	4618      	mov	r0, r3
 8004428:	f7ff fbe0 	bl	8003bec <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800442c:	e031      	b.n	8004492 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d019      	beq.n	800446a <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004436:	f7ff fba9 	bl	8003b8c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800443a:	f7fd fb21 	bl	8001a80 <HAL_GetTick>
 800443e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004440:	e008      	b.n	8004454 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004442:	f7fd fb1d 	bl	8001a80 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	2b02      	cmp	r3, #2
 800444e:	d901      	bls.n	8004454 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e257      	b.n	8004904 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004454:	f7ff fbb8 	bl	8003bc8 <LL_RCC_HSI_IsReady>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d0f1      	beq.n	8004442 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	4618      	mov	r0, r3
 8004464:	f7ff fbc2 	bl	8003bec <LL_RCC_HSI_SetCalibTrimming>
 8004468:	e013      	b.n	8004492 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800446a:	f7ff fb9e 	bl	8003baa <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800446e:	f7fd fb07 	bl	8001a80 <HAL_GetTick>
 8004472:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004474:	e008      	b.n	8004488 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004476:	f7fd fb03 	bl	8001a80 <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	2b02      	cmp	r3, #2
 8004482:	d901      	bls.n	8004488 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e23d      	b.n	8004904 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004488:	f7ff fb9e 	bl	8003bc8 <LL_RCC_HSI_IsReady>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d1f1      	bne.n	8004476 <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0308 	and.w	r3, r3, #8
 800449a:	2b00      	cmp	r3, #0
 800449c:	d106      	bne.n	80044ac <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	f000 80a3 	beq.w	80045f2 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d076      	beq.n	80045a2 <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0310 	and.w	r3, r3, #16
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d046      	beq.n	800454e <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80044c0:	f7ff fc55 	bl	8003d6e <LL_RCC_LSI1_IsReady>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d113      	bne.n	80044f2 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80044ca:	f7ff fc2e 	bl	8003d2a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80044ce:	f7fd fad7 	bl	8001a80 <HAL_GetTick>
 80044d2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80044d4:	e008      	b.n	80044e8 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80044d6:	f7fd fad3 	bl	8001a80 <HAL_GetTick>
 80044da:	4602      	mov	r2, r0
 80044dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d901      	bls.n	80044e8 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e20d      	b.n	8004904 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80044e8:	f7ff fc41 	bl	8003d6e <LL_RCC_LSI1_IsReady>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d0f1      	beq.n	80044d6 <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80044f2:	f7ff fc4e 	bl	8003d92 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f6:	f7fd fac3 	bl	8001a80 <HAL_GetTick>
 80044fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80044fc:	e008      	b.n	8004510 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80044fe:	f7fd fabf 	bl	8001a80 <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	2b03      	cmp	r3, #3
 800450a:	d901      	bls.n	8004510 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e1f9      	b.n	8004904 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004510:	f7ff fc61 	bl	8003dd6 <LL_RCC_LSI2_IsReady>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d0f1      	beq.n	80044fe <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	4618      	mov	r0, r3
 8004520:	f7ff fc6b 	bl	8003dfa <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004524:	f7ff fc12 	bl	8003d4c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004528:	f7fd faaa 	bl	8001a80 <HAL_GetTick>
 800452c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800452e:	e008      	b.n	8004542 <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004530:	f7fd faa6 	bl	8001a80 <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	2b02      	cmp	r3, #2
 800453c:	d901      	bls.n	8004542 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e1e0      	b.n	8004904 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004542:	f7ff fc14 	bl	8003d6e <LL_RCC_LSI1_IsReady>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1f1      	bne.n	8004530 <HAL_RCC_OscConfig+0x33c>
 800454c:	e051      	b.n	80045f2 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800454e:	f7ff fbec 	bl	8003d2a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004552:	f7fd fa95 	bl	8001a80 <HAL_GetTick>
 8004556:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004558:	e008      	b.n	800456c <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800455a:	f7fd fa91 	bl	8001a80 <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	2b02      	cmp	r3, #2
 8004566:	d901      	bls.n	800456c <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e1cb      	b.n	8004904 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800456c:	f7ff fbff 	bl	8003d6e <LL_RCC_LSI1_IsReady>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d0f1      	beq.n	800455a <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004576:	f7ff fc1d 	bl	8003db4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800457a:	e00c      	b.n	8004596 <HAL_RCC_OscConfig+0x3a2>
 800457c:	20000004 	.word	0x20000004
 8004580:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004584:	f7fd fa7c 	bl	8001a80 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b03      	cmp	r3, #3
 8004590:	d901      	bls.n	8004596 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e1b6      	b.n	8004904 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004596:	f7ff fc1e 	bl	8003dd6 <LL_RCC_LSI2_IsReady>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d1f1      	bne.n	8004584 <HAL_RCC_OscConfig+0x390>
 80045a0:	e027      	b.n	80045f2 <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80045a2:	f7ff fc07 	bl	8003db4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a6:	f7fd fa6b 	bl	8001a80 <HAL_GetTick>
 80045aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80045ac:	e008      	b.n	80045c0 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80045ae:	f7fd fa67 	bl	8001a80 <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	2b03      	cmp	r3, #3
 80045ba:	d901      	bls.n	80045c0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e1a1      	b.n	8004904 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80045c0:	f7ff fc09 	bl	8003dd6 <LL_RCC_LSI2_IsReady>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1f1      	bne.n	80045ae <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80045ca:	f7ff fbbf 	bl	8003d4c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ce:	f7fd fa57 	bl	8001a80 <HAL_GetTick>
 80045d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80045d4:	e008      	b.n	80045e8 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80045d6:	f7fd fa53 	bl	8001a80 <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d901      	bls.n	80045e8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e18d      	b.n	8004904 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80045e8:	f7ff fbc1 	bl	8003d6e <LL_RCC_LSI1_IsReady>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d1f1      	bne.n	80045d6 <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0304 	and.w	r3, r3, #4
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d05b      	beq.n	80046b6 <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045fe:	4bb5      	ldr	r3, [pc, #724]	; (80048d4 <HAL_RCC_OscConfig+0x6e0>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004606:	2b00      	cmp	r3, #0
 8004608:	d114      	bne.n	8004634 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800460a:	f7ff fa4f 	bl	8003aac <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800460e:	f7fd fa37 	bl	8001a80 <HAL_GetTick>
 8004612:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004614:	e008      	b.n	8004628 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004616:	f7fd fa33 	bl	8001a80 <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	2b02      	cmp	r3, #2
 8004622:	d901      	bls.n	8004628 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e16d      	b.n	8004904 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004628:	4baa      	ldr	r3, [pc, #680]	; (80048d4 <HAL_RCC_OscConfig+0x6e0>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004630:	2b00      	cmp	r3, #0
 8004632:	d0f0      	beq.n	8004616 <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d102      	bne.n	8004642 <HAL_RCC_OscConfig+0x44e>
 800463c:	f7ff fb1f 	bl	8003c7e <LL_RCC_LSE_Enable>
 8004640:	e00c      	b.n	800465c <HAL_RCC_OscConfig+0x468>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	2b05      	cmp	r3, #5
 8004648:	d104      	bne.n	8004654 <HAL_RCC_OscConfig+0x460>
 800464a:	f7ff fb3a 	bl	8003cc2 <LL_RCC_LSE_EnableBypass>
 800464e:	f7ff fb16 	bl	8003c7e <LL_RCC_LSE_Enable>
 8004652:	e003      	b.n	800465c <HAL_RCC_OscConfig+0x468>
 8004654:	f7ff fb24 	bl	8003ca0 <LL_RCC_LSE_Disable>
 8004658:	f7ff fb44 	bl	8003ce4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d014      	beq.n	800468e <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004664:	f7fd fa0c 	bl	8001a80 <HAL_GetTick>
 8004668:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800466a:	e00a      	b.n	8004682 <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800466c:	f7fd fa08 	bl	8001a80 <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	f241 3288 	movw	r2, #5000	; 0x1388
 800467a:	4293      	cmp	r3, r2
 800467c:	d901      	bls.n	8004682 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e140      	b.n	8004904 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004682:	f7ff fb40 	bl	8003d06 <LL_RCC_LSE_IsReady>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d0ef      	beq.n	800466c <HAL_RCC_OscConfig+0x478>
 800468c:	e013      	b.n	80046b6 <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800468e:	f7fd f9f7 	bl	8001a80 <HAL_GetTick>
 8004692:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004694:	e00a      	b.n	80046ac <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004696:	f7fd f9f3 	bl	8001a80 <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d901      	bls.n	80046ac <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e12b      	b.n	8004904 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 80046ac:	f7ff fb2b 	bl	8003d06 <LL_RCC_LSE_IsReady>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1ef      	bne.n	8004696 <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d02c      	beq.n	800471c <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d014      	beq.n	80046f4 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80046ca:	f7ff faa4 	bl	8003c16 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ce:	f7fd f9d7 	bl	8001a80 <HAL_GetTick>
 80046d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80046d4:	e008      	b.n	80046e8 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046d6:	f7fd f9d3 	bl	8001a80 <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d901      	bls.n	80046e8 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e10d      	b.n	8004904 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80046e8:	f7ff fab7 	bl	8003c5a <LL_RCC_HSI48_IsReady>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d0f1      	beq.n	80046d6 <HAL_RCC_OscConfig+0x4e2>
 80046f2:	e013      	b.n	800471c <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80046f4:	f7ff faa0 	bl	8003c38 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046f8:	f7fd f9c2 	bl	8001a80 <HAL_GetTick>
 80046fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80046fe:	e008      	b.n	8004712 <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004700:	f7fd f9be 	bl	8001a80 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b02      	cmp	r3, #2
 800470c:	d901      	bls.n	8004712 <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e0f8      	b.n	8004904 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004712:	f7ff faa2 	bl	8003c5a <LL_RCC_HSI48_IsReady>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d1f1      	bne.n	8004700 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004720:	2b00      	cmp	r3, #0
 8004722:	f000 80ee 	beq.w	8004902 <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004726:	f7ff fc00 	bl	8003f2a <LL_RCC_GetSysClkSource>
 800472a:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800472c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004738:	2b02      	cmp	r3, #2
 800473a:	f040 80af 	bne.w	800489c <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f003 0203 	and.w	r2, r3, #3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004748:	429a      	cmp	r2, r3
 800474a:	d123      	bne.n	8004794 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004756:	429a      	cmp	r2, r3
 8004758:	d11c      	bne.n	8004794 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	0a1b      	lsrs	r3, r3, #8
 800475e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004766:	429a      	cmp	r2, r3
 8004768:	d114      	bne.n	8004794 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004774:	429a      	cmp	r2, r3
 8004776:	d10d      	bne.n	8004794 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004782:	429a      	cmp	r2, r3
 8004784:	d106      	bne.n	8004794 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004790:	429a      	cmp	r2, r3
 8004792:	d05d      	beq.n	8004850 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	2b0c      	cmp	r3, #12
 8004798:	d058      	beq.n	800484c <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800479a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d001      	beq.n	80047ac <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e0ab      	b.n	8004904 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80047ac:	f7ff fc73 	bl	8004096 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80047b0:	f7fd f966 	bl	8001a80 <HAL_GetTick>
 80047b4:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047b6:	e008      	b.n	80047ca <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047b8:	f7fd f962 	bl	8001a80 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e09c      	b.n	8004904 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1ef      	bne.n	80047b8 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047dc:	68da      	ldr	r2, [r3, #12]
 80047de:	4b3e      	ldr	r3, [pc, #248]	; (80048d8 <HAL_RCC_OscConfig+0x6e4>)
 80047e0:	4013      	ands	r3, r2
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80047ea:	4311      	orrs	r1, r2
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80047f0:	0212      	lsls	r2, r2, #8
 80047f2:	4311      	orrs	r1, r2
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80047f8:	4311      	orrs	r1, r2
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80047fe:	4311      	orrs	r1, r2
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004804:	430a      	orrs	r2, r1
 8004806:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800480a:	4313      	orrs	r3, r2
 800480c:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800480e:	f7ff fc33 	bl	8004078 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004812:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800481c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004820:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004822:	f7fd f92d 	bl	8001a80 <HAL_GetTick>
 8004826:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004828:	e008      	b.n	800483c <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800482a:	f7fd f929 	bl	8001a80 <HAL_GetTick>
 800482e:	4602      	mov	r2, r0
 8004830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	2b02      	cmp	r3, #2
 8004836:	d901      	bls.n	800483c <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	e063      	b.n	8004904 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800483c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d0ef      	beq.n	800482a <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800484a:	e05a      	b.n	8004902 <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e059      	b.n	8004904 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004850:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d151      	bne.n	8004902 <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800485e:	f7ff fc0b 	bl	8004078 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004862:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800486c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004870:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004872:	f7fd f905 	bl	8001a80 <HAL_GetTick>
 8004876:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004878:	e008      	b.n	800488c <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800487a:	f7fd f901 	bl	8001a80 <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	2b02      	cmp	r3, #2
 8004886:	d901      	bls.n	800488c <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e03b      	b.n	8004904 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800488c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d0ef      	beq.n	800487a <HAL_RCC_OscConfig+0x686>
 800489a:	e032      	b.n	8004902 <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	2b0c      	cmp	r3, #12
 80048a0:	d02d      	beq.n	80048fe <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048a2:	f7ff fbf8 	bl	8004096 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80048a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048b0:	f023 0303 	bic.w	r3, r3, #3
 80048b4:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 80048b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048c0:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80048c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048c8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ca:	f7fd f8d9 	bl	8001a80 <HAL_GetTick>
 80048ce:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048d0:	e00d      	b.n	80048ee <HAL_RCC_OscConfig+0x6fa>
 80048d2:	bf00      	nop
 80048d4:	58000400 	.word	0x58000400
 80048d8:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048dc:	f7fd f8d0 	bl	8001a80 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e00a      	b.n	8004904 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d1ef      	bne.n	80048dc <HAL_RCC_OscConfig+0x6e8>
 80048fc:	e001      	b.n	8004902 <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e000      	b.n	8004904 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8004902:	2300      	movs	r3, #0
}
 8004904:	4618      	mov	r0, r3
 8004906:	3734      	adds	r7, #52	; 0x34
 8004908:	46bd      	mov	sp, r7
 800490a:	bd90      	pop	{r4, r7, pc}

0800490c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d101      	bne.n	8004920 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e12d      	b.n	8004b7c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004920:	4b98      	ldr	r3, [pc, #608]	; (8004b84 <HAL_RCC_ClockConfig+0x278>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0307 	and.w	r3, r3, #7
 8004928:	683a      	ldr	r2, [r7, #0]
 800492a:	429a      	cmp	r2, r3
 800492c:	d91b      	bls.n	8004966 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800492e:	4b95      	ldr	r3, [pc, #596]	; (8004b84 <HAL_RCC_ClockConfig+0x278>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f023 0207 	bic.w	r2, r3, #7
 8004936:	4993      	ldr	r1, [pc, #588]	; (8004b84 <HAL_RCC_ClockConfig+0x278>)
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	4313      	orrs	r3, r2
 800493c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800493e:	f7fd f89f 	bl	8001a80 <HAL_GetTick>
 8004942:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004944:	e008      	b.n	8004958 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004946:	f7fd f89b 	bl	8001a80 <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	2b02      	cmp	r3, #2
 8004952:	d901      	bls.n	8004958 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e111      	b.n	8004b7c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004958:	4b8a      	ldr	r3, [pc, #552]	; (8004b84 <HAL_RCC_ClockConfig+0x278>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0307 	and.w	r3, r3, #7
 8004960:	683a      	ldr	r2, [r7, #0]
 8004962:	429a      	cmp	r2, r3
 8004964:	d1ef      	bne.n	8004946 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d016      	beq.n	80049a0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	4618      	mov	r0, r3
 8004978:	f7ff fae3 	bl	8003f42 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800497c:	f7fd f880 	bl	8001a80 <HAL_GetTick>
 8004980:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004982:	e008      	b.n	8004996 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004984:	f7fd f87c 	bl	8001a80 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b02      	cmp	r3, #2
 8004990:	d901      	bls.n	8004996 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e0f2      	b.n	8004b7c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004996:	f7ff fbd0 	bl	800413a <LL_RCC_IsActiveFlag_HPRE>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d0f1      	beq.n	8004984 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0320 	and.w	r3, r3, #32
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d016      	beq.n	80049da <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	695b      	ldr	r3, [r3, #20]
 80049b0:	4618      	mov	r0, r3
 80049b2:	f7ff fada 	bl	8003f6a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80049b6:	f7fd f863 	bl	8001a80 <HAL_GetTick>
 80049ba:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80049bc:	e008      	b.n	80049d0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80049be:	f7fd f85f 	bl	8001a80 <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d901      	bls.n	80049d0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e0d5      	b.n	8004b7c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80049d0:	f7ff fbc5 	bl	800415e <LL_RCC_IsActiveFlag_C2HPRE>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d0f1      	beq.n	80049be <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d016      	beq.n	8004a14 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	4618      	mov	r0, r3
 80049ec:	f7ff fad3 	bl	8003f96 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80049f0:	f7fd f846 	bl	8001a80 <HAL_GetTick>
 80049f4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80049f6:	e008      	b.n	8004a0a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80049f8:	f7fd f842 	bl	8001a80 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d901      	bls.n	8004a0a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e0b8      	b.n	8004b7c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004a0a:	f7ff fbbb 	bl	8004184 <LL_RCC_IsActiveFlag_SHDHPRE>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d0f1      	beq.n	80049f8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0304 	and.w	r3, r3, #4
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d016      	beq.n	8004a4e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7ff facd 	bl	8003fc4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004a2a:	f7fd f829 	bl	8001a80 <HAL_GetTick>
 8004a2e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004a30:	e008      	b.n	8004a44 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004a32:	f7fd f825 	bl	8001a80 <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d901      	bls.n	8004a44 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e09b      	b.n	8004b7c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004a44:	f7ff fbb1 	bl	80041aa <LL_RCC_IsActiveFlag_PPRE1>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d0f1      	beq.n	8004a32 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0308 	and.w	r3, r3, #8
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d017      	beq.n	8004a8a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	00db      	lsls	r3, r3, #3
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7ff fac3 	bl	8003fec <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004a66:	f7fd f80b 	bl	8001a80 <HAL_GetTick>
 8004a6a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004a6c:	e008      	b.n	8004a80 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004a6e:	f7fd f807 	bl	8001a80 <HAL_GetTick>
 8004a72:	4602      	mov	r2, r0
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d901      	bls.n	8004a80 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e07d      	b.n	8004b7c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004a80:	f7ff fba5 	bl	80041ce <LL_RCC_IsActiveFlag_PPRE2>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d0f1      	beq.n	8004a6e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d043      	beq.n	8004b1e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d106      	bne.n	8004aac <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004a9e:	f7ff f863 	bl	8003b68 <LL_RCC_HSE_IsReady>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d11e      	bne.n	8004ae6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e067      	b.n	8004b7c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	2b03      	cmp	r3, #3
 8004ab2:	d106      	bne.n	8004ac2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004ab4:	f7ff fafe 	bl	80040b4 <LL_RCC_PLL_IsReady>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d113      	bne.n	8004ae6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e05c      	b.n	8004b7c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d106      	bne.n	8004ad8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004aca:	f7ff f9cb 	bl	8003e64 <LL_RCC_MSI_IsReady>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d108      	bne.n	8004ae6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e051      	b.n	8004b7c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004ad8:	f7ff f876 	bl	8003bc8 <LL_RCC_HSI_IsReady>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d101      	bne.n	8004ae6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e04a      	b.n	8004b7c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	4618      	mov	r0, r3
 8004aec:	f7ff fa09 	bl	8003f02 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004af0:	f7fc ffc6 	bl	8001a80 <HAL_GetTick>
 8004af4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004af6:	e00a      	b.n	8004b0e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004af8:	f7fc ffc2 	bl	8001a80 <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d901      	bls.n	8004b0e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e036      	b.n	8004b7c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b0e:	f7ff fa0c 	bl	8003f2a <LL_RCC_GetSysClkSource>
 8004b12:	4602      	mov	r2, r0
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d1ec      	bne.n	8004af8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b1e:	4b19      	ldr	r3, [pc, #100]	; (8004b84 <HAL_RCC_ClockConfig+0x278>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0307 	and.w	r3, r3, #7
 8004b26:	683a      	ldr	r2, [r7, #0]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d21b      	bcs.n	8004b64 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b2c:	4b15      	ldr	r3, [pc, #84]	; (8004b84 <HAL_RCC_ClockConfig+0x278>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f023 0207 	bic.w	r2, r3, #7
 8004b34:	4913      	ldr	r1, [pc, #76]	; (8004b84 <HAL_RCC_ClockConfig+0x278>)
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b3c:	f7fc ffa0 	bl	8001a80 <HAL_GetTick>
 8004b40:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b42:	e008      	b.n	8004b56 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004b44:	f7fc ff9c 	bl	8001a80 <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d901      	bls.n	8004b56 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e012      	b.n	8004b7c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b56:	4b0b      	ldr	r3, [pc, #44]	; (8004b84 <HAL_RCC_ClockConfig+0x278>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0307 	and.w	r3, r3, #7
 8004b5e:	683a      	ldr	r2, [r7, #0]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d1ef      	bne.n	8004b44 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004b64:	f000 f87e 	bl	8004c64 <HAL_RCC_GetHCLKFreq>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	4a07      	ldr	r2, [pc, #28]	; (8004b88 <HAL_RCC_ClockConfig+0x27c>)
 8004b6c:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004b6e:	f7fc ff93 	bl	8001a98 <HAL_GetTickPrio>
 8004b72:	4603      	mov	r3, r0
 8004b74:	4618      	mov	r0, r3
 8004b76:	f7fc ff35 	bl	80019e4 <HAL_InitTick>
 8004b7a:	4603      	mov	r3, r0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3710      	adds	r7, #16
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	58004000 	.word	0x58004000
 8004b88:	20000004 	.word	0x20000004

08004b8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b8c:	b590      	push	{r4, r7, lr}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b92:	f7ff f9ca 	bl	8003f2a <LL_RCC_GetSysClkSource>
 8004b96:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d10a      	bne.n	8004bb4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004b9e:	f7ff f986 	bl	8003eae <LL_RCC_MSI_GetRange>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	091b      	lsrs	r3, r3, #4
 8004ba6:	f003 030f 	and.w	r3, r3, #15
 8004baa:	4a2b      	ldr	r2, [pc, #172]	; (8004c58 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bb0:	60fb      	str	r3, [r7, #12]
 8004bb2:	e04b      	b.n	8004c4c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2b04      	cmp	r3, #4
 8004bb8:	d102      	bne.n	8004bc0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004bba:	4b28      	ldr	r3, [pc, #160]	; (8004c5c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004bbc:	60fb      	str	r3, [r7, #12]
 8004bbe:	e045      	b.n	8004c4c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2b08      	cmp	r3, #8
 8004bc4:	d10a      	bne.n	8004bdc <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004bc6:	f7fe ff9f 	bl	8003b08 <LL_RCC_HSE_IsEnabledDiv2>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d102      	bne.n	8004bd6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004bd0:	4b22      	ldr	r3, [pc, #136]	; (8004c5c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004bd2:	60fb      	str	r3, [r7, #12]
 8004bd4:	e03a      	b.n	8004c4c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004bd6:	4b22      	ldr	r3, [pc, #136]	; (8004c60 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004bd8:	60fb      	str	r3, [r7, #12]
 8004bda:	e037      	b.n	8004c4c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004bdc:	f7ff faa1 	bl	8004122 <LL_RCC_PLL_GetMainSource>
 8004be0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d003      	beq.n	8004bf0 <HAL_RCC_GetSysClockFreq+0x64>
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	2b03      	cmp	r3, #3
 8004bec:	d003      	beq.n	8004bf6 <HAL_RCC_GetSysClockFreq+0x6a>
 8004bee:	e00d      	b.n	8004c0c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004bf0:	4b1a      	ldr	r3, [pc, #104]	; (8004c5c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004bf2:	60bb      	str	r3, [r7, #8]
        break;
 8004bf4:	e015      	b.n	8004c22 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004bf6:	f7fe ff87 	bl	8003b08 <LL_RCC_HSE_IsEnabledDiv2>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d102      	bne.n	8004c06 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004c00:	4b16      	ldr	r3, [pc, #88]	; (8004c5c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004c02:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004c04:	e00d      	b.n	8004c22 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004c06:	4b16      	ldr	r3, [pc, #88]	; (8004c60 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004c08:	60bb      	str	r3, [r7, #8]
        break;
 8004c0a:	e00a      	b.n	8004c22 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004c0c:	f7ff f94f 	bl	8003eae <LL_RCC_MSI_GetRange>
 8004c10:	4603      	mov	r3, r0
 8004c12:	091b      	lsrs	r3, r3, #4
 8004c14:	f003 030f 	and.w	r3, r3, #15
 8004c18:	4a0f      	ldr	r2, [pc, #60]	; (8004c58 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c1e:	60bb      	str	r3, [r7, #8]
        break;
 8004c20:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8004c22:	f7ff fa59 	bl	80040d8 <LL_RCC_PLL_GetN>
 8004c26:	4602      	mov	r2, r0
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	fb03 f402 	mul.w	r4, r3, r2
 8004c2e:	f7ff fa6c 	bl	800410a <LL_RCC_PLL_GetDivider>
 8004c32:	4603      	mov	r3, r0
 8004c34:	091b      	lsrs	r3, r3, #4
 8004c36:	3301      	adds	r3, #1
 8004c38:	fbb4 f4f3 	udiv	r4, r4, r3
 8004c3c:	f7ff fa59 	bl	80040f2 <LL_RCC_PLL_GetR>
 8004c40:	4603      	mov	r3, r0
 8004c42:	0f5b      	lsrs	r3, r3, #29
 8004c44:	3301      	adds	r3, #1
 8004c46:	fbb4 f3f3 	udiv	r3, r4, r3
 8004c4a:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3714      	adds	r7, #20
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd90      	pop	{r4, r7, pc}
 8004c56:	bf00      	nop
 8004c58:	0800df70 	.word	0x0800df70
 8004c5c:	00f42400 	.word	0x00f42400
 8004c60:	01e84800 	.word	0x01e84800

08004c64 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c64:	b598      	push	{r3, r4, r7, lr}
 8004c66:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004c68:	f7ff ff90 	bl	8004b8c <HAL_RCC_GetSysClockFreq>
 8004c6c:	4604      	mov	r4, r0
 8004c6e:	f7ff f9d1 	bl	8004014 <LL_RCC_GetAHBPrescaler>
 8004c72:	4603      	mov	r3, r0
 8004c74:	091b      	lsrs	r3, r3, #4
 8004c76:	f003 030f 	and.w	r3, r3, #15
 8004c7a:	4a03      	ldr	r2, [pc, #12]	; (8004c88 <HAL_RCC_GetHCLKFreq+0x24>)
 8004c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c80:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	bd98      	pop	{r3, r4, r7, pc}
 8004c88:	0800df10 	.word	0x0800df10

08004c8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c8c:	b598      	push	{r3, r4, r7, lr}
 8004c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004c90:	f7ff ffe8 	bl	8004c64 <HAL_RCC_GetHCLKFreq>
 8004c94:	4604      	mov	r4, r0
 8004c96:	f7ff f9d7 	bl	8004048 <LL_RCC_GetAPB1Prescaler>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	0a1b      	lsrs	r3, r3, #8
 8004c9e:	f003 0307 	and.w	r3, r3, #7
 8004ca2:	4a04      	ldr	r2, [pc, #16]	; (8004cb4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ca8:	f003 031f 	and.w	r3, r3, #31
 8004cac:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	bd98      	pop	{r3, r4, r7, pc}
 8004cb4:	0800df50 	.word	0x0800df50

08004cb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cb8:	b598      	push	{r3, r4, r7, lr}
 8004cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004cbc:	f7ff ffd2 	bl	8004c64 <HAL_RCC_GetHCLKFreq>
 8004cc0:	4604      	mov	r4, r0
 8004cc2:	f7ff f9cd 	bl	8004060 <LL_RCC_GetAPB2Prescaler>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	0adb      	lsrs	r3, r3, #11
 8004cca:	f003 0307 	and.w	r3, r3, #7
 8004cce:	4a04      	ldr	r2, [pc, #16]	; (8004ce0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cd4:	f003 031f 	and.w	r3, r3, #31
 8004cd8:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	bd98      	pop	{r3, r4, r7, pc}
 8004ce0:	0800df50 	.word	0x0800df50

08004ce4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004ce4:	b590      	push	{r4, r7, lr}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2bb0      	cmp	r3, #176	; 0xb0
 8004cf0:	d903      	bls.n	8004cfa <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004cf2:	4b15      	ldr	r3, [pc, #84]	; (8004d48 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf6:	60fb      	str	r3, [r7, #12]
 8004cf8:	e007      	b.n	8004d0a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	091b      	lsrs	r3, r3, #4
 8004cfe:	f003 030f 	and.w	r3, r3, #15
 8004d02:	4a11      	ldr	r2, [pc, #68]	; (8004d48 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004d04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d08:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004d0a:	f7ff f98f 	bl	800402c <LL_RCC_GetAHB4Prescaler>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	091b      	lsrs	r3, r3, #4
 8004d12:	f003 030f 	and.w	r3, r3, #15
 8004d16:	4a0d      	ldr	r2, [pc, #52]	; (8004d4c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d1c:	68fa      	ldr	r2, [r7, #12]
 8004d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d22:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	4a0a      	ldr	r2, [pc, #40]	; (8004d50 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004d28:	fba2 2303 	umull	r2, r3, r2, r3
 8004d2c:	0c9c      	lsrs	r4, r3, #18
 8004d2e:	f7fe fecd 	bl	8003acc <HAL_PWREx_GetVoltageRange>
 8004d32:	4603      	mov	r3, r0
 8004d34:	4619      	mov	r1, r3
 8004d36:	4620      	mov	r0, r4
 8004d38:	f000 f80c 	bl	8004d54 <RCC_SetFlashLatency>
 8004d3c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3714      	adds	r7, #20
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd90      	pop	{r4, r7, pc}
 8004d46:	bf00      	nop
 8004d48:	0800df70 	.word	0x0800df70
 8004d4c:	0800df10 	.word	0x0800df10
 8004d50:	431bde83 	.word	0x431bde83

08004d54 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004d54:	b590      	push	{r4, r7, lr}
 8004d56:	b093      	sub	sp, #76	; 0x4c
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004d5e:	4b39      	ldr	r3, [pc, #228]	; (8004e44 <RCC_SetFlashLatency+0xf0>)
 8004d60:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8004d64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004d66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8004d6a:	4a37      	ldr	r2, [pc, #220]	; (8004e48 <RCC_SetFlashLatency+0xf4>)
 8004d6c:	f107 031c 	add.w	r3, r7, #28
 8004d70:	ca07      	ldmia	r2, {r0, r1, r2}
 8004d72:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004d76:	4b35      	ldr	r3, [pc, #212]	; (8004e4c <RCC_SetFlashLatency+0xf8>)
 8004d78:	f107 040c 	add.w	r4, r7, #12
 8004d7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004d7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004d82:	2300      	movs	r3, #0
 8004d84:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d8c:	d11c      	bne.n	8004dc8 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004d8e:	2300      	movs	r3, #0
 8004d90:	643b      	str	r3, [r7, #64]	; 0x40
 8004d92:	e015      	b.n	8004dc0 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004d94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004d9c:	4413      	add	r3, r2
 8004d9e:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d808      	bhi.n	8004dba <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004da8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004db0:	4413      	add	r3, r2
 8004db2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004db6:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004db8:	e022      	b.n	8004e00 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004dba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	643b      	str	r3, [r7, #64]	; 0x40
 8004dc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dc2:	2b03      	cmp	r3, #3
 8004dc4:	d9e6      	bls.n	8004d94 <RCC_SetFlashLatency+0x40>
 8004dc6:	e01b      	b.n	8004e00 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004dc8:	2300      	movs	r3, #0
 8004dca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dcc:	e015      	b.n	8004dfa <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004dce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004dd6:	4413      	add	r3, r2
 8004dd8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d808      	bhi.n	8004df4 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004dea:	4413      	add	r3, r2
 8004dec:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004df0:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004df2:	e005      	b.n	8004e00 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004df4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004df6:	3301      	adds	r3, #1
 8004df8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	d9e6      	bls.n	8004dce <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8004e00:	4b13      	ldr	r3, [pc, #76]	; (8004e50 <RCC_SetFlashLatency+0xfc>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f023 0207 	bic.w	r2, r3, #7
 8004e08:	4911      	ldr	r1, [pc, #68]	; (8004e50 <RCC_SetFlashLatency+0xfc>)
 8004e0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004e10:	f7fc fe36 	bl	8001a80 <HAL_GetTick>
 8004e14:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004e16:	e008      	b.n	8004e2a <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004e18:	f7fc fe32 	bl	8001a80 <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d901      	bls.n	8004e2a <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e007      	b.n	8004e3a <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004e2a:	4b09      	ldr	r3, [pc, #36]	; (8004e50 <RCC_SetFlashLatency+0xfc>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0307 	and.w	r3, r3, #7
 8004e32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d1ef      	bne.n	8004e18 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	374c      	adds	r7, #76	; 0x4c
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd90      	pop	{r4, r7, pc}
 8004e42:	bf00      	nop
 8004e44:	0800dd54 	.word	0x0800dd54
 8004e48:	0800dd64 	.word	0x0800dd64
 8004e4c:	0800dd70 	.word	0x0800dd70
 8004e50:	58004000 	.word	0x58004000

08004e54 <LL_RCC_LSE_IsEnabled>:
{
 8004e54:	b480      	push	{r7}
 8004e56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004e58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e60:	f003 0301 	and.w	r3, r3, #1
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d101      	bne.n	8004e6c <LL_RCC_LSE_IsEnabled+0x18>
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e000      	b.n	8004e6e <LL_RCC_LSE_IsEnabled+0x1a>
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <LL_RCC_LSE_IsReady>:
{
 8004e78:	b480      	push	{r7}
 8004e7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004e7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e84:	f003 0302 	and.w	r3, r3, #2
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d101      	bne.n	8004e90 <LL_RCC_LSE_IsReady+0x18>
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e000      	b.n	8004e92 <LL_RCC_LSE_IsReady+0x1a>
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <LL_RCC_MSI_EnablePLLMode>:
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8004ea0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004eaa:	f043 0304 	orr.w	r3, r3, #4
 8004eae:	6013      	str	r3, [r2, #0]
}
 8004eb0:	bf00      	nop
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr

08004eba <LL_RCC_SetRFWKPClockSource>:
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b083      	sub	sp, #12
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004ec2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ec6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004eca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ece:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004eda:	bf00      	nop
 8004edc:	370c      	adds	r7, #12
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr

08004ee6 <LL_RCC_SetSMPSClockSource>:
{
 8004ee6:	b480      	push	{r7}
 8004ee8:	b083      	sub	sp, #12
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004eee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef4:	f023 0203 	bic.w	r2, r3, #3
 8004ef8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004f02:	bf00      	nop
 8004f04:	370c      	adds	r7, #12
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr

08004f0e <LL_RCC_SetSMPSPrescaler>:
{
 8004f0e:	b480      	push	{r7}
 8004f10:	b083      	sub	sp, #12
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8004f16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004f20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004f2a:	bf00      	nop
 8004f2c:	370c      	adds	r7, #12
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr

08004f36 <LL_RCC_SetUSARTClockSource>:
{
 8004f36:	b480      	push	{r7}
 8004f38:	b083      	sub	sp, #12
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004f3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f46:	f023 0203 	bic.w	r2, r3, #3
 8004f4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004f56:	bf00      	nop
 8004f58:	370c      	adds	r7, #12
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr

08004f62 <LL_RCC_SetLPUARTClockSource>:
{
 8004f62:	b480      	push	{r7}
 8004f64:	b083      	sub	sp, #12
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004f6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f72:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004f76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004f82:	bf00      	nop
 8004f84:	370c      	adds	r7, #12
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr

08004f8e <LL_RCC_SetI2CClockSource>:
{
 8004f8e:	b480      	push	{r7}
 8004f90:	b083      	sub	sp, #12
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004f96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f9a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	091b      	lsrs	r3, r3, #4
 8004fa2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004fa6:	43db      	mvns	r3, r3
 8004fa8:	401a      	ands	r2, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	011b      	lsls	r3, r3, #4
 8004fae:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004fb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004fbc:	bf00      	nop
 8004fbe:	370c      	adds	r7, #12
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <LL_RCC_SetLPTIMClockSource>:
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004fd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fd4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	0c1b      	lsrs	r3, r3, #16
 8004fdc:	041b      	lsls	r3, r3, #16
 8004fde:	43db      	mvns	r3, r3
 8004fe0:	401a      	ands	r2, r3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	041b      	lsls	r3, r3, #16
 8004fe6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fea:	4313      	orrs	r3, r2
 8004fec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004ff0:	bf00      	nop
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <LL_RCC_SetSAIClockSource>:
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8005004:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800500c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005010:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4313      	orrs	r3, r2
 8005018:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800501c:	bf00      	nop
 800501e:	370c      	adds	r7, #12
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <LL_RCC_SetRNGClockSource>:
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005030:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005038:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800503c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4313      	orrs	r3, r2
 8005044:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005048:	bf00      	nop
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <LL_RCC_SetCLK48ClockSource>:
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800505c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005064:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005068:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4313      	orrs	r3, r2
 8005070:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005074:	bf00      	nop
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <LL_RCC_SetUSBClockSource>:
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f7ff ffe3 	bl	8005054 <LL_RCC_SetCLK48ClockSource>
}
 800508e:	bf00      	nop
 8005090:	3708      	adds	r7, #8
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}

08005096 <LL_RCC_SetADCClockSource>:
{
 8005096:	b480      	push	{r7}
 8005098:	b083      	sub	sp, #12
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800509e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80050aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80050b6:	bf00      	nop
 80050b8:	370c      	adds	r7, #12
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr

080050c2 <LL_RCC_SetRTCClockSource>:
{
 80050c2:	b480      	push	{r7}
 80050c4:	b083      	sub	sp, #12
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80050ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4313      	orrs	r3, r2
 80050de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80050e2:	bf00      	nop
 80050e4:	370c      	adds	r7, #12
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr

080050ee <LL_RCC_GetRTCClockSource>:
{
 80050ee:	b480      	push	{r7}
 80050f0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80050f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80050fe:	4618      	mov	r0, r3
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <LL_RCC_ForceBackupDomainReset>:
{
 8005108:	b480      	push	{r7}
 800510a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800510c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005114:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800511c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005120:	bf00      	nop
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr

0800512a <LL_RCC_ReleaseBackupDomainReset>:
{
 800512a:	b480      	push	{r7}
 800512c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800512e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005136:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800513a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800513e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005142:	bf00      	nop
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <LL_RCC_PLLSAI1_Enable>:
{
 800514c:	b480      	push	{r7}
 800514e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005150:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800515a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800515e:	6013      	str	r3, [r2, #0]
}
 8005160:	bf00      	nop
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr

0800516a <LL_RCC_PLLSAI1_Disable>:
{
 800516a:	b480      	push	{r7}
 800516c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800516e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005178:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800517c:	6013      	str	r3, [r2, #0]
}
 800517e:	bf00      	nop
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr

08005188 <LL_RCC_PLLSAI1_IsReady>:
{
 8005188:	b480      	push	{r7}
 800518a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800518c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005196:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800519a:	d101      	bne.n	80051a0 <LL_RCC_PLLSAI1_IsReady+0x18>
 800519c:	2301      	movs	r3, #1
 800519e:	e000      	b.n	80051a2 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b088      	sub	sp, #32
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80051b4:	2300      	movs	r3, #0
 80051b6:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80051b8:	2300      	movs	r3, #0
 80051ba:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d034      	beq.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051cc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80051d0:	d021      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80051d2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80051d6:	d81b      	bhi.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80051d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80051dc:	d01d      	beq.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80051de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80051e2:	d815      	bhi.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d00b      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80051e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051ec:	d110      	bne.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80051ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051fc:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80051fe:	e00d      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	3304      	adds	r3, #4
 8005204:	4618      	mov	r0, r3
 8005206:	f000 f94d 	bl	80054a4 <RCCEx_PLLSAI1_ConfigNP>
 800520a:	4603      	mov	r3, r0
 800520c:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800520e:	e005      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	77fb      	strb	r3, [r7, #31]
        break;
 8005214:	e002      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005216:	bf00      	nop
 8005218:	e000      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800521a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800521c:	7ffb      	ldrb	r3, [r7, #31]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d105      	bne.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005226:	4618      	mov	r0, r3
 8005228:	f7ff fee8 	bl	8004ffc <LL_RCC_SetSAIClockSource>
 800522c:	e001      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800522e:	7ffb      	ldrb	r3, [r7, #31]
 8005230:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800523a:	2b00      	cmp	r3, #0
 800523c:	d046      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800523e:	f7ff ff56 	bl	80050ee <LL_RCC_GetRTCClockSource>
 8005242:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005248:	69ba      	ldr	r2, [r7, #24]
 800524a:	429a      	cmp	r2, r3
 800524c:	d03c      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800524e:	f7fe fc2d 	bl	8003aac <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d105      	bne.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525c:	4618      	mov	r0, r3
 800525e:	f7ff ff30 	bl	80050c2 <LL_RCC_SetRTCClockSource>
 8005262:	e02e      	b.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005264:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800526c:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800526e:	f7ff ff4b 	bl	8005108 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005272:	f7ff ff5a 	bl	800512a <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005280:	4313      	orrs	r3, r2
 8005282:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005284:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800528e:	f7ff fde1 	bl	8004e54 <LL_RCC_LSE_IsEnabled>
 8005292:	4603      	mov	r3, r0
 8005294:	2b01      	cmp	r3, #1
 8005296:	d114      	bne.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005298:	f7fc fbf2 	bl	8001a80 <HAL_GetTick>
 800529c:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800529e:	e00b      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052a0:	f7fc fbee 	bl	8001a80 <HAL_GetTick>
 80052a4:	4602      	mov	r2, r0
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d902      	bls.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	77fb      	strb	r3, [r7, #31]
              break;
 80052b6:	e004      	b.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80052b8:	f7ff fdde 	bl	8004e78 <LL_RCC_LSE_IsReady>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d1ee      	bne.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80052c2:	7ffb      	ldrb	r3, [r7, #31]
 80052c4:	77bb      	strb	r3, [r7, #30]
 80052c6:	e001      	b.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052c8:	7ffb      	ldrb	r3, [r7, #31]
 80052ca:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 0301 	and.w	r3, r3, #1
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d004      	beq.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	699b      	ldr	r3, [r3, #24]
 80052dc:	4618      	mov	r0, r3
 80052de:	f7ff fe2a 	bl	8004f36 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0302 	and.w	r3, r3, #2
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d004      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	69db      	ldr	r3, [r3, #28]
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7ff fe35 	bl	8004f62 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0310 	and.w	r3, r3, #16
 8005300:	2b00      	cmp	r3, #0
 8005302:	d004      	beq.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005308:	4618      	mov	r0, r3
 800530a:	f7ff fe5d 	bl	8004fc8 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0320 	and.w	r3, r3, #32
 8005316:	2b00      	cmp	r3, #0
 8005318:	d004      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800531e:	4618      	mov	r0, r3
 8005320:	f7ff fe52 	bl	8004fc8 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0304 	and.w	r3, r3, #4
 800532c:	2b00      	cmp	r3, #0
 800532e:	d004      	beq.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6a1b      	ldr	r3, [r3, #32]
 8005334:	4618      	mov	r0, r3
 8005336:	f7ff fe2a 	bl	8004f8e <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0308 	and.w	r3, r3, #8
 8005342:	2b00      	cmp	r3, #0
 8005344:	d004      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534a:	4618      	mov	r0, r3
 800534c:	f7ff fe1f 	bl	8004f8e <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005358:	2b00      	cmp	r3, #0
 800535a:	d022      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005360:	4618      	mov	r0, r3
 8005362:	f7ff fe8d 	bl	8005080 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800536a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800536e:	d107      	bne.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005370:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800537a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800537e:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005384:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005388:	d10b      	bne.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	3304      	adds	r3, #4
 800538e:	4618      	mov	r0, r3
 8005390:	f000 f8e3 	bl	800555a <RCCEx_PLLSAI1_ConfigNQ>
 8005394:	4603      	mov	r3, r0
 8005396:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8005398:	7ffb      	ldrb	r3, [r7, #31]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d001      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 800539e:	7ffb      	ldrb	r3, [r7, #31]
 80053a0:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d02b      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053b6:	d008      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053c0:	d003      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d105      	bne.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ce:	4618      	mov	r0, r3
 80053d0:	f7ff fe2a 	bl	8005028 <LL_RCC_SetRNGClockSource>
 80053d4:	e00a      	b.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x240>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053de:	60fb      	str	r3, [r7, #12]
 80053e0:	2000      	movs	r0, #0
 80053e2:	f7ff fe21 	bl	8005028 <LL_RCC_SetRNGClockSource>
 80053e6:	68f8      	ldr	r0, [r7, #12]
 80053e8:	f7ff fe34 	bl	8005054 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80053f4:	d107      	bne.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80053f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005400:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005404:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800540e:	2b00      	cmp	r3, #0
 8005410:	d022      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005416:	4618      	mov	r0, r3
 8005418:	f7ff fe3d 	bl	8005096 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005420:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005424:	d107      	bne.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005426:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005434:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800543a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800543e:	d10b      	bne.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	3304      	adds	r3, #4
 8005444:	4618      	mov	r0, r3
 8005446:	f000 f8e3 	bl	8005610 <RCCEx_PLLSAI1_ConfigNR>
 800544a:	4603      	mov	r3, r0
 800544c:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 800544e:	7ffb      	ldrb	r3, [r7, #31]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d001      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 8005454:	7ffb      	ldrb	r3, [r7, #31]
 8005456:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d004      	beq.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005468:	4618      	mov	r0, r3
 800546a:	f7ff fd26 	bl	8004eba <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d009      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800547e:	4618      	mov	r0, r3
 8005480:	f7ff fd45 	bl	8004f0e <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005488:	4618      	mov	r0, r3
 800548a:	f7ff fd2c 	bl	8004ee6 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 800548e:	7fbb      	ldrb	r3, [r7, #30]
}
 8005490:	4618      	mov	r0, r3
 8005492:	3720      	adds	r7, #32
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 800549c:	f7ff fcfe 	bl	8004e9c <LL_RCC_MSI_EnablePLLMode>
}
 80054a0:	bf00      	nop
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054ac:	2300      	movs	r3, #0
 80054ae:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80054b0:	f7ff fe5b 	bl	800516a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80054b4:	f7fc fae4 	bl	8001a80 <HAL_GetTick>
 80054b8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80054ba:	e009      	b.n	80054d0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80054bc:	f7fc fae0 	bl	8001a80 <HAL_GetTick>
 80054c0:	4602      	mov	r2, r0
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d902      	bls.n	80054d0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	73fb      	strb	r3, [r7, #15]
      break;
 80054ce:	e004      	b.n	80054da <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80054d0:	f7ff fe5a 	bl	8005188 <LL_RCC_PLLSAI1_IsReady>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d1f0      	bne.n	80054bc <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80054da:	7bfb      	ldrb	r3, [r7, #15]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d137      	bne.n	8005550 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80054e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	021b      	lsls	r3, r3, #8
 80054f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054f4:	4313      	orrs	r3, r2
 80054f6:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80054f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800550a:	4313      	orrs	r3, r2
 800550c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800550e:	f7ff fe1d 	bl	800514c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005512:	f7fc fab5 	bl	8001a80 <HAL_GetTick>
 8005516:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005518:	e009      	b.n	800552e <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800551a:	f7fc fab1 	bl	8001a80 <HAL_GetTick>
 800551e:	4602      	mov	r2, r0
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	1ad3      	subs	r3, r2, r3
 8005524:	2b02      	cmp	r3, #2
 8005526:	d902      	bls.n	800552e <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8005528:	2303      	movs	r3, #3
 800552a:	73fb      	strb	r3, [r7, #15]
        break;
 800552c:	e004      	b.n	8005538 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800552e:	f7ff fe2b 	bl	8005188 <LL_RCC_PLLSAI1_IsReady>
 8005532:	4603      	mov	r3, r0
 8005534:	2b01      	cmp	r3, #1
 8005536:	d1f0      	bne.n	800551a <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8005538:	7bfb      	ldrb	r3, [r7, #15]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d108      	bne.n	8005550 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800553e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005542:	691a      	ldr	r2, [r3, #16]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800554c:	4313      	orrs	r3, r2
 800554e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005550:	7bfb      	ldrb	r3, [r7, #15]
}
 8005552:	4618      	mov	r0, r3
 8005554:	3710      	adds	r7, #16
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}

0800555a <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800555a:	b580      	push	{r7, lr}
 800555c:	b084      	sub	sp, #16
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005562:	2300      	movs	r3, #0
 8005564:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005566:	f7ff fe00 	bl	800516a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800556a:	f7fc fa89 	bl	8001a80 <HAL_GetTick>
 800556e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005570:	e009      	b.n	8005586 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005572:	f7fc fa85 	bl	8001a80 <HAL_GetTick>
 8005576:	4602      	mov	r2, r0
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	1ad3      	subs	r3, r2, r3
 800557c:	2b02      	cmp	r3, #2
 800557e:	d902      	bls.n	8005586 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005580:	2303      	movs	r3, #3
 8005582:	73fb      	strb	r3, [r7, #15]
      break;
 8005584:	e004      	b.n	8005590 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005586:	f7ff fdff 	bl	8005188 <LL_RCC_PLLSAI1_IsReady>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d1f0      	bne.n	8005572 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005590:	7bfb      	ldrb	r3, [r7, #15]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d137      	bne.n	8005606 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005596:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	021b      	lsls	r3, r3, #8
 80055a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055aa:	4313      	orrs	r3, r2
 80055ac:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80055ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055c0:	4313      	orrs	r3, r2
 80055c2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80055c4:	f7ff fdc2 	bl	800514c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055c8:	f7fc fa5a 	bl	8001a80 <HAL_GetTick>
 80055cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80055ce:	e009      	b.n	80055e4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80055d0:	f7fc fa56 	bl	8001a80 <HAL_GetTick>
 80055d4:	4602      	mov	r2, r0
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d902      	bls.n	80055e4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	73fb      	strb	r3, [r7, #15]
        break;
 80055e2:	e004      	b.n	80055ee <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80055e4:	f7ff fdd0 	bl	8005188 <LL_RCC_PLLSAI1_IsReady>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d1f0      	bne.n	80055d0 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80055ee:	7bfb      	ldrb	r3, [r7, #15]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d108      	bne.n	8005606 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80055f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055f8:	691a      	ldr	r2, [r3, #16]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005602:	4313      	orrs	r3, r2
 8005604:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005606:	7bfb      	ldrb	r3, [r7, #15]
}
 8005608:	4618      	mov	r0, r3
 800560a:	3710      	adds	r7, #16
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005618:	2300      	movs	r3, #0
 800561a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800561c:	f7ff fda5 	bl	800516a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005620:	f7fc fa2e 	bl	8001a80 <HAL_GetTick>
 8005624:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005626:	e009      	b.n	800563c <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005628:	f7fc fa2a 	bl	8001a80 <HAL_GetTick>
 800562c:	4602      	mov	r2, r0
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	2b02      	cmp	r3, #2
 8005634:	d902      	bls.n	800563c <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	73fb      	strb	r3, [r7, #15]
      break;
 800563a:	e004      	b.n	8005646 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800563c:	f7ff fda4 	bl	8005188 <LL_RCC_PLLSAI1_IsReady>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1f0      	bne.n	8005628 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005646:	7bfb      	ldrb	r3, [r7, #15]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d137      	bne.n	80056bc <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800564c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	021b      	lsls	r3, r3, #8
 800565c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005660:	4313      	orrs	r3, r2
 8005662:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8005664:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005676:	4313      	orrs	r3, r2
 8005678:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800567a:	f7ff fd67 	bl	800514c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800567e:	f7fc f9ff 	bl	8001a80 <HAL_GetTick>
 8005682:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005684:	e009      	b.n	800569a <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005686:	f7fc f9fb 	bl	8001a80 <HAL_GetTick>
 800568a:	4602      	mov	r2, r0
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	2b02      	cmp	r3, #2
 8005692:	d902      	bls.n	800569a <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	73fb      	strb	r3, [r7, #15]
        break;
 8005698:	e004      	b.n	80056a4 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800569a:	f7ff fd75 	bl	8005188 <LL_RCC_PLLSAI1_IsReady>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d1f0      	bne.n	8005686 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80056a4:	7bfb      	ldrb	r3, [r7, #15]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d108      	bne.n	80056bc <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80056aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056ae:	691a      	ldr	r2, [r3, #16]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056b8:	4313      	orrs	r3, r2
 80056ba:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80056bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3710      	adds	r7, #16
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80056c6:	b580      	push	{r7, lr}
 80056c8:	b082      	sub	sp, #8
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d101      	bne.n	80056d8 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e090      	b.n	80057fa <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d106      	bne.n	80056f2 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f7fc f83b 	bl	8001768 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2202      	movs	r2, #2
 80056f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	22ca      	movs	r2, #202	; 0xca
 8005700:	625a      	str	r2, [r3, #36]	; 0x24
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2253      	movs	r2, #83	; 0x53
 8005708:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 f89f 	bl	800584e <RTC_EnterInitMode>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d009      	beq.n	800572a <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	22ff      	movs	r2, #255	; 0xff
 800571c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2204      	movs	r2, #4
 8005722:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e067      	b.n	80057fa <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	6812      	ldr	r2, [r2, #0]
 8005734:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005738:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800573c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	6899      	ldr	r1, [r3, #8]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	685a      	ldr	r2, [r3, #4]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	691b      	ldr	r3, [r3, #16]
 800574c:	431a      	orrs	r2, r3
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	699b      	ldr	r3, [r3, #24]
 8005752:	431a      	orrs	r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	430a      	orrs	r2, r1
 800575a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	68d2      	ldr	r2, [r2, #12]
 8005764:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	6919      	ldr	r1, [r3, #16]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	041a      	lsls	r2, r3, #16
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	430a      	orrs	r2, r1
 8005778:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68da      	ldr	r2, [r3, #12]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005788:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f022 0203 	bic.w	r2, r2, #3
 8005798:	64da      	str	r2, [r3, #76]	; 0x4c
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	69da      	ldr	r2, [r3, #28]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	695b      	ldr	r3, [r3, #20]
 80057a8:	431a      	orrs	r2, r3
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	430a      	orrs	r2, r1
 80057b0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	f003 0320 	and.w	r3, r3, #32
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d113      	bne.n	80057e8 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f000 f81e 	bl	8005802 <HAL_RTC_WaitForSynchro>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00d      	beq.n	80057e8 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	22ff      	movs	r2, #255	; 0xff
 80057d2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2204      	movs	r2, #4
 80057d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e008      	b.n	80057fa <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	22ff      	movs	r2, #255	; 0xff
 80057ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 80057f8:	2300      	movs	r3, #0
  }
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3708      	adds	r7, #8
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}

08005802 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005802:	b580      	push	{r7, lr}
 8005804:	b084      	sub	sp, #16
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68da      	ldr	r2, [r3, #12]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005818:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800581a:	f7fc f931 	bl	8001a80 <HAL_GetTick>
 800581e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005820:	e009      	b.n	8005836 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005822:	f7fc f92d 	bl	8001a80 <HAL_GetTick>
 8005826:	4602      	mov	r2, r0
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005830:	d901      	bls.n	8005836 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e007      	b.n	8005846 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	f003 0320 	and.w	r3, r3, #32
 8005840:	2b00      	cmp	r3, #0
 8005842:	d0ee      	beq.n	8005822 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	3710      	adds	r7, #16
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}

0800584e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800584e:	b580      	push	{r7, lr}
 8005850:	b084      	sub	sp, #16
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005860:	2b00      	cmp	r3, #0
 8005862:	d119      	bne.n	8005898 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f04f 32ff 	mov.w	r2, #4294967295
 800586c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800586e:	f7fc f907 	bl	8001a80 <HAL_GetTick>
 8005872:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005874:	e009      	b.n	800588a <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8005876:	f7fc f903 	bl	8001a80 <HAL_GetTick>
 800587a:	4602      	mov	r2, r0
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005884:	d901      	bls.n	800588a <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	e007      	b.n	800589a <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005894:	2b00      	cmp	r3, #0
 8005896:	d0ee      	beq.n	8005876 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8005898:	2300      	movs	r3, #0
}
 800589a:	4618      	mov	r0, r3
 800589c:	3710      	adds	r7, #16
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}

080058a2 <HAL_RTCEx_SetWakeUpTimer>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80058a2:	b580      	push	{r7, lr}
 80058a4:	b086      	sub	sp, #24
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	60f8      	str	r0, [r7, #12]
 80058aa:	60b9      	str	r1, [r7, #8]
 80058ac:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d101      	bne.n	80058bc <HAL_RTCEx_SetWakeUpTimer+0x1a>
 80058b8:	2302      	movs	r3, #2
 80058ba:	e089      	b.n	80059d0 <HAL_RTCEx_SetWakeUpTimer+0x12e>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2202      	movs	r2, #2
 80058c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	22ca      	movs	r2, #202	; 0xca
 80058d2:	625a      	str	r2, [r3, #36]	; 0x24
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2253      	movs	r2, #83	; 0x53
 80058da:	625a      	str	r2, [r3, #36]	; 0x24
 
  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if((hrtc->Instance->CR & RTC_CR_WUTE) != 0U){
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d020      	beq.n	800592c <HAL_RTCEx_SetWakeUpTimer+0x8a>
    tickstart = HAL_GetTick();
 80058ea:	f7fc f8c9 	bl	8001a80 <HAL_GetTick>
 80058ee:	6178      	str	r0, [r7, #20]

   /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80058f0:	e015      	b.n	800591e <HAL_RTCEx_SetWakeUpTimer+0x7c>
   {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80058f2:	f7fc f8c5 	bl	8001a80 <HAL_GetTick>
 80058f6:	4602      	mov	r2, r0
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005900:	d90d      	bls.n	800591e <HAL_RTCEx_SetWakeUpTimer+0x7c>
      {
       /* Enable the write protection for RTC registers */
       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	22ff      	movs	r2, #255	; 0xff
 8005908:	625a      	str	r2, [r3, #36]	; 0x24

       hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2203      	movs	r2, #3
 800590e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

       /* Process Unlocked */ 
       __HAL_UNLOCK(hrtc);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 2020 	strb.w	r2, [r3, #32]

       return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e058      	b.n	80059d0 <HAL_RTCEx_SetWakeUpTimer+0x12e>
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	f003 0304 	and.w	r3, r3, #4
 8005928:	2b00      	cmp	r3, #0
 800592a:	d1e2      	bne.n	80058f2 <HAL_RTCEx_SetWakeUpTimer+0x50>
      }
    }
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	689a      	ldr	r2, [r3, #8]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800593a:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 800593c:	f7fc f8a0 	bl	8001a80 <HAL_GetTick>
 8005940:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005942:	e015      	b.n	8005970 <HAL_RTCEx_SetWakeUpTimer+0xce>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005944:	f7fc f89c 	bl	8001a80 <HAL_GetTick>
 8005948:	4602      	mov	r2, r0
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005952:	d90d      	bls.n	8005970 <HAL_RTCEx_SetWakeUpTimer+0xce>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	22ff      	movs	r2, #255	; 0xff
 800595a:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2203      	movs	r2, #3
 8005960:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */ 
      __HAL_UNLOCK(hrtc);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2200      	movs	r2, #0
 8005968:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	e02f      	b.n	80059d0 <HAL_RTCEx_SetWakeUpTimer+0x12e>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	f003 0304 	and.w	r3, r3, #4
 800597a:	2b00      	cmp	r3, #0
 800597c:	d0e2      	beq.n	8005944 <HAL_RTCEx_SetWakeUpTimer+0xa2>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	689a      	ldr	r2, [r3, #8]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f022 0207 	bic.w	r2, r2, #7
 800598c:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	6899      	ldr	r1, [r3, #8]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	430a      	orrs	r2, r1
 800599c:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68ba      	ldr	r2, [r7, #8]
 80059a4:	615a      	str	r2, [r3, #20]

   /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	689a      	ldr	r2, [r3, #8]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80059b4:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	22ff      	movs	r2, #255	; 0xff
 80059bc:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2201      	movs	r2, #1
 80059c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3718      	adds	r7, #24
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d101      	bne.n	80059ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e049      	b.n	8005a7e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d106      	bne.n	8005a04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f7fb fec8 	bl	8001794 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2202      	movs	r2, #2
 8005a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	3304      	adds	r3, #4
 8005a14:	4619      	mov	r1, r3
 8005a16:	4610      	mov	r0, r2
 8005a18:	f000 f8fc 	bl	8005c14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3708      	adds	r7, #8
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}

08005a86 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a86:	b580      	push	{r7, lr}
 8005a88:	b084      	sub	sp, #16
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
 8005a8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d101      	bne.n	8005a9e <HAL_TIM_ConfigClockSource+0x18>
 8005a9a:	2302      	movs	r3, #2
 8005a9c:	e0b5      	b.n	8005c0a <HAL_TIM_ConfigClockSource+0x184>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2202      	movs	r2, #2
 8005aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005abc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005ac0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ac8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ada:	d03e      	beq.n	8005b5a <HAL_TIM_ConfigClockSource+0xd4>
 8005adc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ae0:	f200 8087 	bhi.w	8005bf2 <HAL_TIM_ConfigClockSource+0x16c>
 8005ae4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ae8:	f000 8085 	beq.w	8005bf6 <HAL_TIM_ConfigClockSource+0x170>
 8005aec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005af0:	d87f      	bhi.n	8005bf2 <HAL_TIM_ConfigClockSource+0x16c>
 8005af2:	2b70      	cmp	r3, #112	; 0x70
 8005af4:	d01a      	beq.n	8005b2c <HAL_TIM_ConfigClockSource+0xa6>
 8005af6:	2b70      	cmp	r3, #112	; 0x70
 8005af8:	d87b      	bhi.n	8005bf2 <HAL_TIM_ConfigClockSource+0x16c>
 8005afa:	2b60      	cmp	r3, #96	; 0x60
 8005afc:	d050      	beq.n	8005ba0 <HAL_TIM_ConfigClockSource+0x11a>
 8005afe:	2b60      	cmp	r3, #96	; 0x60
 8005b00:	d877      	bhi.n	8005bf2 <HAL_TIM_ConfigClockSource+0x16c>
 8005b02:	2b50      	cmp	r3, #80	; 0x50
 8005b04:	d03c      	beq.n	8005b80 <HAL_TIM_ConfigClockSource+0xfa>
 8005b06:	2b50      	cmp	r3, #80	; 0x50
 8005b08:	d873      	bhi.n	8005bf2 <HAL_TIM_ConfigClockSource+0x16c>
 8005b0a:	2b40      	cmp	r3, #64	; 0x40
 8005b0c:	d058      	beq.n	8005bc0 <HAL_TIM_ConfigClockSource+0x13a>
 8005b0e:	2b40      	cmp	r3, #64	; 0x40
 8005b10:	d86f      	bhi.n	8005bf2 <HAL_TIM_ConfigClockSource+0x16c>
 8005b12:	2b30      	cmp	r3, #48	; 0x30
 8005b14:	d064      	beq.n	8005be0 <HAL_TIM_ConfigClockSource+0x15a>
 8005b16:	2b30      	cmp	r3, #48	; 0x30
 8005b18:	d86b      	bhi.n	8005bf2 <HAL_TIM_ConfigClockSource+0x16c>
 8005b1a:	2b20      	cmp	r3, #32
 8005b1c:	d060      	beq.n	8005be0 <HAL_TIM_ConfigClockSource+0x15a>
 8005b1e:	2b20      	cmp	r3, #32
 8005b20:	d867      	bhi.n	8005bf2 <HAL_TIM_ConfigClockSource+0x16c>
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d05c      	beq.n	8005be0 <HAL_TIM_ConfigClockSource+0x15a>
 8005b26:	2b10      	cmp	r3, #16
 8005b28:	d05a      	beq.n	8005be0 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005b2a:	e062      	b.n	8005bf2 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6818      	ldr	r0, [r3, #0]
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	6899      	ldr	r1, [r3, #8]
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	685a      	ldr	r2, [r3, #4]
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	f000 f94a 	bl	8005dd4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b4e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	609a      	str	r2, [r3, #8]
      break;
 8005b58:	e04e      	b.n	8005bf8 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6818      	ldr	r0, [r3, #0]
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	6899      	ldr	r1, [r3, #8]
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	685a      	ldr	r2, [r3, #4]
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	f000 f933 	bl	8005dd4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	689a      	ldr	r2, [r3, #8]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b7c:	609a      	str	r2, [r3, #8]
      break;
 8005b7e:	e03b      	b.n	8005bf8 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6818      	ldr	r0, [r3, #0]
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	6859      	ldr	r1, [r3, #4]
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	f000 f8a5 	bl	8005cdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2150      	movs	r1, #80	; 0x50
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f000 f8fe 	bl	8005d9a <TIM_ITRx_SetConfig>
      break;
 8005b9e:	e02b      	b.n	8005bf8 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6818      	ldr	r0, [r3, #0]
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	6859      	ldr	r1, [r3, #4]
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	461a      	mov	r2, r3
 8005bae:	f000 f8c4 	bl	8005d3a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	2160      	movs	r1, #96	; 0x60
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f000 f8ee 	bl	8005d9a <TIM_ITRx_SetConfig>
      break;
 8005bbe:	e01b      	b.n	8005bf8 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6818      	ldr	r0, [r3, #0]
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	6859      	ldr	r1, [r3, #4]
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	461a      	mov	r2, r3
 8005bce:	f000 f885 	bl	8005cdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	2140      	movs	r1, #64	; 0x40
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f000 f8de 	bl	8005d9a <TIM_ITRx_SetConfig>
      break;
 8005bde:	e00b      	b.n	8005bf8 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4619      	mov	r1, r3
 8005bea:	4610      	mov	r0, r2
 8005bec:	f000 f8d5 	bl	8005d9a <TIM_ITRx_SetConfig>
        break;
 8005bf0:	e002      	b.n	8005bf8 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8005bf2:	bf00      	nop
 8005bf4:	e000      	b.n	8005bf8 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8005bf6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3710      	adds	r7, #16
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
	...

08005c14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b085      	sub	sp, #20
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a2a      	ldr	r2, [pc, #168]	; (8005cd0 <TIM_Base_SetConfig+0xbc>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d003      	beq.n	8005c34 <TIM_Base_SetConfig+0x20>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c32:	d108      	bne.n	8005c46 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a21      	ldr	r2, [pc, #132]	; (8005cd0 <TIM_Base_SetConfig+0xbc>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d00b      	beq.n	8005c66 <TIM_Base_SetConfig+0x52>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c54:	d007      	beq.n	8005c66 <TIM_Base_SetConfig+0x52>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a1e      	ldr	r2, [pc, #120]	; (8005cd4 <TIM_Base_SetConfig+0xc0>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d003      	beq.n	8005c66 <TIM_Base_SetConfig+0x52>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a1d      	ldr	r2, [pc, #116]	; (8005cd8 <TIM_Base_SetConfig+0xc4>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d108      	bne.n	8005c78 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	695b      	ldr	r3, [r3, #20]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	689a      	ldr	r2, [r3, #8]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4a0c      	ldr	r2, [pc, #48]	; (8005cd0 <TIM_Base_SetConfig+0xbc>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d007      	beq.n	8005cb4 <TIM_Base_SetConfig+0xa0>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	4a0b      	ldr	r2, [pc, #44]	; (8005cd4 <TIM_Base_SetConfig+0xc0>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d003      	beq.n	8005cb4 <TIM_Base_SetConfig+0xa0>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4a0a      	ldr	r2, [pc, #40]	; (8005cd8 <TIM_Base_SetConfig+0xc4>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d103      	bne.n	8005cbc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	691a      	ldr	r2, [r3, #16]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	615a      	str	r2, [r3, #20]
}
 8005cc2:	bf00      	nop
 8005cc4:	3714      	adds	r7, #20
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	40012c00 	.word	0x40012c00
 8005cd4:	40014400 	.word	0x40014400
 8005cd8:	40014800 	.word	0x40014800

08005cdc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b087      	sub	sp, #28
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6a1b      	ldr	r3, [r3, #32]
 8005cec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	f023 0201 	bic.w	r2, r3, #1
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	699b      	ldr	r3, [r3, #24]
 8005cfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	011b      	lsls	r3, r3, #4
 8005d0c:	693a      	ldr	r2, [r7, #16]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	f023 030a 	bic.w	r3, r3, #10
 8005d18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	693a      	ldr	r2, [r7, #16]
 8005d26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	697a      	ldr	r2, [r7, #20]
 8005d2c:	621a      	str	r2, [r3, #32]
}
 8005d2e:	bf00      	nop
 8005d30:	371c      	adds	r7, #28
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr

08005d3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d3a:	b480      	push	{r7}
 8005d3c:	b087      	sub	sp, #28
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	60f8      	str	r0, [r7, #12]
 8005d42:	60b9      	str	r1, [r7, #8]
 8005d44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6a1b      	ldr	r3, [r3, #32]
 8005d4a:	f023 0210 	bic.w	r2, r3, #16
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	699b      	ldr	r3, [r3, #24]
 8005d56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6a1b      	ldr	r3, [r3, #32]
 8005d5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	031b      	lsls	r3, r3, #12
 8005d6a:	697a      	ldr	r2, [r7, #20]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d76:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	011b      	lsls	r3, r3, #4
 8005d7c:	693a      	ldr	r2, [r7, #16]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	697a      	ldr	r2, [r7, #20]
 8005d86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	693a      	ldr	r2, [r7, #16]
 8005d8c:	621a      	str	r2, [r3, #32]
}
 8005d8e:	bf00      	nop
 8005d90:	371c      	adds	r7, #28
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr

08005d9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d9a:	b480      	push	{r7}
 8005d9c:	b085      	sub	sp, #20
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
 8005da2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005db0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005db4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005db6:	683a      	ldr	r2, [r7, #0]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	f043 0307 	orr.w	r3, r3, #7
 8005dc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	609a      	str	r2, [r3, #8]
}
 8005dc8:	bf00      	nop
 8005dca:	3714      	adds	r7, #20
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b087      	sub	sp, #28
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]
 8005de0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005dee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	021a      	lsls	r2, r3, #8
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	431a      	orrs	r2, r3
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	697a      	ldr	r2, [r7, #20]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	697a      	ldr	r2, [r7, #20]
 8005e06:	609a      	str	r2, [r3, #8]
}
 8005e08:	bf00      	nop
 8005e0a:	371c      	adds	r7, #28
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b085      	sub	sp, #20
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d101      	bne.n	8005e2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e28:	2302      	movs	r3, #2
 8005e2a:	e04a      	b.n	8005ec2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2202      	movs	r2, #2
 8005e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a1f      	ldr	r2, [pc, #124]	; (8005ed0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d108      	bne.n	8005e68 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005e5c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a12      	ldr	r2, [pc, #72]	; (8005ed0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d004      	beq.n	8005e96 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e94:	d10c      	bne.n	8005eb0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	68ba      	ldr	r2, [r7, #8]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	68ba      	ldr	r2, [r7, #8]
 8005eae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3714      	adds	r7, #20
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr
 8005ece:	bf00      	nop
 8005ed0:	40012c00 	.word	0x40012c00

08005ed4 <LL_RCC_GetUSARTClockSource>:
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8005edc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ee0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4013      	ands	r3, r2
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	370c      	adds	r7, #12
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <LL_RCC_GetLPUARTClockSource>:
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8005efc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f00:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4013      	ands	r3, r2
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b082      	sub	sp, #8
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d101      	bne.n	8005f26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e042      	b.n	8005fac <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d106      	bne.n	8005f3e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f7fb fc3f 	bl	80017bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2224      	movs	r2, #36	; 0x24
 8005f42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f022 0201 	bic.w	r2, r2, #1
 8005f54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 f82c 	bl	8005fb4 <UART_SetConfig>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d101      	bne.n	8005f66 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e022      	b.n	8005fac <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d002      	beq.n	8005f74 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 fa26 	bl	80063c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	685a      	ldr	r2, [r3, #4]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	689a      	ldr	r2, [r3, #8]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f042 0201 	orr.w	r2, r2, #1
 8005fa2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f000 faad 	bl	8006504 <UART_CheckIdleState>
 8005faa:	4603      	mov	r3, r0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3708      	adds	r7, #8
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fb4:	b5b0      	push	{r4, r5, r7, lr}
 8005fb6:	b088      	sub	sp, #32
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	689a      	ldr	r2, [r3, #8]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	691b      	ldr	r3, [r3, #16]
 8005fc8:	431a      	orrs	r2, r3
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	695b      	ldr	r3, [r3, #20]
 8005fce:	431a      	orrs	r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	69db      	ldr	r3, [r3, #28]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	4ba3      	ldr	r3, [pc, #652]	; (800626c <UART_SetConfig+0x2b8>)
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	6812      	ldr	r2, [r2, #0]
 8005fe6:	69f9      	ldr	r1, [r7, #28]
 8005fe8:	430b      	orrs	r3, r1
 8005fea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	68da      	ldr	r2, [r3, #12]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	430a      	orrs	r2, r1
 8006000:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	699b      	ldr	r3, [r3, #24]
 8006006:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a98      	ldr	r2, [pc, #608]	; (8006270 <UART_SetConfig+0x2bc>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d004      	beq.n	800601c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a1b      	ldr	r3, [r3, #32]
 8006016:	69fa      	ldr	r2, [r7, #28]
 8006018:	4313      	orrs	r3, r2
 800601a:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006026:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	6812      	ldr	r2, [r2, #0]
 800602e:	69f9      	ldr	r1, [r7, #28]
 8006030:	430b      	orrs	r3, r1
 8006032:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800603a:	f023 010f 	bic.w	r1, r3, #15
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	430a      	orrs	r2, r1
 8006048:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a89      	ldr	r2, [pc, #548]	; (8006274 <UART_SetConfig+0x2c0>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d120      	bne.n	8006096 <UART_SetConfig+0xe2>
 8006054:	2003      	movs	r0, #3
 8006056:	f7ff ff3d 	bl	8005ed4 <LL_RCC_GetUSARTClockSource>
 800605a:	4603      	mov	r3, r0
 800605c:	2b03      	cmp	r3, #3
 800605e:	d817      	bhi.n	8006090 <UART_SetConfig+0xdc>
 8006060:	a201      	add	r2, pc, #4	; (adr r2, 8006068 <UART_SetConfig+0xb4>)
 8006062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006066:	bf00      	nop
 8006068:	08006079 	.word	0x08006079
 800606c:	08006085 	.word	0x08006085
 8006070:	0800607f 	.word	0x0800607f
 8006074:	0800608b 	.word	0x0800608b
 8006078:	2301      	movs	r3, #1
 800607a:	76fb      	strb	r3, [r7, #27]
 800607c:	e038      	b.n	80060f0 <UART_SetConfig+0x13c>
 800607e:	2302      	movs	r3, #2
 8006080:	76fb      	strb	r3, [r7, #27]
 8006082:	e035      	b.n	80060f0 <UART_SetConfig+0x13c>
 8006084:	2304      	movs	r3, #4
 8006086:	76fb      	strb	r3, [r7, #27]
 8006088:	e032      	b.n	80060f0 <UART_SetConfig+0x13c>
 800608a:	2308      	movs	r3, #8
 800608c:	76fb      	strb	r3, [r7, #27]
 800608e:	e02f      	b.n	80060f0 <UART_SetConfig+0x13c>
 8006090:	2310      	movs	r3, #16
 8006092:	76fb      	strb	r3, [r7, #27]
 8006094:	e02c      	b.n	80060f0 <UART_SetConfig+0x13c>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a75      	ldr	r2, [pc, #468]	; (8006270 <UART_SetConfig+0x2bc>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d125      	bne.n	80060ec <UART_SetConfig+0x138>
 80060a0:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80060a4:	f7ff ff26 	bl	8005ef4 <LL_RCC_GetLPUARTClockSource>
 80060a8:	4603      	mov	r3, r0
 80060aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060ae:	d017      	beq.n	80060e0 <UART_SetConfig+0x12c>
 80060b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060b4:	d817      	bhi.n	80060e6 <UART_SetConfig+0x132>
 80060b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060ba:	d00b      	beq.n	80060d4 <UART_SetConfig+0x120>
 80060bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060c0:	d811      	bhi.n	80060e6 <UART_SetConfig+0x132>
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d003      	beq.n	80060ce <UART_SetConfig+0x11a>
 80060c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060ca:	d006      	beq.n	80060da <UART_SetConfig+0x126>
 80060cc:	e00b      	b.n	80060e6 <UART_SetConfig+0x132>
 80060ce:	2300      	movs	r3, #0
 80060d0:	76fb      	strb	r3, [r7, #27]
 80060d2:	e00d      	b.n	80060f0 <UART_SetConfig+0x13c>
 80060d4:	2302      	movs	r3, #2
 80060d6:	76fb      	strb	r3, [r7, #27]
 80060d8:	e00a      	b.n	80060f0 <UART_SetConfig+0x13c>
 80060da:	2304      	movs	r3, #4
 80060dc:	76fb      	strb	r3, [r7, #27]
 80060de:	e007      	b.n	80060f0 <UART_SetConfig+0x13c>
 80060e0:	2308      	movs	r3, #8
 80060e2:	76fb      	strb	r3, [r7, #27]
 80060e4:	e004      	b.n	80060f0 <UART_SetConfig+0x13c>
 80060e6:	2310      	movs	r3, #16
 80060e8:	76fb      	strb	r3, [r7, #27]
 80060ea:	e001      	b.n	80060f0 <UART_SetConfig+0x13c>
 80060ec:	2310      	movs	r3, #16
 80060ee:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a5e      	ldr	r2, [pc, #376]	; (8006270 <UART_SetConfig+0x2bc>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	f040 808b 	bne.w	8006212 <UART_SetConfig+0x25e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80060fc:	7efb      	ldrb	r3, [r7, #27]
 80060fe:	2b08      	cmp	r3, #8
 8006100:	d823      	bhi.n	800614a <UART_SetConfig+0x196>
 8006102:	a201      	add	r2, pc, #4	; (adr r2, 8006108 <UART_SetConfig+0x154>)
 8006104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006108:	0800612d 	.word	0x0800612d
 800610c:	0800614b 	.word	0x0800614b
 8006110:	08006135 	.word	0x08006135
 8006114:	0800614b 	.word	0x0800614b
 8006118:	0800613b 	.word	0x0800613b
 800611c:	0800614b 	.word	0x0800614b
 8006120:	0800614b 	.word	0x0800614b
 8006124:	0800614b 	.word	0x0800614b
 8006128:	08006143 	.word	0x08006143
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800612c:	f7fe fdae 	bl	8004c8c <HAL_RCC_GetPCLK1Freq>
 8006130:	6178      	str	r0, [r7, #20]
        break;
 8006132:	e00f      	b.n	8006154 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006134:	4b50      	ldr	r3, [pc, #320]	; (8006278 <UART_SetConfig+0x2c4>)
 8006136:	617b      	str	r3, [r7, #20]
        break;
 8006138:	e00c      	b.n	8006154 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800613a:	f7fe fd27 	bl	8004b8c <HAL_RCC_GetSysClockFreq>
 800613e:	6178      	str	r0, [r7, #20]
        break;
 8006140:	e008      	b.n	8006154 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006142:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006146:	617b      	str	r3, [r7, #20]
        break;
 8006148:	e004      	b.n	8006154 <UART_SetConfig+0x1a0>
      default:
        pclk = 0U;
 800614a:	2300      	movs	r3, #0
 800614c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	76bb      	strb	r3, [r7, #26]
        break;
 8006152:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	2b00      	cmp	r3, #0
 8006158:	f000 811a 	beq.w	8006390 <UART_SetConfig+0x3dc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006160:	4a46      	ldr	r2, [pc, #280]	; (800627c <UART_SetConfig+0x2c8>)
 8006162:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006166:	461a      	mov	r2, r3
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	fbb3 f3f2 	udiv	r3, r3, r2
 800616e:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	685a      	ldr	r2, [r3, #4]
 8006174:	4613      	mov	r3, r2
 8006176:	005b      	lsls	r3, r3, #1
 8006178:	4413      	add	r3, r2
 800617a:	68ba      	ldr	r2, [r7, #8]
 800617c:	429a      	cmp	r2, r3
 800617e:	d305      	bcc.n	800618c <UART_SetConfig+0x1d8>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006186:	68ba      	ldr	r2, [r7, #8]
 8006188:	429a      	cmp	r2, r3
 800618a:	d902      	bls.n	8006192 <UART_SetConfig+0x1de>
      {
        ret = HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	76bb      	strb	r3, [r7, #26]
 8006190:	e0fe      	b.n	8006390 <UART_SetConfig+0x3dc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	4618      	mov	r0, r3
 8006196:	f04f 0100 	mov.w	r1, #0
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619e:	4a37      	ldr	r2, [pc, #220]	; (800627c <UART_SetConfig+0x2c8>)
 80061a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061a4:	b29a      	uxth	r2, r3
 80061a6:	f04f 0300 	mov.w	r3, #0
 80061aa:	f7f9 ffef 	bl	800018c <__aeabi_uldivmod>
 80061ae:	4602      	mov	r2, r0
 80061b0:	460b      	mov	r3, r1
 80061b2:	4610      	mov	r0, r2
 80061b4:	4619      	mov	r1, r3
 80061b6:	f04f 0200 	mov.w	r2, #0
 80061ba:	f04f 0300 	mov.w	r3, #0
 80061be:	020b      	lsls	r3, r1, #8
 80061c0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80061c4:	0202      	lsls	r2, r0, #8
 80061c6:	6879      	ldr	r1, [r7, #4]
 80061c8:	6849      	ldr	r1, [r1, #4]
 80061ca:	0849      	lsrs	r1, r1, #1
 80061cc:	4608      	mov	r0, r1
 80061ce:	f04f 0100 	mov.w	r1, #0
 80061d2:	1814      	adds	r4, r2, r0
 80061d4:	eb43 0501 	adc.w	r5, r3, r1
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	461a      	mov	r2, r3
 80061de:	f04f 0300 	mov.w	r3, #0
 80061e2:	4620      	mov	r0, r4
 80061e4:	4629      	mov	r1, r5
 80061e6:	f7f9 ffd1 	bl	800018c <__aeabi_uldivmod>
 80061ea:	4602      	mov	r2, r0
 80061ec:	460b      	mov	r3, r1
 80061ee:	4613      	mov	r3, r2
 80061f0:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061f8:	d308      	bcc.n	800620c <UART_SetConfig+0x258>
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006200:	d204      	bcs.n	800620c <UART_SetConfig+0x258>
        {
          huart->Instance->BRR = usartdiv;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	693a      	ldr	r2, [r7, #16]
 8006208:	60da      	str	r2, [r3, #12]
 800620a:	e0c1      	b.n	8006390 <UART_SetConfig+0x3dc>
        }
        else
        {
          ret = HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	76bb      	strb	r3, [r7, #26]
 8006210:	e0be      	b.n	8006390 <UART_SetConfig+0x3dc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	69db      	ldr	r3, [r3, #28]
 8006216:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800621a:	d16a      	bne.n	80062f2 <UART_SetConfig+0x33e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800621c:	7efb      	ldrb	r3, [r7, #27]
 800621e:	3b01      	subs	r3, #1
 8006220:	2b07      	cmp	r3, #7
 8006222:	d82d      	bhi.n	8006280 <UART_SetConfig+0x2cc>
 8006224:	a201      	add	r2, pc, #4	; (adr r2, 800622c <UART_SetConfig+0x278>)
 8006226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800622a:	bf00      	nop
 800622c:	0800624d 	.word	0x0800624d
 8006230:	08006255 	.word	0x08006255
 8006234:	08006281 	.word	0x08006281
 8006238:	0800625b 	.word	0x0800625b
 800623c:	08006281 	.word	0x08006281
 8006240:	08006281 	.word	0x08006281
 8006244:	08006281 	.word	0x08006281
 8006248:	08006263 	.word	0x08006263
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800624c:	f7fe fd34 	bl	8004cb8 <HAL_RCC_GetPCLK2Freq>
 8006250:	6178      	str	r0, [r7, #20]
        break;
 8006252:	e01a      	b.n	800628a <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006254:	4b08      	ldr	r3, [pc, #32]	; (8006278 <UART_SetConfig+0x2c4>)
 8006256:	617b      	str	r3, [r7, #20]
        break;
 8006258:	e017      	b.n	800628a <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800625a:	f7fe fc97 	bl	8004b8c <HAL_RCC_GetSysClockFreq>
 800625e:	6178      	str	r0, [r7, #20]
        break;
 8006260:	e013      	b.n	800628a <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006262:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006266:	617b      	str	r3, [r7, #20]
        break;
 8006268:	e00f      	b.n	800628a <UART_SetConfig+0x2d6>
 800626a:	bf00      	nop
 800626c:	cfff69f3 	.word	0xcfff69f3
 8006270:	40008000 	.word	0x40008000
 8006274:	40013800 	.word	0x40013800
 8006278:	00f42400 	.word	0x00f42400
 800627c:	0800dfb0 	.word	0x0800dfb0
      default:
        pclk = 0U;
 8006280:	2300      	movs	r3, #0
 8006282:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	76bb      	strb	r3, [r7, #26]
        break;
 8006288:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d07f      	beq.n	8006390 <UART_SetConfig+0x3dc>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006294:	4a48      	ldr	r2, [pc, #288]	; (80063b8 <UART_SetConfig+0x404>)
 8006296:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800629a:	461a      	mov	r2, r3
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	fbb3 f3f2 	udiv	r3, r3, r2
 80062a2:	005a      	lsls	r2, r3, #1
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	085b      	lsrs	r3, r3, #1
 80062aa:	441a      	add	r2, r3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	2b0f      	cmp	r3, #15
 80062bc:	d916      	bls.n	80062ec <UART_SetConfig+0x338>
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062c4:	d212      	bcs.n	80062ec <UART_SetConfig+0x338>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	f023 030f 	bic.w	r3, r3, #15
 80062ce:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	085b      	lsrs	r3, r3, #1
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	f003 0307 	and.w	r3, r3, #7
 80062da:	b29a      	uxth	r2, r3
 80062dc:	89fb      	ldrh	r3, [r7, #14]
 80062de:	4313      	orrs	r3, r2
 80062e0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	89fa      	ldrh	r2, [r7, #14]
 80062e8:	60da      	str	r2, [r3, #12]
 80062ea:	e051      	b.n	8006390 <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	76bb      	strb	r3, [r7, #26]
 80062f0:	e04e      	b.n	8006390 <UART_SetConfig+0x3dc>
      }
    }
  }
  else
  {
    switch (clocksource)
 80062f2:	7efb      	ldrb	r3, [r7, #27]
 80062f4:	3b01      	subs	r3, #1
 80062f6:	2b07      	cmp	r3, #7
 80062f8:	d821      	bhi.n	800633e <UART_SetConfig+0x38a>
 80062fa:	a201      	add	r2, pc, #4	; (adr r2, 8006300 <UART_SetConfig+0x34c>)
 80062fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006300:	08006321 	.word	0x08006321
 8006304:	08006329 	.word	0x08006329
 8006308:	0800633f 	.word	0x0800633f
 800630c:	0800632f 	.word	0x0800632f
 8006310:	0800633f 	.word	0x0800633f
 8006314:	0800633f 	.word	0x0800633f
 8006318:	0800633f 	.word	0x0800633f
 800631c:	08006337 	.word	0x08006337
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006320:	f7fe fcca 	bl	8004cb8 <HAL_RCC_GetPCLK2Freq>
 8006324:	6178      	str	r0, [r7, #20]
        break;
 8006326:	e00f      	b.n	8006348 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006328:	4b24      	ldr	r3, [pc, #144]	; (80063bc <UART_SetConfig+0x408>)
 800632a:	617b      	str	r3, [r7, #20]
        break;
 800632c:	e00c      	b.n	8006348 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800632e:	f7fe fc2d 	bl	8004b8c <HAL_RCC_GetSysClockFreq>
 8006332:	6178      	str	r0, [r7, #20]
        break;
 8006334:	e008      	b.n	8006348 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006336:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800633a:	617b      	str	r3, [r7, #20]
        break;
 800633c:	e004      	b.n	8006348 <UART_SetConfig+0x394>
      default:
        pclk = 0U;
 800633e:	2300      	movs	r3, #0
 8006340:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	76bb      	strb	r3, [r7, #26]
        break;
 8006346:	bf00      	nop
    }

    if (pclk != 0U)
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d020      	beq.n	8006390 <UART_SetConfig+0x3dc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006352:	4a19      	ldr	r2, [pc, #100]	; (80063b8 <UART_SetConfig+0x404>)
 8006354:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006358:	461a      	mov	r2, r3
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	fbb3 f2f2 	udiv	r2, r3, r2
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	085b      	lsrs	r3, r3, #1
 8006366:	441a      	add	r2, r3
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006370:	b29b      	uxth	r3, r3
 8006372:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	2b0f      	cmp	r3, #15
 8006378:	d908      	bls.n	800638c <UART_SetConfig+0x3d8>
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006380:	d204      	bcs.n	800638c <UART_SetConfig+0x3d8>
      {
        huart->Instance->BRR = usartdiv;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	693a      	ldr	r2, [r7, #16]
 8006388:	60da      	str	r2, [r3, #12]
 800638a:	e001      	b.n	8006390 <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80063ac:	7ebb      	ldrb	r3, [r7, #26]
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3720      	adds	r7, #32
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bdb0      	pop	{r4, r5, r7, pc}
 80063b6:	bf00      	nop
 80063b8:	0800dfb0 	.word	0x0800dfb0
 80063bc:	00f42400 	.word	0x00f42400

080063c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063cc:	f003 0301 	and.w	r3, r3, #1
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d00a      	beq.n	80063ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	430a      	orrs	r2, r1
 80063e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ee:	f003 0302 	and.w	r3, r3, #2
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d00a      	beq.n	800640c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	430a      	orrs	r2, r1
 800640a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006410:	f003 0304 	and.w	r3, r3, #4
 8006414:	2b00      	cmp	r3, #0
 8006416:	d00a      	beq.n	800642e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	430a      	orrs	r2, r1
 800642c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006432:	f003 0308 	and.w	r3, r3, #8
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00a      	beq.n	8006450 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	430a      	orrs	r2, r1
 800644e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006454:	f003 0310 	and.w	r3, r3, #16
 8006458:	2b00      	cmp	r3, #0
 800645a:	d00a      	beq.n	8006472 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	430a      	orrs	r2, r1
 8006470:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006476:	f003 0320 	and.w	r3, r3, #32
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00a      	beq.n	8006494 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	430a      	orrs	r2, r1
 8006492:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800649c:	2b00      	cmp	r3, #0
 800649e:	d01a      	beq.n	80064d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	430a      	orrs	r2, r1
 80064b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064be:	d10a      	bne.n	80064d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	430a      	orrs	r2, r1
 80064d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00a      	beq.n	80064f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	430a      	orrs	r2, r1
 80064f6:	605a      	str	r2, [r3, #4]
  }
}
 80064f8:	bf00      	nop
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b086      	sub	sp, #24
 8006508:	af02      	add	r7, sp, #8
 800650a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006514:	f7fb fab4 	bl	8001a80 <HAL_GetTick>
 8006518:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 0308 	and.w	r3, r3, #8
 8006524:	2b08      	cmp	r3, #8
 8006526:	d10e      	bne.n	8006546 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006528:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800652c:	9300      	str	r3, [sp, #0]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2200      	movs	r2, #0
 8006532:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 f82f 	bl	800659a <UART_WaitOnFlagUntilTimeout>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d001      	beq.n	8006546 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006542:	2303      	movs	r3, #3
 8006544:	e025      	b.n	8006592 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 0304 	and.w	r3, r3, #4
 8006550:	2b04      	cmp	r3, #4
 8006552:	d10e      	bne.n	8006572 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006554:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006558:	9300      	str	r3, [sp, #0]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2200      	movs	r2, #0
 800655e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 f819 	bl	800659a <UART_WaitOnFlagUntilTimeout>
 8006568:	4603      	mov	r3, r0
 800656a:	2b00      	cmp	r3, #0
 800656c:	d001      	beq.n	8006572 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800656e:	2303      	movs	r3, #3
 8006570:	e00f      	b.n	8006592 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2220      	movs	r2, #32
 8006576:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2220      	movs	r2, #32
 800657e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006590:	2300      	movs	r3, #0
}
 8006592:	4618      	mov	r0, r3
 8006594:	3710      	adds	r7, #16
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}

0800659a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800659a:	b580      	push	{r7, lr}
 800659c:	b084      	sub	sp, #16
 800659e:	af00      	add	r7, sp, #0
 80065a0:	60f8      	str	r0, [r7, #12]
 80065a2:	60b9      	str	r1, [r7, #8]
 80065a4:	603b      	str	r3, [r7, #0]
 80065a6:	4613      	mov	r3, r2
 80065a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065aa:	e062      	b.n	8006672 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065ac:	69bb      	ldr	r3, [r7, #24]
 80065ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065b2:	d05e      	beq.n	8006672 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065b4:	f7fb fa64 	bl	8001a80 <HAL_GetTick>
 80065b8:	4602      	mov	r2, r0
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	69ba      	ldr	r2, [r7, #24]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d302      	bcc.n	80065ca <UART_WaitOnFlagUntilTimeout+0x30>
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d11d      	bne.n	8006606 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80065d8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	689a      	ldr	r2, [r3, #8]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f022 0201 	bic.w	r2, r2, #1
 80065e8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2220      	movs	r2, #32
 80065ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2220      	movs	r2, #32
 80065f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2200      	movs	r2, #0
 80065fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006602:	2303      	movs	r3, #3
 8006604:	e045      	b.n	8006692 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 0304 	and.w	r3, r3, #4
 8006610:	2b00      	cmp	r3, #0
 8006612:	d02e      	beq.n	8006672 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	69db      	ldr	r3, [r3, #28]
 800661a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800661e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006622:	d126      	bne.n	8006672 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800662c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800663c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	689a      	ldr	r2, [r3, #8]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f022 0201 	bic.w	r2, r2, #1
 800664c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2220      	movs	r2, #32
 8006652:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2220      	movs	r2, #32
 800665a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2220      	movs	r2, #32
 8006662:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2200      	movs	r2, #0
 800666a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800666e:	2303      	movs	r3, #3
 8006670:	e00f      	b.n	8006692 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	69da      	ldr	r2, [r3, #28]
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	4013      	ands	r3, r2
 800667c:	68ba      	ldr	r2, [r7, #8]
 800667e:	429a      	cmp	r2, r3
 8006680:	bf0c      	ite	eq
 8006682:	2301      	moveq	r3, #1
 8006684:	2300      	movne	r3, #0
 8006686:	b2db      	uxtb	r3, r3
 8006688:	461a      	mov	r2, r3
 800668a:	79fb      	ldrb	r3, [r7, #7]
 800668c:	429a      	cmp	r2, r3
 800668e:	d08d      	beq.n	80065ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	3710      	adds	r7, #16
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}

0800669a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800669a:	b480      	push	{r7}
 800669c:	b085      	sub	sp, #20
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d101      	bne.n	80066b0 <HAL_UARTEx_DisableFifoMode+0x16>
 80066ac:	2302      	movs	r3, #2
 80066ae:	e027      	b.n	8006700 <HAL_UARTEx_DisableFifoMode+0x66>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2224      	movs	r2, #36	; 0x24
 80066bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f022 0201 	bic.w	r2, r2, #1
 80066d6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80066de:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	68fa      	ldr	r2, [r7, #12]
 80066ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2220      	movs	r2, #32
 80066f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80066fe:	2300      	movs	r3, #0
}
 8006700:	4618      	mov	r0, r3
 8006702:	3714      	adds	r7, #20
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800671c:	2b01      	cmp	r3, #1
 800671e:	d101      	bne.n	8006724 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006720:	2302      	movs	r3, #2
 8006722:	e02d      	b.n	8006780 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2201      	movs	r2, #1
 8006728:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2224      	movs	r2, #36	; 0x24
 8006730:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f022 0201 	bic.w	r2, r2, #1
 800674a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	683a      	ldr	r2, [r7, #0]
 800675c:	430a      	orrs	r2, r1
 800675e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 f84f 	bl	8006804 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	68fa      	ldr	r2, [r7, #12]
 800676c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2220      	movs	r2, #32
 8006772:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800677e:	2300      	movs	r3, #0
}
 8006780:	4618      	mov	r0, r3
 8006782:	3710      	adds	r7, #16
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006798:	2b01      	cmp	r3, #1
 800679a:	d101      	bne.n	80067a0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800679c:	2302      	movs	r3, #2
 800679e:	e02d      	b.n	80067fc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2224      	movs	r2, #36	; 0x24
 80067ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f022 0201 	bic.w	r2, r2, #1
 80067c6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	683a      	ldr	r2, [r7, #0]
 80067d8:	430a      	orrs	r2, r1
 80067da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f000 f811 	bl	8006804 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	68fa      	ldr	r2, [r7, #12]
 80067e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2220      	movs	r2, #32
 80067ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80067fa:	2300      	movs	r3, #0
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3710      	adds	r7, #16
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006804:	b480      	push	{r7}
 8006806:	b085      	sub	sp, #20
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006810:	2b00      	cmp	r3, #0
 8006812:	d108      	bne.n	8006826 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006824:	e031      	b.n	800688a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006826:	2308      	movs	r3, #8
 8006828:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800682a:	2308      	movs	r3, #8
 800682c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	0e5b      	lsrs	r3, r3, #25
 8006836:	b2db      	uxtb	r3, r3
 8006838:	f003 0307 	and.w	r3, r3, #7
 800683c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	0f5b      	lsrs	r3, r3, #29
 8006846:	b2db      	uxtb	r3, r3
 8006848:	f003 0307 	and.w	r3, r3, #7
 800684c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800684e:	7bbb      	ldrb	r3, [r7, #14]
 8006850:	7b3a      	ldrb	r2, [r7, #12]
 8006852:	4911      	ldr	r1, [pc, #68]	; (8006898 <UARTEx_SetNbDataToProcess+0x94>)
 8006854:	5c8a      	ldrb	r2, [r1, r2]
 8006856:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800685a:	7b3a      	ldrb	r2, [r7, #12]
 800685c:	490f      	ldr	r1, [pc, #60]	; (800689c <UARTEx_SetNbDataToProcess+0x98>)
 800685e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006860:	fb93 f3f2 	sdiv	r3, r3, r2
 8006864:	b29a      	uxth	r2, r3
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800686c:	7bfb      	ldrb	r3, [r7, #15]
 800686e:	7b7a      	ldrb	r2, [r7, #13]
 8006870:	4909      	ldr	r1, [pc, #36]	; (8006898 <UARTEx_SetNbDataToProcess+0x94>)
 8006872:	5c8a      	ldrb	r2, [r1, r2]
 8006874:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006878:	7b7a      	ldrb	r2, [r7, #13]
 800687a:	4908      	ldr	r1, [pc, #32]	; (800689c <UARTEx_SetNbDataToProcess+0x98>)
 800687c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800687e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006882:	b29a      	uxth	r2, r3
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800688a:	bf00      	nop
 800688c:	3714      	adds	r7, #20
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr
 8006896:	bf00      	nop
 8006898:	0800dfc8 	.word	0x0800dfc8
 800689c:	0800dfd0 	.word	0x0800dfd0

080068a0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b085      	sub	sp, #20
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80068b0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80068b4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	b29a      	uxth	r2, r3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3714      	adds	r7, #20
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr

080068ce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80068ce:	b480      	push	{r7}
 80068d0:	b085      	sub	sp, #20
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80068d6:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80068da:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80068e2:	b29a      	uxth	r2, r3
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	43db      	mvns	r3, r3
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	4013      	ands	r3, r2
 80068ee:	b29a      	uxth	r2, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80068f6:	2300      	movs	r3, #0
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3714      	adds	r7, #20
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006904:	b084      	sub	sp, #16
 8006906:	b480      	push	{r7}
 8006908:	b083      	sub	sp, #12
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
 800690e:	f107 0014 	add.w	r0, r7, #20
 8006912:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2201      	movs	r2, #1
 800691a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006936:	2300      	movs	r3, #0
}
 8006938:	4618      	mov	r0, r3
 800693a:	370c      	adds	r7, #12
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	b004      	add	sp, #16
 8006944:	4770      	bx	lr
	...

08006948 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006948:	b480      	push	{r7}
 800694a:	b09b      	sub	sp, #108	; 0x6c
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006952:	2300      	movs	r3, #0
 8006954:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	4413      	add	r3, r2
 8006962:	881b      	ldrh	r3, [r3, #0]
 8006964:	b29b      	uxth	r3, r3
 8006966:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800696a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800696e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	78db      	ldrb	r3, [r3, #3]
 8006976:	2b03      	cmp	r3, #3
 8006978:	d81f      	bhi.n	80069ba <USB_ActivateEndpoint+0x72>
 800697a:	a201      	add	r2, pc, #4	; (adr r2, 8006980 <USB_ActivateEndpoint+0x38>)
 800697c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006980:	08006991 	.word	0x08006991
 8006984:	080069ad 	.word	0x080069ad
 8006988:	080069c3 	.word	0x080069c3
 800698c:	0800699f 	.word	0x0800699f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006990:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006994:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006998:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800699c:	e012      	b.n	80069c4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800699e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80069a2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80069a6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80069aa:	e00b      	b.n	80069c4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80069ac:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80069b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80069b4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80069b8:	e004      	b.n	80069c4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80069c0:	e000      	b.n	80069c4 <USB_ActivateEndpoint+0x7c>
      break;
 80069c2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	441a      	add	r2, r3
 80069ce:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80069d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	4413      	add	r3, r2
 80069f0:	881b      	ldrh	r3, [r3, #0]
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	b21b      	sxth	r3, r3
 80069f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069fe:	b21a      	sxth	r2, r3
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	b21b      	sxth	r3, r3
 8006a06:	4313      	orrs	r3, r2
 8006a08:	b21b      	sxth	r3, r3
 8006a0a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	441a      	add	r2, r3
 8006a18:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8006a1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	7b1b      	ldrb	r3, [r3, #12]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	f040 8149 	bne.w	8006ccc <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	785b      	ldrb	r3, [r3, #1]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	f000 8084 	beq.w	8006b4c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	617b      	str	r3, [r7, #20]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	461a      	mov	r2, r3
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	4413      	add	r3, r2
 8006a56:	617b      	str	r3, [r7, #20]
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	00da      	lsls	r2, r3, #3
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	4413      	add	r3, r2
 8006a62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a66:	613b      	str	r3, [r7, #16]
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	88db      	ldrh	r3, [r3, #6]
 8006a6c:	085b      	lsrs	r3, r3, #1
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	005b      	lsls	r3, r3, #1
 8006a72:	b29a      	uxth	r2, r3
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	4413      	add	r3, r2
 8006a82:	881b      	ldrh	r3, [r3, #0]
 8006a84:	81fb      	strh	r3, [r7, #14]
 8006a86:	89fb      	ldrh	r3, [r7, #14]
 8006a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d01b      	beq.n	8006ac8 <USB_ActivateEndpoint+0x180>
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	4413      	add	r3, r2
 8006a9a:	881b      	ldrh	r3, [r3, #0]
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aa6:	81bb      	strh	r3, [r7, #12]
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	009b      	lsls	r3, r3, #2
 8006ab0:	441a      	add	r2, r3
 8006ab2:	89bb      	ldrh	r3, [r7, #12]
 8006ab4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ab8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006abc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ac0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	78db      	ldrb	r3, [r3, #3]
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d020      	beq.n	8006b12 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	4413      	add	r3, r2
 8006ada:	881b      	ldrh	r3, [r3, #0]
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ae2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ae6:	813b      	strh	r3, [r7, #8]
 8006ae8:	893b      	ldrh	r3, [r7, #8]
 8006aea:	f083 0320 	eor.w	r3, r3, #32
 8006aee:	813b      	strh	r3, [r7, #8]
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	441a      	add	r2, r3
 8006afa:	893b      	ldrh	r3, [r7, #8]
 8006afc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	8013      	strh	r3, [r2, #0]
 8006b10:	e27f      	b.n	8007012 <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	4413      	add	r3, r2
 8006b1c:	881b      	ldrh	r3, [r3, #0]
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b28:	817b      	strh	r3, [r7, #10]
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	441a      	add	r2, r3
 8006b34:	897b      	ldrh	r3, [r7, #10]
 8006b36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	8013      	strh	r3, [r2, #0]
 8006b4a:	e262      	b.n	8007012 <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	461a      	mov	r2, r3
 8006b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b5c:	4413      	add	r3, r2
 8006b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	00da      	lsls	r2, r3, #3
 8006b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b68:	4413      	add	r3, r2
 8006b6a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006b6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	88db      	ldrh	r3, [r3, #6]
 8006b74:	085b      	lsrs	r3, r3, #1
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	005b      	lsls	r3, r3, #1
 8006b7a:	b29a      	uxth	r2, r3
 8006b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	627b      	str	r3, [r7, #36]	; 0x24
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b90:	4413      	add	r3, r2
 8006b92:	627b      	str	r3, [r7, #36]	; 0x24
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	00da      	lsls	r2, r3, #3
 8006b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9c:	4413      	add	r3, r2
 8006b9e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006ba2:	623b      	str	r3, [r7, #32]
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	691b      	ldr	r3, [r3, #16]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d112      	bne.n	8006bd2 <USB_ActivateEndpoint+0x28a>
 8006bac:	6a3b      	ldr	r3, [r7, #32]
 8006bae:	881b      	ldrh	r3, [r3, #0]
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006bb6:	b29a      	uxth	r2, r3
 8006bb8:	6a3b      	ldr	r3, [r7, #32]
 8006bba:	801a      	strh	r2, [r3, #0]
 8006bbc:	6a3b      	ldr	r3, [r7, #32]
 8006bbe:	881b      	ldrh	r3, [r3, #0]
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bca:	b29a      	uxth	r2, r3
 8006bcc:	6a3b      	ldr	r3, [r7, #32]
 8006bce:	801a      	strh	r2, [r3, #0]
 8006bd0:	e02f      	b.n	8006c32 <USB_ActivateEndpoint+0x2ea>
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	691b      	ldr	r3, [r3, #16]
 8006bd6:	2b3e      	cmp	r3, #62	; 0x3e
 8006bd8:	d813      	bhi.n	8006c02 <USB_ActivateEndpoint+0x2ba>
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	691b      	ldr	r3, [r3, #16]
 8006bde:	085b      	lsrs	r3, r3, #1
 8006be0:	663b      	str	r3, [r7, #96]	; 0x60
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	691b      	ldr	r3, [r3, #16]
 8006be6:	f003 0301 	and.w	r3, r3, #1
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d002      	beq.n	8006bf4 <USB_ActivateEndpoint+0x2ac>
 8006bee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006bf0:	3301      	adds	r3, #1
 8006bf2:	663b      	str	r3, [r7, #96]	; 0x60
 8006bf4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	029b      	lsls	r3, r3, #10
 8006bfa:	b29a      	uxth	r2, r3
 8006bfc:	6a3b      	ldr	r3, [r7, #32]
 8006bfe:	801a      	strh	r2, [r3, #0]
 8006c00:	e017      	b.n	8006c32 <USB_ActivateEndpoint+0x2ea>
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	095b      	lsrs	r3, r3, #5
 8006c08:	663b      	str	r3, [r7, #96]	; 0x60
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	691b      	ldr	r3, [r3, #16]
 8006c0e:	f003 031f 	and.w	r3, r3, #31
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d102      	bne.n	8006c1c <USB_ActivateEndpoint+0x2d4>
 8006c16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c18:	3b01      	subs	r3, #1
 8006c1a:	663b      	str	r3, [r7, #96]	; 0x60
 8006c1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	029b      	lsls	r3, r3, #10
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c2c:	b29a      	uxth	r2, r3
 8006c2e:	6a3b      	ldr	r3, [r7, #32]
 8006c30:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	4413      	add	r3, r2
 8006c3c:	881b      	ldrh	r3, [r3, #0]
 8006c3e:	83fb      	strh	r3, [r7, #30]
 8006c40:	8bfb      	ldrh	r3, [r7, #30]
 8006c42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d01b      	beq.n	8006c82 <USB_ActivateEndpoint+0x33a>
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	4413      	add	r3, r2
 8006c54:	881b      	ldrh	r3, [r3, #0]
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c60:	83bb      	strh	r3, [r7, #28]
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	441a      	add	r2, r3
 8006c6c:	8bbb      	ldrh	r3, [r7, #28]
 8006c6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	4413      	add	r3, r2
 8006c8c:	881b      	ldrh	r3, [r3, #0]
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c98:	837b      	strh	r3, [r7, #26]
 8006c9a:	8b7b      	ldrh	r3, [r7, #26]
 8006c9c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006ca0:	837b      	strh	r3, [r7, #26]
 8006ca2:	8b7b      	ldrh	r3, [r7, #26]
 8006ca4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006ca8:	837b      	strh	r3, [r7, #26]
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	441a      	add	r2, r3
 8006cb4:	8b7b      	ldrh	r3, [r7, #26]
 8006cb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	8013      	strh	r3, [r2, #0]
 8006cca:	e1a2      	b.n	8007012 <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	4413      	add	r3, r2
 8006cd6:	881b      	ldrh	r3, [r3, #0]
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ce2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	441a      	add	r2, r3
 8006cf0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8006cf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cfc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	65bb      	str	r3, [r7, #88]	; 0x58
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	461a      	mov	r2, r3
 8006d16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d18:	4413      	add	r3, r2
 8006d1a:	65bb      	str	r3, [r7, #88]	; 0x58
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	00da      	lsls	r2, r3, #3
 8006d22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d24:	4413      	add	r3, r2
 8006d26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d2a:	657b      	str	r3, [r7, #84]	; 0x54
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	891b      	ldrh	r3, [r3, #8]
 8006d30:	085b      	lsrs	r3, r3, #1
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	005b      	lsls	r3, r3, #1
 8006d36:	b29a      	uxth	r2, r3
 8006d38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d3a:	801a      	strh	r2, [r3, #0]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	653b      	str	r3, [r7, #80]	; 0x50
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	461a      	mov	r2, r3
 8006d4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d4c:	4413      	add	r3, r2
 8006d4e:	653b      	str	r3, [r7, #80]	; 0x50
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	00da      	lsls	r2, r3, #3
 8006d56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d58:	4413      	add	r3, r2
 8006d5a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006d5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	895b      	ldrh	r3, [r3, #10]
 8006d64:	085b      	lsrs	r3, r3, #1
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	005b      	lsls	r3, r3, #1
 8006d6a:	b29a      	uxth	r2, r3
 8006d6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d6e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	785b      	ldrb	r3, [r3, #1]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	f040 8091 	bne.w	8006e9c <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	4413      	add	r3, r2
 8006d84:	881b      	ldrh	r3, [r3, #0]
 8006d86:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006d88:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006d8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d01b      	beq.n	8006dca <USB_ActivateEndpoint+0x482>
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	4413      	add	r3, r2
 8006d9c:	881b      	ldrh	r3, [r3, #0]
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006da4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006da8:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	441a      	add	r2, r3
 8006db4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006db6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dbe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006dc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	4413      	add	r3, r2
 8006dd4:	881b      	ldrh	r3, [r3, #0]
 8006dd6:	873b      	strh	r3, [r7, #56]	; 0x38
 8006dd8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d01b      	beq.n	8006e1a <USB_ActivateEndpoint+0x4d2>
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	4413      	add	r3, r2
 8006dec:	881b      	ldrh	r3, [r3, #0]
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006df4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006df8:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	441a      	add	r2, r3
 8006e04:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006e06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e12:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	4413      	add	r3, r2
 8006e24:	881b      	ldrh	r3, [r3, #0]
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e30:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006e32:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006e34:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006e38:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006e3a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006e3c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006e40:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	009b      	lsls	r3, r3, #2
 8006e4a:	441a      	add	r2, r3
 8006e4c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006e4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	4413      	add	r3, r2
 8006e6c:	881b      	ldrh	r3, [r3, #0]
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e78:	867b      	strh	r3, [r7, #50]	; 0x32
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	441a      	add	r2, r3
 8006e84:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006e86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	8013      	strh	r3, [r2, #0]
 8006e9a:	e0ba      	b.n	8007012 <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	4413      	add	r3, r2
 8006ea6:	881b      	ldrh	r3, [r3, #0]
 8006ea8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006eac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006eb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d01d      	beq.n	8006ef4 <USB_ActivateEndpoint+0x5ac>
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	4413      	add	r3, r2
 8006ec2:	881b      	ldrh	r3, [r3, #0]
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ece:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	441a      	add	r2, r3
 8006edc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006ee0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ee4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ee8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006eec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	4413      	add	r3, r2
 8006efe:	881b      	ldrh	r3, [r3, #0]
 8006f00:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006f04:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d01d      	beq.n	8006f4c <USB_ActivateEndpoint+0x604>
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	4413      	add	r3, r2
 8006f1a:	881b      	ldrh	r3, [r3, #0]
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f26:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	441a      	add	r2, r3
 8006f34:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006f38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f44:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	78db      	ldrb	r3, [r3, #3]
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d024      	beq.n	8006f9e <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	781b      	ldrb	r3, [r3, #0]
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	4413      	add	r3, r2
 8006f5e:	881b      	ldrh	r3, [r3, #0]
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f6a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006f6e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006f72:	f083 0320 	eor.w	r3, r3, #32
 8006f76:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	441a      	add	r2, r3
 8006f84:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006f88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	8013      	strh	r3, [r2, #0]
 8006f9c:	e01d      	b.n	8006fda <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	4413      	add	r3, r2
 8006fa8:	881b      	ldrh	r3, [r3, #0]
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fb4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	441a      	add	r2, r3
 8006fc2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006fc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	4413      	add	r3, r2
 8006fe4:	881b      	ldrh	r3, [r3, #0]
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ff0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	441a      	add	r2, r3
 8006ffc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006ffe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007002:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007006:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800700a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800700e:	b29b      	uxth	r3, r3
 8007010:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8007012:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007016:	4618      	mov	r0, r3
 8007018:	376c      	adds	r7, #108	; 0x6c
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr
 8007022:	bf00      	nop

08007024 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007024:	b480      	push	{r7}
 8007026:	b08d      	sub	sp, #52	; 0x34
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	7b1b      	ldrb	r3, [r3, #12]
 8007032:	2b00      	cmp	r3, #0
 8007034:	f040 808e 	bne.w	8007154 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	785b      	ldrb	r3, [r3, #1]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d044      	beq.n	80070ca <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	4413      	add	r3, r2
 800704a:	881b      	ldrh	r3, [r3, #0]
 800704c:	81bb      	strh	r3, [r7, #12]
 800704e:	89bb      	ldrh	r3, [r7, #12]
 8007050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007054:	2b00      	cmp	r3, #0
 8007056:	d01b      	beq.n	8007090 <USB_DeactivateEndpoint+0x6c>
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	4413      	add	r3, r2
 8007062:	881b      	ldrh	r3, [r3, #0]
 8007064:	b29b      	uxth	r3, r3
 8007066:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800706a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800706e:	817b      	strh	r3, [r7, #10]
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	441a      	add	r2, r3
 800707a:	897b      	ldrh	r3, [r7, #10]
 800707c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007080:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007084:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007088:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800708c:	b29b      	uxth	r3, r3
 800708e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	009b      	lsls	r3, r3, #2
 8007098:	4413      	add	r3, r2
 800709a:	881b      	ldrh	r3, [r3, #0]
 800709c:	b29b      	uxth	r3, r3
 800709e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070a6:	813b      	strh	r3, [r7, #8]
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	009b      	lsls	r3, r3, #2
 80070b0:	441a      	add	r2, r3
 80070b2:	893b      	ldrh	r3, [r7, #8]
 80070b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	8013      	strh	r3, [r2, #0]
 80070c8:	e192      	b.n	80073f0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	781b      	ldrb	r3, [r3, #0]
 80070d0:	009b      	lsls	r3, r3, #2
 80070d2:	4413      	add	r3, r2
 80070d4:	881b      	ldrh	r3, [r3, #0]
 80070d6:	827b      	strh	r3, [r7, #18]
 80070d8:	8a7b      	ldrh	r3, [r7, #18]
 80070da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d01b      	beq.n	800711a <USB_DeactivateEndpoint+0xf6>
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	4413      	add	r3, r2
 80070ec:	881b      	ldrh	r3, [r3, #0]
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070f8:	823b      	strh	r3, [r7, #16]
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	441a      	add	r2, r3
 8007104:	8a3b      	ldrh	r3, [r7, #16]
 8007106:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800710a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800710e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007112:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007116:	b29b      	uxth	r3, r3
 8007118:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	009b      	lsls	r3, r3, #2
 8007122:	4413      	add	r3, r2
 8007124:	881b      	ldrh	r3, [r3, #0]
 8007126:	b29b      	uxth	r3, r3
 8007128:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800712c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007130:	81fb      	strh	r3, [r7, #14]
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	441a      	add	r2, r3
 800713c:	89fb      	ldrh	r3, [r7, #14]
 800713e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007142:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007146:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800714a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800714e:	b29b      	uxth	r3, r3
 8007150:	8013      	strh	r3, [r2, #0]
 8007152:	e14d      	b.n	80073f0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	785b      	ldrb	r3, [r3, #1]
 8007158:	2b00      	cmp	r3, #0
 800715a:	f040 80a5 	bne.w	80072a8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	781b      	ldrb	r3, [r3, #0]
 8007164:	009b      	lsls	r3, r3, #2
 8007166:	4413      	add	r3, r2
 8007168:	881b      	ldrh	r3, [r3, #0]
 800716a:	843b      	strh	r3, [r7, #32]
 800716c:	8c3b      	ldrh	r3, [r7, #32]
 800716e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007172:	2b00      	cmp	r3, #0
 8007174:	d01b      	beq.n	80071ae <USB_DeactivateEndpoint+0x18a>
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	4413      	add	r3, r2
 8007180:	881b      	ldrh	r3, [r3, #0]
 8007182:	b29b      	uxth	r3, r3
 8007184:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800718c:	83fb      	strh	r3, [r7, #30]
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	009b      	lsls	r3, r3, #2
 8007196:	441a      	add	r2, r3
 8007198:	8bfb      	ldrh	r3, [r7, #30]
 800719a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800719e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80071a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	4413      	add	r3, r2
 80071b8:	881b      	ldrh	r3, [r3, #0]
 80071ba:	83bb      	strh	r3, [r7, #28]
 80071bc:	8bbb      	ldrh	r3, [r7, #28]
 80071be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d01b      	beq.n	80071fe <USB_DeactivateEndpoint+0x1da>
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	4413      	add	r3, r2
 80071d0:	881b      	ldrh	r3, [r3, #0]
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071dc:	837b      	strh	r3, [r7, #26]
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	441a      	add	r2, r3
 80071e8:	8b7b      	ldrh	r3, [r7, #26]
 80071ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	4413      	add	r3, r2
 8007208:	881b      	ldrh	r3, [r3, #0]
 800720a:	b29b      	uxth	r3, r3
 800720c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007214:	833b      	strh	r3, [r7, #24]
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	441a      	add	r2, r3
 8007220:	8b3b      	ldrh	r3, [r7, #24]
 8007222:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007226:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800722a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800722e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007232:	b29b      	uxth	r3, r3
 8007234:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	009b      	lsls	r3, r3, #2
 800723e:	4413      	add	r3, r2
 8007240:	881b      	ldrh	r3, [r3, #0]
 8007242:	b29b      	uxth	r3, r3
 8007244:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007248:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800724c:	82fb      	strh	r3, [r7, #22]
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	441a      	add	r2, r3
 8007258:	8afb      	ldrh	r3, [r7, #22]
 800725a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800725e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007262:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800726a:	b29b      	uxth	r3, r3
 800726c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	4413      	add	r3, r2
 8007278:	881b      	ldrh	r3, [r3, #0]
 800727a:	b29b      	uxth	r3, r3
 800727c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007280:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007284:	82bb      	strh	r3, [r7, #20]
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	441a      	add	r2, r3
 8007290:	8abb      	ldrh	r3, [r7, #20]
 8007292:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007296:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800729a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800729e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	8013      	strh	r3, [r2, #0]
 80072a6:	e0a3      	b.n	80073f0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	4413      	add	r3, r2
 80072b2:	881b      	ldrh	r3, [r3, #0]
 80072b4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80072b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80072b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d01b      	beq.n	80072f8 <USB_DeactivateEndpoint+0x2d4>
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	4413      	add	r3, r2
 80072ca:	881b      	ldrh	r3, [r3, #0]
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072d6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	441a      	add	r2, r3
 80072e2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80072e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80072f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	4413      	add	r3, r2
 8007302:	881b      	ldrh	r3, [r3, #0]
 8007304:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007306:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800730c:	2b00      	cmp	r3, #0
 800730e:	d01b      	beq.n	8007348 <USB_DeactivateEndpoint+0x324>
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	4413      	add	r3, r2
 800731a:	881b      	ldrh	r3, [r3, #0]
 800731c:	b29b      	uxth	r3, r3
 800731e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007326:	853b      	strh	r3, [r7, #40]	; 0x28
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	441a      	add	r2, r3
 8007332:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007334:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007338:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800733c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007340:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007344:	b29b      	uxth	r3, r3
 8007346:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007348:	687a      	ldr	r2, [r7, #4]
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	4413      	add	r3, r2
 8007352:	881b      	ldrh	r3, [r3, #0]
 8007354:	b29b      	uxth	r3, r3
 8007356:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800735a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800735e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	441a      	add	r2, r3
 800736a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800736c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007370:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007374:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800737c:	b29b      	uxth	r3, r3
 800737e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	4413      	add	r3, r2
 800738a:	881b      	ldrh	r3, [r3, #0]
 800738c:	b29b      	uxth	r3, r3
 800738e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007392:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007396:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	441a      	add	r2, r3
 80073a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80073a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	4413      	add	r3, r2
 80073c2:	881b      	ldrh	r3, [r3, #0]
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ce:	847b      	strh	r3, [r7, #34]	; 0x22
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	441a      	add	r2, r3
 80073da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80073dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80073f0:	2300      	movs	r3, #0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3734      	adds	r7, #52	; 0x34
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr

080073fe <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80073fe:	b580      	push	{r7, lr}
 8007400:	b0cc      	sub	sp, #304	; 0x130
 8007402:	af00      	add	r7, sp, #0
 8007404:	1d3b      	adds	r3, r7, #4
 8007406:	6018      	str	r0, [r3, #0]
 8007408:	463b      	mov	r3, r7
 800740a:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800740c:	463b      	mov	r3, r7
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	785b      	ldrb	r3, [r3, #1]
 8007412:	2b01      	cmp	r3, #1
 8007414:	f040 872e 	bne.w	8008274 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007418:	463b      	mov	r3, r7
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	699a      	ldr	r2, [r3, #24]
 800741e:	463b      	mov	r3, r7
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	691b      	ldr	r3, [r3, #16]
 8007424:	429a      	cmp	r2, r3
 8007426:	d905      	bls.n	8007434 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8007428:	463b      	mov	r3, r7
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	691b      	ldr	r3, [r3, #16]
 800742e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007432:	e004      	b.n	800743e <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8007434:	463b      	mov	r3, r7
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	699b      	ldr	r3, [r3, #24]
 800743a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800743e:	463b      	mov	r3, r7
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	7b1b      	ldrb	r3, [r3, #12]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d134      	bne.n	80074b2 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007448:	463b      	mov	r3, r7
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	6959      	ldr	r1, [r3, #20]
 800744e:	463b      	mov	r3, r7
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	88da      	ldrh	r2, [r3, #6]
 8007454:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007458:	b29b      	uxth	r3, r3
 800745a:	1d38      	adds	r0, r7, #4
 800745c:	6800      	ldr	r0, [r0, #0]
 800745e:	f001 fbff 	bl	8008c60 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007462:	f107 0310 	add.w	r3, r7, #16
 8007466:	1d3a      	adds	r2, r7, #4
 8007468:	6812      	ldr	r2, [r2, #0]
 800746a:	601a      	str	r2, [r3, #0]
 800746c:	1d3b      	adds	r3, r7, #4
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007474:	b29b      	uxth	r3, r3
 8007476:	4619      	mov	r1, r3
 8007478:	f107 0310 	add.w	r3, r7, #16
 800747c:	f107 0210 	add.w	r2, r7, #16
 8007480:	6812      	ldr	r2, [r2, #0]
 8007482:	440a      	add	r2, r1
 8007484:	601a      	str	r2, [r3, #0]
 8007486:	463b      	mov	r3, r7
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	00da      	lsls	r2, r3, #3
 800748e:	f107 0310 	add.w	r3, r7, #16
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4413      	add	r3, r2
 8007496:	f203 4202 	addw	r2, r3, #1026	; 0x402
 800749a:	f107 030c 	add.w	r3, r7, #12
 800749e:	601a      	str	r2, [r3, #0]
 80074a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074a4:	b29a      	uxth	r2, r3
 80074a6:	f107 030c 	add.w	r3, r7, #12
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	801a      	strh	r2, [r3, #0]
 80074ae:	f000 beac 	b.w	800820a <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80074b2:	463b      	mov	r3, r7
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	78db      	ldrb	r3, [r3, #3]
 80074b8:	2b02      	cmp	r3, #2
 80074ba:	f040 838c 	bne.w	8007bd6 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80074be:	463b      	mov	r3, r7
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	6a1a      	ldr	r2, [r3, #32]
 80074c4:	463b      	mov	r3, r7
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	691b      	ldr	r3, [r3, #16]
 80074ca:	429a      	cmp	r2, r3
 80074cc:	f240 8330 	bls.w	8007b30 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80074d0:	1d3b      	adds	r3, r7, #4
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	463b      	mov	r3, r7
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	4413      	add	r3, r2
 80074de:	881b      	ldrh	r3, [r3, #0]
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074ea:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80074ee:	1d3b      	adds	r3, r7, #4
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	463b      	mov	r3, r7
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	009b      	lsls	r3, r3, #2
 80074fa:	441a      	add	r2, r3
 80074fc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007500:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007504:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007508:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800750c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007510:	b29b      	uxth	r3, r3
 8007512:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007514:	463b      	mov	r3, r7
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	6a1a      	ldr	r2, [r3, #32]
 800751a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800751e:	1ad2      	subs	r2, r2, r3
 8007520:	463b      	mov	r3, r7
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007526:	1d3b      	adds	r3, r7, #4
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	463b      	mov	r3, r7
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	4413      	add	r3, r2
 8007534:	881b      	ldrh	r3, [r3, #0]
 8007536:	b29b      	uxth	r3, r3
 8007538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800753c:	2b00      	cmp	r3, #0
 800753e:	f000 819e 	beq.w	800787e <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007542:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007546:	1d3a      	adds	r2, r7, #4
 8007548:	6812      	ldr	r2, [r2, #0]
 800754a:	601a      	str	r2, [r3, #0]
 800754c:	463b      	mov	r3, r7
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	785b      	ldrb	r3, [r3, #1]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d17a      	bne.n	800764c <USB_EPStartXfer+0x24e>
 8007556:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800755a:	1d3a      	adds	r2, r7, #4
 800755c:	6812      	ldr	r2, [r2, #0]
 800755e:	601a      	str	r2, [r3, #0]
 8007560:	1d3b      	adds	r3, r7, #4
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007568:	b29b      	uxth	r3, r3
 800756a:	4619      	mov	r1, r3
 800756c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007570:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007574:	6812      	ldr	r2, [r2, #0]
 8007576:	440a      	add	r2, r1
 8007578:	601a      	str	r2, [r3, #0]
 800757a:	463b      	mov	r3, r7
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	00da      	lsls	r2, r3, #3
 8007582:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4413      	add	r3, r2
 800758a:	f203 4206 	addw	r2, r3, #1030	; 0x406
 800758e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007592:	601a      	str	r2, [r3, #0]
 8007594:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007598:	2b00      	cmp	r3, #0
 800759a:	d11a      	bne.n	80075d2 <USB_EPStartXfer+0x1d4>
 800759c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	881b      	ldrh	r3, [r3, #0]
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80075aa:	b29a      	uxth	r2, r3
 80075ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	801a      	strh	r2, [r3, #0]
 80075b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	881b      	ldrh	r3, [r3, #0]
 80075bc:	b29b      	uxth	r3, r3
 80075be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075c6:	b29a      	uxth	r2, r3
 80075c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	801a      	strh	r2, [r3, #0]
 80075d0:	e062      	b.n	8007698 <USB_EPStartXfer+0x29a>
 80075d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075d6:	2b3e      	cmp	r3, #62	; 0x3e
 80075d8:	d819      	bhi.n	800760e <USB_EPStartXfer+0x210>
 80075da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075de:	085b      	lsrs	r3, r3, #1
 80075e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80075e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075e8:	f003 0301 	and.w	r3, r3, #1
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d004      	beq.n	80075fa <USB_EPStartXfer+0x1fc>
 80075f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80075f4:	3301      	adds	r3, #1
 80075f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80075fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80075fe:	b29b      	uxth	r3, r3
 8007600:	029b      	lsls	r3, r3, #10
 8007602:	b29a      	uxth	r2, r3
 8007604:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	801a      	strh	r2, [r3, #0]
 800760c:	e044      	b.n	8007698 <USB_EPStartXfer+0x29a>
 800760e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007612:	095b      	lsrs	r3, r3, #5
 8007614:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007618:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800761c:	f003 031f 	and.w	r3, r3, #31
 8007620:	2b00      	cmp	r3, #0
 8007622:	d104      	bne.n	800762e <USB_EPStartXfer+0x230>
 8007624:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007628:	3b01      	subs	r3, #1
 800762a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800762e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007632:	b29b      	uxth	r3, r3
 8007634:	029b      	lsls	r3, r3, #10
 8007636:	b29b      	uxth	r3, r3
 8007638:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800763c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007640:	b29a      	uxth	r2, r3
 8007642:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	801a      	strh	r2, [r3, #0]
 800764a:	e025      	b.n	8007698 <USB_EPStartXfer+0x29a>
 800764c:	463b      	mov	r3, r7
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	785b      	ldrb	r3, [r3, #1]
 8007652:	2b01      	cmp	r3, #1
 8007654:	d120      	bne.n	8007698 <USB_EPStartXfer+0x29a>
 8007656:	1d3b      	adds	r3, r7, #4
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800765e:	b29b      	uxth	r3, r3
 8007660:	4619      	mov	r1, r3
 8007662:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007666:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800766a:	6812      	ldr	r2, [r2, #0]
 800766c:	440a      	add	r2, r1
 800766e:	601a      	str	r2, [r3, #0]
 8007670:	463b      	mov	r3, r7
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	781b      	ldrb	r3, [r3, #0]
 8007676:	00da      	lsls	r2, r3, #3
 8007678:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4413      	add	r3, r2
 8007680:	f203 4206 	addw	r2, r3, #1030	; 0x406
 8007684:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007688:	601a      	str	r2, [r3, #0]
 800768a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800768e:	b29a      	uxth	r2, r3
 8007690:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007698:	463b      	mov	r3, r7
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	895b      	ldrh	r3, [r3, #10]
 800769e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80076a2:	463b      	mov	r3, r7
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	6959      	ldr	r1, [r3, #20]
 80076a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80076b2:	1d38      	adds	r0, r7, #4
 80076b4:	6800      	ldr	r0, [r0, #0]
 80076b6:	f001 fad3 	bl	8008c60 <USB_WritePMA>
            ep->xfer_buff += len;
 80076ba:	463b      	mov	r3, r7
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	695a      	ldr	r2, [r3, #20]
 80076c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076c4:	441a      	add	r2, r3
 80076c6:	463b      	mov	r3, r7
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80076cc:	463b      	mov	r3, r7
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	6a1a      	ldr	r2, [r3, #32]
 80076d2:	463b      	mov	r3, r7
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	691b      	ldr	r3, [r3, #16]
 80076d8:	429a      	cmp	r2, r3
 80076da:	d909      	bls.n	80076f0 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 80076dc:	463b      	mov	r3, r7
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	6a1a      	ldr	r2, [r3, #32]
 80076e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076e6:	1ad2      	subs	r2, r2, r3
 80076e8:	463b      	mov	r3, r7
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	621a      	str	r2, [r3, #32]
 80076ee:	e008      	b.n	8007702 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 80076f0:	463b      	mov	r3, r7
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	6a1b      	ldr	r3, [r3, #32]
 80076f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80076fa:	463b      	mov	r3, r7
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	2200      	movs	r2, #0
 8007700:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007702:	463b      	mov	r3, r7
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	785b      	ldrb	r3, [r3, #1]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d17a      	bne.n	8007802 <USB_EPStartXfer+0x404>
 800770c:	f107 0318 	add.w	r3, r7, #24
 8007710:	1d3a      	adds	r2, r7, #4
 8007712:	6812      	ldr	r2, [r2, #0]
 8007714:	601a      	str	r2, [r3, #0]
 8007716:	1d3b      	adds	r3, r7, #4
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800771e:	b29b      	uxth	r3, r3
 8007720:	4619      	mov	r1, r3
 8007722:	f107 0318 	add.w	r3, r7, #24
 8007726:	f107 0218 	add.w	r2, r7, #24
 800772a:	6812      	ldr	r2, [r2, #0]
 800772c:	440a      	add	r2, r1
 800772e:	601a      	str	r2, [r3, #0]
 8007730:	463b      	mov	r3, r7
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	00da      	lsls	r2, r3, #3
 8007738:	f107 0318 	add.w	r3, r7, #24
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4413      	add	r3, r2
 8007740:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8007744:	f107 0314 	add.w	r3, r7, #20
 8007748:	601a      	str	r2, [r3, #0]
 800774a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800774e:	2b00      	cmp	r3, #0
 8007750:	d11a      	bne.n	8007788 <USB_EPStartXfer+0x38a>
 8007752:	f107 0314 	add.w	r3, r7, #20
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	881b      	ldrh	r3, [r3, #0]
 800775a:	b29b      	uxth	r3, r3
 800775c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007760:	b29a      	uxth	r2, r3
 8007762:	f107 0314 	add.w	r3, r7, #20
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	801a      	strh	r2, [r3, #0]
 800776a:	f107 0314 	add.w	r3, r7, #20
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	881b      	ldrh	r3, [r3, #0]
 8007772:	b29b      	uxth	r3, r3
 8007774:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007778:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800777c:	b29a      	uxth	r2, r3
 800777e:	f107 0314 	add.w	r3, r7, #20
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	801a      	strh	r2, [r3, #0]
 8007786:	e067      	b.n	8007858 <USB_EPStartXfer+0x45a>
 8007788:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800778c:	2b3e      	cmp	r3, #62	; 0x3e
 800778e:	d819      	bhi.n	80077c4 <USB_EPStartXfer+0x3c6>
 8007790:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007794:	085b      	lsrs	r3, r3, #1
 8007796:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800779a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800779e:	f003 0301 	and.w	r3, r3, #1
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d004      	beq.n	80077b0 <USB_EPStartXfer+0x3b2>
 80077a6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80077aa:	3301      	adds	r3, #1
 80077ac:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80077b0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	029b      	lsls	r3, r3, #10
 80077b8:	b29a      	uxth	r2, r3
 80077ba:	f107 0314 	add.w	r3, r7, #20
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	801a      	strh	r2, [r3, #0]
 80077c2:	e049      	b.n	8007858 <USB_EPStartXfer+0x45a>
 80077c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077c8:	095b      	lsrs	r3, r3, #5
 80077ca:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80077ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077d2:	f003 031f 	and.w	r3, r3, #31
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d104      	bne.n	80077e4 <USB_EPStartXfer+0x3e6>
 80077da:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80077de:	3b01      	subs	r3, #1
 80077e0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80077e4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	029b      	lsls	r3, r3, #10
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077f6:	b29a      	uxth	r2, r3
 80077f8:	f107 0314 	add.w	r3, r7, #20
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	801a      	strh	r2, [r3, #0]
 8007800:	e02a      	b.n	8007858 <USB_EPStartXfer+0x45a>
 8007802:	463b      	mov	r3, r7
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	785b      	ldrb	r3, [r3, #1]
 8007808:	2b01      	cmp	r3, #1
 800780a:	d125      	bne.n	8007858 <USB_EPStartXfer+0x45a>
 800780c:	f107 0320 	add.w	r3, r7, #32
 8007810:	1d3a      	adds	r2, r7, #4
 8007812:	6812      	ldr	r2, [r2, #0]
 8007814:	601a      	str	r2, [r3, #0]
 8007816:	1d3b      	adds	r3, r7, #4
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800781e:	b29b      	uxth	r3, r3
 8007820:	4619      	mov	r1, r3
 8007822:	f107 0320 	add.w	r3, r7, #32
 8007826:	f107 0220 	add.w	r2, r7, #32
 800782a:	6812      	ldr	r2, [r2, #0]
 800782c:	440a      	add	r2, r1
 800782e:	601a      	str	r2, [r3, #0]
 8007830:	463b      	mov	r3, r7
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	781b      	ldrb	r3, [r3, #0]
 8007836:	00da      	lsls	r2, r3, #3
 8007838:	f107 0320 	add.w	r3, r7, #32
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4413      	add	r3, r2
 8007840:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8007844:	f107 031c 	add.w	r3, r7, #28
 8007848:	601a      	str	r2, [r3, #0]
 800784a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800784e:	b29a      	uxth	r2, r3
 8007850:	f107 031c 	add.w	r3, r7, #28
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007858:	463b      	mov	r3, r7
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	891b      	ldrh	r3, [r3, #8]
 800785e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007862:	463b      	mov	r3, r7
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	6959      	ldr	r1, [r3, #20]
 8007868:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800786c:	b29b      	uxth	r3, r3
 800786e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007872:	1d38      	adds	r0, r7, #4
 8007874:	6800      	ldr	r0, [r0, #0]
 8007876:	f001 f9f3 	bl	8008c60 <USB_WritePMA>
 800787a:	f000 bcc6 	b.w	800820a <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800787e:	463b      	mov	r3, r7
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	785b      	ldrb	r3, [r3, #1]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d164      	bne.n	8007952 <USB_EPStartXfer+0x554>
 8007888:	1d3b      	adds	r3, r7, #4
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	64bb      	str	r3, [r7, #72]	; 0x48
 800788e:	1d3b      	adds	r3, r7, #4
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007896:	b29b      	uxth	r3, r3
 8007898:	461a      	mov	r2, r3
 800789a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800789c:	4413      	add	r3, r2
 800789e:	64bb      	str	r3, [r7, #72]	; 0x48
 80078a0:	463b      	mov	r3, r7
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	00da      	lsls	r2, r3, #3
 80078a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078aa:	4413      	add	r3, r2
 80078ac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80078b0:	647b      	str	r3, [r7, #68]	; 0x44
 80078b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d112      	bne.n	80078e0 <USB_EPStartXfer+0x4e2>
 80078ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078bc:	881b      	ldrh	r3, [r3, #0]
 80078be:	b29b      	uxth	r3, r3
 80078c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80078c4:	b29a      	uxth	r2, r3
 80078c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078c8:	801a      	strh	r2, [r3, #0]
 80078ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078cc:	881b      	ldrh	r3, [r3, #0]
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078d8:	b29a      	uxth	r2, r3
 80078da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078dc:	801a      	strh	r2, [r3, #0]
 80078de:	e057      	b.n	8007990 <USB_EPStartXfer+0x592>
 80078e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078e4:	2b3e      	cmp	r3, #62	; 0x3e
 80078e6:	d817      	bhi.n	8007918 <USB_EPStartXfer+0x51a>
 80078e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078ec:	085b      	lsrs	r3, r3, #1
 80078ee:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80078f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078f6:	f003 0301 	and.w	r3, r3, #1
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d004      	beq.n	8007908 <USB_EPStartXfer+0x50a>
 80078fe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007902:	3301      	adds	r3, #1
 8007904:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007908:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800790c:	b29b      	uxth	r3, r3
 800790e:	029b      	lsls	r3, r3, #10
 8007910:	b29a      	uxth	r2, r3
 8007912:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007914:	801a      	strh	r2, [r3, #0]
 8007916:	e03b      	b.n	8007990 <USB_EPStartXfer+0x592>
 8007918:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800791c:	095b      	lsrs	r3, r3, #5
 800791e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007922:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007926:	f003 031f 	and.w	r3, r3, #31
 800792a:	2b00      	cmp	r3, #0
 800792c:	d104      	bne.n	8007938 <USB_EPStartXfer+0x53a>
 800792e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007932:	3b01      	subs	r3, #1
 8007934:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007938:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800793c:	b29b      	uxth	r3, r3
 800793e:	029b      	lsls	r3, r3, #10
 8007940:	b29b      	uxth	r3, r3
 8007942:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007946:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800794a:	b29a      	uxth	r2, r3
 800794c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800794e:	801a      	strh	r2, [r3, #0]
 8007950:	e01e      	b.n	8007990 <USB_EPStartXfer+0x592>
 8007952:	463b      	mov	r3, r7
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	785b      	ldrb	r3, [r3, #1]
 8007958:	2b01      	cmp	r3, #1
 800795a:	d119      	bne.n	8007990 <USB_EPStartXfer+0x592>
 800795c:	1d3b      	adds	r3, r7, #4
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	653b      	str	r3, [r7, #80]	; 0x50
 8007962:	1d3b      	adds	r3, r7, #4
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800796a:	b29b      	uxth	r3, r3
 800796c:	461a      	mov	r2, r3
 800796e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007970:	4413      	add	r3, r2
 8007972:	653b      	str	r3, [r7, #80]	; 0x50
 8007974:	463b      	mov	r3, r7
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	00da      	lsls	r2, r3, #3
 800797c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800797e:	4413      	add	r3, r2
 8007980:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007984:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007986:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800798a:	b29a      	uxth	r2, r3
 800798c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800798e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007990:	463b      	mov	r3, r7
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	891b      	ldrh	r3, [r3, #8]
 8007996:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800799a:	463b      	mov	r3, r7
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	6959      	ldr	r1, [r3, #20]
 80079a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80079aa:	1d38      	adds	r0, r7, #4
 80079ac:	6800      	ldr	r0, [r0, #0]
 80079ae:	f001 f957 	bl	8008c60 <USB_WritePMA>
            ep->xfer_buff += len;
 80079b2:	463b      	mov	r3, r7
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	695a      	ldr	r2, [r3, #20]
 80079b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079bc:	441a      	add	r2, r3
 80079be:	463b      	mov	r3, r7
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80079c4:	463b      	mov	r3, r7
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	6a1a      	ldr	r2, [r3, #32]
 80079ca:	463b      	mov	r3, r7
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	691b      	ldr	r3, [r3, #16]
 80079d0:	429a      	cmp	r2, r3
 80079d2:	d909      	bls.n	80079e8 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 80079d4:	463b      	mov	r3, r7
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	6a1a      	ldr	r2, [r3, #32]
 80079da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079de:	1ad2      	subs	r2, r2, r3
 80079e0:	463b      	mov	r3, r7
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	621a      	str	r2, [r3, #32]
 80079e6:	e008      	b.n	80079fa <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 80079e8:	463b      	mov	r3, r7
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	6a1b      	ldr	r3, [r3, #32]
 80079ee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80079f2:	463b      	mov	r3, r7
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	2200      	movs	r2, #0
 80079f8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80079fa:	1d3b      	adds	r3, r7, #4
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	643b      	str	r3, [r7, #64]	; 0x40
 8007a00:	463b      	mov	r3, r7
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	785b      	ldrb	r3, [r3, #1]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d164      	bne.n	8007ad4 <USB_EPStartXfer+0x6d6>
 8007a0a:	1d3b      	adds	r3, r7, #4
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a10:	1d3b      	adds	r3, r7, #4
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a1e:	4413      	add	r3, r2
 8007a20:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a22:	463b      	mov	r3, r7
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	00da      	lsls	r2, r3, #3
 8007a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a2c:	4413      	add	r3, r2
 8007a2e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007a32:	637b      	str	r3, [r7, #52]	; 0x34
 8007a34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d112      	bne.n	8007a62 <USB_EPStartXfer+0x664>
 8007a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a3e:	881b      	ldrh	r3, [r3, #0]
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a46:	b29a      	uxth	r2, r3
 8007a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a4a:	801a      	strh	r2, [r3, #0]
 8007a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a4e:	881b      	ldrh	r3, [r3, #0]
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a5a:	b29a      	uxth	r2, r3
 8007a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a5e:	801a      	strh	r2, [r3, #0]
 8007a60:	e054      	b.n	8007b0c <USB_EPStartXfer+0x70e>
 8007a62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a66:	2b3e      	cmp	r3, #62	; 0x3e
 8007a68:	d817      	bhi.n	8007a9a <USB_EPStartXfer+0x69c>
 8007a6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a6e:	085b      	lsrs	r3, r3, #1
 8007a70:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007a74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a78:	f003 0301 	and.w	r3, r3, #1
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d004      	beq.n	8007a8a <USB_EPStartXfer+0x68c>
 8007a80:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007a84:	3301      	adds	r3, #1
 8007a86:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007a8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	029b      	lsls	r3, r3, #10
 8007a92:	b29a      	uxth	r2, r3
 8007a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a96:	801a      	strh	r2, [r3, #0]
 8007a98:	e038      	b.n	8007b0c <USB_EPStartXfer+0x70e>
 8007a9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a9e:	095b      	lsrs	r3, r3, #5
 8007aa0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007aa4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007aa8:	f003 031f 	and.w	r3, r3, #31
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d104      	bne.n	8007aba <USB_EPStartXfer+0x6bc>
 8007ab0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007ab4:	3b01      	subs	r3, #1
 8007ab6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007aba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	029b      	lsls	r3, r3, #10
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ac8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007acc:	b29a      	uxth	r2, r3
 8007ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ad0:	801a      	strh	r2, [r3, #0]
 8007ad2:	e01b      	b.n	8007b0c <USB_EPStartXfer+0x70e>
 8007ad4:	463b      	mov	r3, r7
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	785b      	ldrb	r3, [r3, #1]
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d116      	bne.n	8007b0c <USB_EPStartXfer+0x70e>
 8007ade:	1d3b      	adds	r3, r7, #4
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	461a      	mov	r2, r3
 8007aea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007aec:	4413      	add	r3, r2
 8007aee:	643b      	str	r3, [r7, #64]	; 0x40
 8007af0:	463b      	mov	r3, r7
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	00da      	lsls	r2, r3, #3
 8007af8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007afa:	4413      	add	r3, r2
 8007afc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007b00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b06:	b29a      	uxth	r2, r3
 8007b08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b0a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007b0c:	463b      	mov	r3, r7
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	895b      	ldrh	r3, [r3, #10]
 8007b12:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b16:	463b      	mov	r3, r7
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	6959      	ldr	r1, [r3, #20]
 8007b1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b20:	b29b      	uxth	r3, r3
 8007b22:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007b26:	1d38      	adds	r0, r7, #4
 8007b28:	6800      	ldr	r0, [r0, #0]
 8007b2a:	f001 f899 	bl	8008c60 <USB_WritePMA>
 8007b2e:	e36c      	b.n	800820a <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007b30:	463b      	mov	r3, r7
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	6a1b      	ldr	r3, [r3, #32]
 8007b36:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8007b3a:	1d3b      	adds	r3, r7, #4
 8007b3c:	681a      	ldr	r2, [r3, #0]
 8007b3e:	463b      	mov	r3, r7
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	009b      	lsls	r3, r3, #2
 8007b46:	4413      	add	r3, r2
 8007b48:	881b      	ldrh	r3, [r3, #0]
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007b50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b54:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007b58:	1d3b      	adds	r3, r7, #4
 8007b5a:	681a      	ldr	r2, [r3, #0]
 8007b5c:	463b      	mov	r3, r7
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	441a      	add	r2, r3
 8007b66:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007b6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007b7e:	1d3b      	adds	r3, r7, #4
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b84:	1d3b      	adds	r3, r7, #4
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	461a      	mov	r2, r3
 8007b90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b92:	4413      	add	r3, r2
 8007b94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b96:	463b      	mov	r3, r7
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	00da      	lsls	r2, r3, #3
 8007b9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ba0:	4413      	add	r3, r2
 8007ba2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007ba6:	65bb      	str	r3, [r7, #88]	; 0x58
 8007ba8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bac:	b29a      	uxth	r2, r3
 8007bae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007bb0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007bb2:	463b      	mov	r3, r7
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	891b      	ldrh	r3, [r3, #8]
 8007bb8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007bbc:	463b      	mov	r3, r7
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	6959      	ldr	r1, [r3, #20]
 8007bc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007bcc:	1d38      	adds	r0, r7, #4
 8007bce:	6800      	ldr	r0, [r0, #0]
 8007bd0:	f001 f846 	bl	8008c60 <USB_WritePMA>
 8007bd4:	e319      	b.n	800820a <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8007bd6:	1d3b      	adds	r3, r7, #4
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	463b      	mov	r3, r7
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	781b      	ldrb	r3, [r3, #0]
 8007be0:	009b      	lsls	r3, r3, #2
 8007be2:	4413      	add	r3, r2
 8007be4:	881b      	ldrh	r3, [r3, #0]
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bf0:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8007bf4:	1d3b      	adds	r3, r7, #4
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	463b      	mov	r3, r7
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	009b      	lsls	r3, r3, #2
 8007c00:	441a      	add	r2, r3
 8007c02:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8007c06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c0e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007c12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007c1a:	463b      	mov	r3, r7
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	6a1a      	ldr	r2, [r3, #32]
 8007c20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c24:	1ad2      	subs	r2, r2, r3
 8007c26:	463b      	mov	r3, r7
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007c2c:	1d3b      	adds	r3, r7, #4
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	463b      	mov	r3, r7
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	4413      	add	r3, r2
 8007c3a:	881b      	ldrh	r3, [r3, #0]
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	f000 8162 	beq.w	8007f0c <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007c48:	1d3b      	adds	r3, r7, #4
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007c50:	463b      	mov	r3, r7
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	785b      	ldrb	r3, [r3, #1]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d164      	bne.n	8007d24 <USB_EPStartXfer+0x926>
 8007c5a:	1d3b      	adds	r3, r7, #4
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	67bb      	str	r3, [r7, #120]	; 0x78
 8007c60:	1d3b      	adds	r3, r7, #4
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c68:	b29b      	uxth	r3, r3
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c6e:	4413      	add	r3, r2
 8007c70:	67bb      	str	r3, [r7, #120]	; 0x78
 8007c72:	463b      	mov	r3, r7
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	781b      	ldrb	r3, [r3, #0]
 8007c78:	00da      	lsls	r2, r3, #3
 8007c7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c7c:	4413      	add	r3, r2
 8007c7e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007c82:	677b      	str	r3, [r7, #116]	; 0x74
 8007c84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d112      	bne.n	8007cb2 <USB_EPStartXfer+0x8b4>
 8007c8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c8e:	881b      	ldrh	r3, [r3, #0]
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c96:	b29a      	uxth	r2, r3
 8007c98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c9a:	801a      	strh	r2, [r3, #0]
 8007c9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c9e:	881b      	ldrh	r3, [r3, #0]
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ca6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007caa:	b29a      	uxth	r2, r3
 8007cac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007cae:	801a      	strh	r2, [r3, #0]
 8007cb0:	e057      	b.n	8007d62 <USB_EPStartXfer+0x964>
 8007cb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cb6:	2b3e      	cmp	r3, #62	; 0x3e
 8007cb8:	d817      	bhi.n	8007cea <USB_EPStartXfer+0x8ec>
 8007cba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cbe:	085b      	lsrs	r3, r3, #1
 8007cc0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007cc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cc8:	f003 0301 	and.w	r3, r3, #1
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d004      	beq.n	8007cda <USB_EPStartXfer+0x8dc>
 8007cd0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007cd4:	3301      	adds	r3, #1
 8007cd6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007cda:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007cde:	b29b      	uxth	r3, r3
 8007ce0:	029b      	lsls	r3, r3, #10
 8007ce2:	b29a      	uxth	r2, r3
 8007ce4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ce6:	801a      	strh	r2, [r3, #0]
 8007ce8:	e03b      	b.n	8007d62 <USB_EPStartXfer+0x964>
 8007cea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cee:	095b      	lsrs	r3, r3, #5
 8007cf0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007cf4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cf8:	f003 031f 	and.w	r3, r3, #31
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d104      	bne.n	8007d0a <USB_EPStartXfer+0x90c>
 8007d00:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007d04:	3b01      	subs	r3, #1
 8007d06:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007d0a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	029b      	lsls	r3, r3, #10
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d1c:	b29a      	uxth	r2, r3
 8007d1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d20:	801a      	strh	r2, [r3, #0]
 8007d22:	e01e      	b.n	8007d62 <USB_EPStartXfer+0x964>
 8007d24:	463b      	mov	r3, r7
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	785b      	ldrb	r3, [r3, #1]
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	d119      	bne.n	8007d62 <USB_EPStartXfer+0x964>
 8007d2e:	1d3b      	adds	r3, r7, #4
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	461a      	mov	r2, r3
 8007d3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007d3e:	4413      	add	r3, r2
 8007d40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007d44:	463b      	mov	r3, r7
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	781b      	ldrb	r3, [r3, #0]
 8007d4a:	00da      	lsls	r2, r3, #3
 8007d4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007d50:	4413      	add	r3, r2
 8007d52:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007d56:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007d58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d5c:	b29a      	uxth	r2, r3
 8007d5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007d60:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007d62:	463b      	mov	r3, r7
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	895b      	ldrh	r3, [r3, #10]
 8007d68:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d6c:	463b      	mov	r3, r7
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	6959      	ldr	r1, [r3, #20]
 8007d72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007d7c:	1d38      	adds	r0, r7, #4
 8007d7e:	6800      	ldr	r0, [r0, #0]
 8007d80:	f000 ff6e 	bl	8008c60 <USB_WritePMA>
          ep->xfer_buff += len;
 8007d84:	463b      	mov	r3, r7
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	695a      	ldr	r2, [r3, #20]
 8007d8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d8e:	441a      	add	r2, r3
 8007d90:	463b      	mov	r3, r7
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007d96:	463b      	mov	r3, r7
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	6a1a      	ldr	r2, [r3, #32]
 8007d9c:	463b      	mov	r3, r7
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	691b      	ldr	r3, [r3, #16]
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d909      	bls.n	8007dba <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8007da6:	463b      	mov	r3, r7
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	6a1a      	ldr	r2, [r3, #32]
 8007dac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007db0:	1ad2      	subs	r2, r2, r3
 8007db2:	463b      	mov	r3, r7
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	621a      	str	r2, [r3, #32]
 8007db8:	e008      	b.n	8007dcc <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8007dba:	463b      	mov	r3, r7
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	6a1b      	ldr	r3, [r3, #32]
 8007dc0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007dc4:	463b      	mov	r3, r7
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007dcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	f000 821a 	beq.w	800820a <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007dd6:	463b      	mov	r3, r7
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	785b      	ldrb	r3, [r3, #1]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d164      	bne.n	8007eaa <USB_EPStartXfer+0xaac>
 8007de0:	1d3b      	adds	r3, r7, #4
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	66bb      	str	r3, [r7, #104]	; 0x68
 8007de6:	1d3b      	adds	r3, r7, #4
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	461a      	mov	r2, r3
 8007df2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007df4:	4413      	add	r3, r2
 8007df6:	66bb      	str	r3, [r7, #104]	; 0x68
 8007df8:	463b      	mov	r3, r7
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	00da      	lsls	r2, r3, #3
 8007e00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007e02:	4413      	add	r3, r2
 8007e04:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007e08:	667b      	str	r3, [r7, #100]	; 0x64
 8007e0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d112      	bne.n	8007e38 <USB_EPStartXfer+0xa3a>
 8007e12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e14:	881b      	ldrh	r3, [r3, #0]
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007e1c:	b29a      	uxth	r2, r3
 8007e1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e20:	801a      	strh	r2, [r3, #0]
 8007e22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e24:	881b      	ldrh	r3, [r3, #0]
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e30:	b29a      	uxth	r2, r3
 8007e32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e34:	801a      	strh	r2, [r3, #0]
 8007e36:	e057      	b.n	8007ee8 <USB_EPStartXfer+0xaea>
 8007e38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e3c:	2b3e      	cmp	r3, #62	; 0x3e
 8007e3e:	d817      	bhi.n	8007e70 <USB_EPStartXfer+0xa72>
 8007e40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e44:	085b      	lsrs	r3, r3, #1
 8007e46:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007e4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e4e:	f003 0301 	and.w	r3, r3, #1
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d004      	beq.n	8007e60 <USB_EPStartXfer+0xa62>
 8007e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e5a:	3301      	adds	r3, #1
 8007e5c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	029b      	lsls	r3, r3, #10
 8007e68:	b29a      	uxth	r2, r3
 8007e6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e6c:	801a      	strh	r2, [r3, #0]
 8007e6e:	e03b      	b.n	8007ee8 <USB_EPStartXfer+0xaea>
 8007e70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e74:	095b      	lsrs	r3, r3, #5
 8007e76:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007e7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e7e:	f003 031f 	and.w	r3, r3, #31
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d104      	bne.n	8007e90 <USB_EPStartXfer+0xa92>
 8007e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e8a:	3b01      	subs	r3, #1
 8007e8c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	029b      	lsls	r3, r3, #10
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ea2:	b29a      	uxth	r2, r3
 8007ea4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ea6:	801a      	strh	r2, [r3, #0]
 8007ea8:	e01e      	b.n	8007ee8 <USB_EPStartXfer+0xaea>
 8007eaa:	463b      	mov	r3, r7
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	785b      	ldrb	r3, [r3, #1]
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	d119      	bne.n	8007ee8 <USB_EPStartXfer+0xaea>
 8007eb4:	1d3b      	adds	r3, r7, #4
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	673b      	str	r3, [r7, #112]	; 0x70
 8007eba:	1d3b      	adds	r3, r7, #4
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ec8:	4413      	add	r3, r2
 8007eca:	673b      	str	r3, [r7, #112]	; 0x70
 8007ecc:	463b      	mov	r3, r7
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	00da      	lsls	r2, r3, #3
 8007ed4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ed6:	4413      	add	r3, r2
 8007ed8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007edc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007ede:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ee2:	b29a      	uxth	r2, r3
 8007ee4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ee6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007ee8:	463b      	mov	r3, r7
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	891b      	ldrh	r3, [r3, #8]
 8007eee:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007ef2:	463b      	mov	r3, r7
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	6959      	ldr	r1, [r3, #20]
 8007ef8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007f02:	1d38      	adds	r0, r7, #4
 8007f04:	6800      	ldr	r0, [r0, #0]
 8007f06:	f000 feab 	bl	8008c60 <USB_WritePMA>
 8007f0a:	e17e      	b.n	800820a <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007f0c:	463b      	mov	r3, r7
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	785b      	ldrb	r3, [r3, #1]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d16f      	bne.n	8007ff6 <USB_EPStartXfer+0xbf8>
 8007f16:	1d3b      	adds	r3, r7, #4
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007f1e:	1d3b      	adds	r3, r7, #4
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	461a      	mov	r2, r3
 8007f2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f2e:	4413      	add	r3, r2
 8007f30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007f34:	463b      	mov	r3, r7
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	00da      	lsls	r2, r3, #3
 8007f3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f40:	4413      	add	r3, r2
 8007f42:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007f46:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007f4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d116      	bne.n	8007f80 <USB_EPStartXfer+0xb82>
 8007f52:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f56:	881b      	ldrh	r3, [r3, #0]
 8007f58:	b29b      	uxth	r3, r3
 8007f5a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f5e:	b29a      	uxth	r2, r3
 8007f60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f64:	801a      	strh	r2, [r3, #0]
 8007f66:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f6a:	881b      	ldrh	r3, [r3, #0]
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f76:	b29a      	uxth	r2, r3
 8007f78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f7c:	801a      	strh	r2, [r3, #0]
 8007f7e:	e05f      	b.n	8008040 <USB_EPStartXfer+0xc42>
 8007f80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f84:	2b3e      	cmp	r3, #62	; 0x3e
 8007f86:	d818      	bhi.n	8007fba <USB_EPStartXfer+0xbbc>
 8007f88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f8c:	085b      	lsrs	r3, r3, #1
 8007f8e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007f92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f96:	f003 0301 	and.w	r3, r3, #1
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d004      	beq.n	8007fa8 <USB_EPStartXfer+0xbaa>
 8007f9e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007fa2:	3301      	adds	r3, #1
 8007fa4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007fa8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	029b      	lsls	r3, r3, #10
 8007fb0:	b29a      	uxth	r2, r3
 8007fb2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007fb6:	801a      	strh	r2, [r3, #0]
 8007fb8:	e042      	b.n	8008040 <USB_EPStartXfer+0xc42>
 8007fba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fbe:	095b      	lsrs	r3, r3, #5
 8007fc0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007fc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fc8:	f003 031f 	and.w	r3, r3, #31
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d104      	bne.n	8007fda <USB_EPStartXfer+0xbdc>
 8007fd0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007fd4:	3b01      	subs	r3, #1
 8007fd6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007fda:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	029b      	lsls	r3, r3, #10
 8007fe2:	b29b      	uxth	r3, r3
 8007fe4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fe8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fec:	b29a      	uxth	r2, r3
 8007fee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ff2:	801a      	strh	r2, [r3, #0]
 8007ff4:	e024      	b.n	8008040 <USB_EPStartXfer+0xc42>
 8007ff6:	463b      	mov	r3, r7
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	785b      	ldrb	r3, [r3, #1]
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d11f      	bne.n	8008040 <USB_EPStartXfer+0xc42>
 8008000:	1d3b      	adds	r3, r7, #4
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008008:	1d3b      	adds	r3, r7, #4
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008010:	b29b      	uxth	r3, r3
 8008012:	461a      	mov	r2, r3
 8008014:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008018:	4413      	add	r3, r2
 800801a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800801e:	463b      	mov	r3, r7
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	00da      	lsls	r2, r3, #3
 8008026:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800802a:	4413      	add	r3, r2
 800802c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008030:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008034:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008038:	b29a      	uxth	r2, r3
 800803a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800803e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008040:	463b      	mov	r3, r7
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	891b      	ldrh	r3, [r3, #8]
 8008046:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800804a:	463b      	mov	r3, r7
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	6959      	ldr	r1, [r3, #20]
 8008050:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008054:	b29b      	uxth	r3, r3
 8008056:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800805a:	1d38      	adds	r0, r7, #4
 800805c:	6800      	ldr	r0, [r0, #0]
 800805e:	f000 fdff 	bl	8008c60 <USB_WritePMA>
          ep->xfer_buff += len;
 8008062:	463b      	mov	r3, r7
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	695a      	ldr	r2, [r3, #20]
 8008068:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800806c:	441a      	add	r2, r3
 800806e:	463b      	mov	r3, r7
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8008074:	463b      	mov	r3, r7
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	6a1a      	ldr	r2, [r3, #32]
 800807a:	463b      	mov	r3, r7
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	691b      	ldr	r3, [r3, #16]
 8008080:	429a      	cmp	r2, r3
 8008082:	d909      	bls.n	8008098 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8008084:	463b      	mov	r3, r7
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	6a1a      	ldr	r2, [r3, #32]
 800808a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800808e:	1ad2      	subs	r2, r2, r3
 8008090:	463b      	mov	r3, r7
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	621a      	str	r2, [r3, #32]
 8008096:	e008      	b.n	80080aa <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8008098:	463b      	mov	r3, r7
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	6a1b      	ldr	r3, [r3, #32]
 800809e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80080a2:	463b      	mov	r3, r7
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	2200      	movs	r2, #0
 80080a8:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80080aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	f000 80ab 	beq.w	800820a <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80080b4:	1d3b      	adds	r3, r7, #4
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80080bc:	463b      	mov	r3, r7
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	785b      	ldrb	r3, [r3, #1]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d16f      	bne.n	80081a6 <USB_EPStartXfer+0xda8>
 80080c6:	1d3b      	adds	r3, r7, #4
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80080ce:	1d3b      	adds	r3, r7, #4
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	461a      	mov	r2, r3
 80080da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80080de:	4413      	add	r3, r2
 80080e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80080e4:	463b      	mov	r3, r7
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	00da      	lsls	r2, r3, #3
 80080ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80080f0:	4413      	add	r3, r2
 80080f2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80080f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80080fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d116      	bne.n	8008130 <USB_EPStartXfer+0xd32>
 8008102:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008106:	881b      	ldrh	r3, [r3, #0]
 8008108:	b29b      	uxth	r3, r3
 800810a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800810e:	b29a      	uxth	r2, r3
 8008110:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008114:	801a      	strh	r2, [r3, #0]
 8008116:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800811a:	881b      	ldrh	r3, [r3, #0]
 800811c:	b29b      	uxth	r3, r3
 800811e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008122:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008126:	b29a      	uxth	r2, r3
 8008128:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800812c:	801a      	strh	r2, [r3, #0]
 800812e:	e05b      	b.n	80081e8 <USB_EPStartXfer+0xdea>
 8008130:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008134:	2b3e      	cmp	r3, #62	; 0x3e
 8008136:	d818      	bhi.n	800816a <USB_EPStartXfer+0xd6c>
 8008138:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800813c:	085b      	lsrs	r3, r3, #1
 800813e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008142:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008146:	f003 0301 	and.w	r3, r3, #1
 800814a:	2b00      	cmp	r3, #0
 800814c:	d004      	beq.n	8008158 <USB_EPStartXfer+0xd5a>
 800814e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008152:	3301      	adds	r3, #1
 8008154:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008158:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800815c:	b29b      	uxth	r3, r3
 800815e:	029b      	lsls	r3, r3, #10
 8008160:	b29a      	uxth	r2, r3
 8008162:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008166:	801a      	strh	r2, [r3, #0]
 8008168:	e03e      	b.n	80081e8 <USB_EPStartXfer+0xdea>
 800816a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800816e:	095b      	lsrs	r3, r3, #5
 8008170:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008174:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008178:	f003 031f 	and.w	r3, r3, #31
 800817c:	2b00      	cmp	r3, #0
 800817e:	d104      	bne.n	800818a <USB_EPStartXfer+0xd8c>
 8008180:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008184:	3b01      	subs	r3, #1
 8008186:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800818a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800818e:	b29b      	uxth	r3, r3
 8008190:	029b      	lsls	r3, r3, #10
 8008192:	b29b      	uxth	r3, r3
 8008194:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008198:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800819c:	b29a      	uxth	r2, r3
 800819e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80081a2:	801a      	strh	r2, [r3, #0]
 80081a4:	e020      	b.n	80081e8 <USB_EPStartXfer+0xdea>
 80081a6:	463b      	mov	r3, r7
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	785b      	ldrb	r3, [r3, #1]
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d11b      	bne.n	80081e8 <USB_EPStartXfer+0xdea>
 80081b0:	1d3b      	adds	r3, r7, #4
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	461a      	mov	r2, r3
 80081bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80081c0:	4413      	add	r3, r2
 80081c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80081c6:	463b      	mov	r3, r7
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	781b      	ldrb	r3, [r3, #0]
 80081cc:	00da      	lsls	r2, r3, #3
 80081ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80081d2:	4413      	add	r3, r2
 80081d4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80081d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80081dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081e0:	b29a      	uxth	r2, r3
 80081e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80081e6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80081e8:	463b      	mov	r3, r7
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	895b      	ldrh	r3, [r3, #10]
 80081ee:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80081f2:	463b      	mov	r3, r7
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	6959      	ldr	r1, [r3, #20]
 80081f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008202:	1d38      	adds	r0, r7, #4
 8008204:	6800      	ldr	r0, [r0, #0]
 8008206:	f000 fd2b 	bl	8008c60 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800820a:	1d3b      	adds	r3, r7, #4
 800820c:	681a      	ldr	r2, [r3, #0]
 800820e:	463b      	mov	r3, r7
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	781b      	ldrb	r3, [r3, #0]
 8008214:	009b      	lsls	r3, r3, #2
 8008216:	4413      	add	r3, r2
 8008218:	881b      	ldrh	r3, [r3, #0]
 800821a:	b29b      	uxth	r3, r3
 800821c:	f107 020a 	add.w	r2, r7, #10
 8008220:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008224:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008228:	8013      	strh	r3, [r2, #0]
 800822a:	f107 030a 	add.w	r3, r7, #10
 800822e:	f107 020a 	add.w	r2, r7, #10
 8008232:	8812      	ldrh	r2, [r2, #0]
 8008234:	f082 0210 	eor.w	r2, r2, #16
 8008238:	801a      	strh	r2, [r3, #0]
 800823a:	f107 030a 	add.w	r3, r7, #10
 800823e:	f107 020a 	add.w	r2, r7, #10
 8008242:	8812      	ldrh	r2, [r2, #0]
 8008244:	f082 0220 	eor.w	r2, r2, #32
 8008248:	801a      	strh	r2, [r3, #0]
 800824a:	1d3b      	adds	r3, r7, #4
 800824c:	681a      	ldr	r2, [r3, #0]
 800824e:	463b      	mov	r3, r7
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	781b      	ldrb	r3, [r3, #0]
 8008254:	009b      	lsls	r3, r3, #2
 8008256:	441a      	add	r2, r3
 8008258:	f107 030a 	add.w	r3, r7, #10
 800825c:	881b      	ldrh	r3, [r3, #0]
 800825e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008262:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008266:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800826a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800826e:	b29b      	uxth	r3, r3
 8008270:	8013      	strh	r3, [r2, #0]
 8008272:	e3b5      	b.n	80089e0 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008274:	463b      	mov	r3, r7
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	7b1b      	ldrb	r3, [r3, #12]
 800827a:	2b00      	cmp	r3, #0
 800827c:	f040 8090 	bne.w	80083a0 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008280:	463b      	mov	r3, r7
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	699a      	ldr	r2, [r3, #24]
 8008286:	463b      	mov	r3, r7
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	691b      	ldr	r3, [r3, #16]
 800828c:	429a      	cmp	r2, r3
 800828e:	d90e      	bls.n	80082ae <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8008290:	463b      	mov	r3, r7
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	691b      	ldr	r3, [r3, #16]
 8008296:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 800829a:	463b      	mov	r3, r7
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	699a      	ldr	r2, [r3, #24]
 80082a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082a4:	1ad2      	subs	r2, r2, r3
 80082a6:	463b      	mov	r3, r7
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	619a      	str	r2, [r3, #24]
 80082ac:	e008      	b.n	80082c0 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 80082ae:	463b      	mov	r3, r7
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	699b      	ldr	r3, [r3, #24]
 80082b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80082b8:	463b      	mov	r3, r7
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	2200      	movs	r2, #0
 80082be:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80082c0:	1d3b      	adds	r3, r7, #4
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80082c8:	1d3b      	adds	r3, r7, #4
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	461a      	mov	r2, r3
 80082d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80082d8:	4413      	add	r3, r2
 80082da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80082de:	463b      	mov	r3, r7
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	781b      	ldrb	r3, [r3, #0]
 80082e4:	00da      	lsls	r2, r3, #3
 80082e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80082ea:	4413      	add	r3, r2
 80082ec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80082f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80082f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d116      	bne.n	800832a <USB_EPStartXfer+0xf2c>
 80082fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008300:	881b      	ldrh	r3, [r3, #0]
 8008302:	b29b      	uxth	r3, r3
 8008304:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008308:	b29a      	uxth	r2, r3
 800830a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800830e:	801a      	strh	r2, [r3, #0]
 8008310:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008314:	881b      	ldrh	r3, [r3, #0]
 8008316:	b29b      	uxth	r3, r3
 8008318:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800831c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008320:	b29a      	uxth	r2, r3
 8008322:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008326:	801a      	strh	r2, [r3, #0]
 8008328:	e32c      	b.n	8008984 <USB_EPStartXfer+0x1586>
 800832a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800832e:	2b3e      	cmp	r3, #62	; 0x3e
 8008330:	d818      	bhi.n	8008364 <USB_EPStartXfer+0xf66>
 8008332:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008336:	085b      	lsrs	r3, r3, #1
 8008338:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800833c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008340:	f003 0301 	and.w	r3, r3, #1
 8008344:	2b00      	cmp	r3, #0
 8008346:	d004      	beq.n	8008352 <USB_EPStartXfer+0xf54>
 8008348:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800834c:	3301      	adds	r3, #1
 800834e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008352:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008356:	b29b      	uxth	r3, r3
 8008358:	029b      	lsls	r3, r3, #10
 800835a:	b29a      	uxth	r2, r3
 800835c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008360:	801a      	strh	r2, [r3, #0]
 8008362:	e30f      	b.n	8008984 <USB_EPStartXfer+0x1586>
 8008364:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008368:	095b      	lsrs	r3, r3, #5
 800836a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800836e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008372:	f003 031f 	and.w	r3, r3, #31
 8008376:	2b00      	cmp	r3, #0
 8008378:	d104      	bne.n	8008384 <USB_EPStartXfer+0xf86>
 800837a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800837e:	3b01      	subs	r3, #1
 8008380:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008384:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008388:	b29b      	uxth	r3, r3
 800838a:	029b      	lsls	r3, r3, #10
 800838c:	b29b      	uxth	r3, r3
 800838e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008392:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008396:	b29a      	uxth	r2, r3
 8008398:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800839c:	801a      	strh	r2, [r3, #0]
 800839e:	e2f1      	b.n	8008984 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80083a0:	463b      	mov	r3, r7
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	78db      	ldrb	r3, [r3, #3]
 80083a6:	2b02      	cmp	r3, #2
 80083a8:	f040 818f 	bne.w	80086ca <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80083ac:	463b      	mov	r3, r7
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	785b      	ldrb	r3, [r3, #1]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d175      	bne.n	80084a2 <USB_EPStartXfer+0x10a4>
 80083b6:	1d3b      	adds	r3, r7, #4
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80083be:	1d3b      	adds	r3, r7, #4
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083c6:	b29b      	uxth	r3, r3
 80083c8:	461a      	mov	r2, r3
 80083ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80083ce:	4413      	add	r3, r2
 80083d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80083d4:	463b      	mov	r3, r7
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	781b      	ldrb	r3, [r3, #0]
 80083da:	00da      	lsls	r2, r3, #3
 80083dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80083e0:	4413      	add	r3, r2
 80083e2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80083e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80083ea:	463b      	mov	r3, r7
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	691b      	ldr	r3, [r3, #16]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d116      	bne.n	8008422 <USB_EPStartXfer+0x1024>
 80083f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80083f8:	881b      	ldrh	r3, [r3, #0]
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008400:	b29a      	uxth	r2, r3
 8008402:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008406:	801a      	strh	r2, [r3, #0]
 8008408:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800840c:	881b      	ldrh	r3, [r3, #0]
 800840e:	b29b      	uxth	r3, r3
 8008410:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008414:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008418:	b29a      	uxth	r2, r3
 800841a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800841e:	801a      	strh	r2, [r3, #0]
 8008420:	e065      	b.n	80084ee <USB_EPStartXfer+0x10f0>
 8008422:	463b      	mov	r3, r7
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	691b      	ldr	r3, [r3, #16]
 8008428:	2b3e      	cmp	r3, #62	; 0x3e
 800842a:	d81a      	bhi.n	8008462 <USB_EPStartXfer+0x1064>
 800842c:	463b      	mov	r3, r7
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	691b      	ldr	r3, [r3, #16]
 8008432:	085b      	lsrs	r3, r3, #1
 8008434:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008438:	463b      	mov	r3, r7
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	691b      	ldr	r3, [r3, #16]
 800843e:	f003 0301 	and.w	r3, r3, #1
 8008442:	2b00      	cmp	r3, #0
 8008444:	d004      	beq.n	8008450 <USB_EPStartXfer+0x1052>
 8008446:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800844a:	3301      	adds	r3, #1
 800844c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008450:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008454:	b29b      	uxth	r3, r3
 8008456:	029b      	lsls	r3, r3, #10
 8008458:	b29a      	uxth	r2, r3
 800845a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800845e:	801a      	strh	r2, [r3, #0]
 8008460:	e045      	b.n	80084ee <USB_EPStartXfer+0x10f0>
 8008462:	463b      	mov	r3, r7
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	691b      	ldr	r3, [r3, #16]
 8008468:	095b      	lsrs	r3, r3, #5
 800846a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800846e:	463b      	mov	r3, r7
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	691b      	ldr	r3, [r3, #16]
 8008474:	f003 031f 	and.w	r3, r3, #31
 8008478:	2b00      	cmp	r3, #0
 800847a:	d104      	bne.n	8008486 <USB_EPStartXfer+0x1088>
 800847c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008480:	3b01      	subs	r3, #1
 8008482:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008486:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800848a:	b29b      	uxth	r3, r3
 800848c:	029b      	lsls	r3, r3, #10
 800848e:	b29b      	uxth	r3, r3
 8008490:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008494:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008498:	b29a      	uxth	r2, r3
 800849a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800849e:	801a      	strh	r2, [r3, #0]
 80084a0:	e025      	b.n	80084ee <USB_EPStartXfer+0x10f0>
 80084a2:	463b      	mov	r3, r7
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	785b      	ldrb	r3, [r3, #1]
 80084a8:	2b01      	cmp	r3, #1
 80084aa:	d120      	bne.n	80084ee <USB_EPStartXfer+0x10f0>
 80084ac:	1d3b      	adds	r3, r7, #4
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80084b4:	1d3b      	adds	r3, r7, #4
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084bc:	b29b      	uxth	r3, r3
 80084be:	461a      	mov	r2, r3
 80084c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80084c4:	4413      	add	r3, r2
 80084c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80084ca:	463b      	mov	r3, r7
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	781b      	ldrb	r3, [r3, #0]
 80084d0:	00da      	lsls	r2, r3, #3
 80084d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80084d6:	4413      	add	r3, r2
 80084d8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80084dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80084e0:	463b      	mov	r3, r7
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	691b      	ldr	r3, [r3, #16]
 80084e6:	b29a      	uxth	r2, r3
 80084e8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80084ec:	801a      	strh	r2, [r3, #0]
 80084ee:	1d3b      	adds	r3, r7, #4
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80084f6:	463b      	mov	r3, r7
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	785b      	ldrb	r3, [r3, #1]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d175      	bne.n	80085ec <USB_EPStartXfer+0x11ee>
 8008500:	1d3b      	adds	r3, r7, #4
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008508:	1d3b      	adds	r3, r7, #4
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008510:	b29b      	uxth	r3, r3
 8008512:	461a      	mov	r2, r3
 8008514:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008518:	4413      	add	r3, r2
 800851a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800851e:	463b      	mov	r3, r7
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	781b      	ldrb	r3, [r3, #0]
 8008524:	00da      	lsls	r2, r3, #3
 8008526:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800852a:	4413      	add	r3, r2
 800852c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008530:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008534:	463b      	mov	r3, r7
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	691b      	ldr	r3, [r3, #16]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d116      	bne.n	800856c <USB_EPStartXfer+0x116e>
 800853e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008542:	881b      	ldrh	r3, [r3, #0]
 8008544:	b29b      	uxth	r3, r3
 8008546:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800854a:	b29a      	uxth	r2, r3
 800854c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008550:	801a      	strh	r2, [r3, #0]
 8008552:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008556:	881b      	ldrh	r3, [r3, #0]
 8008558:	b29b      	uxth	r3, r3
 800855a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800855e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008562:	b29a      	uxth	r2, r3
 8008564:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008568:	801a      	strh	r2, [r3, #0]
 800856a:	e061      	b.n	8008630 <USB_EPStartXfer+0x1232>
 800856c:	463b      	mov	r3, r7
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	691b      	ldr	r3, [r3, #16]
 8008572:	2b3e      	cmp	r3, #62	; 0x3e
 8008574:	d81a      	bhi.n	80085ac <USB_EPStartXfer+0x11ae>
 8008576:	463b      	mov	r3, r7
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	691b      	ldr	r3, [r3, #16]
 800857c:	085b      	lsrs	r3, r3, #1
 800857e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008582:	463b      	mov	r3, r7
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	691b      	ldr	r3, [r3, #16]
 8008588:	f003 0301 	and.w	r3, r3, #1
 800858c:	2b00      	cmp	r3, #0
 800858e:	d004      	beq.n	800859a <USB_EPStartXfer+0x119c>
 8008590:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008594:	3301      	adds	r3, #1
 8008596:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800859a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800859e:	b29b      	uxth	r3, r3
 80085a0:	029b      	lsls	r3, r3, #10
 80085a2:	b29a      	uxth	r2, r3
 80085a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80085a8:	801a      	strh	r2, [r3, #0]
 80085aa:	e041      	b.n	8008630 <USB_EPStartXfer+0x1232>
 80085ac:	463b      	mov	r3, r7
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	691b      	ldr	r3, [r3, #16]
 80085b2:	095b      	lsrs	r3, r3, #5
 80085b4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80085b8:	463b      	mov	r3, r7
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	691b      	ldr	r3, [r3, #16]
 80085be:	f003 031f 	and.w	r3, r3, #31
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d104      	bne.n	80085d0 <USB_EPStartXfer+0x11d2>
 80085c6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80085ca:	3b01      	subs	r3, #1
 80085cc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80085d0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	029b      	lsls	r3, r3, #10
 80085d8:	b29b      	uxth	r3, r3
 80085da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085e2:	b29a      	uxth	r2, r3
 80085e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80085e8:	801a      	strh	r2, [r3, #0]
 80085ea:	e021      	b.n	8008630 <USB_EPStartXfer+0x1232>
 80085ec:	463b      	mov	r3, r7
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	785b      	ldrb	r3, [r3, #1]
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d11c      	bne.n	8008630 <USB_EPStartXfer+0x1232>
 80085f6:	1d3b      	adds	r3, r7, #4
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085fe:	b29b      	uxth	r3, r3
 8008600:	461a      	mov	r2, r3
 8008602:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008606:	4413      	add	r3, r2
 8008608:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800860c:	463b      	mov	r3, r7
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	781b      	ldrb	r3, [r3, #0]
 8008612:	00da      	lsls	r2, r3, #3
 8008614:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008618:	4413      	add	r3, r2
 800861a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800861e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008622:	463b      	mov	r3, r7
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	691b      	ldr	r3, [r3, #16]
 8008628:	b29a      	uxth	r2, r3
 800862a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800862e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008630:	463b      	mov	r3, r7
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	69db      	ldr	r3, [r3, #28]
 8008636:	2b00      	cmp	r3, #0
 8008638:	f000 81a4 	beq.w	8008984 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800863c:	1d3b      	adds	r3, r7, #4
 800863e:	681a      	ldr	r2, [r3, #0]
 8008640:	463b      	mov	r3, r7
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	009b      	lsls	r3, r3, #2
 8008648:	4413      	add	r3, r2
 800864a:	881b      	ldrh	r3, [r3, #0]
 800864c:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008650:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008654:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008658:	2b00      	cmp	r3, #0
 800865a:	d005      	beq.n	8008668 <USB_EPStartXfer+0x126a>
 800865c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008664:	2b00      	cmp	r3, #0
 8008666:	d10d      	bne.n	8008684 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008668:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800866c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008670:	2b00      	cmp	r3, #0
 8008672:	f040 8187 	bne.w	8008984 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008676:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800867a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800867e:	2b00      	cmp	r3, #0
 8008680:	f040 8180 	bne.w	8008984 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8008684:	1d3b      	adds	r3, r7, #4
 8008686:	681a      	ldr	r2, [r3, #0]
 8008688:	463b      	mov	r3, r7
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	781b      	ldrb	r3, [r3, #0]
 800868e:	009b      	lsls	r3, r3, #2
 8008690:	4413      	add	r3, r2
 8008692:	881b      	ldrh	r3, [r3, #0]
 8008694:	b29b      	uxth	r3, r3
 8008696:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800869a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800869e:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80086a2:	1d3b      	adds	r3, r7, #4
 80086a4:	681a      	ldr	r2, [r3, #0]
 80086a6:	463b      	mov	r3, r7
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	781b      	ldrb	r3, [r3, #0]
 80086ac:	009b      	lsls	r3, r3, #2
 80086ae:	441a      	add	r2, r3
 80086b0:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80086b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	8013      	strh	r3, [r2, #0]
 80086c8:	e15c      	b.n	8008984 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80086ca:	463b      	mov	r3, r7
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	78db      	ldrb	r3, [r3, #3]
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	f040 8155 	bne.w	8008980 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80086d6:	463b      	mov	r3, r7
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	699a      	ldr	r2, [r3, #24]
 80086dc:	463b      	mov	r3, r7
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	691b      	ldr	r3, [r3, #16]
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d90e      	bls.n	8008704 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 80086e6:	463b      	mov	r3, r7
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	691b      	ldr	r3, [r3, #16]
 80086ec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80086f0:	463b      	mov	r3, r7
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	699a      	ldr	r2, [r3, #24]
 80086f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086fa:	1ad2      	subs	r2, r2, r3
 80086fc:	463b      	mov	r3, r7
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	619a      	str	r2, [r3, #24]
 8008702:	e008      	b.n	8008716 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8008704:	463b      	mov	r3, r7
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	699b      	ldr	r3, [r3, #24]
 800870a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800870e:	463b      	mov	r3, r7
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	2200      	movs	r2, #0
 8008714:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008716:	463b      	mov	r3, r7
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	785b      	ldrb	r3, [r3, #1]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d16f      	bne.n	8008800 <USB_EPStartXfer+0x1402>
 8008720:	1d3b      	adds	r3, r7, #4
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008728:	1d3b      	adds	r3, r7, #4
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008730:	b29b      	uxth	r3, r3
 8008732:	461a      	mov	r2, r3
 8008734:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008738:	4413      	add	r3, r2
 800873a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800873e:	463b      	mov	r3, r7
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	781b      	ldrb	r3, [r3, #0]
 8008744:	00da      	lsls	r2, r3, #3
 8008746:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800874a:	4413      	add	r3, r2
 800874c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008750:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008754:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008758:	2b00      	cmp	r3, #0
 800875a:	d116      	bne.n	800878a <USB_EPStartXfer+0x138c>
 800875c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008760:	881b      	ldrh	r3, [r3, #0]
 8008762:	b29b      	uxth	r3, r3
 8008764:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008768:	b29a      	uxth	r2, r3
 800876a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800876e:	801a      	strh	r2, [r3, #0]
 8008770:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008774:	881b      	ldrh	r3, [r3, #0]
 8008776:	b29b      	uxth	r3, r3
 8008778:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800877c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008780:	b29a      	uxth	r2, r3
 8008782:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008786:	801a      	strh	r2, [r3, #0]
 8008788:	e05f      	b.n	800884a <USB_EPStartXfer+0x144c>
 800878a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800878e:	2b3e      	cmp	r3, #62	; 0x3e
 8008790:	d818      	bhi.n	80087c4 <USB_EPStartXfer+0x13c6>
 8008792:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008796:	085b      	lsrs	r3, r3, #1
 8008798:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800879c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087a0:	f003 0301 	and.w	r3, r3, #1
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d004      	beq.n	80087b2 <USB_EPStartXfer+0x13b4>
 80087a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80087ac:	3301      	adds	r3, #1
 80087ae:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80087b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	029b      	lsls	r3, r3, #10
 80087ba:	b29a      	uxth	r2, r3
 80087bc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80087c0:	801a      	strh	r2, [r3, #0]
 80087c2:	e042      	b.n	800884a <USB_EPStartXfer+0x144c>
 80087c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087c8:	095b      	lsrs	r3, r3, #5
 80087ca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80087ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087d2:	f003 031f 	and.w	r3, r3, #31
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d104      	bne.n	80087e4 <USB_EPStartXfer+0x13e6>
 80087da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80087de:	3b01      	subs	r3, #1
 80087e0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80087e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80087e8:	b29b      	uxth	r3, r3
 80087ea:	029b      	lsls	r3, r3, #10
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087f6:	b29a      	uxth	r2, r3
 80087f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80087fc:	801a      	strh	r2, [r3, #0]
 80087fe:	e024      	b.n	800884a <USB_EPStartXfer+0x144c>
 8008800:	463b      	mov	r3, r7
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	785b      	ldrb	r3, [r3, #1]
 8008806:	2b01      	cmp	r3, #1
 8008808:	d11f      	bne.n	800884a <USB_EPStartXfer+0x144c>
 800880a:	1d3b      	adds	r3, r7, #4
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008812:	1d3b      	adds	r3, r7, #4
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800881a:	b29b      	uxth	r3, r3
 800881c:	461a      	mov	r2, r3
 800881e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008822:	4413      	add	r3, r2
 8008824:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008828:	463b      	mov	r3, r7
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	781b      	ldrb	r3, [r3, #0]
 800882e:	00da      	lsls	r2, r3, #3
 8008830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008834:	4413      	add	r3, r2
 8008836:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800883a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800883e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008842:	b29a      	uxth	r2, r3
 8008844:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008848:	801a      	strh	r2, [r3, #0]
 800884a:	1d3b      	adds	r3, r7, #4
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008852:	463b      	mov	r3, r7
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	785b      	ldrb	r3, [r3, #1]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d16f      	bne.n	800893c <USB_EPStartXfer+0x153e>
 800885c:	1d3b      	adds	r3, r7, #4
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008864:	1d3b      	adds	r3, r7, #4
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800886c:	b29b      	uxth	r3, r3
 800886e:	461a      	mov	r2, r3
 8008870:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008874:	4413      	add	r3, r2
 8008876:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800887a:	463b      	mov	r3, r7
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	781b      	ldrb	r3, [r3, #0]
 8008880:	00da      	lsls	r2, r3, #3
 8008882:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008886:	4413      	add	r3, r2
 8008888:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800888c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008890:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008894:	2b00      	cmp	r3, #0
 8008896:	d116      	bne.n	80088c6 <USB_EPStartXfer+0x14c8>
 8008898:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800889c:	881b      	ldrh	r3, [r3, #0]
 800889e:	b29b      	uxth	r3, r3
 80088a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80088a4:	b29a      	uxth	r2, r3
 80088a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80088aa:	801a      	strh	r2, [r3, #0]
 80088ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80088b0:	881b      	ldrh	r3, [r3, #0]
 80088b2:	b29b      	uxth	r3, r3
 80088b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088bc:	b29a      	uxth	r2, r3
 80088be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80088c2:	801a      	strh	r2, [r3, #0]
 80088c4:	e05e      	b.n	8008984 <USB_EPStartXfer+0x1586>
 80088c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088ca:	2b3e      	cmp	r3, #62	; 0x3e
 80088cc:	d818      	bhi.n	8008900 <USB_EPStartXfer+0x1502>
 80088ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088d2:	085b      	lsrs	r3, r3, #1
 80088d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80088d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088dc:	f003 0301 	and.w	r3, r3, #1
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d004      	beq.n	80088ee <USB_EPStartXfer+0x14f0>
 80088e4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80088e8:	3301      	adds	r3, #1
 80088ea:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80088ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80088f2:	b29b      	uxth	r3, r3
 80088f4:	029b      	lsls	r3, r3, #10
 80088f6:	b29a      	uxth	r2, r3
 80088f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80088fc:	801a      	strh	r2, [r3, #0]
 80088fe:	e041      	b.n	8008984 <USB_EPStartXfer+0x1586>
 8008900:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008904:	095b      	lsrs	r3, r3, #5
 8008906:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800890a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800890e:	f003 031f 	and.w	r3, r3, #31
 8008912:	2b00      	cmp	r3, #0
 8008914:	d104      	bne.n	8008920 <USB_EPStartXfer+0x1522>
 8008916:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800891a:	3b01      	subs	r3, #1
 800891c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008920:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008924:	b29b      	uxth	r3, r3
 8008926:	029b      	lsls	r3, r3, #10
 8008928:	b29b      	uxth	r3, r3
 800892a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800892e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008932:	b29a      	uxth	r2, r3
 8008934:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008938:	801a      	strh	r2, [r3, #0]
 800893a:	e023      	b.n	8008984 <USB_EPStartXfer+0x1586>
 800893c:	463b      	mov	r3, r7
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	785b      	ldrb	r3, [r3, #1]
 8008942:	2b01      	cmp	r3, #1
 8008944:	d11e      	bne.n	8008984 <USB_EPStartXfer+0x1586>
 8008946:	1d3b      	adds	r3, r7, #4
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800894e:	b29b      	uxth	r3, r3
 8008950:	461a      	mov	r2, r3
 8008952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008956:	4413      	add	r3, r2
 8008958:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800895c:	463b      	mov	r3, r7
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	00da      	lsls	r2, r3, #3
 8008964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008968:	4413      	add	r3, r2
 800896a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800896e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008972:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008976:	b29a      	uxth	r2, r3
 8008978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800897c:	801a      	strh	r2, [r3, #0]
 800897e:	e001      	b.n	8008984 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8008980:	2301      	movs	r3, #1
 8008982:	e02e      	b.n	80089e2 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008984:	1d3b      	adds	r3, r7, #4
 8008986:	681a      	ldr	r2, [r3, #0]
 8008988:	463b      	mov	r3, r7
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	781b      	ldrb	r3, [r3, #0]
 800898e:	009b      	lsls	r3, r3, #2
 8008990:	4413      	add	r3, r2
 8008992:	881b      	ldrh	r3, [r3, #0]
 8008994:	b29b      	uxth	r3, r3
 8008996:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800899a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800899e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80089a2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80089a6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80089aa:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80089ae:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80089b2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80089b6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80089ba:	1d3b      	adds	r3, r7, #4
 80089bc:	681a      	ldr	r2, [r3, #0]
 80089be:	463b      	mov	r3, r7
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	781b      	ldrb	r3, [r3, #0]
 80089c4:	009b      	lsls	r3, r3, #2
 80089c6:	441a      	add	r2, r3
 80089c8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80089cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089dc:	b29b      	uxth	r3, r3
 80089de:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80089e0:	2300      	movs	r3, #0
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}

080089ec <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b085      	sub	sp, #20
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
 80089f4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	785b      	ldrb	r3, [r3, #1]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d020      	beq.n	8008a40 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80089fe:	687a      	ldr	r2, [r7, #4]
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	781b      	ldrb	r3, [r3, #0]
 8008a04:	009b      	lsls	r3, r3, #2
 8008a06:	4413      	add	r3, r2
 8008a08:	881b      	ldrh	r3, [r3, #0]
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a14:	81bb      	strh	r3, [r7, #12]
 8008a16:	89bb      	ldrh	r3, [r7, #12]
 8008a18:	f083 0310 	eor.w	r3, r3, #16
 8008a1c:	81bb      	strh	r3, [r7, #12]
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	781b      	ldrb	r3, [r3, #0]
 8008a24:	009b      	lsls	r3, r3, #2
 8008a26:	441a      	add	r2, r3
 8008a28:	89bb      	ldrh	r3, [r7, #12]
 8008a2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a3a:	b29b      	uxth	r3, r3
 8008a3c:	8013      	strh	r3, [r2, #0]
 8008a3e:	e01f      	b.n	8008a80 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008a40:	687a      	ldr	r2, [r7, #4]
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	781b      	ldrb	r3, [r3, #0]
 8008a46:	009b      	lsls	r3, r3, #2
 8008a48:	4413      	add	r3, r2
 8008a4a:	881b      	ldrh	r3, [r3, #0]
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a56:	81fb      	strh	r3, [r7, #14]
 8008a58:	89fb      	ldrh	r3, [r7, #14]
 8008a5a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008a5e:	81fb      	strh	r3, [r7, #14]
 8008a60:	687a      	ldr	r2, [r7, #4]
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	781b      	ldrb	r3, [r3, #0]
 8008a66:	009b      	lsls	r3, r3, #2
 8008a68:	441a      	add	r2, r3
 8008a6a:	89fb      	ldrh	r3, [r7, #14]
 8008a6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008a80:	2300      	movs	r3, #0
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3714      	adds	r7, #20
 8008a86:	46bd      	mov	sp, r7
 8008a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8c:	4770      	bx	lr

08008a8e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008a8e:	b480      	push	{r7}
 8008a90:	b087      	sub	sp, #28
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
 8008a96:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	7b1b      	ldrb	r3, [r3, #12]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	f040 809d 	bne.w	8008bdc <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	785b      	ldrb	r3, [r3, #1]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d04c      	beq.n	8008b44 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008aaa:	687a      	ldr	r2, [r7, #4]
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	781b      	ldrb	r3, [r3, #0]
 8008ab0:	009b      	lsls	r3, r3, #2
 8008ab2:	4413      	add	r3, r2
 8008ab4:	881b      	ldrh	r3, [r3, #0]
 8008ab6:	823b      	strh	r3, [r7, #16]
 8008ab8:	8a3b      	ldrh	r3, [r7, #16]
 8008aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d01b      	beq.n	8008afa <USB_EPClearStall+0x6c>
 8008ac2:	687a      	ldr	r2, [r7, #4]
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	781b      	ldrb	r3, [r3, #0]
 8008ac8:	009b      	lsls	r3, r3, #2
 8008aca:	4413      	add	r3, r2
 8008acc:	881b      	ldrh	r3, [r3, #0]
 8008ace:	b29b      	uxth	r3, r3
 8008ad0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ad4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ad8:	81fb      	strh	r3, [r7, #14]
 8008ada:	687a      	ldr	r2, [r7, #4]
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	009b      	lsls	r3, r3, #2
 8008ae2:	441a      	add	r2, r3
 8008ae4:	89fb      	ldrh	r3, [r7, #14]
 8008ae6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008aea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008aee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008af2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008af6:	b29b      	uxth	r3, r3
 8008af8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	78db      	ldrb	r3, [r3, #3]
 8008afe:	2b01      	cmp	r3, #1
 8008b00:	d06c      	beq.n	8008bdc <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	781b      	ldrb	r3, [r3, #0]
 8008b08:	009b      	lsls	r3, r3, #2
 8008b0a:	4413      	add	r3, r2
 8008b0c:	881b      	ldrh	r3, [r3, #0]
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b18:	81bb      	strh	r3, [r7, #12]
 8008b1a:	89bb      	ldrh	r3, [r7, #12]
 8008b1c:	f083 0320 	eor.w	r3, r3, #32
 8008b20:	81bb      	strh	r3, [r7, #12]
 8008b22:	687a      	ldr	r2, [r7, #4]
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	781b      	ldrb	r3, [r3, #0]
 8008b28:	009b      	lsls	r3, r3, #2
 8008b2a:	441a      	add	r2, r3
 8008b2c:	89bb      	ldrh	r3, [r7, #12]
 8008b2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	8013      	strh	r3, [r2, #0]
 8008b42:	e04b      	b.n	8008bdc <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008b44:	687a      	ldr	r2, [r7, #4]
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	781b      	ldrb	r3, [r3, #0]
 8008b4a:	009b      	lsls	r3, r3, #2
 8008b4c:	4413      	add	r3, r2
 8008b4e:	881b      	ldrh	r3, [r3, #0]
 8008b50:	82fb      	strh	r3, [r7, #22]
 8008b52:	8afb      	ldrh	r3, [r7, #22]
 8008b54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d01b      	beq.n	8008b94 <USB_EPClearStall+0x106>
 8008b5c:	687a      	ldr	r2, [r7, #4]
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	009b      	lsls	r3, r3, #2
 8008b64:	4413      	add	r3, r2
 8008b66:	881b      	ldrh	r3, [r3, #0]
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b72:	82bb      	strh	r3, [r7, #20]
 8008b74:	687a      	ldr	r2, [r7, #4]
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	781b      	ldrb	r3, [r3, #0]
 8008b7a:	009b      	lsls	r3, r3, #2
 8008b7c:	441a      	add	r2, r3
 8008b7e:	8abb      	ldrh	r3, [r7, #20]
 8008b80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b90:	b29b      	uxth	r3, r3
 8008b92:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008b94:	687a      	ldr	r2, [r7, #4]
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	781b      	ldrb	r3, [r3, #0]
 8008b9a:	009b      	lsls	r3, r3, #2
 8008b9c:	4413      	add	r3, r2
 8008b9e:	881b      	ldrh	r3, [r3, #0]
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008baa:	827b      	strh	r3, [r7, #18]
 8008bac:	8a7b      	ldrh	r3, [r7, #18]
 8008bae:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008bb2:	827b      	strh	r3, [r7, #18]
 8008bb4:	8a7b      	ldrh	r3, [r7, #18]
 8008bb6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008bba:	827b      	strh	r3, [r7, #18]
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	781b      	ldrb	r3, [r3, #0]
 8008bc2:	009b      	lsls	r3, r3, #2
 8008bc4:	441a      	add	r2, r3
 8008bc6:	8a7b      	ldrh	r3, [r7, #18]
 8008bc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bd8:	b29b      	uxth	r3, r3
 8008bda:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008bdc:	2300      	movs	r3, #0
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	371c      	adds	r7, #28
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr

08008bea <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008bea:	b480      	push	{r7}
 8008bec:	b083      	sub	sp, #12
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
 8008bf2:	460b      	mov	r3, r1
 8008bf4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008bf6:	78fb      	ldrb	r3, [r7, #3]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d103      	bne.n	8008c04 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2280      	movs	r2, #128	; 0x80
 8008c00:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008c04:	2300      	movs	r3, #0
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	370c      	adds	r7, #12
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c10:	4770      	bx	lr

08008c12 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008c12:	b480      	push	{r7}
 8008c14:	b083      	sub	sp, #12
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008c20:	b29b      	uxth	r3, r3
 8008c22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c2a:	b29a      	uxth	r2, r3
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8008c32:	2300      	movs	r3, #0
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	370c      	adds	r7, #12
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr

08008c40 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b085      	sub	sp, #20
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008c52:	68fb      	ldr	r3, [r7, #12]
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3714      	adds	r7, #20
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5e:	4770      	bx	lr

08008c60 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b08d      	sub	sp, #52	; 0x34
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	60f8      	str	r0, [r7, #12]
 8008c68:	60b9      	str	r1, [r7, #8]
 8008c6a:	4611      	mov	r1, r2
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	460b      	mov	r3, r1
 8008c70:	80fb      	strh	r3, [r7, #6]
 8008c72:	4613      	mov	r3, r2
 8008c74:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008c76:	88bb      	ldrh	r3, [r7, #4]
 8008c78:	3301      	adds	r3, #1
 8008c7a:	085b      	lsrs	r3, r3, #1
 8008c7c:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008c86:	88fa      	ldrh	r2, [r7, #6]
 8008c88:	69fb      	ldr	r3, [r7, #28]
 8008c8a:	4413      	add	r3, r2
 8008c8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c90:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008c92:	6a3b      	ldr	r3, [r7, #32]
 8008c94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c96:	e01b      	b.n	8008cd0 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8008c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca0:	3301      	adds	r3, #1
 8008ca2:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca6:	781b      	ldrb	r3, [r3, #0]
 8008ca8:	b29b      	uxth	r3, r3
 8008caa:	021b      	lsls	r3, r3, #8
 8008cac:	b29b      	uxth	r3, r3
 8008cae:	461a      	mov	r2, r3
 8008cb0:	69bb      	ldr	r3, [r7, #24]
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	b29a      	uxth	r2, r3
 8008cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cbc:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc0:	3302      	adds	r3, #2
 8008cc2:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8008cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc6:	3301      	adds	r3, #1
 8008cc8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ccc:	3b01      	subs	r3, #1
 8008cce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d1e0      	bne.n	8008c98 <USB_WritePMA+0x38>
  }
}
 8008cd6:	bf00      	nop
 8008cd8:	bf00      	nop
 8008cda:	3734      	adds	r7, #52	; 0x34
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce2:	4770      	bx	lr

08008ce4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b08b      	sub	sp, #44	; 0x2c
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	60f8      	str	r0, [r7, #12]
 8008cec:	60b9      	str	r1, [r7, #8]
 8008cee:	4611      	mov	r1, r2
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	460b      	mov	r3, r1
 8008cf4:	80fb      	strh	r3, [r7, #6]
 8008cf6:	4613      	mov	r3, r2
 8008cf8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008cfa:	88bb      	ldrh	r3, [r7, #4]
 8008cfc:	085b      	lsrs	r3, r3, #1
 8008cfe:	b29b      	uxth	r3, r3
 8008d00:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008d0a:	88fa      	ldrh	r2, [r7, #6]
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	4413      	add	r3, r2
 8008d10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d14:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008d16:	69bb      	ldr	r3, [r7, #24]
 8008d18:	627b      	str	r3, [r7, #36]	; 0x24
 8008d1a:	e018      	b.n	8008d4e <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008d1c:	6a3b      	ldr	r3, [r7, #32]
 8008d1e:	881b      	ldrh	r3, [r3, #0]
 8008d20:	b29b      	uxth	r3, r3
 8008d22:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008d24:	6a3b      	ldr	r3, [r7, #32]
 8008d26:	3302      	adds	r3, #2
 8008d28:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	b2da      	uxtb	r2, r3
 8008d2e:	69fb      	ldr	r3, [r7, #28]
 8008d30:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008d32:	69fb      	ldr	r3, [r7, #28]
 8008d34:	3301      	adds	r3, #1
 8008d36:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	0a1b      	lsrs	r3, r3, #8
 8008d3c:	b2da      	uxtb	r2, r3
 8008d3e:	69fb      	ldr	r3, [r7, #28]
 8008d40:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008d42:	69fb      	ldr	r3, [r7, #28]
 8008d44:	3301      	adds	r3, #1
 8008d46:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8008d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d4a:	3b01      	subs	r3, #1
 8008d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8008d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d1e3      	bne.n	8008d1c <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008d54:	88bb      	ldrh	r3, [r7, #4]
 8008d56:	f003 0301 	and.w	r3, r3, #1
 8008d5a:	b29b      	uxth	r3, r3
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d007      	beq.n	8008d70 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8008d60:	6a3b      	ldr	r3, [r7, #32]
 8008d62:	881b      	ldrh	r3, [r3, #0]
 8008d64:	b29b      	uxth	r3, r3
 8008d66:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	b2da      	uxtb	r2, r3
 8008d6c:	69fb      	ldr	r3, [r7, #28]
 8008d6e:	701a      	strb	r2, [r3, #0]
  }
}
 8008d70:	bf00      	nop
 8008d72:	372c      	adds	r7, #44	; 0x2c
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr

08008d7c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b084      	sub	sp, #16
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	460b      	mov	r3, r1
 8008d86:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008d88:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008d8c:	f004 fcb4 	bl	800d6f8 <USBD_static_malloc>
 8008d90:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d105      	bne.n	8008da4 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008da0:	2302      	movs	r3, #2
 8008da2:	e066      	b.n	8008e72 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	68fa      	ldr	r2, [r7, #12]
 8008da8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	7c1b      	ldrb	r3, [r3, #16]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d119      	bne.n	8008de8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008db4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008db8:	2202      	movs	r2, #2
 8008dba:	2181      	movs	r1, #129	; 0x81
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f004 fb40 	bl	800d442 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008dc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008dcc:	2202      	movs	r2, #2
 8008dce:	2101      	movs	r1, #1
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f004 fb36 	bl	800d442 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2201      	movs	r2, #1
 8008dda:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2210      	movs	r2, #16
 8008de2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8008de6:	e016      	b.n	8008e16 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008de8:	2340      	movs	r3, #64	; 0x40
 8008dea:	2202      	movs	r2, #2
 8008dec:	2181      	movs	r1, #129	; 0x81
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f004 fb27 	bl	800d442 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2201      	movs	r2, #1
 8008df8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008dfa:	2340      	movs	r3, #64	; 0x40
 8008dfc:	2202      	movs	r2, #2
 8008dfe:	2101      	movs	r1, #1
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f004 fb1e 	bl	800d442 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2201      	movs	r2, #1
 8008e0a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2210      	movs	r2, #16
 8008e12:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008e16:	2308      	movs	r3, #8
 8008e18:	2203      	movs	r2, #3
 8008e1a:	2182      	movs	r1, #130	; 0x82
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f004 fb10 	bl	800d442 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2201      	movs	r2, #1
 8008e26:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	2200      	movs	r2, #0
 8008e38:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	7c1b      	ldrb	r3, [r3, #16]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d109      	bne.n	8008e60 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008e52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e56:	2101      	movs	r1, #1
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f004 fbe2 	bl	800d622 <USBD_LL_PrepareReceive>
 8008e5e:	e007      	b.n	8008e70 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008e66:	2340      	movs	r3, #64	; 0x40
 8008e68:	2101      	movs	r1, #1
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f004 fbd9 	bl	800d622 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008e70:	2300      	movs	r3, #0
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3710      	adds	r7, #16
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}

08008e7a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008e7a:	b580      	push	{r7, lr}
 8008e7c:	b082      	sub	sp, #8
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	6078      	str	r0, [r7, #4]
 8008e82:	460b      	mov	r3, r1
 8008e84:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008e86:	2181      	movs	r1, #129	; 0x81
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f004 fb00 	bl	800d48e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2200      	movs	r2, #0
 8008e92:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008e94:	2101      	movs	r1, #1
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f004 faf9 	bl	800d48e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008ea4:	2182      	movs	r1, #130	; 0x82
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f004 faf1 	bl	800d48e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d00e      	beq.n	8008ee4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008ecc:	685b      	ldr	r3, [r3, #4]
 8008ece:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f004 fc1c 	bl	800d714 <USBD_static_free>
    pdev->pClassData = NULL;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008ee4:	2300      	movs	r3, #0
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3708      	adds	r7, #8
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
	...

08008ef0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b086      	sub	sp, #24
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f00:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008f02:	2300      	movs	r3, #0
 8008f04:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008f06:	2300      	movs	r3, #0
 8008f08:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d101      	bne.n	8008f18 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008f14:	2303      	movs	r3, #3
 8008f16:	e0af      	b.n	8009078 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	781b      	ldrb	r3, [r3, #0]
 8008f1c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d03f      	beq.n	8008fa4 <USBD_CDC_Setup+0xb4>
 8008f24:	2b20      	cmp	r3, #32
 8008f26:	f040 809f 	bne.w	8009068 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	88db      	ldrh	r3, [r3, #6]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d02e      	beq.n	8008f90 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	781b      	ldrb	r3, [r3, #0]
 8008f36:	b25b      	sxtb	r3, r3
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	da16      	bge.n	8008f6a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f42:	689b      	ldr	r3, [r3, #8]
 8008f44:	683a      	ldr	r2, [r7, #0]
 8008f46:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8008f48:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008f4a:	683a      	ldr	r2, [r7, #0]
 8008f4c:	88d2      	ldrh	r2, [r2, #6]
 8008f4e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	88db      	ldrh	r3, [r3, #6]
 8008f54:	2b07      	cmp	r3, #7
 8008f56:	bf28      	it	cs
 8008f58:	2307      	movcs	r3, #7
 8008f5a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	89fa      	ldrh	r2, [r7, #14]
 8008f60:	4619      	mov	r1, r3
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f001 fa9f 	bl	800a4a6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8008f68:	e085      	b.n	8009076 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	785a      	ldrb	r2, [r3, #1]
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	88db      	ldrh	r3, [r3, #6]
 8008f78:	b2da      	uxtb	r2, r3
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008f80:	6939      	ldr	r1, [r7, #16]
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	88db      	ldrh	r3, [r3, #6]
 8008f86:	461a      	mov	r2, r3
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f001 fab8 	bl	800a4fe <USBD_CtlPrepareRx>
      break;
 8008f8e:	e072      	b.n	8009076 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f96:	689b      	ldr	r3, [r3, #8]
 8008f98:	683a      	ldr	r2, [r7, #0]
 8008f9a:	7850      	ldrb	r0, [r2, #1]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	6839      	ldr	r1, [r7, #0]
 8008fa0:	4798      	blx	r3
      break;
 8008fa2:	e068      	b.n	8009076 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	785b      	ldrb	r3, [r3, #1]
 8008fa8:	2b0b      	cmp	r3, #11
 8008faa:	d852      	bhi.n	8009052 <USBD_CDC_Setup+0x162>
 8008fac:	a201      	add	r2, pc, #4	; (adr r2, 8008fb4 <USBD_CDC_Setup+0xc4>)
 8008fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fb2:	bf00      	nop
 8008fb4:	08008fe5 	.word	0x08008fe5
 8008fb8:	08009061 	.word	0x08009061
 8008fbc:	08009053 	.word	0x08009053
 8008fc0:	08009053 	.word	0x08009053
 8008fc4:	08009053 	.word	0x08009053
 8008fc8:	08009053 	.word	0x08009053
 8008fcc:	08009053 	.word	0x08009053
 8008fd0:	08009053 	.word	0x08009053
 8008fd4:	08009053 	.word	0x08009053
 8008fd8:	08009053 	.word	0x08009053
 8008fdc:	0800900f 	.word	0x0800900f
 8008fe0:	08009039 	.word	0x08009039
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fea:	b2db      	uxtb	r3, r3
 8008fec:	2b03      	cmp	r3, #3
 8008fee:	d107      	bne.n	8009000 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008ff0:	f107 030a 	add.w	r3, r7, #10
 8008ff4:	2202      	movs	r2, #2
 8008ff6:	4619      	mov	r1, r3
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f001 fa54 	bl	800a4a6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ffe:	e032      	b.n	8009066 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009000:	6839      	ldr	r1, [r7, #0]
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f001 f9de 	bl	800a3c4 <USBD_CtlError>
            ret = USBD_FAIL;
 8009008:	2303      	movs	r3, #3
 800900a:	75fb      	strb	r3, [r7, #23]
          break;
 800900c:	e02b      	b.n	8009066 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009014:	b2db      	uxtb	r3, r3
 8009016:	2b03      	cmp	r3, #3
 8009018:	d107      	bne.n	800902a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800901a:	f107 030d 	add.w	r3, r7, #13
 800901e:	2201      	movs	r2, #1
 8009020:	4619      	mov	r1, r3
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f001 fa3f 	bl	800a4a6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009028:	e01d      	b.n	8009066 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800902a:	6839      	ldr	r1, [r7, #0]
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f001 f9c9 	bl	800a3c4 <USBD_CtlError>
            ret = USBD_FAIL;
 8009032:	2303      	movs	r3, #3
 8009034:	75fb      	strb	r3, [r7, #23]
          break;
 8009036:	e016      	b.n	8009066 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800903e:	b2db      	uxtb	r3, r3
 8009040:	2b03      	cmp	r3, #3
 8009042:	d00f      	beq.n	8009064 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8009044:	6839      	ldr	r1, [r7, #0]
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f001 f9bc 	bl	800a3c4 <USBD_CtlError>
            ret = USBD_FAIL;
 800904c:	2303      	movs	r3, #3
 800904e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009050:	e008      	b.n	8009064 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009052:	6839      	ldr	r1, [r7, #0]
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f001 f9b5 	bl	800a3c4 <USBD_CtlError>
          ret = USBD_FAIL;
 800905a:	2303      	movs	r3, #3
 800905c:	75fb      	strb	r3, [r7, #23]
          break;
 800905e:	e002      	b.n	8009066 <USBD_CDC_Setup+0x176>
          break;
 8009060:	bf00      	nop
 8009062:	e008      	b.n	8009076 <USBD_CDC_Setup+0x186>
          break;
 8009064:	bf00      	nop
      }
      break;
 8009066:	e006      	b.n	8009076 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8009068:	6839      	ldr	r1, [r7, #0]
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f001 f9aa 	bl	800a3c4 <USBD_CtlError>
      ret = USBD_FAIL;
 8009070:	2303      	movs	r3, #3
 8009072:	75fb      	strb	r3, [r7, #23]
      break;
 8009074:	bf00      	nop
  }

  return (uint8_t)ret;
 8009076:	7dfb      	ldrb	r3, [r7, #23]
}
 8009078:	4618      	mov	r0, r3
 800907a:	3718      	adds	r7, #24
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}

08009080 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b084      	sub	sp, #16
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	460b      	mov	r3, r1
 800908a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009092:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800909a:	2b00      	cmp	r3, #0
 800909c:	d101      	bne.n	80090a2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800909e:	2303      	movs	r3, #3
 80090a0:	e04f      	b.n	8009142 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80090a8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80090aa:	78fa      	ldrb	r2, [r7, #3]
 80090ac:	6879      	ldr	r1, [r7, #4]
 80090ae:	4613      	mov	r3, r2
 80090b0:	009b      	lsls	r3, r3, #2
 80090b2:	4413      	add	r3, r2
 80090b4:	009b      	lsls	r3, r3, #2
 80090b6:	440b      	add	r3, r1
 80090b8:	3318      	adds	r3, #24
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d029      	beq.n	8009114 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80090c0:	78fa      	ldrb	r2, [r7, #3]
 80090c2:	6879      	ldr	r1, [r7, #4]
 80090c4:	4613      	mov	r3, r2
 80090c6:	009b      	lsls	r3, r3, #2
 80090c8:	4413      	add	r3, r2
 80090ca:	009b      	lsls	r3, r3, #2
 80090cc:	440b      	add	r3, r1
 80090ce:	3318      	adds	r3, #24
 80090d0:	681a      	ldr	r2, [r3, #0]
 80090d2:	78f9      	ldrb	r1, [r7, #3]
 80090d4:	68f8      	ldr	r0, [r7, #12]
 80090d6:	460b      	mov	r3, r1
 80090d8:	009b      	lsls	r3, r3, #2
 80090da:	440b      	add	r3, r1
 80090dc:	00db      	lsls	r3, r3, #3
 80090de:	4403      	add	r3, r0
 80090e0:	3338      	adds	r3, #56	; 0x38
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	fbb2 f1f3 	udiv	r1, r2, r3
 80090e8:	fb03 f301 	mul.w	r3, r3, r1
 80090ec:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d110      	bne.n	8009114 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80090f2:	78fa      	ldrb	r2, [r7, #3]
 80090f4:	6879      	ldr	r1, [r7, #4]
 80090f6:	4613      	mov	r3, r2
 80090f8:	009b      	lsls	r3, r3, #2
 80090fa:	4413      	add	r3, r2
 80090fc:	009b      	lsls	r3, r3, #2
 80090fe:	440b      	add	r3, r1
 8009100:	3318      	adds	r3, #24
 8009102:	2200      	movs	r2, #0
 8009104:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009106:	78f9      	ldrb	r1, [r7, #3]
 8009108:	2300      	movs	r3, #0
 800910a:	2200      	movs	r2, #0
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f004 fa67 	bl	800d5e0 <USBD_LL_Transmit>
 8009112:	e015      	b.n	8009140 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	2200      	movs	r2, #0
 8009118:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009122:	691b      	ldr	r3, [r3, #16]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d00b      	beq.n	8009140 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800912e:	691b      	ldr	r3, [r3, #16]
 8009130:	68ba      	ldr	r2, [r7, #8]
 8009132:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009136:	68ba      	ldr	r2, [r7, #8]
 8009138:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800913c:	78fa      	ldrb	r2, [r7, #3]
 800913e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009140:	2300      	movs	r3, #0
}
 8009142:	4618      	mov	r0, r3
 8009144:	3710      	adds	r7, #16
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}

0800914a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800914a:	b580      	push	{r7, lr}
 800914c:	b084      	sub	sp, #16
 800914e:	af00      	add	r7, sp, #0
 8009150:	6078      	str	r0, [r7, #4]
 8009152:	460b      	mov	r3, r1
 8009154:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800915c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009164:	2b00      	cmp	r3, #0
 8009166:	d101      	bne.n	800916c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009168:	2303      	movs	r3, #3
 800916a:	e015      	b.n	8009198 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800916c:	78fb      	ldrb	r3, [r7, #3]
 800916e:	4619      	mov	r1, r3
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f004 fa77 	bl	800d664 <USBD_LL_GetRxDataSize>
 8009176:	4602      	mov	r2, r0
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009184:	68db      	ldr	r3, [r3, #12]
 8009186:	68fa      	ldr	r2, [r7, #12]
 8009188:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800918c:	68fa      	ldr	r2, [r7, #12]
 800918e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009192:	4611      	mov	r1, r2
 8009194:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009196:	2300      	movs	r3, #0
}
 8009198:	4618      	mov	r0, r3
 800919a:	3710      	adds	r7, #16
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b084      	sub	sp, #16
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80091ae:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d101      	bne.n	80091ba <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80091b6:	2303      	movs	r3, #3
 80091b8:	e01b      	b.n	80091f2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d015      	beq.n	80091f0 <USBD_CDC_EP0_RxReady+0x50>
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80091ca:	2bff      	cmp	r3, #255	; 0xff
 80091cc:	d010      	beq.n	80091f0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091d4:	689b      	ldr	r3, [r3, #8]
 80091d6:	68fa      	ldr	r2, [r7, #12]
 80091d8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80091dc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80091de:	68fa      	ldr	r2, [r7, #12]
 80091e0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80091e4:	b292      	uxth	r2, r2
 80091e6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	22ff      	movs	r2, #255	; 0xff
 80091ec:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80091f0:	2300      	movs	r3, #0
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3710      	adds	r7, #16
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}
	...

080091fc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80091fc:	b480      	push	{r7}
 80091fe:	b083      	sub	sp, #12
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2243      	movs	r2, #67	; 0x43
 8009208:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800920a:	4b03      	ldr	r3, [pc, #12]	; (8009218 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800920c:	4618      	mov	r0, r3
 800920e:	370c      	adds	r7, #12
 8009210:	46bd      	mov	sp, r7
 8009212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009216:	4770      	bx	lr
 8009218:	20000098 	.word	0x20000098

0800921c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800921c:	b480      	push	{r7}
 800921e:	b083      	sub	sp, #12
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2243      	movs	r2, #67	; 0x43
 8009228:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800922a:	4b03      	ldr	r3, [pc, #12]	; (8009238 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800922c:	4618      	mov	r0, r3
 800922e:	370c      	adds	r7, #12
 8009230:	46bd      	mov	sp, r7
 8009232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009236:	4770      	bx	lr
 8009238:	20000054 	.word	0x20000054

0800923c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800923c:	b480      	push	{r7}
 800923e:	b083      	sub	sp, #12
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2243      	movs	r2, #67	; 0x43
 8009248:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800924a:	4b03      	ldr	r3, [pc, #12]	; (8009258 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800924c:	4618      	mov	r0, r3
 800924e:	370c      	adds	r7, #12
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr
 8009258:	200000dc 	.word	0x200000dc

0800925c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800925c:	b480      	push	{r7}
 800925e:	b083      	sub	sp, #12
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	220a      	movs	r2, #10
 8009268:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800926a:	4b03      	ldr	r3, [pc, #12]	; (8009278 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800926c:	4618      	mov	r0, r3
 800926e:	370c      	adds	r7, #12
 8009270:	46bd      	mov	sp, r7
 8009272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009276:	4770      	bx	lr
 8009278:	20000010 	.word	0x20000010

0800927c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800927c:	b480      	push	{r7}
 800927e:	b083      	sub	sp, #12
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d101      	bne.n	8009290 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800928c:	2303      	movs	r3, #3
 800928e:	e004      	b.n	800929a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	683a      	ldr	r2, [r7, #0]
 8009294:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8009298:	2300      	movs	r3, #0
}
 800929a:	4618      	mov	r0, r3
 800929c:	370c      	adds	r7, #12
 800929e:	46bd      	mov	sp, r7
 80092a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a4:	4770      	bx	lr

080092a6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80092a6:	b480      	push	{r7}
 80092a8:	b087      	sub	sp, #28
 80092aa:	af00      	add	r7, sp, #0
 80092ac:	60f8      	str	r0, [r7, #12]
 80092ae:	60b9      	str	r1, [r7, #8]
 80092b0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092b8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d101      	bne.n	80092c4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80092c0:	2303      	movs	r3, #3
 80092c2:	e008      	b.n	80092d6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	68ba      	ldr	r2, [r7, #8]
 80092c8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	687a      	ldr	r2, [r7, #4]
 80092d0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80092d4:	2300      	movs	r3, #0
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	371c      	adds	r7, #28
 80092da:	46bd      	mov	sp, r7
 80092dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e0:	4770      	bx	lr

080092e2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80092e2:	b480      	push	{r7}
 80092e4:	b085      	sub	sp, #20
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6078      	str	r0, [r7, #4]
 80092ea:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092f2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d101      	bne.n	80092fe <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80092fa:	2303      	movs	r3, #3
 80092fc:	e004      	b.n	8009308 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	683a      	ldr	r2, [r7, #0]
 8009302:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009306:	2300      	movs	r3, #0
}
 8009308:	4618      	mov	r0, r3
 800930a:	3714      	adds	r7, #20
 800930c:	46bd      	mov	sp, r7
 800930e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009312:	4770      	bx	lr

08009314 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b084      	sub	sp, #16
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009322:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800932a:	2b00      	cmp	r3, #0
 800932c:	d101      	bne.n	8009332 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800932e:	2303      	movs	r3, #3
 8009330:	e016      	b.n	8009360 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	7c1b      	ldrb	r3, [r3, #16]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d109      	bne.n	800934e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009340:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009344:	2101      	movs	r1, #1
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f004 f96b 	bl	800d622 <USBD_LL_PrepareReceive>
 800934c:	e007      	b.n	800935e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009354:	2340      	movs	r3, #64	; 0x40
 8009356:	2101      	movs	r1, #1
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f004 f962 	bl	800d622 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800935e:	2300      	movs	r3, #0
}
 8009360:	4618      	mov	r0, r3
 8009362:	3710      	adds	r7, #16
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}

08009368 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b086      	sub	sp, #24
 800936c:	af00      	add	r7, sp, #0
 800936e:	60f8      	str	r0, [r7, #12]
 8009370:	60b9      	str	r1, [r7, #8]
 8009372:	4613      	mov	r3, r2
 8009374:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d101      	bne.n	8009380 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800937c:	2303      	movs	r3, #3
 800937e:	e01f      	b.n	80093c0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2200      	movs	r2, #0
 8009384:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2200      	movs	r2, #0
 800938c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2200      	movs	r2, #0
 8009394:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d003      	beq.n	80093a6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	68ba      	ldr	r2, [r7, #8]
 80093a2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	2201      	movs	r2, #1
 80093aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	79fa      	ldrb	r2, [r7, #7]
 80093b2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80093b4:	68f8      	ldr	r0, [r7, #12]
 80093b6:	f003 ffc7 	bl	800d348 <USBD_LL_Init>
 80093ba:	4603      	mov	r3, r0
 80093bc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80093be:	7dfb      	ldrb	r3, [r7, #23]
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3718      	adds	r7, #24
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}

080093c8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b084      	sub	sp, #16
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
 80093d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80093d2:	2300      	movs	r3, #0
 80093d4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d101      	bne.n	80093e0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80093dc:	2303      	movs	r3, #3
 80093de:	e016      	b.n	800940e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	683a      	ldr	r2, [r7, #0]
 80093e4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d00b      	beq.n	800940c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093fc:	f107 020e 	add.w	r2, r7, #14
 8009400:	4610      	mov	r0, r2
 8009402:	4798      	blx	r3
 8009404:	4602      	mov	r2, r0
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800940c:	2300      	movs	r3, #0
}
 800940e:	4618      	mov	r0, r3
 8009410:	3710      	adds	r7, #16
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}

08009416 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009416:	b580      	push	{r7, lr}
 8009418:	b082      	sub	sp, #8
 800941a:	af00      	add	r7, sp, #0
 800941c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f003 fff4 	bl	800d40c <USBD_LL_Start>
 8009424:	4603      	mov	r3, r0
}
 8009426:	4618      	mov	r0, r3
 8009428:	3708      	adds	r7, #8
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}

0800942e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800942e:	b480      	push	{r7}
 8009430:	b083      	sub	sp, #12
 8009432:	af00      	add	r7, sp, #0
 8009434:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009436:	2300      	movs	r3, #0
}
 8009438:	4618      	mov	r0, r3
 800943a:	370c      	adds	r7, #12
 800943c:	46bd      	mov	sp, r7
 800943e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009442:	4770      	bx	lr

08009444 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b084      	sub	sp, #16
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
 800944c:	460b      	mov	r3, r1
 800944e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009450:	2303      	movs	r3, #3
 8009452:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800945a:	2b00      	cmp	r3, #0
 800945c:	d009      	beq.n	8009472 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	78fa      	ldrb	r2, [r7, #3]
 8009468:	4611      	mov	r1, r2
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	4798      	blx	r3
 800946e:	4603      	mov	r3, r0
 8009470:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009472:	7bfb      	ldrb	r3, [r7, #15]
}
 8009474:	4618      	mov	r0, r3
 8009476:	3710      	adds	r7, #16
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}

0800947c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b082      	sub	sp, #8
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	460b      	mov	r3, r1
 8009486:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800948e:	2b00      	cmp	r3, #0
 8009490:	d007      	beq.n	80094a2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009498:	685b      	ldr	r3, [r3, #4]
 800949a:	78fa      	ldrb	r2, [r7, #3]
 800949c:	4611      	mov	r1, r2
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	4798      	blx	r3
  }

  return USBD_OK;
 80094a2:	2300      	movs	r3, #0
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3708      	adds	r7, #8
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}

080094ac <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b084      	sub	sp, #16
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
 80094b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80094bc:	6839      	ldr	r1, [r7, #0]
 80094be:	4618      	mov	r0, r3
 80094c0:	f000 ff46 	bl	800a350 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2201      	movs	r2, #1
 80094c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80094d2:	461a      	mov	r2, r3
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80094e0:	f003 031f 	and.w	r3, r3, #31
 80094e4:	2b02      	cmp	r3, #2
 80094e6:	d01a      	beq.n	800951e <USBD_LL_SetupStage+0x72>
 80094e8:	2b02      	cmp	r3, #2
 80094ea:	d822      	bhi.n	8009532 <USBD_LL_SetupStage+0x86>
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d002      	beq.n	80094f6 <USBD_LL_SetupStage+0x4a>
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	d00a      	beq.n	800950a <USBD_LL_SetupStage+0x5e>
 80094f4:	e01d      	b.n	8009532 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80094fc:	4619      	mov	r1, r3
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f000 f9ee 	bl	80098e0 <USBD_StdDevReq>
 8009504:	4603      	mov	r3, r0
 8009506:	73fb      	strb	r3, [r7, #15]
      break;
 8009508:	e020      	b.n	800954c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009510:	4619      	mov	r1, r3
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f000 fa52 	bl	80099bc <USBD_StdItfReq>
 8009518:	4603      	mov	r3, r0
 800951a:	73fb      	strb	r3, [r7, #15]
      break;
 800951c:	e016      	b.n	800954c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009524:	4619      	mov	r1, r3
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f000 fa91 	bl	8009a4e <USBD_StdEPReq>
 800952c:	4603      	mov	r3, r0
 800952e:	73fb      	strb	r3, [r7, #15]
      break;
 8009530:	e00c      	b.n	800954c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009538:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800953c:	b2db      	uxtb	r3, r3
 800953e:	4619      	mov	r1, r3
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f003 ffc3 	bl	800d4cc <USBD_LL_StallEP>
 8009546:	4603      	mov	r3, r0
 8009548:	73fb      	strb	r3, [r7, #15]
      break;
 800954a:	bf00      	nop
  }

  return ret;
 800954c:	7bfb      	ldrb	r3, [r7, #15]
}
 800954e:	4618      	mov	r0, r3
 8009550:	3710      	adds	r7, #16
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}

08009556 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009556:	b580      	push	{r7, lr}
 8009558:	b086      	sub	sp, #24
 800955a:	af00      	add	r7, sp, #0
 800955c:	60f8      	str	r0, [r7, #12]
 800955e:	460b      	mov	r3, r1
 8009560:	607a      	str	r2, [r7, #4]
 8009562:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009564:	7afb      	ldrb	r3, [r7, #11]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d138      	bne.n	80095dc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009570:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009578:	2b03      	cmp	r3, #3
 800957a:	d14a      	bne.n	8009612 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800957c:	693b      	ldr	r3, [r7, #16]
 800957e:	689a      	ldr	r2, [r3, #8]
 8009580:	693b      	ldr	r3, [r7, #16]
 8009582:	68db      	ldr	r3, [r3, #12]
 8009584:	429a      	cmp	r2, r3
 8009586:	d913      	bls.n	80095b0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	689a      	ldr	r2, [r3, #8]
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	68db      	ldr	r3, [r3, #12]
 8009590:	1ad2      	subs	r2, r2, r3
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	68da      	ldr	r2, [r3, #12]
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	689b      	ldr	r3, [r3, #8]
 800959e:	4293      	cmp	r3, r2
 80095a0:	bf28      	it	cs
 80095a2:	4613      	movcs	r3, r2
 80095a4:	461a      	mov	r2, r3
 80095a6:	6879      	ldr	r1, [r7, #4]
 80095a8:	68f8      	ldr	r0, [r7, #12]
 80095aa:	f000 ffc5 	bl	800a538 <USBD_CtlContinueRx>
 80095ae:	e030      	b.n	8009612 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095b6:	b2db      	uxtb	r3, r3
 80095b8:	2b03      	cmp	r3, #3
 80095ba:	d10b      	bne.n	80095d4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095c2:	691b      	ldr	r3, [r3, #16]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d005      	beq.n	80095d4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095ce:	691b      	ldr	r3, [r3, #16]
 80095d0:	68f8      	ldr	r0, [r7, #12]
 80095d2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80095d4:	68f8      	ldr	r0, [r7, #12]
 80095d6:	f000 ffc0 	bl	800a55a <USBD_CtlSendStatus>
 80095da:	e01a      	b.n	8009612 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095e2:	b2db      	uxtb	r3, r3
 80095e4:	2b03      	cmp	r3, #3
 80095e6:	d114      	bne.n	8009612 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095ee:	699b      	ldr	r3, [r3, #24]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d00e      	beq.n	8009612 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095fa:	699b      	ldr	r3, [r3, #24]
 80095fc:	7afa      	ldrb	r2, [r7, #11]
 80095fe:	4611      	mov	r1, r2
 8009600:	68f8      	ldr	r0, [r7, #12]
 8009602:	4798      	blx	r3
 8009604:	4603      	mov	r3, r0
 8009606:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009608:	7dfb      	ldrb	r3, [r7, #23]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d001      	beq.n	8009612 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800960e:	7dfb      	ldrb	r3, [r7, #23]
 8009610:	e000      	b.n	8009614 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8009612:	2300      	movs	r3, #0
}
 8009614:	4618      	mov	r0, r3
 8009616:	3718      	adds	r7, #24
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}

0800961c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b086      	sub	sp, #24
 8009620:	af00      	add	r7, sp, #0
 8009622:	60f8      	str	r0, [r7, #12]
 8009624:	460b      	mov	r3, r1
 8009626:	607a      	str	r2, [r7, #4]
 8009628:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800962a:	7afb      	ldrb	r3, [r7, #11]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d16b      	bne.n	8009708 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	3314      	adds	r3, #20
 8009634:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800963c:	2b02      	cmp	r3, #2
 800963e:	d156      	bne.n	80096ee <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009640:	693b      	ldr	r3, [r7, #16]
 8009642:	689a      	ldr	r2, [r3, #8]
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	68db      	ldr	r3, [r3, #12]
 8009648:	429a      	cmp	r2, r3
 800964a:	d914      	bls.n	8009676 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	689a      	ldr	r2, [r3, #8]
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	68db      	ldr	r3, [r3, #12]
 8009654:	1ad2      	subs	r2, r2, r3
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	689b      	ldr	r3, [r3, #8]
 800965e:	461a      	mov	r2, r3
 8009660:	6879      	ldr	r1, [r7, #4]
 8009662:	68f8      	ldr	r0, [r7, #12]
 8009664:	f000 ff3a 	bl	800a4dc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009668:	2300      	movs	r3, #0
 800966a:	2200      	movs	r2, #0
 800966c:	2100      	movs	r1, #0
 800966e:	68f8      	ldr	r0, [r7, #12]
 8009670:	f003 ffd7 	bl	800d622 <USBD_LL_PrepareReceive>
 8009674:	e03b      	b.n	80096ee <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009676:	693b      	ldr	r3, [r7, #16]
 8009678:	68da      	ldr	r2, [r3, #12]
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	689b      	ldr	r3, [r3, #8]
 800967e:	429a      	cmp	r2, r3
 8009680:	d11c      	bne.n	80096bc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009682:	693b      	ldr	r3, [r7, #16]
 8009684:	685a      	ldr	r2, [r3, #4]
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800968a:	429a      	cmp	r2, r3
 800968c:	d316      	bcc.n	80096bc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800968e:	693b      	ldr	r3, [r7, #16]
 8009690:	685a      	ldr	r2, [r3, #4]
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009698:	429a      	cmp	r2, r3
 800969a:	d20f      	bcs.n	80096bc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800969c:	2200      	movs	r2, #0
 800969e:	2100      	movs	r1, #0
 80096a0:	68f8      	ldr	r0, [r7, #12]
 80096a2:	f000 ff1b 	bl	800a4dc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	2200      	movs	r2, #0
 80096aa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80096ae:	2300      	movs	r3, #0
 80096b0:	2200      	movs	r2, #0
 80096b2:	2100      	movs	r1, #0
 80096b4:	68f8      	ldr	r0, [r7, #12]
 80096b6:	f003 ffb4 	bl	800d622 <USBD_LL_PrepareReceive>
 80096ba:	e018      	b.n	80096ee <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096c2:	b2db      	uxtb	r3, r3
 80096c4:	2b03      	cmp	r3, #3
 80096c6:	d10b      	bne.n	80096e0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096ce:	68db      	ldr	r3, [r3, #12]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d005      	beq.n	80096e0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096da:	68db      	ldr	r3, [r3, #12]
 80096dc:	68f8      	ldr	r0, [r7, #12]
 80096de:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80096e0:	2180      	movs	r1, #128	; 0x80
 80096e2:	68f8      	ldr	r0, [r7, #12]
 80096e4:	f003 fef2 	bl	800d4cc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80096e8:	68f8      	ldr	r0, [r7, #12]
 80096ea:	f000 ff49 	bl	800a580 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80096f4:	2b01      	cmp	r3, #1
 80096f6:	d122      	bne.n	800973e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80096f8:	68f8      	ldr	r0, [r7, #12]
 80096fa:	f7ff fe98 	bl	800942e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	2200      	movs	r2, #0
 8009702:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009706:	e01a      	b.n	800973e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800970e:	b2db      	uxtb	r3, r3
 8009710:	2b03      	cmp	r3, #3
 8009712:	d114      	bne.n	800973e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800971a:	695b      	ldr	r3, [r3, #20]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d00e      	beq.n	800973e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009726:	695b      	ldr	r3, [r3, #20]
 8009728:	7afa      	ldrb	r2, [r7, #11]
 800972a:	4611      	mov	r1, r2
 800972c:	68f8      	ldr	r0, [r7, #12]
 800972e:	4798      	blx	r3
 8009730:	4603      	mov	r3, r0
 8009732:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009734:	7dfb      	ldrb	r3, [r7, #23]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d001      	beq.n	800973e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800973a:	7dfb      	ldrb	r3, [r7, #23]
 800973c:	e000      	b.n	8009740 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800973e:	2300      	movs	r3, #0
}
 8009740:	4618      	mov	r0, r3
 8009742:	3718      	adds	r7, #24
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}

08009748 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b082      	sub	sp, #8
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2201      	movs	r2, #1
 8009754:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2200      	movs	r2, #0
 800975c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2200      	movs	r2, #0
 8009764:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2200      	movs	r2, #0
 800976a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009774:	2b00      	cmp	r3, #0
 8009776:	d101      	bne.n	800977c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009778:	2303      	movs	r3, #3
 800977a:	e02f      	b.n	80097dc <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009782:	2b00      	cmp	r3, #0
 8009784:	d00f      	beq.n	80097a6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800978c:	685b      	ldr	r3, [r3, #4]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d009      	beq.n	80097a6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009798:	685b      	ldr	r3, [r3, #4]
 800979a:	687a      	ldr	r2, [r7, #4]
 800979c:	6852      	ldr	r2, [r2, #4]
 800979e:	b2d2      	uxtb	r2, r2
 80097a0:	4611      	mov	r1, r2
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80097a6:	2340      	movs	r3, #64	; 0x40
 80097a8:	2200      	movs	r2, #0
 80097aa:	2100      	movs	r1, #0
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f003 fe48 	bl	800d442 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2201      	movs	r2, #1
 80097b6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2240      	movs	r2, #64	; 0x40
 80097be:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80097c2:	2340      	movs	r3, #64	; 0x40
 80097c4:	2200      	movs	r2, #0
 80097c6:	2180      	movs	r1, #128	; 0x80
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f003 fe3a 	bl	800d442 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2201      	movs	r2, #1
 80097d2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2240      	movs	r2, #64	; 0x40
 80097d8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80097da:	2300      	movs	r3, #0
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3708      	adds	r7, #8
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}

080097e4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80097e4:	b480      	push	{r7}
 80097e6:	b083      	sub	sp, #12
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
 80097ec:	460b      	mov	r3, r1
 80097ee:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	78fa      	ldrb	r2, [r7, #3]
 80097f4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80097f6:	2300      	movs	r3, #0
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	370c      	adds	r7, #12
 80097fc:	46bd      	mov	sp, r7
 80097fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009802:	4770      	bx	lr

08009804 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009804:	b480      	push	{r7}
 8009806:	b083      	sub	sp, #12
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009812:	b2da      	uxtb	r2, r3
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2204      	movs	r2, #4
 800981e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009822:	2300      	movs	r3, #0
}
 8009824:	4618      	mov	r0, r3
 8009826:	370c      	adds	r7, #12
 8009828:	46bd      	mov	sp, r7
 800982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982e:	4770      	bx	lr

08009830 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009830:	b480      	push	{r7}
 8009832:	b083      	sub	sp, #12
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800983e:	b2db      	uxtb	r3, r3
 8009840:	2b04      	cmp	r3, #4
 8009842:	d106      	bne.n	8009852 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800984a:	b2da      	uxtb	r2, r3
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009852:	2300      	movs	r3, #0
}
 8009854:	4618      	mov	r0, r3
 8009856:	370c      	adds	r7, #12
 8009858:	46bd      	mov	sp, r7
 800985a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985e:	4770      	bx	lr

08009860 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b082      	sub	sp, #8
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800986e:	2b00      	cmp	r3, #0
 8009870:	d101      	bne.n	8009876 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009872:	2303      	movs	r3, #3
 8009874:	e012      	b.n	800989c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800987c:	b2db      	uxtb	r3, r3
 800987e:	2b03      	cmp	r3, #3
 8009880:	d10b      	bne.n	800989a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009888:	69db      	ldr	r3, [r3, #28]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d005      	beq.n	800989a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009894:	69db      	ldr	r3, [r3, #28]
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800989a:	2300      	movs	r3, #0
}
 800989c:	4618      	mov	r0, r3
 800989e:	3708      	adds	r7, #8
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}

080098a4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80098a4:	b480      	push	{r7}
 80098a6:	b087      	sub	sp, #28
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80098b0:	697b      	ldr	r3, [r7, #20]
 80098b2:	781b      	ldrb	r3, [r3, #0]
 80098b4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	3301      	adds	r3, #1
 80098ba:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80098bc:	697b      	ldr	r3, [r7, #20]
 80098be:	781b      	ldrb	r3, [r3, #0]
 80098c0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80098c2:	8a3b      	ldrh	r3, [r7, #16]
 80098c4:	021b      	lsls	r3, r3, #8
 80098c6:	b21a      	sxth	r2, r3
 80098c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80098cc:	4313      	orrs	r3, r2
 80098ce:	b21b      	sxth	r3, r3
 80098d0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80098d2:	89fb      	ldrh	r3, [r7, #14]
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	371c      	adds	r7, #28
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr

080098e0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b084      	sub	sp, #16
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80098ea:	2300      	movs	r3, #0
 80098ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	781b      	ldrb	r3, [r3, #0]
 80098f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80098f6:	2b40      	cmp	r3, #64	; 0x40
 80098f8:	d005      	beq.n	8009906 <USBD_StdDevReq+0x26>
 80098fa:	2b40      	cmp	r3, #64	; 0x40
 80098fc:	d853      	bhi.n	80099a6 <USBD_StdDevReq+0xc6>
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d00b      	beq.n	800991a <USBD_StdDevReq+0x3a>
 8009902:	2b20      	cmp	r3, #32
 8009904:	d14f      	bne.n	80099a6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800990c:	689b      	ldr	r3, [r3, #8]
 800990e:	6839      	ldr	r1, [r7, #0]
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	4798      	blx	r3
 8009914:	4603      	mov	r3, r0
 8009916:	73fb      	strb	r3, [r7, #15]
      break;
 8009918:	e04a      	b.n	80099b0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	785b      	ldrb	r3, [r3, #1]
 800991e:	2b09      	cmp	r3, #9
 8009920:	d83b      	bhi.n	800999a <USBD_StdDevReq+0xba>
 8009922:	a201      	add	r2, pc, #4	; (adr r2, 8009928 <USBD_StdDevReq+0x48>)
 8009924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009928:	0800997d 	.word	0x0800997d
 800992c:	08009991 	.word	0x08009991
 8009930:	0800999b 	.word	0x0800999b
 8009934:	08009987 	.word	0x08009987
 8009938:	0800999b 	.word	0x0800999b
 800993c:	0800995b 	.word	0x0800995b
 8009940:	08009951 	.word	0x08009951
 8009944:	0800999b 	.word	0x0800999b
 8009948:	08009973 	.word	0x08009973
 800994c:	08009965 	.word	0x08009965
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009950:	6839      	ldr	r1, [r7, #0]
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f000 f9de 	bl	8009d14 <USBD_GetDescriptor>
          break;
 8009958:	e024      	b.n	80099a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800995a:	6839      	ldr	r1, [r7, #0]
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f000 fb6d 	bl	800a03c <USBD_SetAddress>
          break;
 8009962:	e01f      	b.n	80099a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009964:	6839      	ldr	r1, [r7, #0]
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f000 fbac 	bl	800a0c4 <USBD_SetConfig>
 800996c:	4603      	mov	r3, r0
 800996e:	73fb      	strb	r3, [r7, #15]
          break;
 8009970:	e018      	b.n	80099a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009972:	6839      	ldr	r1, [r7, #0]
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f000 fc4b 	bl	800a210 <USBD_GetConfig>
          break;
 800997a:	e013      	b.n	80099a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800997c:	6839      	ldr	r1, [r7, #0]
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f000 fc7c 	bl	800a27c <USBD_GetStatus>
          break;
 8009984:	e00e      	b.n	80099a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009986:	6839      	ldr	r1, [r7, #0]
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f000 fcab 	bl	800a2e4 <USBD_SetFeature>
          break;
 800998e:	e009      	b.n	80099a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009990:	6839      	ldr	r1, [r7, #0]
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 fcba 	bl	800a30c <USBD_ClrFeature>
          break;
 8009998:	e004      	b.n	80099a4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800999a:	6839      	ldr	r1, [r7, #0]
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 fd11 	bl	800a3c4 <USBD_CtlError>
          break;
 80099a2:	bf00      	nop
      }
      break;
 80099a4:	e004      	b.n	80099b0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80099a6:	6839      	ldr	r1, [r7, #0]
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f000 fd0b 	bl	800a3c4 <USBD_CtlError>
      break;
 80099ae:	bf00      	nop
  }

  return ret;
 80099b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	3710      	adds	r7, #16
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}
 80099ba:	bf00      	nop

080099bc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b084      	sub	sp, #16
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80099c6:	2300      	movs	r3, #0
 80099c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	781b      	ldrb	r3, [r3, #0]
 80099ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80099d2:	2b40      	cmp	r3, #64	; 0x40
 80099d4:	d005      	beq.n	80099e2 <USBD_StdItfReq+0x26>
 80099d6:	2b40      	cmp	r3, #64	; 0x40
 80099d8:	d82f      	bhi.n	8009a3a <USBD_StdItfReq+0x7e>
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d001      	beq.n	80099e2 <USBD_StdItfReq+0x26>
 80099de:	2b20      	cmp	r3, #32
 80099e0:	d12b      	bne.n	8009a3a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099e8:	b2db      	uxtb	r3, r3
 80099ea:	3b01      	subs	r3, #1
 80099ec:	2b02      	cmp	r3, #2
 80099ee:	d81d      	bhi.n	8009a2c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	889b      	ldrh	r3, [r3, #4]
 80099f4:	b2db      	uxtb	r3, r3
 80099f6:	2b01      	cmp	r3, #1
 80099f8:	d813      	bhi.n	8009a22 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a00:	689b      	ldr	r3, [r3, #8]
 8009a02:	6839      	ldr	r1, [r7, #0]
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	4798      	blx	r3
 8009a08:	4603      	mov	r3, r0
 8009a0a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	88db      	ldrh	r3, [r3, #6]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d110      	bne.n	8009a36 <USBD_StdItfReq+0x7a>
 8009a14:	7bfb      	ldrb	r3, [r7, #15]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d10d      	bne.n	8009a36 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f000 fd9d 	bl	800a55a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009a20:	e009      	b.n	8009a36 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8009a22:	6839      	ldr	r1, [r7, #0]
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f000 fccd 	bl	800a3c4 <USBD_CtlError>
          break;
 8009a2a:	e004      	b.n	8009a36 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8009a2c:	6839      	ldr	r1, [r7, #0]
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f000 fcc8 	bl	800a3c4 <USBD_CtlError>
          break;
 8009a34:	e000      	b.n	8009a38 <USBD_StdItfReq+0x7c>
          break;
 8009a36:	bf00      	nop
      }
      break;
 8009a38:	e004      	b.n	8009a44 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8009a3a:	6839      	ldr	r1, [r7, #0]
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f000 fcc1 	bl	800a3c4 <USBD_CtlError>
      break;
 8009a42:	bf00      	nop
  }

  return ret;
 8009a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3710      	adds	r7, #16
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}

08009a4e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a4e:	b580      	push	{r7, lr}
 8009a50:	b084      	sub	sp, #16
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	6078      	str	r0, [r7, #4]
 8009a56:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	889b      	ldrh	r3, [r3, #4]
 8009a60:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	781b      	ldrb	r3, [r3, #0]
 8009a66:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009a6a:	2b40      	cmp	r3, #64	; 0x40
 8009a6c:	d007      	beq.n	8009a7e <USBD_StdEPReq+0x30>
 8009a6e:	2b40      	cmp	r3, #64	; 0x40
 8009a70:	f200 8145 	bhi.w	8009cfe <USBD_StdEPReq+0x2b0>
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d00c      	beq.n	8009a92 <USBD_StdEPReq+0x44>
 8009a78:	2b20      	cmp	r3, #32
 8009a7a:	f040 8140 	bne.w	8009cfe <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a84:	689b      	ldr	r3, [r3, #8]
 8009a86:	6839      	ldr	r1, [r7, #0]
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	4798      	blx	r3
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	73fb      	strb	r3, [r7, #15]
      break;
 8009a90:	e13a      	b.n	8009d08 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	785b      	ldrb	r3, [r3, #1]
 8009a96:	2b03      	cmp	r3, #3
 8009a98:	d007      	beq.n	8009aaa <USBD_StdEPReq+0x5c>
 8009a9a:	2b03      	cmp	r3, #3
 8009a9c:	f300 8129 	bgt.w	8009cf2 <USBD_StdEPReq+0x2a4>
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d07f      	beq.n	8009ba4 <USBD_StdEPReq+0x156>
 8009aa4:	2b01      	cmp	r3, #1
 8009aa6:	d03c      	beq.n	8009b22 <USBD_StdEPReq+0xd4>
 8009aa8:	e123      	b.n	8009cf2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ab0:	b2db      	uxtb	r3, r3
 8009ab2:	2b02      	cmp	r3, #2
 8009ab4:	d002      	beq.n	8009abc <USBD_StdEPReq+0x6e>
 8009ab6:	2b03      	cmp	r3, #3
 8009ab8:	d016      	beq.n	8009ae8 <USBD_StdEPReq+0x9a>
 8009aba:	e02c      	b.n	8009b16 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009abc:	7bbb      	ldrb	r3, [r7, #14]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d00d      	beq.n	8009ade <USBD_StdEPReq+0x90>
 8009ac2:	7bbb      	ldrb	r3, [r7, #14]
 8009ac4:	2b80      	cmp	r3, #128	; 0x80
 8009ac6:	d00a      	beq.n	8009ade <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009ac8:	7bbb      	ldrb	r3, [r7, #14]
 8009aca:	4619      	mov	r1, r3
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f003 fcfd 	bl	800d4cc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009ad2:	2180      	movs	r1, #128	; 0x80
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f003 fcf9 	bl	800d4cc <USBD_LL_StallEP>
 8009ada:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009adc:	e020      	b.n	8009b20 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8009ade:	6839      	ldr	r1, [r7, #0]
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f000 fc6f 	bl	800a3c4 <USBD_CtlError>
              break;
 8009ae6:	e01b      	b.n	8009b20 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	885b      	ldrh	r3, [r3, #2]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d10e      	bne.n	8009b0e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009af0:	7bbb      	ldrb	r3, [r7, #14]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d00b      	beq.n	8009b0e <USBD_StdEPReq+0xc0>
 8009af6:	7bbb      	ldrb	r3, [r7, #14]
 8009af8:	2b80      	cmp	r3, #128	; 0x80
 8009afa:	d008      	beq.n	8009b0e <USBD_StdEPReq+0xc0>
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	88db      	ldrh	r3, [r3, #6]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d104      	bne.n	8009b0e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009b04:	7bbb      	ldrb	r3, [r7, #14]
 8009b06:	4619      	mov	r1, r3
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f003 fcdf 	bl	800d4cc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f000 fd23 	bl	800a55a <USBD_CtlSendStatus>

              break;
 8009b14:	e004      	b.n	8009b20 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009b16:	6839      	ldr	r1, [r7, #0]
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f000 fc53 	bl	800a3c4 <USBD_CtlError>
              break;
 8009b1e:	bf00      	nop
          }
          break;
 8009b20:	e0ec      	b.n	8009cfc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b28:	b2db      	uxtb	r3, r3
 8009b2a:	2b02      	cmp	r3, #2
 8009b2c:	d002      	beq.n	8009b34 <USBD_StdEPReq+0xe6>
 8009b2e:	2b03      	cmp	r3, #3
 8009b30:	d016      	beq.n	8009b60 <USBD_StdEPReq+0x112>
 8009b32:	e030      	b.n	8009b96 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b34:	7bbb      	ldrb	r3, [r7, #14]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d00d      	beq.n	8009b56 <USBD_StdEPReq+0x108>
 8009b3a:	7bbb      	ldrb	r3, [r7, #14]
 8009b3c:	2b80      	cmp	r3, #128	; 0x80
 8009b3e:	d00a      	beq.n	8009b56 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009b40:	7bbb      	ldrb	r3, [r7, #14]
 8009b42:	4619      	mov	r1, r3
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f003 fcc1 	bl	800d4cc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009b4a:	2180      	movs	r1, #128	; 0x80
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f003 fcbd 	bl	800d4cc <USBD_LL_StallEP>
 8009b52:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009b54:	e025      	b.n	8009ba2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009b56:	6839      	ldr	r1, [r7, #0]
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f000 fc33 	bl	800a3c4 <USBD_CtlError>
              break;
 8009b5e:	e020      	b.n	8009ba2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	885b      	ldrh	r3, [r3, #2]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d11b      	bne.n	8009ba0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009b68:	7bbb      	ldrb	r3, [r7, #14]
 8009b6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d004      	beq.n	8009b7c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009b72:	7bbb      	ldrb	r3, [r7, #14]
 8009b74:	4619      	mov	r1, r3
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f003 fcc7 	bl	800d50a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f000 fcec 	bl	800a55a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b88:	689b      	ldr	r3, [r3, #8]
 8009b8a:	6839      	ldr	r1, [r7, #0]
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	4798      	blx	r3
 8009b90:	4603      	mov	r3, r0
 8009b92:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009b94:	e004      	b.n	8009ba0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009b96:	6839      	ldr	r1, [r7, #0]
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f000 fc13 	bl	800a3c4 <USBD_CtlError>
              break;
 8009b9e:	e000      	b.n	8009ba2 <USBD_StdEPReq+0x154>
              break;
 8009ba0:	bf00      	nop
          }
          break;
 8009ba2:	e0ab      	b.n	8009cfc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009baa:	b2db      	uxtb	r3, r3
 8009bac:	2b02      	cmp	r3, #2
 8009bae:	d002      	beq.n	8009bb6 <USBD_StdEPReq+0x168>
 8009bb0:	2b03      	cmp	r3, #3
 8009bb2:	d032      	beq.n	8009c1a <USBD_StdEPReq+0x1cc>
 8009bb4:	e097      	b.n	8009ce6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009bb6:	7bbb      	ldrb	r3, [r7, #14]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d007      	beq.n	8009bcc <USBD_StdEPReq+0x17e>
 8009bbc:	7bbb      	ldrb	r3, [r7, #14]
 8009bbe:	2b80      	cmp	r3, #128	; 0x80
 8009bc0:	d004      	beq.n	8009bcc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009bc2:	6839      	ldr	r1, [r7, #0]
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f000 fbfd 	bl	800a3c4 <USBD_CtlError>
                break;
 8009bca:	e091      	b.n	8009cf0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009bcc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	da0b      	bge.n	8009bec <USBD_StdEPReq+0x19e>
 8009bd4:	7bbb      	ldrb	r3, [r7, #14]
 8009bd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009bda:	4613      	mov	r3, r2
 8009bdc:	009b      	lsls	r3, r3, #2
 8009bde:	4413      	add	r3, r2
 8009be0:	009b      	lsls	r3, r3, #2
 8009be2:	3310      	adds	r3, #16
 8009be4:	687a      	ldr	r2, [r7, #4]
 8009be6:	4413      	add	r3, r2
 8009be8:	3304      	adds	r3, #4
 8009bea:	e00b      	b.n	8009c04 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009bec:	7bbb      	ldrb	r3, [r7, #14]
 8009bee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009bf2:	4613      	mov	r3, r2
 8009bf4:	009b      	lsls	r3, r3, #2
 8009bf6:	4413      	add	r3, r2
 8009bf8:	009b      	lsls	r3, r3, #2
 8009bfa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009bfe:	687a      	ldr	r2, [r7, #4]
 8009c00:	4413      	add	r3, r2
 8009c02:	3304      	adds	r3, #4
 8009c04:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	2200      	movs	r2, #0
 8009c0a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	2202      	movs	r2, #2
 8009c10:	4619      	mov	r1, r3
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f000 fc47 	bl	800a4a6 <USBD_CtlSendData>
              break;
 8009c18:	e06a      	b.n	8009cf0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009c1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	da11      	bge.n	8009c46 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009c22:	7bbb      	ldrb	r3, [r7, #14]
 8009c24:	f003 020f 	and.w	r2, r3, #15
 8009c28:	6879      	ldr	r1, [r7, #4]
 8009c2a:	4613      	mov	r3, r2
 8009c2c:	009b      	lsls	r3, r3, #2
 8009c2e:	4413      	add	r3, r2
 8009c30:	009b      	lsls	r3, r3, #2
 8009c32:	440b      	add	r3, r1
 8009c34:	3324      	adds	r3, #36	; 0x24
 8009c36:	881b      	ldrh	r3, [r3, #0]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d117      	bne.n	8009c6c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009c3c:	6839      	ldr	r1, [r7, #0]
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f000 fbc0 	bl	800a3c4 <USBD_CtlError>
                  break;
 8009c44:	e054      	b.n	8009cf0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009c46:	7bbb      	ldrb	r3, [r7, #14]
 8009c48:	f003 020f 	and.w	r2, r3, #15
 8009c4c:	6879      	ldr	r1, [r7, #4]
 8009c4e:	4613      	mov	r3, r2
 8009c50:	009b      	lsls	r3, r3, #2
 8009c52:	4413      	add	r3, r2
 8009c54:	009b      	lsls	r3, r3, #2
 8009c56:	440b      	add	r3, r1
 8009c58:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009c5c:	881b      	ldrh	r3, [r3, #0]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d104      	bne.n	8009c6c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009c62:	6839      	ldr	r1, [r7, #0]
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f000 fbad 	bl	800a3c4 <USBD_CtlError>
                  break;
 8009c6a:	e041      	b.n	8009cf0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	da0b      	bge.n	8009c8c <USBD_StdEPReq+0x23e>
 8009c74:	7bbb      	ldrb	r3, [r7, #14]
 8009c76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c7a:	4613      	mov	r3, r2
 8009c7c:	009b      	lsls	r3, r3, #2
 8009c7e:	4413      	add	r3, r2
 8009c80:	009b      	lsls	r3, r3, #2
 8009c82:	3310      	adds	r3, #16
 8009c84:	687a      	ldr	r2, [r7, #4]
 8009c86:	4413      	add	r3, r2
 8009c88:	3304      	adds	r3, #4
 8009c8a:	e00b      	b.n	8009ca4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009c8c:	7bbb      	ldrb	r3, [r7, #14]
 8009c8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c92:	4613      	mov	r3, r2
 8009c94:	009b      	lsls	r3, r3, #2
 8009c96:	4413      	add	r3, r2
 8009c98:	009b      	lsls	r3, r3, #2
 8009c9a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009c9e:	687a      	ldr	r2, [r7, #4]
 8009ca0:	4413      	add	r3, r2
 8009ca2:	3304      	adds	r3, #4
 8009ca4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009ca6:	7bbb      	ldrb	r3, [r7, #14]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d002      	beq.n	8009cb2 <USBD_StdEPReq+0x264>
 8009cac:	7bbb      	ldrb	r3, [r7, #14]
 8009cae:	2b80      	cmp	r3, #128	; 0x80
 8009cb0:	d103      	bne.n	8009cba <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	601a      	str	r2, [r3, #0]
 8009cb8:	e00e      	b.n	8009cd8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009cba:	7bbb      	ldrb	r3, [r7, #14]
 8009cbc:	4619      	mov	r1, r3
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f003 fc42 	bl	800d548 <USBD_LL_IsStallEP>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d003      	beq.n	8009cd2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	2201      	movs	r2, #1
 8009cce:	601a      	str	r2, [r3, #0]
 8009cd0:	e002      	b.n	8009cd8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	2202      	movs	r2, #2
 8009cdc:	4619      	mov	r1, r3
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f000 fbe1 	bl	800a4a6 <USBD_CtlSendData>
              break;
 8009ce4:	e004      	b.n	8009cf0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8009ce6:	6839      	ldr	r1, [r7, #0]
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f000 fb6b 	bl	800a3c4 <USBD_CtlError>
              break;
 8009cee:	bf00      	nop
          }
          break;
 8009cf0:	e004      	b.n	8009cfc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8009cf2:	6839      	ldr	r1, [r7, #0]
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f000 fb65 	bl	800a3c4 <USBD_CtlError>
          break;
 8009cfa:	bf00      	nop
      }
      break;
 8009cfc:	e004      	b.n	8009d08 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8009cfe:	6839      	ldr	r1, [r7, #0]
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f000 fb5f 	bl	800a3c4 <USBD_CtlError>
      break;
 8009d06:	bf00      	nop
  }

  return ret;
 8009d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3710      	adds	r7, #16
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}
	...

08009d14 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b084      	sub	sp, #16
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009d22:	2300      	movs	r3, #0
 8009d24:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009d26:	2300      	movs	r3, #0
 8009d28:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	885b      	ldrh	r3, [r3, #2]
 8009d2e:	0a1b      	lsrs	r3, r3, #8
 8009d30:	b29b      	uxth	r3, r3
 8009d32:	3b01      	subs	r3, #1
 8009d34:	2b0e      	cmp	r3, #14
 8009d36:	f200 8152 	bhi.w	8009fde <USBD_GetDescriptor+0x2ca>
 8009d3a:	a201      	add	r2, pc, #4	; (adr r2, 8009d40 <USBD_GetDescriptor+0x2c>)
 8009d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d40:	08009db1 	.word	0x08009db1
 8009d44:	08009dc9 	.word	0x08009dc9
 8009d48:	08009e09 	.word	0x08009e09
 8009d4c:	08009fdf 	.word	0x08009fdf
 8009d50:	08009fdf 	.word	0x08009fdf
 8009d54:	08009f7f 	.word	0x08009f7f
 8009d58:	08009fab 	.word	0x08009fab
 8009d5c:	08009fdf 	.word	0x08009fdf
 8009d60:	08009fdf 	.word	0x08009fdf
 8009d64:	08009fdf 	.word	0x08009fdf
 8009d68:	08009fdf 	.word	0x08009fdf
 8009d6c:	08009fdf 	.word	0x08009fdf
 8009d70:	08009fdf 	.word	0x08009fdf
 8009d74:	08009fdf 	.word	0x08009fdf
 8009d78:	08009d7d 	.word	0x08009d7d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d82:	69db      	ldr	r3, [r3, #28]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d00b      	beq.n	8009da0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d8e:	69db      	ldr	r3, [r3, #28]
 8009d90:	687a      	ldr	r2, [r7, #4]
 8009d92:	7c12      	ldrb	r2, [r2, #16]
 8009d94:	f107 0108 	add.w	r1, r7, #8
 8009d98:	4610      	mov	r0, r2
 8009d9a:	4798      	blx	r3
 8009d9c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009d9e:	e126      	b.n	8009fee <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009da0:	6839      	ldr	r1, [r7, #0]
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f000 fb0e 	bl	800a3c4 <USBD_CtlError>
        err++;
 8009da8:	7afb      	ldrb	r3, [r7, #11]
 8009daa:	3301      	adds	r3, #1
 8009dac:	72fb      	strb	r3, [r7, #11]
      break;
 8009dae:	e11e      	b.n	8009fee <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	687a      	ldr	r2, [r7, #4]
 8009dba:	7c12      	ldrb	r2, [r2, #16]
 8009dbc:	f107 0108 	add.w	r1, r7, #8
 8009dc0:	4610      	mov	r0, r2
 8009dc2:	4798      	blx	r3
 8009dc4:	60f8      	str	r0, [r7, #12]
      break;
 8009dc6:	e112      	b.n	8009fee <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	7c1b      	ldrb	r3, [r3, #16]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d10d      	bne.n	8009dec <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dd8:	f107 0208 	add.w	r2, r7, #8
 8009ddc:	4610      	mov	r0, r2
 8009dde:	4798      	blx	r3
 8009de0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	3301      	adds	r3, #1
 8009de6:	2202      	movs	r2, #2
 8009de8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009dea:	e100      	b.n	8009fee <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009df4:	f107 0208 	add.w	r2, r7, #8
 8009df8:	4610      	mov	r0, r2
 8009dfa:	4798      	blx	r3
 8009dfc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	3301      	adds	r3, #1
 8009e02:	2202      	movs	r2, #2
 8009e04:	701a      	strb	r2, [r3, #0]
      break;
 8009e06:	e0f2      	b.n	8009fee <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	885b      	ldrh	r3, [r3, #2]
 8009e0c:	b2db      	uxtb	r3, r3
 8009e0e:	2b05      	cmp	r3, #5
 8009e10:	f200 80ac 	bhi.w	8009f6c <USBD_GetDescriptor+0x258>
 8009e14:	a201      	add	r2, pc, #4	; (adr r2, 8009e1c <USBD_GetDescriptor+0x108>)
 8009e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e1a:	bf00      	nop
 8009e1c:	08009e35 	.word	0x08009e35
 8009e20:	08009e69 	.word	0x08009e69
 8009e24:	08009e9d 	.word	0x08009e9d
 8009e28:	08009ed1 	.word	0x08009ed1
 8009e2c:	08009f05 	.word	0x08009f05
 8009e30:	08009f39 	.word	0x08009f39
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e3a:	685b      	ldr	r3, [r3, #4]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d00b      	beq.n	8009e58 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e46:	685b      	ldr	r3, [r3, #4]
 8009e48:	687a      	ldr	r2, [r7, #4]
 8009e4a:	7c12      	ldrb	r2, [r2, #16]
 8009e4c:	f107 0108 	add.w	r1, r7, #8
 8009e50:	4610      	mov	r0, r2
 8009e52:	4798      	blx	r3
 8009e54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e56:	e091      	b.n	8009f7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009e58:	6839      	ldr	r1, [r7, #0]
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	f000 fab2 	bl	800a3c4 <USBD_CtlError>
            err++;
 8009e60:	7afb      	ldrb	r3, [r7, #11]
 8009e62:	3301      	adds	r3, #1
 8009e64:	72fb      	strb	r3, [r7, #11]
          break;
 8009e66:	e089      	b.n	8009f7c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e6e:	689b      	ldr	r3, [r3, #8]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d00b      	beq.n	8009e8c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e7a:	689b      	ldr	r3, [r3, #8]
 8009e7c:	687a      	ldr	r2, [r7, #4]
 8009e7e:	7c12      	ldrb	r2, [r2, #16]
 8009e80:	f107 0108 	add.w	r1, r7, #8
 8009e84:	4610      	mov	r0, r2
 8009e86:	4798      	blx	r3
 8009e88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e8a:	e077      	b.n	8009f7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009e8c:	6839      	ldr	r1, [r7, #0]
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f000 fa98 	bl	800a3c4 <USBD_CtlError>
            err++;
 8009e94:	7afb      	ldrb	r3, [r7, #11]
 8009e96:	3301      	adds	r3, #1
 8009e98:	72fb      	strb	r3, [r7, #11]
          break;
 8009e9a:	e06f      	b.n	8009f7c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ea2:	68db      	ldr	r3, [r3, #12]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d00b      	beq.n	8009ec0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009eae:	68db      	ldr	r3, [r3, #12]
 8009eb0:	687a      	ldr	r2, [r7, #4]
 8009eb2:	7c12      	ldrb	r2, [r2, #16]
 8009eb4:	f107 0108 	add.w	r1, r7, #8
 8009eb8:	4610      	mov	r0, r2
 8009eba:	4798      	blx	r3
 8009ebc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ebe:	e05d      	b.n	8009f7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009ec0:	6839      	ldr	r1, [r7, #0]
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f000 fa7e 	bl	800a3c4 <USBD_CtlError>
            err++;
 8009ec8:	7afb      	ldrb	r3, [r7, #11]
 8009eca:	3301      	adds	r3, #1
 8009ecc:	72fb      	strb	r3, [r7, #11]
          break;
 8009ece:	e055      	b.n	8009f7c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ed6:	691b      	ldr	r3, [r3, #16]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d00b      	beq.n	8009ef4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ee2:	691b      	ldr	r3, [r3, #16]
 8009ee4:	687a      	ldr	r2, [r7, #4]
 8009ee6:	7c12      	ldrb	r2, [r2, #16]
 8009ee8:	f107 0108 	add.w	r1, r7, #8
 8009eec:	4610      	mov	r0, r2
 8009eee:	4798      	blx	r3
 8009ef0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ef2:	e043      	b.n	8009f7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009ef4:	6839      	ldr	r1, [r7, #0]
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f000 fa64 	bl	800a3c4 <USBD_CtlError>
            err++;
 8009efc:	7afb      	ldrb	r3, [r7, #11]
 8009efe:	3301      	adds	r3, #1
 8009f00:	72fb      	strb	r3, [r7, #11]
          break;
 8009f02:	e03b      	b.n	8009f7c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f0a:	695b      	ldr	r3, [r3, #20]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d00b      	beq.n	8009f28 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f16:	695b      	ldr	r3, [r3, #20]
 8009f18:	687a      	ldr	r2, [r7, #4]
 8009f1a:	7c12      	ldrb	r2, [r2, #16]
 8009f1c:	f107 0108 	add.w	r1, r7, #8
 8009f20:	4610      	mov	r0, r2
 8009f22:	4798      	blx	r3
 8009f24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f26:	e029      	b.n	8009f7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009f28:	6839      	ldr	r1, [r7, #0]
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f000 fa4a 	bl	800a3c4 <USBD_CtlError>
            err++;
 8009f30:	7afb      	ldrb	r3, [r7, #11]
 8009f32:	3301      	adds	r3, #1
 8009f34:	72fb      	strb	r3, [r7, #11]
          break;
 8009f36:	e021      	b.n	8009f7c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f3e:	699b      	ldr	r3, [r3, #24]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d00b      	beq.n	8009f5c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f4a:	699b      	ldr	r3, [r3, #24]
 8009f4c:	687a      	ldr	r2, [r7, #4]
 8009f4e:	7c12      	ldrb	r2, [r2, #16]
 8009f50:	f107 0108 	add.w	r1, r7, #8
 8009f54:	4610      	mov	r0, r2
 8009f56:	4798      	blx	r3
 8009f58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f5a:	e00f      	b.n	8009f7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009f5c:	6839      	ldr	r1, [r7, #0]
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f000 fa30 	bl	800a3c4 <USBD_CtlError>
            err++;
 8009f64:	7afb      	ldrb	r3, [r7, #11]
 8009f66:	3301      	adds	r3, #1
 8009f68:	72fb      	strb	r3, [r7, #11]
          break;
 8009f6a:	e007      	b.n	8009f7c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009f6c:	6839      	ldr	r1, [r7, #0]
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f000 fa28 	bl	800a3c4 <USBD_CtlError>
          err++;
 8009f74:	7afb      	ldrb	r3, [r7, #11]
 8009f76:	3301      	adds	r3, #1
 8009f78:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8009f7a:	bf00      	nop
      }
      break;
 8009f7c:	e037      	b.n	8009fee <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	7c1b      	ldrb	r3, [r3, #16]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d109      	bne.n	8009f9a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f8e:	f107 0208 	add.w	r2, r7, #8
 8009f92:	4610      	mov	r0, r2
 8009f94:	4798      	blx	r3
 8009f96:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f98:	e029      	b.n	8009fee <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009f9a:	6839      	ldr	r1, [r7, #0]
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f000 fa11 	bl	800a3c4 <USBD_CtlError>
        err++;
 8009fa2:	7afb      	ldrb	r3, [r7, #11]
 8009fa4:	3301      	adds	r3, #1
 8009fa6:	72fb      	strb	r3, [r7, #11]
      break;
 8009fa8:	e021      	b.n	8009fee <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	7c1b      	ldrb	r3, [r3, #16]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d10d      	bne.n	8009fce <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fba:	f107 0208 	add.w	r2, r7, #8
 8009fbe:	4610      	mov	r0, r2
 8009fc0:	4798      	blx	r3
 8009fc2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	3301      	adds	r3, #1
 8009fc8:	2207      	movs	r2, #7
 8009fca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009fcc:	e00f      	b.n	8009fee <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009fce:	6839      	ldr	r1, [r7, #0]
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f000 f9f7 	bl	800a3c4 <USBD_CtlError>
        err++;
 8009fd6:	7afb      	ldrb	r3, [r7, #11]
 8009fd8:	3301      	adds	r3, #1
 8009fda:	72fb      	strb	r3, [r7, #11]
      break;
 8009fdc:	e007      	b.n	8009fee <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009fde:	6839      	ldr	r1, [r7, #0]
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	f000 f9ef 	bl	800a3c4 <USBD_CtlError>
      err++;
 8009fe6:	7afb      	ldrb	r3, [r7, #11]
 8009fe8:	3301      	adds	r3, #1
 8009fea:	72fb      	strb	r3, [r7, #11]
      break;
 8009fec:	bf00      	nop
  }

  if (err != 0U)
 8009fee:	7afb      	ldrb	r3, [r7, #11]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d11e      	bne.n	800a032 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	88db      	ldrh	r3, [r3, #6]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d016      	beq.n	800a02a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009ffc:	893b      	ldrh	r3, [r7, #8]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d00e      	beq.n	800a020 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	88da      	ldrh	r2, [r3, #6]
 800a006:	893b      	ldrh	r3, [r7, #8]
 800a008:	4293      	cmp	r3, r2
 800a00a:	bf28      	it	cs
 800a00c:	4613      	movcs	r3, r2
 800a00e:	b29b      	uxth	r3, r3
 800a010:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a012:	893b      	ldrh	r3, [r7, #8]
 800a014:	461a      	mov	r2, r3
 800a016:	68f9      	ldr	r1, [r7, #12]
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f000 fa44 	bl	800a4a6 <USBD_CtlSendData>
 800a01e:	e009      	b.n	800a034 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a020:	6839      	ldr	r1, [r7, #0]
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	f000 f9ce 	bl	800a3c4 <USBD_CtlError>
 800a028:	e004      	b.n	800a034 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f000 fa95 	bl	800a55a <USBD_CtlSendStatus>
 800a030:	e000      	b.n	800a034 <USBD_GetDescriptor+0x320>
    return;
 800a032:	bf00      	nop
  }
}
 800a034:	3710      	adds	r7, #16
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}
 800a03a:	bf00      	nop

0800a03c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b084      	sub	sp, #16
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	889b      	ldrh	r3, [r3, #4]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d131      	bne.n	800a0b2 <USBD_SetAddress+0x76>
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	88db      	ldrh	r3, [r3, #6]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d12d      	bne.n	800a0b2 <USBD_SetAddress+0x76>
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	885b      	ldrh	r3, [r3, #2]
 800a05a:	2b7f      	cmp	r3, #127	; 0x7f
 800a05c:	d829      	bhi.n	800a0b2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	885b      	ldrh	r3, [r3, #2]
 800a062:	b2db      	uxtb	r3, r3
 800a064:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a068:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a070:	b2db      	uxtb	r3, r3
 800a072:	2b03      	cmp	r3, #3
 800a074:	d104      	bne.n	800a080 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a076:	6839      	ldr	r1, [r7, #0]
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f000 f9a3 	bl	800a3c4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a07e:	e01d      	b.n	800a0bc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	7bfa      	ldrb	r2, [r7, #15]
 800a084:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a088:	7bfb      	ldrb	r3, [r7, #15]
 800a08a:	4619      	mov	r1, r3
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f003 fa88 	bl	800d5a2 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f000 fa61 	bl	800a55a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a098:	7bfb      	ldrb	r3, [r7, #15]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d004      	beq.n	800a0a8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2202      	movs	r2, #2
 800a0a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0a6:	e009      	b.n	800a0bc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0b0:	e004      	b.n	800a0bc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a0b2:	6839      	ldr	r1, [r7, #0]
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f000 f985 	bl	800a3c4 <USBD_CtlError>
  }
}
 800a0ba:	bf00      	nop
 800a0bc:	bf00      	nop
 800a0be:	3710      	adds	r7, #16
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}

0800a0c4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b084      	sub	sp, #16
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
 800a0cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	885b      	ldrh	r3, [r3, #2]
 800a0d6:	b2da      	uxtb	r2, r3
 800a0d8:	4b4c      	ldr	r3, [pc, #304]	; (800a20c <USBD_SetConfig+0x148>)
 800a0da:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a0dc:	4b4b      	ldr	r3, [pc, #300]	; (800a20c <USBD_SetConfig+0x148>)
 800a0de:	781b      	ldrb	r3, [r3, #0]
 800a0e0:	2b01      	cmp	r3, #1
 800a0e2:	d905      	bls.n	800a0f0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a0e4:	6839      	ldr	r1, [r7, #0]
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f000 f96c 	bl	800a3c4 <USBD_CtlError>
    return USBD_FAIL;
 800a0ec:	2303      	movs	r3, #3
 800a0ee:	e088      	b.n	800a202 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0f6:	b2db      	uxtb	r3, r3
 800a0f8:	2b02      	cmp	r3, #2
 800a0fa:	d002      	beq.n	800a102 <USBD_SetConfig+0x3e>
 800a0fc:	2b03      	cmp	r3, #3
 800a0fe:	d025      	beq.n	800a14c <USBD_SetConfig+0x88>
 800a100:	e071      	b.n	800a1e6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a102:	4b42      	ldr	r3, [pc, #264]	; (800a20c <USBD_SetConfig+0x148>)
 800a104:	781b      	ldrb	r3, [r3, #0]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d01c      	beq.n	800a144 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800a10a:	4b40      	ldr	r3, [pc, #256]	; (800a20c <USBD_SetConfig+0x148>)
 800a10c:	781b      	ldrb	r3, [r3, #0]
 800a10e:	461a      	mov	r2, r3
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a114:	4b3d      	ldr	r3, [pc, #244]	; (800a20c <USBD_SetConfig+0x148>)
 800a116:	781b      	ldrb	r3, [r3, #0]
 800a118:	4619      	mov	r1, r3
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f7ff f992 	bl	8009444 <USBD_SetClassConfig>
 800a120:	4603      	mov	r3, r0
 800a122:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a124:	7bfb      	ldrb	r3, [r7, #15]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d004      	beq.n	800a134 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800a12a:	6839      	ldr	r1, [r7, #0]
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f000 f949 	bl	800a3c4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a132:	e065      	b.n	800a200 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f000 fa10 	bl	800a55a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2203      	movs	r2, #3
 800a13e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a142:	e05d      	b.n	800a200 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f000 fa08 	bl	800a55a <USBD_CtlSendStatus>
      break;
 800a14a:	e059      	b.n	800a200 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a14c:	4b2f      	ldr	r3, [pc, #188]	; (800a20c <USBD_SetConfig+0x148>)
 800a14e:	781b      	ldrb	r3, [r3, #0]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d112      	bne.n	800a17a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2202      	movs	r2, #2
 800a158:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a15c:	4b2b      	ldr	r3, [pc, #172]	; (800a20c <USBD_SetConfig+0x148>)
 800a15e:	781b      	ldrb	r3, [r3, #0]
 800a160:	461a      	mov	r2, r3
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a166:	4b29      	ldr	r3, [pc, #164]	; (800a20c <USBD_SetConfig+0x148>)
 800a168:	781b      	ldrb	r3, [r3, #0]
 800a16a:	4619      	mov	r1, r3
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f7ff f985 	bl	800947c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f000 f9f1 	bl	800a55a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a178:	e042      	b.n	800a200 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800a17a:	4b24      	ldr	r3, [pc, #144]	; (800a20c <USBD_SetConfig+0x148>)
 800a17c:	781b      	ldrb	r3, [r3, #0]
 800a17e:	461a      	mov	r2, r3
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	685b      	ldr	r3, [r3, #4]
 800a184:	429a      	cmp	r2, r3
 800a186:	d02a      	beq.n	800a1de <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	685b      	ldr	r3, [r3, #4]
 800a18c:	b2db      	uxtb	r3, r3
 800a18e:	4619      	mov	r1, r3
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f7ff f973 	bl	800947c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a196:	4b1d      	ldr	r3, [pc, #116]	; (800a20c <USBD_SetConfig+0x148>)
 800a198:	781b      	ldrb	r3, [r3, #0]
 800a19a:	461a      	mov	r2, r3
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a1a0:	4b1a      	ldr	r3, [pc, #104]	; (800a20c <USBD_SetConfig+0x148>)
 800a1a2:	781b      	ldrb	r3, [r3, #0]
 800a1a4:	4619      	mov	r1, r3
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f7ff f94c 	bl	8009444 <USBD_SetClassConfig>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a1b0:	7bfb      	ldrb	r3, [r7, #15]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d00f      	beq.n	800a1d6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800a1b6:	6839      	ldr	r1, [r7, #0]
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f000 f903 	bl	800a3c4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	685b      	ldr	r3, [r3, #4]
 800a1c2:	b2db      	uxtb	r3, r3
 800a1c4:	4619      	mov	r1, r3
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f7ff f958 	bl	800947c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2202      	movs	r2, #2
 800a1d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a1d4:	e014      	b.n	800a200 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f000 f9bf 	bl	800a55a <USBD_CtlSendStatus>
      break;
 800a1dc:	e010      	b.n	800a200 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f000 f9bb 	bl	800a55a <USBD_CtlSendStatus>
      break;
 800a1e4:	e00c      	b.n	800a200 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a1e6:	6839      	ldr	r1, [r7, #0]
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f000 f8eb 	bl	800a3c4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a1ee:	4b07      	ldr	r3, [pc, #28]	; (800a20c <USBD_SetConfig+0x148>)
 800a1f0:	781b      	ldrb	r3, [r3, #0]
 800a1f2:	4619      	mov	r1, r3
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f7ff f941 	bl	800947c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a1fa:	2303      	movs	r3, #3
 800a1fc:	73fb      	strb	r3, [r7, #15]
      break;
 800a1fe:	bf00      	nop
  }

  return ret;
 800a200:	7bfb      	ldrb	r3, [r7, #15]
}
 800a202:	4618      	mov	r0, r3
 800a204:	3710      	adds	r7, #16
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}
 800a20a:	bf00      	nop
 800a20c:	2000033e 	.word	0x2000033e

0800a210 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b082      	sub	sp, #8
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	88db      	ldrh	r3, [r3, #6]
 800a21e:	2b01      	cmp	r3, #1
 800a220:	d004      	beq.n	800a22c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a222:	6839      	ldr	r1, [r7, #0]
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f000 f8cd 	bl	800a3c4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a22a:	e023      	b.n	800a274 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a232:	b2db      	uxtb	r3, r3
 800a234:	2b02      	cmp	r3, #2
 800a236:	dc02      	bgt.n	800a23e <USBD_GetConfig+0x2e>
 800a238:	2b00      	cmp	r3, #0
 800a23a:	dc03      	bgt.n	800a244 <USBD_GetConfig+0x34>
 800a23c:	e015      	b.n	800a26a <USBD_GetConfig+0x5a>
 800a23e:	2b03      	cmp	r3, #3
 800a240:	d00b      	beq.n	800a25a <USBD_GetConfig+0x4a>
 800a242:	e012      	b.n	800a26a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2200      	movs	r2, #0
 800a248:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	3308      	adds	r3, #8
 800a24e:	2201      	movs	r2, #1
 800a250:	4619      	mov	r1, r3
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f000 f927 	bl	800a4a6 <USBD_CtlSendData>
        break;
 800a258:	e00c      	b.n	800a274 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	3304      	adds	r3, #4
 800a25e:	2201      	movs	r2, #1
 800a260:	4619      	mov	r1, r3
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f000 f91f 	bl	800a4a6 <USBD_CtlSendData>
        break;
 800a268:	e004      	b.n	800a274 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a26a:	6839      	ldr	r1, [r7, #0]
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f000 f8a9 	bl	800a3c4 <USBD_CtlError>
        break;
 800a272:	bf00      	nop
}
 800a274:	bf00      	nop
 800a276:	3708      	adds	r7, #8
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}

0800a27c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b082      	sub	sp, #8
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
 800a284:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a28c:	b2db      	uxtb	r3, r3
 800a28e:	3b01      	subs	r3, #1
 800a290:	2b02      	cmp	r3, #2
 800a292:	d81e      	bhi.n	800a2d2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	88db      	ldrh	r3, [r3, #6]
 800a298:	2b02      	cmp	r3, #2
 800a29a:	d004      	beq.n	800a2a6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a29c:	6839      	ldr	r1, [r7, #0]
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f000 f890 	bl	800a3c4 <USBD_CtlError>
        break;
 800a2a4:	e01a      	b.n	800a2dc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2201      	movs	r2, #1
 800a2aa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d005      	beq.n	800a2c2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	68db      	ldr	r3, [r3, #12]
 800a2ba:	f043 0202 	orr.w	r2, r3, #2
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	330c      	adds	r3, #12
 800a2c6:	2202      	movs	r2, #2
 800a2c8:	4619      	mov	r1, r3
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f000 f8eb 	bl	800a4a6 <USBD_CtlSendData>
      break;
 800a2d0:	e004      	b.n	800a2dc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a2d2:	6839      	ldr	r1, [r7, #0]
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f000 f875 	bl	800a3c4 <USBD_CtlError>
      break;
 800a2da:	bf00      	nop
  }
}
 800a2dc:	bf00      	nop
 800a2de:	3708      	adds	r7, #8
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}

0800a2e4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b082      	sub	sp, #8
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
 800a2ec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	885b      	ldrh	r3, [r3, #2]
 800a2f2:	2b01      	cmp	r3, #1
 800a2f4:	d106      	bne.n	800a304 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2201      	movs	r2, #1
 800a2fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f000 f92b 	bl	800a55a <USBD_CtlSendStatus>
  }
}
 800a304:	bf00      	nop
 800a306:	3708      	adds	r7, #8
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}

0800a30c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b082      	sub	sp, #8
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
 800a314:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a31c:	b2db      	uxtb	r3, r3
 800a31e:	3b01      	subs	r3, #1
 800a320:	2b02      	cmp	r3, #2
 800a322:	d80b      	bhi.n	800a33c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	885b      	ldrh	r3, [r3, #2]
 800a328:	2b01      	cmp	r3, #1
 800a32a:	d10c      	bne.n	800a346 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2200      	movs	r2, #0
 800a330:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f000 f910 	bl	800a55a <USBD_CtlSendStatus>
      }
      break;
 800a33a:	e004      	b.n	800a346 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a33c:	6839      	ldr	r1, [r7, #0]
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	f000 f840 	bl	800a3c4 <USBD_CtlError>
      break;
 800a344:	e000      	b.n	800a348 <USBD_ClrFeature+0x3c>
      break;
 800a346:	bf00      	nop
  }
}
 800a348:	bf00      	nop
 800a34a:	3708      	adds	r7, #8
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}

0800a350 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b084      	sub	sp, #16
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
 800a358:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	781a      	ldrb	r2, [r3, #0]
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	3301      	adds	r3, #1
 800a36a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	781a      	ldrb	r2, [r3, #0]
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	3301      	adds	r3, #1
 800a378:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a37a:	68f8      	ldr	r0, [r7, #12]
 800a37c:	f7ff fa92 	bl	80098a4 <SWAPBYTE>
 800a380:	4603      	mov	r3, r0
 800a382:	461a      	mov	r2, r3
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	3301      	adds	r3, #1
 800a38c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	3301      	adds	r3, #1
 800a392:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a394:	68f8      	ldr	r0, [r7, #12]
 800a396:	f7ff fa85 	bl	80098a4 <SWAPBYTE>
 800a39a:	4603      	mov	r3, r0
 800a39c:	461a      	mov	r2, r3
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	3301      	adds	r3, #1
 800a3a6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	3301      	adds	r3, #1
 800a3ac:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a3ae:	68f8      	ldr	r0, [r7, #12]
 800a3b0:	f7ff fa78 	bl	80098a4 <SWAPBYTE>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	461a      	mov	r2, r3
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	80da      	strh	r2, [r3, #6]
}
 800a3bc:	bf00      	nop
 800a3be:	3710      	adds	r7, #16
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}

0800a3c4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b082      	sub	sp, #8
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
 800a3cc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a3ce:	2180      	movs	r1, #128	; 0x80
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f003 f87b 	bl	800d4cc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a3d6:	2100      	movs	r1, #0
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f003 f877 	bl	800d4cc <USBD_LL_StallEP>
}
 800a3de:	bf00      	nop
 800a3e0:	3708      	adds	r7, #8
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}

0800a3e6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a3e6:	b580      	push	{r7, lr}
 800a3e8:	b086      	sub	sp, #24
 800a3ea:	af00      	add	r7, sp, #0
 800a3ec:	60f8      	str	r0, [r7, #12]
 800a3ee:	60b9      	str	r1, [r7, #8]
 800a3f0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d036      	beq.n	800a46a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a400:	6938      	ldr	r0, [r7, #16]
 800a402:	f000 f836 	bl	800a472 <USBD_GetLen>
 800a406:	4603      	mov	r3, r0
 800a408:	3301      	adds	r3, #1
 800a40a:	b29b      	uxth	r3, r3
 800a40c:	005b      	lsls	r3, r3, #1
 800a40e:	b29a      	uxth	r2, r3
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a414:	7dfb      	ldrb	r3, [r7, #23]
 800a416:	68ba      	ldr	r2, [r7, #8]
 800a418:	4413      	add	r3, r2
 800a41a:	687a      	ldr	r2, [r7, #4]
 800a41c:	7812      	ldrb	r2, [r2, #0]
 800a41e:	701a      	strb	r2, [r3, #0]
  idx++;
 800a420:	7dfb      	ldrb	r3, [r7, #23]
 800a422:	3301      	adds	r3, #1
 800a424:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a426:	7dfb      	ldrb	r3, [r7, #23]
 800a428:	68ba      	ldr	r2, [r7, #8]
 800a42a:	4413      	add	r3, r2
 800a42c:	2203      	movs	r2, #3
 800a42e:	701a      	strb	r2, [r3, #0]
  idx++;
 800a430:	7dfb      	ldrb	r3, [r7, #23]
 800a432:	3301      	adds	r3, #1
 800a434:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a436:	e013      	b.n	800a460 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a438:	7dfb      	ldrb	r3, [r7, #23]
 800a43a:	68ba      	ldr	r2, [r7, #8]
 800a43c:	4413      	add	r3, r2
 800a43e:	693a      	ldr	r2, [r7, #16]
 800a440:	7812      	ldrb	r2, [r2, #0]
 800a442:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	3301      	adds	r3, #1
 800a448:	613b      	str	r3, [r7, #16]
    idx++;
 800a44a:	7dfb      	ldrb	r3, [r7, #23]
 800a44c:	3301      	adds	r3, #1
 800a44e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a450:	7dfb      	ldrb	r3, [r7, #23]
 800a452:	68ba      	ldr	r2, [r7, #8]
 800a454:	4413      	add	r3, r2
 800a456:	2200      	movs	r2, #0
 800a458:	701a      	strb	r2, [r3, #0]
    idx++;
 800a45a:	7dfb      	ldrb	r3, [r7, #23]
 800a45c:	3301      	adds	r3, #1
 800a45e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a460:	693b      	ldr	r3, [r7, #16]
 800a462:	781b      	ldrb	r3, [r3, #0]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d1e7      	bne.n	800a438 <USBD_GetString+0x52>
 800a468:	e000      	b.n	800a46c <USBD_GetString+0x86>
    return;
 800a46a:	bf00      	nop
  }
}
 800a46c:	3718      	adds	r7, #24
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}

0800a472 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a472:	b480      	push	{r7}
 800a474:	b085      	sub	sp, #20
 800a476:	af00      	add	r7, sp, #0
 800a478:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a47a:	2300      	movs	r3, #0
 800a47c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a482:	e005      	b.n	800a490 <USBD_GetLen+0x1e>
  {
    len++;
 800a484:	7bfb      	ldrb	r3, [r7, #15]
 800a486:	3301      	adds	r3, #1
 800a488:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	3301      	adds	r3, #1
 800a48e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	781b      	ldrb	r3, [r3, #0]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d1f5      	bne.n	800a484 <USBD_GetLen+0x12>
  }

  return len;
 800a498:	7bfb      	ldrb	r3, [r7, #15]
}
 800a49a:	4618      	mov	r0, r3
 800a49c:	3714      	adds	r7, #20
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a4:	4770      	bx	lr

0800a4a6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a4a6:	b580      	push	{r7, lr}
 800a4a8:	b084      	sub	sp, #16
 800a4aa:	af00      	add	r7, sp, #0
 800a4ac:	60f8      	str	r0, [r7, #12]
 800a4ae:	60b9      	str	r1, [r7, #8]
 800a4b0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	2202      	movs	r2, #2
 800a4b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	687a      	ldr	r2, [r7, #4]
 800a4be:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	687a      	ldr	r2, [r7, #4]
 800a4c4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	68ba      	ldr	r2, [r7, #8]
 800a4ca:	2100      	movs	r1, #0
 800a4cc:	68f8      	ldr	r0, [r7, #12]
 800a4ce:	f003 f887 	bl	800d5e0 <USBD_LL_Transmit>

  return USBD_OK;
 800a4d2:	2300      	movs	r3, #0
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	3710      	adds	r7, #16
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}

0800a4dc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b084      	sub	sp, #16
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	60f8      	str	r0, [r7, #12]
 800a4e4:	60b9      	str	r1, [r7, #8]
 800a4e6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	68ba      	ldr	r2, [r7, #8]
 800a4ec:	2100      	movs	r1, #0
 800a4ee:	68f8      	ldr	r0, [r7, #12]
 800a4f0:	f003 f876 	bl	800d5e0 <USBD_LL_Transmit>

  return USBD_OK;
 800a4f4:	2300      	movs	r3, #0
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3710      	adds	r7, #16
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}

0800a4fe <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a4fe:	b580      	push	{r7, lr}
 800a500:	b084      	sub	sp, #16
 800a502:	af00      	add	r7, sp, #0
 800a504:	60f8      	str	r0, [r7, #12]
 800a506:	60b9      	str	r1, [r7, #8]
 800a508:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	2203      	movs	r2, #3
 800a50e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	687a      	ldr	r2, [r7, #4]
 800a516:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	687a      	ldr	r2, [r7, #4]
 800a51e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	68ba      	ldr	r2, [r7, #8]
 800a526:	2100      	movs	r1, #0
 800a528:	68f8      	ldr	r0, [r7, #12]
 800a52a:	f003 f87a 	bl	800d622 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a52e:	2300      	movs	r3, #0
}
 800a530:	4618      	mov	r0, r3
 800a532:	3710      	adds	r7, #16
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}

0800a538 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b084      	sub	sp, #16
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	60f8      	str	r0, [r7, #12]
 800a540:	60b9      	str	r1, [r7, #8]
 800a542:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	68ba      	ldr	r2, [r7, #8]
 800a548:	2100      	movs	r1, #0
 800a54a:	68f8      	ldr	r0, [r7, #12]
 800a54c:	f003 f869 	bl	800d622 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a550:	2300      	movs	r3, #0
}
 800a552:	4618      	mov	r0, r3
 800a554:	3710      	adds	r7, #16
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}

0800a55a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a55a:	b580      	push	{r7, lr}
 800a55c:	b082      	sub	sp, #8
 800a55e:	af00      	add	r7, sp, #0
 800a560:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2204      	movs	r2, #4
 800a566:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a56a:	2300      	movs	r3, #0
 800a56c:	2200      	movs	r2, #0
 800a56e:	2100      	movs	r1, #0
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	f003 f835 	bl	800d5e0 <USBD_LL_Transmit>

  return USBD_OK;
 800a576:	2300      	movs	r3, #0
}
 800a578:	4618      	mov	r0, r3
 800a57a:	3708      	adds	r7, #8
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}

0800a580 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b082      	sub	sp, #8
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2205      	movs	r2, #5
 800a58c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a590:	2300      	movs	r3, #0
 800a592:	2200      	movs	r2, #0
 800a594:	2100      	movs	r1, #0
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f003 f843 	bl	800d622 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a59c:	2300      	movs	r3, #0
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3708      	adds	r7, #8
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}

0800a5a6 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800a5a6:	b580      	push	{r7, lr}
 800a5a8:	b088      	sub	sp, #32
 800a5aa:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a5b0:	f107 0308 	add.w	r3, r7, #8
 800a5b4:	2218      	movs	r2, #24
 800a5b6:	2100      	movs	r1, #0
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f000 ff45 	bl	800b448 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a5be:	233f      	movs	r3, #63	; 0x3f
 800a5c0:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800a5c2:	2381      	movs	r3, #129	; 0x81
 800a5c4:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800a5c6:	1dfb      	adds	r3, r7, #7
 800a5c8:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a5ce:	f107 0308 	add.w	r3, r7, #8
 800a5d2:	2100      	movs	r1, #0
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f001 f9f7 	bl	800b9c8 <hci_send_req>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	da01      	bge.n	800a5e4 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800a5e0:	23ff      	movs	r3, #255	; 0xff
 800a5e2:	e000      	b.n	800a5e6 <aci_gap_set_non_discoverable+0x40>
  return status;
 800a5e4:	79fb      	ldrb	r3, [r7, #7]
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	3720      	adds	r7, #32
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}

0800a5ee <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 800a5ee:	b5b0      	push	{r4, r5, r7, lr}
 800a5f0:	b0ce      	sub	sp, #312	; 0x138
 800a5f2:	af00      	add	r7, sp, #0
 800a5f4:	4605      	mov	r5, r0
 800a5f6:	460c      	mov	r4, r1
 800a5f8:	4610      	mov	r0, r2
 800a5fa:	4619      	mov	r1, r3
 800a5fc:	1dfb      	adds	r3, r7, #7
 800a5fe:	462a      	mov	r2, r5
 800a600:	701a      	strb	r2, [r3, #0]
 800a602:	1d3b      	adds	r3, r7, #4
 800a604:	4622      	mov	r2, r4
 800a606:	801a      	strh	r2, [r3, #0]
 800a608:	1cbb      	adds	r3, r7, #2
 800a60a:	4602      	mov	r2, r0
 800a60c:	801a      	strh	r2, [r3, #0]
 800a60e:	1dbb      	adds	r3, r7, #6
 800a610:	460a      	mov	r2, r1
 800a612:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800a614:	f107 0310 	add.w	r3, r7, #16
 800a618:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800a61c:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800a620:	3308      	adds	r3, #8
 800a622:	f107 0210 	add.w	r2, r7, #16
 800a626:	4413      	add	r3, r2
 800a628:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800a62c:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800a630:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800a634:	4413      	add	r3, r2
 800a636:	3309      	adds	r3, #9
 800a638:	f107 0210 	add.w	r2, r7, #16
 800a63c:	4413      	add	r3, r2
 800a63e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a642:	f107 030f 	add.w	r3, r7, #15
 800a646:	2200      	movs	r2, #0
 800a648:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a64a:	2300      	movs	r3, #0
 800a64c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 800a650:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a654:	1dfa      	adds	r2, r7, #7
 800a656:	7812      	ldrb	r2, [r2, #0]
 800a658:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a65a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a65e:	3301      	adds	r3, #1
 800a660:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800a664:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a668:	1d3a      	adds	r2, r7, #4
 800a66a:	8812      	ldrh	r2, [r2, #0]
 800a66c:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800a670:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a674:	3302      	adds	r3, #2
 800a676:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800a67a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a67e:	1cba      	adds	r2, r7, #2
 800a680:	8812      	ldrh	r2, [r2, #0]
 800a682:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800a686:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a68a:	3302      	adds	r3, #2
 800a68c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800a690:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a694:	1dba      	adds	r2, r7, #6
 800a696:	7812      	ldrb	r2, [r2, #0]
 800a698:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800a69a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a69e:	3301      	adds	r3, #1
 800a6a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800a6a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a6a8:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800a6ac:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800a6ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a6b2:	3301      	adds	r3, #1
 800a6b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800a6b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a6bc:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800a6c0:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800a6c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a6c6:	3301      	adds	r3, #1
 800a6c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800a6cc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a6d0:	3308      	adds	r3, #8
 800a6d2:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800a6d6:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f000 fea4 	bl	800b428 <Osal_MemCpy>
    index_input += Local_Name_Length;
 800a6e0:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800a6e4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800a6e8:	4413      	add	r3, r2
 800a6ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800a6ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a6f2:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800a6f6:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800a6f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a6fc:	3301      	adds	r3, #1
 800a6fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800a702:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a706:	3301      	adds	r3, #1
 800a708:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800a70c:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 800a710:	4618      	mov	r0, r3
 800a712:	f000 fe89 	bl	800b428 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800a716:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800a71a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800a71e:	4413      	add	r3, r2
 800a720:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 800a724:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a728:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800a72c:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800a72e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a732:	3302      	adds	r3, #2
 800a734:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 800a738:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a73c:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800a740:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800a742:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a746:	3302      	adds	r3, #2
 800a748:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a74c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a750:	2218      	movs	r2, #24
 800a752:	2100      	movs	r1, #0
 800a754:	4618      	mov	r0, r3
 800a756:	f000 fe77 	bl	800b448 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a75a:	233f      	movs	r3, #63	; 0x3f
 800a75c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 800a760:	2383      	movs	r3, #131	; 0x83
 800a762:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a766:	f107 0310 	add.w	r3, r7, #16
 800a76a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a76e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a772:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a776:	f107 030f 	add.w	r3, r7, #15
 800a77a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a77e:	2301      	movs	r3, #1
 800a780:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a784:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a788:	2100      	movs	r1, #0
 800a78a:	4618      	mov	r0, r3
 800a78c:	f001 f91c 	bl	800b9c8 <hci_send_req>
 800a790:	4603      	mov	r3, r0
 800a792:	2b00      	cmp	r3, #0
 800a794:	da01      	bge.n	800a79a <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 800a796:	23ff      	movs	r3, #255	; 0xff
 800a798:	e002      	b.n	800a7a0 <aci_gap_set_discoverable+0x1b2>
  return status;
 800a79a:	f107 030f 	add.w	r3, r7, #15
 800a79e:	781b      	ldrb	r3, [r3, #0]
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bdb0      	pop	{r4, r5, r7, pc}

0800a7aa <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800a7aa:	b580      	push	{r7, lr}
 800a7ac:	b0cc      	sub	sp, #304	; 0x130
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	4602      	mov	r2, r0
 800a7b2:	1dfb      	adds	r3, r7, #7
 800a7b4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800a7b6:	f107 0310 	add.w	r3, r7, #16
 800a7ba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a7be:	f107 030f 	add.w	r3, r7, #15
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 800a7cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a7d0:	1dfa      	adds	r2, r7, #7
 800a7d2:	7812      	ldrb	r2, [r2, #0]
 800a7d4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a7d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a7da:	3301      	adds	r3, #1
 800a7dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a7e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a7e4:	2218      	movs	r2, #24
 800a7e6:	2100      	movs	r1, #0
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f000 fe2d 	bl	800b448 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a7ee:	233f      	movs	r3, #63	; 0x3f
 800a7f0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800a7f4:	2385      	movs	r3, #133	; 0x85
 800a7f6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a7fa:	f107 0310 	add.w	r3, r7, #16
 800a7fe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a802:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a806:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a80a:	f107 030f 	add.w	r3, r7, #15
 800a80e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a812:	2301      	movs	r3, #1
 800a814:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a818:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a81c:	2100      	movs	r1, #0
 800a81e:	4618      	mov	r0, r3
 800a820:	f001 f8d2 	bl	800b9c8 <hci_send_req>
 800a824:	4603      	mov	r3, r0
 800a826:	2b00      	cmp	r3, #0
 800a828:	da01      	bge.n	800a82e <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 800a82a:	23ff      	movs	r3, #255	; 0xff
 800a82c:	e002      	b.n	800a834 <aci_gap_set_io_capability+0x8a>
  return status;
 800a82e:	f107 030f 	add.w	r3, r7, #15
 800a832:	781b      	ldrb	r3, [r3, #0]
}
 800a834:	4618      	mov	r0, r3
 800a836:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}

0800a83e <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800a83e:	b5b0      	push	{r4, r5, r7, lr}
 800a840:	b0cc      	sub	sp, #304	; 0x130
 800a842:	af00      	add	r7, sp, #0
 800a844:	4605      	mov	r5, r0
 800a846:	460c      	mov	r4, r1
 800a848:	4610      	mov	r0, r2
 800a84a:	4619      	mov	r1, r3
 800a84c:	1dfb      	adds	r3, r7, #7
 800a84e:	462a      	mov	r2, r5
 800a850:	701a      	strb	r2, [r3, #0]
 800a852:	1dbb      	adds	r3, r7, #6
 800a854:	4622      	mov	r2, r4
 800a856:	701a      	strb	r2, [r3, #0]
 800a858:	1d7b      	adds	r3, r7, #5
 800a85a:	4602      	mov	r2, r0
 800a85c:	701a      	strb	r2, [r3, #0]
 800a85e:	1d3b      	adds	r3, r7, #4
 800a860:	460a      	mov	r2, r1
 800a862:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800a864:	f107 0310 	add.w	r3, r7, #16
 800a868:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a86c:	f107 030f 	add.w	r3, r7, #15
 800a870:	2200      	movs	r2, #0
 800a872:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a874:	2300      	movs	r3, #0
 800a876:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800a87a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a87e:	1dfa      	adds	r2, r7, #7
 800a880:	7812      	ldrb	r2, [r2, #0]
 800a882:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a884:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a888:	3301      	adds	r3, #1
 800a88a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 800a88e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a892:	1dba      	adds	r2, r7, #6
 800a894:	7812      	ldrb	r2, [r2, #0]
 800a896:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a898:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a89c:	3301      	adds	r3, #1
 800a89e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 800a8a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a8a6:	1d7a      	adds	r2, r7, #5
 800a8a8:	7812      	ldrb	r2, [r2, #0]
 800a8aa:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800a8ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a8b0:	3301      	adds	r3, #1
 800a8b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800a8b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a8ba:	1d3a      	adds	r2, r7, #4
 800a8bc:	7812      	ldrb	r2, [r2, #0]
 800a8be:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800a8c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a8c4:	3301      	adds	r3, #1
 800a8c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800a8ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a8ce:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800a8d2:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800a8d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a8d8:	3301      	adds	r3, #1
 800a8da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800a8de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a8e2:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 800a8e6:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800a8e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a8ec:	3301      	adds	r3, #1
 800a8ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800a8f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a8f6:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800a8fa:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800a8fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a900:	3301      	adds	r3, #1
 800a902:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800a906:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a90a:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800a90e:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800a912:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a916:	3304      	adds	r3, #4
 800a918:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800a91c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a920:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800a924:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800a926:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a92a:	3301      	adds	r3, #1
 800a92c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a930:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a934:	2218      	movs	r2, #24
 800a936:	2100      	movs	r1, #0
 800a938:	4618      	mov	r0, r3
 800a93a:	f000 fd85 	bl	800b448 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a93e:	233f      	movs	r3, #63	; 0x3f
 800a940:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800a944:	2386      	movs	r3, #134	; 0x86
 800a946:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a94a:	f107 0310 	add.w	r3, r7, #16
 800a94e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a952:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a956:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a95a:	f107 030f 	add.w	r3, r7, #15
 800a95e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a962:	2301      	movs	r3, #1
 800a964:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a968:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a96c:	2100      	movs	r1, #0
 800a96e:	4618      	mov	r0, r3
 800a970:	f001 f82a 	bl	800b9c8 <hci_send_req>
 800a974:	4603      	mov	r3, r0
 800a976:	2b00      	cmp	r3, #0
 800a978:	da01      	bge.n	800a97e <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 800a97a:	23ff      	movs	r3, #255	; 0xff
 800a97c:	e002      	b.n	800a984 <aci_gap_set_authentication_requirement+0x146>
  return status;
 800a97e:	f107 030f 	add.w	r3, r7, #15
 800a982:	781b      	ldrb	r3, [r3, #0]
}
 800a984:	4618      	mov	r0, r3
 800a986:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bdb0      	pop	{r4, r5, r7, pc}

0800a98e <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800a98e:	b590      	push	{r4, r7, lr}
 800a990:	b0cd      	sub	sp, #308	; 0x134
 800a992:	af00      	add	r7, sp, #0
 800a994:	4604      	mov	r4, r0
 800a996:	4608      	mov	r0, r1
 800a998:	4611      	mov	r1, r2
 800a99a:	463a      	mov	r2, r7
 800a99c:	6013      	str	r3, [r2, #0]
 800a99e:	1dfb      	adds	r3, r7, #7
 800a9a0:	4622      	mov	r2, r4
 800a9a2:	701a      	strb	r2, [r3, #0]
 800a9a4:	1dbb      	adds	r3, r7, #6
 800a9a6:	4602      	mov	r2, r0
 800a9a8:	701a      	strb	r2, [r3, #0]
 800a9aa:	1d7b      	adds	r3, r7, #5
 800a9ac:	460a      	mov	r2, r1
 800a9ae:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800a9b0:	f107 0310 	add.w	r3, r7, #16
 800a9b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800a9b8:	f107 0308 	add.w	r3, r7, #8
 800a9bc:	2207      	movs	r2, #7
 800a9be:	2100      	movs	r1, #0
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	f000 fd41 	bl	800b448 <Osal_MemSet>
  int index_input = 0;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 800a9cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a9d0:	1dfa      	adds	r2, r7, #7
 800a9d2:	7812      	ldrb	r2, [r2, #0]
 800a9d4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a9d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a9da:	3301      	adds	r3, #1
 800a9dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 800a9e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a9e4:	1dba      	adds	r2, r7, #6
 800a9e6:	7812      	ldrb	r2, [r2, #0]
 800a9e8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a9ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a9ee:	3301      	adds	r3, #1
 800a9f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 800a9f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a9f8:	1d7a      	adds	r2, r7, #5
 800a9fa:	7812      	ldrb	r2, [r2, #0]
 800a9fc:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800a9fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aa02:	3301      	adds	r3, #1
 800aa04:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800aa08:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800aa0c:	2218      	movs	r2, #24
 800aa0e:	2100      	movs	r1, #0
 800aa10:	4618      	mov	r0, r3
 800aa12:	f000 fd19 	bl	800b448 <Osal_MemSet>
  rq.ogf = 0x3f;
 800aa16:	233f      	movs	r3, #63	; 0x3f
 800aa18:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800aa1c:	238a      	movs	r3, #138	; 0x8a
 800aa1e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800aa22:	f107 0310 	add.w	r3, r7, #16
 800aa26:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800aa2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aa2e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800aa32:	f107 0308 	add.w	r3, r7, #8
 800aa36:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800aa3a:	2307      	movs	r3, #7
 800aa3c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800aa40:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800aa44:	2100      	movs	r1, #0
 800aa46:	4618      	mov	r0, r3
 800aa48:	f000 ffbe 	bl	800b9c8 <hci_send_req>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	da01      	bge.n	800aa56 <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 800aa52:	23ff      	movs	r3, #255	; 0xff
 800aa54:	e021      	b.n	800aa9a <aci_gap_init+0x10c>
  if ( resp.Status )
 800aa56:	f107 0308 	add.w	r3, r7, #8
 800aa5a:	781b      	ldrb	r3, [r3, #0]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d003      	beq.n	800aa68 <aci_gap_init+0xda>
    return resp.Status;
 800aa60:	f107 0308 	add.w	r3, r7, #8
 800aa64:	781b      	ldrb	r3, [r3, #0]
 800aa66:	e018      	b.n	800aa9a <aci_gap_init+0x10c>
  *Service_Handle = resp.Service_Handle;
 800aa68:	f107 0308 	add.w	r3, r7, #8
 800aa6c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800aa70:	b29a      	uxth	r2, r3
 800aa72:	463b      	mov	r3, r7
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800aa78:	f107 0308 	add.w	r3, r7, #8
 800aa7c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800aa80:	b29a      	uxth	r2, r3
 800aa82:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800aa86:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800aa88:	f107 0308 	add.w	r3, r7, #8
 800aa8c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800aa90:	b29a      	uxth	r2, r3
 800aa92:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800aa96:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800aa98:	2300      	movs	r3, #0
}
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd90      	pop	{r4, r7, pc}

0800aaa4 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b0cc      	sub	sp, #304	; 0x130
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	4602      	mov	r2, r0
 800aaac:	463b      	mov	r3, r7
 800aaae:	6019      	str	r1, [r3, #0]
 800aab0:	1dfb      	adds	r3, r7, #7
 800aab2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800aab4:	f107 0310 	add.w	r3, r7, #16
 800aab8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800aabc:	f107 030f 	add.w	r3, r7, #15
 800aac0:	2200      	movs	r2, #0
 800aac2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800aac4:	2300      	movs	r3, #0
 800aac6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 800aaca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aace:	1dfa      	adds	r2, r7, #7
 800aad0:	7812      	ldrb	r2, [r2, #0]
 800aad2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800aad4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aad8:	3301      	adds	r3, #1
 800aada:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800aade:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aae2:	1c58      	adds	r0, r3, #1
 800aae4:	1dfb      	adds	r3, r7, #7
 800aae6:	781a      	ldrb	r2, [r3, #0]
 800aae8:	463b      	mov	r3, r7
 800aaea:	6819      	ldr	r1, [r3, #0]
 800aaec:	f000 fc9c 	bl	800b428 <Osal_MemCpy>
  index_input += AdvDataLen;
 800aaf0:	1dfb      	adds	r3, r7, #7
 800aaf2:	781b      	ldrb	r3, [r3, #0]
 800aaf4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800aaf8:	4413      	add	r3, r2
 800aafa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800aafe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ab02:	2218      	movs	r2, #24
 800ab04:	2100      	movs	r1, #0
 800ab06:	4618      	mov	r0, r3
 800ab08:	f000 fc9e 	bl	800b448 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ab0c:	233f      	movs	r3, #63	; 0x3f
 800ab0e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 800ab12:	238e      	movs	r3, #142	; 0x8e
 800ab14:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800ab18:	f107 0310 	add.w	r3, r7, #16
 800ab1c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ab20:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ab24:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800ab28:	f107 030f 	add.w	r3, r7, #15
 800ab2c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800ab30:	2301      	movs	r3, #1
 800ab32:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ab36:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ab3a:	2100      	movs	r1, #0
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f000 ff43 	bl	800b9c8 <hci_send_req>
 800ab42:	4603      	mov	r3, r0
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	da01      	bge.n	800ab4c <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 800ab48:	23ff      	movs	r3, #255	; 0xff
 800ab4a:	e002      	b.n	800ab52 <aci_gap_update_adv_data+0xae>
  return status;
 800ab4c:	f107 030f 	add.w	r3, r7, #15
 800ab50:	781b      	ldrb	r3, [r3, #0]
}
 800ab52:	4618      	mov	r0, r3
 800ab54:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	bd80      	pop	{r7, pc}

0800ab5c <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b088      	sub	sp, #32
 800ab60:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800ab62:	2300      	movs	r3, #0
 800ab64:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ab66:	f107 0308 	add.w	r3, r7, #8
 800ab6a:	2218      	movs	r2, #24
 800ab6c:	2100      	movs	r1, #0
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f000 fc6a 	bl	800b448 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ab74:	233f      	movs	r3, #63	; 0x3f
 800ab76:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800ab78:	2392      	movs	r3, #146	; 0x92
 800ab7a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800ab7c:	1dfb      	adds	r3, r7, #7
 800ab7e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800ab80:	2301      	movs	r3, #1
 800ab82:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ab84:	f107 0308 	add.w	r3, r7, #8
 800ab88:	2100      	movs	r1, #0
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f000 ff1c 	bl	800b9c8 <hci_send_req>
 800ab90:	4603      	mov	r3, r0
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	da01      	bge.n	800ab9a <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 800ab96:	23ff      	movs	r3, #255	; 0xff
 800ab98:	e000      	b.n	800ab9c <aci_gap_configure_whitelist+0x40>
  return status;
 800ab9a:	79fb      	ldrb	r3, [r7, #7]
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3720      	adds	r7, #32
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}

0800aba4 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b088      	sub	sp, #32
 800aba8:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800abaa:	2300      	movs	r3, #0
 800abac:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800abae:	f107 0308 	add.w	r3, r7, #8
 800abb2:	2218      	movs	r2, #24
 800abb4:	2100      	movs	r1, #0
 800abb6:	4618      	mov	r0, r3
 800abb8:	f000 fc46 	bl	800b448 <Osal_MemSet>
  rq.ogf = 0x3f;
 800abbc:	233f      	movs	r3, #63	; 0x3f
 800abbe:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800abc0:	f240 1301 	movw	r3, #257	; 0x101
 800abc4:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800abc6:	1dfb      	adds	r3, r7, #7
 800abc8:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800abca:	2301      	movs	r3, #1
 800abcc:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800abce:	f107 0308 	add.w	r3, r7, #8
 800abd2:	2100      	movs	r1, #0
 800abd4:	4618      	mov	r0, r3
 800abd6:	f000 fef7 	bl	800b9c8 <hci_send_req>
 800abda:	4603      	mov	r3, r0
 800abdc:	2b00      	cmp	r3, #0
 800abde:	da01      	bge.n	800abe4 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800abe0:	23ff      	movs	r3, #255	; 0xff
 800abe2:	e000      	b.n	800abe6 <aci_gatt_init+0x42>
  return status;
 800abe4:	79fb      	ldrb	r3, [r7, #7]
}
 800abe6:	4618      	mov	r0, r3
 800abe8:	3720      	adds	r7, #32
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}

0800abee <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800abee:	b590      	push	{r4, r7, lr}
 800abf0:	b0cf      	sub	sp, #316	; 0x13c
 800abf2:	af00      	add	r7, sp, #0
 800abf4:	4604      	mov	r4, r0
 800abf6:	4638      	mov	r0, r7
 800abf8:	6001      	str	r1, [r0, #0]
 800abfa:	4610      	mov	r0, r2
 800abfc:	4619      	mov	r1, r3
 800abfe:	1dfb      	adds	r3, r7, #7
 800ac00:	4622      	mov	r2, r4
 800ac02:	701a      	strb	r2, [r3, #0]
 800ac04:	1dbb      	adds	r3, r7, #6
 800ac06:	4602      	mov	r2, r0
 800ac08:	701a      	strb	r2, [r3, #0]
 800ac0a:	1d7b      	adds	r3, r7, #5
 800ac0c:	460a      	mov	r2, r1
 800ac0e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800ac10:	f107 0310 	add.w	r3, r7, #16
 800ac14:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800ac18:	1dfb      	adds	r3, r7, #7
 800ac1a:	781b      	ldrb	r3, [r3, #0]
 800ac1c:	2b01      	cmp	r3, #1
 800ac1e:	d007      	beq.n	800ac30 <aci_gatt_add_service+0x42>
 800ac20:	1dfb      	adds	r3, r7, #7
 800ac22:	781b      	ldrb	r3, [r3, #0]
 800ac24:	2b02      	cmp	r3, #2
 800ac26:	d101      	bne.n	800ac2c <aci_gatt_add_service+0x3e>
 800ac28:	2311      	movs	r3, #17
 800ac2a:	e002      	b.n	800ac32 <aci_gatt_add_service+0x44>
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	e000      	b.n	800ac32 <aci_gatt_add_service+0x44>
 800ac30:	2303      	movs	r3, #3
 800ac32:	f107 0210 	add.w	r2, r7, #16
 800ac36:	4413      	add	r3, r2
 800ac38:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800ac3c:	f107 030c 	add.w	r3, r7, #12
 800ac40:	2203      	movs	r2, #3
 800ac42:	2100      	movs	r1, #0
 800ac44:	4618      	mov	r0, r3
 800ac46:	f000 fbff 	bl	800b448 <Osal_MemSet>
  int index_input = 0;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800ac50:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ac54:	1dfa      	adds	r2, r7, #7
 800ac56:	7812      	ldrb	r2, [r2, #0]
 800ac58:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ac5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ac5e:	3301      	adds	r3, #1
 800ac60:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800ac64:	1dfb      	adds	r3, r7, #7
 800ac66:	781b      	ldrb	r3, [r3, #0]
 800ac68:	2b01      	cmp	r3, #1
 800ac6a:	d002      	beq.n	800ac72 <aci_gatt_add_service+0x84>
 800ac6c:	2b02      	cmp	r3, #2
 800ac6e:	d004      	beq.n	800ac7a <aci_gatt_add_service+0x8c>
 800ac70:	e007      	b.n	800ac82 <aci_gatt_add_service+0x94>
    {
      case 1: size = 2; break;
 800ac72:	2302      	movs	r3, #2
 800ac74:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800ac78:	e005      	b.n	800ac86 <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 800ac7a:	2310      	movs	r3, #16
 800ac7c:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800ac80:	e001      	b.n	800ac86 <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 800ac82:	2347      	movs	r3, #71	; 0x47
 800ac84:	e05d      	b.n	800ad42 <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800ac86:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ac8a:	1c58      	adds	r0, r3, #1
 800ac8c:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800ac90:	463b      	mov	r3, r7
 800ac92:	6819      	ldr	r1, [r3, #0]
 800ac94:	f000 fbc8 	bl	800b428 <Osal_MemCpy>
    index_input += size;
 800ac98:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800ac9c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800aca0:	4413      	add	r3, r2
 800aca2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 800aca6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800acaa:	1dba      	adds	r2, r7, #6
 800acac:	7812      	ldrb	r2, [r2, #0]
 800acae:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800acb0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800acb4:	3301      	adds	r3, #1
 800acb6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800acba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800acbe:	1d7a      	adds	r2, r7, #5
 800acc0:	7812      	ldrb	r2, [r2, #0]
 800acc2:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800acc4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800acc8:	3301      	adds	r3, #1
 800acca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800acce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800acd2:	2218      	movs	r2, #24
 800acd4:	2100      	movs	r1, #0
 800acd6:	4618      	mov	r0, r3
 800acd8:	f000 fbb6 	bl	800b448 <Osal_MemSet>
  rq.ogf = 0x3f;
 800acdc:	233f      	movs	r3, #63	; 0x3f
 800acde:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 800ace2:	f44f 7381 	mov.w	r3, #258	; 0x102
 800ace6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800acea:	f107 0310 	add.w	r3, r7, #16
 800acee:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800acf2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800acf6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800acfa:	f107 030c 	add.w	r3, r7, #12
 800acfe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800ad02:	2303      	movs	r3, #3
 800ad04:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ad08:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ad0c:	2100      	movs	r1, #0
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f000 fe5a 	bl	800b9c8 <hci_send_req>
 800ad14:	4603      	mov	r3, r0
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	da01      	bge.n	800ad1e <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 800ad1a:	23ff      	movs	r3, #255	; 0xff
 800ad1c:	e011      	b.n	800ad42 <aci_gatt_add_service+0x154>
  if ( resp.Status )
 800ad1e:	f107 030c 	add.w	r3, r7, #12
 800ad22:	781b      	ldrb	r3, [r3, #0]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d003      	beq.n	800ad30 <aci_gatt_add_service+0x142>
    return resp.Status;
 800ad28:	f107 030c 	add.w	r3, r7, #12
 800ad2c:	781b      	ldrb	r3, [r3, #0]
 800ad2e:	e008      	b.n	800ad42 <aci_gatt_add_service+0x154>
  *Service_Handle = resp.Service_Handle;
 800ad30:	f107 030c 	add.w	r3, r7, #12
 800ad34:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ad38:	b29a      	uxth	r2, r3
 800ad3a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ad3e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800ad40:	2300      	movs	r3, #0
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd90      	pop	{r4, r7, pc}

0800ad4c <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800ad4c:	b590      	push	{r4, r7, lr}
 800ad4e:	b0d1      	sub	sp, #324	; 0x144
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	4604      	mov	r4, r0
 800ad54:	4608      	mov	r0, r1
 800ad56:	f107 0108 	add.w	r1, r7, #8
 800ad5a:	600a      	str	r2, [r1, #0]
 800ad5c:	4619      	mov	r1, r3
 800ad5e:	f107 030e 	add.w	r3, r7, #14
 800ad62:	4622      	mov	r2, r4
 800ad64:	801a      	strh	r2, [r3, #0]
 800ad66:	f107 030d 	add.w	r3, r7, #13
 800ad6a:	4602      	mov	r2, r0
 800ad6c:	701a      	strb	r2, [r3, #0]
 800ad6e:	1dbb      	adds	r3, r7, #6
 800ad70:	460a      	mov	r2, r1
 800ad72:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800ad74:	f107 0318 	add.w	r3, r7, #24
 800ad78:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800ad7c:	f107 030d 	add.w	r3, r7, #13
 800ad80:	781b      	ldrb	r3, [r3, #0]
 800ad82:	2b01      	cmp	r3, #1
 800ad84:	d008      	beq.n	800ad98 <aci_gatt_add_char+0x4c>
 800ad86:	f107 030d 	add.w	r3, r7, #13
 800ad8a:	781b      	ldrb	r3, [r3, #0]
 800ad8c:	2b02      	cmp	r3, #2
 800ad8e:	d101      	bne.n	800ad94 <aci_gatt_add_char+0x48>
 800ad90:	2313      	movs	r3, #19
 800ad92:	e002      	b.n	800ad9a <aci_gatt_add_char+0x4e>
 800ad94:	2303      	movs	r3, #3
 800ad96:	e000      	b.n	800ad9a <aci_gatt_add_char+0x4e>
 800ad98:	2305      	movs	r3, #5
 800ad9a:	f107 0218 	add.w	r2, r7, #24
 800ad9e:	4413      	add	r3, r2
 800ada0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800ada4:	f107 0314 	add.w	r3, r7, #20
 800ada8:	2203      	movs	r2, #3
 800adaa:	2100      	movs	r1, #0
 800adac:	4618      	mov	r0, r3
 800adae:	f000 fb4b 	bl	800b448 <Osal_MemSet>
  int index_input = 0;
 800adb2:	2300      	movs	r3, #0
 800adb4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 800adb8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800adbc:	f107 020e 	add.w	r2, r7, #14
 800adc0:	8812      	ldrh	r2, [r2, #0]
 800adc2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800adc4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800adc8:	3302      	adds	r3, #2
 800adca:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800adce:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800add2:	f107 020d 	add.w	r2, r7, #13
 800add6:	7812      	ldrb	r2, [r2, #0]
 800add8:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800adda:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800adde:	3301      	adds	r3, #1
 800ade0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800ade4:	f107 030d 	add.w	r3, r7, #13
 800ade8:	781b      	ldrb	r3, [r3, #0]
 800adea:	2b01      	cmp	r3, #1
 800adec:	d002      	beq.n	800adf4 <aci_gatt_add_char+0xa8>
 800adee:	2b02      	cmp	r3, #2
 800adf0:	d004      	beq.n	800adfc <aci_gatt_add_char+0xb0>
 800adf2:	e007      	b.n	800ae04 <aci_gatt_add_char+0xb8>
    {
      case 1: size = 2; break;
 800adf4:	2302      	movs	r3, #2
 800adf6:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800adfa:	e005      	b.n	800ae08 <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 800adfc:	2310      	movs	r3, #16
 800adfe:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800ae02:	e001      	b.n	800ae08 <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 800ae04:	2347      	movs	r3, #71	; 0x47
 800ae06:	e086      	b.n	800af16 <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800ae08:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800ae0c:	1cd8      	adds	r0, r3, #3
 800ae0e:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800ae12:	f107 0308 	add.w	r3, r7, #8
 800ae16:	6819      	ldr	r1, [r3, #0]
 800ae18:	f000 fb06 	bl	800b428 <Osal_MemCpy>
    index_input += size;
 800ae1c:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800ae20:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800ae24:	4413      	add	r3, r2
 800ae26:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800ae2a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ae2e:	1dba      	adds	r2, r7, #6
 800ae30:	8812      	ldrh	r2, [r2, #0]
 800ae32:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800ae34:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ae38:	3302      	adds	r3, #2
 800ae3a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800ae3e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ae42:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800ae46:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800ae48:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ae4c:	3301      	adds	r3, #1
 800ae4e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800ae52:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ae56:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800ae5a:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800ae5c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ae60:	3301      	adds	r3, #1
 800ae62:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800ae66:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ae6a:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800ae6e:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800ae70:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ae74:	3301      	adds	r3, #1
 800ae76:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800ae7a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ae7e:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800ae82:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800ae84:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ae88:	3301      	adds	r3, #1
 800ae8a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800ae8e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ae92:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800ae96:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800ae98:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ae9c:	3301      	adds	r3, #1
 800ae9e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800aea2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800aea6:	2218      	movs	r2, #24
 800aea8:	2100      	movs	r1, #0
 800aeaa:	4618      	mov	r0, r3
 800aeac:	f000 facc 	bl	800b448 <Osal_MemSet>
  rq.ogf = 0x3f;
 800aeb0:	233f      	movs	r3, #63	; 0x3f
 800aeb2:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800aeb6:	f44f 7382 	mov.w	r3, #260	; 0x104
 800aeba:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800aebe:	f107 0318 	add.w	r3, r7, #24
 800aec2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800aec6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800aeca:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800aece:	f107 0314 	add.w	r3, r7, #20
 800aed2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800aed6:	2303      	movs	r3, #3
 800aed8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800aedc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800aee0:	2100      	movs	r1, #0
 800aee2:	4618      	mov	r0, r3
 800aee4:	f000 fd70 	bl	800b9c8 <hci_send_req>
 800aee8:	4603      	mov	r3, r0
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	da01      	bge.n	800aef2 <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 800aeee:	23ff      	movs	r3, #255	; 0xff
 800aef0:	e011      	b.n	800af16 <aci_gatt_add_char+0x1ca>
  if ( resp.Status )
 800aef2:	f107 0314 	add.w	r3, r7, #20
 800aef6:	781b      	ldrb	r3, [r3, #0]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d003      	beq.n	800af04 <aci_gatt_add_char+0x1b8>
    return resp.Status;
 800aefc:	f107 0314 	add.w	r3, r7, #20
 800af00:	781b      	ldrb	r3, [r3, #0]
 800af02:	e008      	b.n	800af16 <aci_gatt_add_char+0x1ca>
  *Char_Handle = resp.Char_Handle;
 800af04:	f107 0314 	add.w	r3, r7, #20
 800af08:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800af0c:	b29a      	uxth	r2, r3
 800af0e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800af12:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800af14:	2300      	movs	r3, #0
}
 800af16:	4618      	mov	r0, r3
 800af18:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd90      	pop	{r4, r7, pc}

0800af20 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800af20:	b5b0      	push	{r4, r5, r7, lr}
 800af22:	b0cc      	sub	sp, #304	; 0x130
 800af24:	af00      	add	r7, sp, #0
 800af26:	4605      	mov	r5, r0
 800af28:	460c      	mov	r4, r1
 800af2a:	4610      	mov	r0, r2
 800af2c:	4619      	mov	r1, r3
 800af2e:	1dbb      	adds	r3, r7, #6
 800af30:	462a      	mov	r2, r5
 800af32:	801a      	strh	r2, [r3, #0]
 800af34:	1d3b      	adds	r3, r7, #4
 800af36:	4622      	mov	r2, r4
 800af38:	801a      	strh	r2, [r3, #0]
 800af3a:	1cfb      	adds	r3, r7, #3
 800af3c:	4602      	mov	r2, r0
 800af3e:	701a      	strb	r2, [r3, #0]
 800af40:	1cbb      	adds	r3, r7, #2
 800af42:	460a      	mov	r2, r1
 800af44:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800af46:	f107 0310 	add.w	r3, r7, #16
 800af4a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800af4e:	f107 030f 	add.w	r3, r7, #15
 800af52:	2200      	movs	r2, #0
 800af54:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800af56:	2300      	movs	r3, #0
 800af58:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 800af5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af60:	1dba      	adds	r2, r7, #6
 800af62:	8812      	ldrh	r2, [r2, #0]
 800af64:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800af66:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800af6a:	3302      	adds	r3, #2
 800af6c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800af70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af74:	1d3a      	adds	r2, r7, #4
 800af76:	8812      	ldrh	r2, [r2, #0]
 800af78:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800af7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800af7e:	3302      	adds	r3, #2
 800af80:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 800af84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af88:	1cfa      	adds	r2, r7, #3
 800af8a:	7812      	ldrb	r2, [r2, #0]
 800af8c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800af8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800af92:	3301      	adds	r3, #1
 800af94:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800af98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af9c:	1cba      	adds	r2, r7, #2
 800af9e:	7812      	ldrb	r2, [r2, #0]
 800afa0:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800afa2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800afa6:	3301      	adds	r3, #1
 800afa8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800afac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800afb0:	1d98      	adds	r0, r3, #6
 800afb2:	1cbb      	adds	r3, r7, #2
 800afb4:	781b      	ldrb	r3, [r3, #0]
 800afb6:	461a      	mov	r2, r3
 800afb8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800afbc:	f000 fa34 	bl	800b428 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800afc0:	1cbb      	adds	r3, r7, #2
 800afc2:	781b      	ldrb	r3, [r3, #0]
 800afc4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800afc8:	4413      	add	r3, r2
 800afca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800afce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800afd2:	2218      	movs	r2, #24
 800afd4:	2100      	movs	r1, #0
 800afd6:	4618      	mov	r0, r3
 800afd8:	f000 fa36 	bl	800b448 <Osal_MemSet>
  rq.ogf = 0x3f;
 800afdc:	233f      	movs	r3, #63	; 0x3f
 800afde:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800afe2:	f44f 7383 	mov.w	r3, #262	; 0x106
 800afe6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800afea:	f107 0310 	add.w	r3, r7, #16
 800afee:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800aff2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aff6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800affa:	f107 030f 	add.w	r3, r7, #15
 800affe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b002:	2301      	movs	r3, #1
 800b004:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b008:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b00c:	2100      	movs	r1, #0
 800b00e:	4618      	mov	r0, r3
 800b010:	f000 fcda 	bl	800b9c8 <hci_send_req>
 800b014:	4603      	mov	r3, r0
 800b016:	2b00      	cmp	r3, #0
 800b018:	da01      	bge.n	800b01e <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 800b01a:	23ff      	movs	r3, #255	; 0xff
 800b01c:	e002      	b.n	800b024 <aci_gatt_update_char_value+0x104>
  return status;
 800b01e:	f107 030f 	add.w	r3, r7, #15
 800b022:	781b      	ldrb	r3, [r3, #0]
}
 800b024:	4618      	mov	r0, r3
 800b026:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bdb0      	pop	{r4, r5, r7, pc}

0800b02e <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800b02e:	b580      	push	{r7, lr}
 800b030:	b0cc      	sub	sp, #304	; 0x130
 800b032:	af00      	add	r7, sp, #0
 800b034:	463b      	mov	r3, r7
 800b036:	601a      	str	r2, [r3, #0]
 800b038:	1dfb      	adds	r3, r7, #7
 800b03a:	4602      	mov	r2, r0
 800b03c:	701a      	strb	r2, [r3, #0]
 800b03e:	1dbb      	adds	r3, r7, #6
 800b040:	460a      	mov	r2, r1
 800b042:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800b044:	f107 0310 	add.w	r3, r7, #16
 800b048:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b04c:	f107 030f 	add.w	r3, r7, #15
 800b050:	2200      	movs	r2, #0
 800b052:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b054:	2300      	movs	r3, #0
 800b056:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 800b05a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b05e:	1dfa      	adds	r2, r7, #7
 800b060:	7812      	ldrb	r2, [r2, #0]
 800b062:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b064:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b068:	3301      	adds	r3, #1
 800b06a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800b06e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b072:	1dba      	adds	r2, r7, #6
 800b074:	7812      	ldrb	r2, [r2, #0]
 800b076:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800b078:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b07c:	3301      	adds	r3, #1
 800b07e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800b082:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b086:	1c98      	adds	r0, r3, #2
 800b088:	1dbb      	adds	r3, r7, #6
 800b08a:	781a      	ldrb	r2, [r3, #0]
 800b08c:	463b      	mov	r3, r7
 800b08e:	6819      	ldr	r1, [r3, #0]
 800b090:	f000 f9ca 	bl	800b428 <Osal_MemCpy>
  index_input += Length;
 800b094:	1dbb      	adds	r3, r7, #6
 800b096:	781b      	ldrb	r3, [r3, #0]
 800b098:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800b09c:	4413      	add	r3, r2
 800b09e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b0a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b0a6:	2218      	movs	r2, #24
 800b0a8:	2100      	movs	r1, #0
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	f000 f9cc 	bl	800b448 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b0b0:	233f      	movs	r3, #63	; 0x3f
 800b0b2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800b0b6:	230c      	movs	r3, #12
 800b0b8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b0bc:	f107 0310 	add.w	r3, r7, #16
 800b0c0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b0c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b0c8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b0cc:	f107 030f 	add.w	r3, r7, #15
 800b0d0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b0da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b0de:	2100      	movs	r1, #0
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	f000 fc71 	bl	800b9c8 <hci_send_req>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	da01      	bge.n	800b0f0 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 800b0ec:	23ff      	movs	r3, #255	; 0xff
 800b0ee:	e002      	b.n	800b0f6 <aci_hal_write_config_data+0xc8>
  return status;
 800b0f0:	f107 030f 	add.w	r3, r7, #15
 800b0f4:	781b      	ldrb	r3, [r3, #0]
}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bd80      	pop	{r7, pc}

0800b100 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b0cc      	sub	sp, #304	; 0x130
 800b104:	af00      	add	r7, sp, #0
 800b106:	4602      	mov	r2, r0
 800b108:	1dfb      	adds	r3, r7, #7
 800b10a:	701a      	strb	r2, [r3, #0]
 800b10c:	1dbb      	adds	r3, r7, #6
 800b10e:	460a      	mov	r2, r1
 800b110:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800b112:	f107 0310 	add.w	r3, r7, #16
 800b116:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b11a:	f107 030f 	add.w	r3, r7, #15
 800b11e:	2200      	movs	r2, #0
 800b120:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b122:	2300      	movs	r3, #0
 800b124:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 800b128:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b12c:	1dfa      	adds	r2, r7, #7
 800b12e:	7812      	ldrb	r2, [r2, #0]
 800b130:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b132:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b136:	3301      	adds	r3, #1
 800b138:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 800b13c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b140:	1dba      	adds	r2, r7, #6
 800b142:	7812      	ldrb	r2, [r2, #0]
 800b144:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800b146:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b14a:	3301      	adds	r3, #1
 800b14c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b150:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b154:	2218      	movs	r2, #24
 800b156:	2100      	movs	r1, #0
 800b158:	4618      	mov	r0, r3
 800b15a:	f000 f975 	bl	800b448 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b15e:	233f      	movs	r3, #63	; 0x3f
 800b160:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800b164:	230f      	movs	r3, #15
 800b166:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b16a:	f107 0310 	add.w	r3, r7, #16
 800b16e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b172:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b176:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b17a:	f107 030f 	add.w	r3, r7, #15
 800b17e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b182:	2301      	movs	r3, #1
 800b184:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b188:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b18c:	2100      	movs	r1, #0
 800b18e:	4618      	mov	r0, r3
 800b190:	f000 fc1a 	bl	800b9c8 <hci_send_req>
 800b194:	4603      	mov	r3, r0
 800b196:	2b00      	cmp	r3, #0
 800b198:	da01      	bge.n	800b19e <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 800b19a:	23ff      	movs	r3, #255	; 0xff
 800b19c:	e002      	b.n	800b1a4 <aci_hal_set_tx_power_level+0xa4>
  return status;
 800b19e:	f107 030f 	add.w	r3, r7, #15
 800b1a2:	781b      	ldrb	r3, [r3, #0]
}
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}

0800b1ae <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800b1ae:	b580      	push	{r7, lr}
 800b1b0:	b0cc      	sub	sp, #304	; 0x130
 800b1b2:	af00      	add	r7, sp, #0
 800b1b4:	4602      	mov	r2, r0
 800b1b6:	1dbb      	adds	r3, r7, #6
 800b1b8:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800b1ba:	f107 0310 	add.w	r3, r7, #16
 800b1be:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b1c2:	f107 030f 	add.w	r3, r7, #15
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800b1d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b1d4:	1dba      	adds	r2, r7, #6
 800b1d6:	8812      	ldrh	r2, [r2, #0]
 800b1d8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b1da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b1de:	3302      	adds	r3, #2
 800b1e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b1e4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b1e8:	2218      	movs	r2, #24
 800b1ea:	2100      	movs	r1, #0
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f000 f92b 	bl	800b448 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b1f2:	233f      	movs	r3, #63	; 0x3f
 800b1f4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 800b1f8:	2318      	movs	r3, #24
 800b1fa:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b1fe:	f107 0310 	add.w	r3, r7, #16
 800b202:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b206:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b20a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b20e:	f107 030f 	add.w	r3, r7, #15
 800b212:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b216:	2301      	movs	r3, #1
 800b218:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b21c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b220:	2100      	movs	r1, #0
 800b222:	4618      	mov	r0, r3
 800b224:	f000 fbd0 	bl	800b9c8 <hci_send_req>
 800b228:	4603      	mov	r3, r0
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	da01      	bge.n	800b232 <aci_hal_set_radio_activity_mask+0x84>
    return BLE_STATUS_TIMEOUT;
 800b22e:	23ff      	movs	r3, #255	; 0xff
 800b230:	e002      	b.n	800b238 <aci_hal_set_radio_activity_mask+0x8a>
  return status;
 800b232:	f107 030f 	add.w	r3, r7, #15
 800b236:	781b      	ldrb	r3, [r3, #0]
}
 800b238:	4618      	mov	r0, r3
 800b23a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b23e:	46bd      	mov	sp, r7
 800b240:	bd80      	pop	{r7, pc}

0800b242 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800b242:	b580      	push	{r7, lr}
 800b244:	b088      	sub	sp, #32
 800b246:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800b248:	2300      	movs	r3, #0
 800b24a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b24c:	f107 0308 	add.w	r3, r7, #8
 800b250:	2218      	movs	r2, #24
 800b252:	2100      	movs	r1, #0
 800b254:	4618      	mov	r0, r3
 800b256:	f000 f8f7 	bl	800b448 <Osal_MemSet>
  rq.ogf = 0x03;
 800b25a:	2303      	movs	r3, #3
 800b25c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800b25e:	2303      	movs	r3, #3
 800b260:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800b262:	1dfb      	adds	r3, r7, #7
 800b264:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800b266:	2301      	movs	r3, #1
 800b268:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b26a:	f107 0308 	add.w	r3, r7, #8
 800b26e:	2100      	movs	r1, #0
 800b270:	4618      	mov	r0, r3
 800b272:	f000 fba9 	bl	800b9c8 <hci_send_req>
 800b276:	4603      	mov	r3, r0
 800b278:	2b00      	cmp	r3, #0
 800b27a:	da01      	bge.n	800b280 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800b27c:	23ff      	movs	r3, #255	; 0xff
 800b27e:	e000      	b.n	800b282 <hci_reset+0x40>
  return status;
 800b280:	79fb      	ldrb	r3, [r7, #7]
}
 800b282:	4618      	mov	r0, r3
 800b284:	3720      	adds	r7, #32
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}

0800b28a <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 800b28a:	b580      	push	{r7, lr}
 800b28c:	b0ce      	sub	sp, #312	; 0x138
 800b28e:	af00      	add	r7, sp, #0
 800b290:	f107 0308 	add.w	r3, r7, #8
 800b294:	6019      	str	r1, [r3, #0]
 800b296:	1d3b      	adds	r3, r7, #4
 800b298:	601a      	str	r2, [r3, #0]
 800b29a:	f107 030e 	add.w	r3, r7, #14
 800b29e:	4602      	mov	r2, r0
 800b2a0:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 800b2a2:	f107 0318 	add.w	r3, r7, #24
 800b2a6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800b2aa:	f107 0310 	add.w	r3, r7, #16
 800b2ae:	2205      	movs	r2, #5
 800b2b0:	2100      	movs	r1, #0
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	f000 f8c8 	bl	800b448 <Osal_MemSet>
  int index_input = 0;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 800b2be:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b2c2:	f107 020e 	add.w	r2, r7, #14
 800b2c6:	8812      	ldrh	r2, [r2, #0]
 800b2c8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b2ca:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b2ce:	3302      	adds	r3, #2
 800b2d0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b2d4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800b2d8:	2218      	movs	r2, #24
 800b2da:	2100      	movs	r1, #0
 800b2dc:	4618      	mov	r0, r3
 800b2de:	f000 f8b3 	bl	800b448 <Osal_MemSet>
  rq.ogf = 0x08;
 800b2e2:	2308      	movs	r3, #8
 800b2e4:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 800b2e8:	2330      	movs	r3, #48	; 0x30
 800b2ea:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800b2ee:	f107 0318 	add.w	r3, r7, #24
 800b2f2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800b2f6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b2fa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800b2fe:	f107 0310 	add.w	r3, r7, #16
 800b302:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800b306:	2305      	movs	r3, #5
 800b308:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b30c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800b310:	2100      	movs	r1, #0
 800b312:	4618      	mov	r0, r3
 800b314:	f000 fb58 	bl	800b9c8 <hci_send_req>
 800b318:	4603      	mov	r3, r0
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	da01      	bge.n	800b322 <hci_le_read_phy+0x98>
    return BLE_STATUS_TIMEOUT;
 800b31e:	23ff      	movs	r3, #255	; 0xff
 800b320:	e016      	b.n	800b350 <hci_le_read_phy+0xc6>
  if ( resp.Status )
 800b322:	f107 0310 	add.w	r3, r7, #16
 800b326:	781b      	ldrb	r3, [r3, #0]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d003      	beq.n	800b334 <hci_le_read_phy+0xaa>
    return resp.Status;
 800b32c:	f107 0310 	add.w	r3, r7, #16
 800b330:	781b      	ldrb	r3, [r3, #0]
 800b332:	e00d      	b.n	800b350 <hci_le_read_phy+0xc6>
  *TX_PHY = resp.TX_PHY;
 800b334:	f107 0310 	add.w	r3, r7, #16
 800b338:	78da      	ldrb	r2, [r3, #3]
 800b33a:	f107 0308 	add.w	r3, r7, #8
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 800b342:	f107 0310 	add.w	r3, r7, #16
 800b346:	791a      	ldrb	r2, [r3, #4]
 800b348:	1d3b      	adds	r3, r7, #4
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800b34e:	2300      	movs	r3, #0
}
 800b350:	4618      	mov	r0, r3
 800b352:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}

0800b35a <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800b35a:	b590      	push	{r4, r7, lr}
 800b35c:	b0cd      	sub	sp, #308	; 0x134
 800b35e:	af00      	add	r7, sp, #0
 800b360:	4604      	mov	r4, r0
 800b362:	4608      	mov	r0, r1
 800b364:	4611      	mov	r1, r2
 800b366:	1dfb      	adds	r3, r7, #7
 800b368:	4622      	mov	r2, r4
 800b36a:	701a      	strb	r2, [r3, #0]
 800b36c:	1dbb      	adds	r3, r7, #6
 800b36e:	4602      	mov	r2, r0
 800b370:	701a      	strb	r2, [r3, #0]
 800b372:	1d7b      	adds	r3, r7, #5
 800b374:	460a      	mov	r2, r1
 800b376:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800b378:	f107 0310 	add.w	r3, r7, #16
 800b37c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b380:	f107 030f 	add.w	r3, r7, #15
 800b384:	2200      	movs	r2, #0
 800b386:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b388:	2300      	movs	r3, #0
 800b38a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800b38e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b392:	1dfa      	adds	r2, r7, #7
 800b394:	7812      	ldrb	r2, [r2, #0]
 800b396:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b398:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b39c:	3301      	adds	r3, #1
 800b39e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 800b3a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b3a6:	1dba      	adds	r2, r7, #6
 800b3a8:	7812      	ldrb	r2, [r2, #0]
 800b3aa:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800b3ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b3b0:	3301      	adds	r3, #1
 800b3b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 800b3b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b3ba:	1d7a      	adds	r2, r7, #5
 800b3bc:	7812      	ldrb	r2, [r2, #0]
 800b3be:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800b3c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b3c4:	3301      	adds	r3, #1
 800b3c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b3ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b3ce:	2218      	movs	r2, #24
 800b3d0:	2100      	movs	r1, #0
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	f000 f838 	bl	800b448 <Osal_MemSet>
  rq.ogf = 0x08;
 800b3d8:	2308      	movs	r3, #8
 800b3da:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800b3de:	2331      	movs	r3, #49	; 0x31
 800b3e0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b3e4:	f107 0310 	add.w	r3, r7, #16
 800b3e8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b3ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b3f0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b3f4:	f107 030f 	add.w	r3, r7, #15
 800b3f8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b402:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b406:	2100      	movs	r1, #0
 800b408:	4618      	mov	r0, r3
 800b40a:	f000 fadd 	bl	800b9c8 <hci_send_req>
 800b40e:	4603      	mov	r3, r0
 800b410:	2b00      	cmp	r3, #0
 800b412:	da01      	bge.n	800b418 <hci_le_set_default_phy+0xbe>
    return BLE_STATUS_TIMEOUT;
 800b414:	23ff      	movs	r3, #255	; 0xff
 800b416:	e002      	b.n	800b41e <hci_le_set_default_phy+0xc4>
  return status;
 800b418:	f107 030f 	add.w	r3, r7, #15
 800b41c:	781b      	ldrb	r3, [r3, #0]
}
 800b41e:	4618      	mov	r0, r3
 800b420:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800b424:	46bd      	mov	sp, r7
 800b426:	bd90      	pop	{r4, r7, pc}

0800b428 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b084      	sub	sp, #16
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	60f8      	str	r0, [r7, #12]
 800b430:	60b9      	str	r1, [r7, #8]
 800b432:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800b434:	687a      	ldr	r2, [r7, #4]
 800b436:	68b9      	ldr	r1, [r7, #8]
 800b438:	68f8      	ldr	r0, [r7, #12]
 800b43a:	f002 fc5b 	bl	800dcf4 <memcpy>
 800b43e:	4603      	mov	r3, r0
}
 800b440:	4618      	mov	r0, r3
 800b442:	3710      	adds	r7, #16
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}

0800b448 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b084      	sub	sp, #16
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	60f8      	str	r0, [r7, #12]
 800b450:	60b9      	str	r1, [r7, #8]
 800b452:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800b454:	687a      	ldr	r2, [r7, #4]
 800b456:	68b9      	ldr	r1, [r7, #8]
 800b458:	68f8      	ldr	r0, [r7, #12]
 800b45a:	f002 fc59 	bl	800dd10 <memset>
 800b45e:	4603      	mov	r3, r0
}
 800b460:	4618      	mov	r0, r3
 800b462:	3710      	adds	r7, #16
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}

0800b468 <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b08a      	sub	sp, #40	; 0x28
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 800b470:	2300      	movs	r3, #0
 800b472:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	3301      	adds	r3, #1
 800b47a:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 800b47c:	6a3b      	ldr	r3, [r7, #32]
 800b47e:	781b      	ldrb	r3, [r3, #0]
 800b480:	2bff      	cmp	r3, #255	; 0xff
 800b482:	d14c      	bne.n	800b51e <PeerToPeer_Event_Handler+0xb6>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800b484:	6a3b      	ldr	r3, [r7, #32]
 800b486:	3302      	adds	r3, #2
 800b488:	61fb      	str	r3, [r7, #28]
      switch(blecore_evt->ecode)
 800b48a:	69fb      	ldr	r3, [r7, #28]
 800b48c:	881b      	ldrh	r3, [r3, #0]
 800b48e:	b29b      	uxth	r3, r3
 800b490:	461a      	mov	r2, r3
 800b492:	f640 4301 	movw	r3, #3073	; 0xc01
 800b496:	429a      	cmp	r2, r3
 800b498:	d13d      	bne.n	800b516 <PeerToPeer_Event_Handler+0xae>
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
       {
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800b49a:	69fb      	ldr	r3, [r7, #28]
 800b49c:	3302      	adds	r3, #2
 800b49e:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 800b4a0:	69bb      	ldr	r3, [r7, #24]
 800b4a2:	885b      	ldrh	r3, [r3, #2]
 800b4a4:	b29b      	uxth	r3, r3
 800b4a6:	461a      	mov	r2, r3
 800b4a8:	4b20      	ldr	r3, [pc, #128]	; (800b52c <PeerToPeer_Event_Handler+0xc4>)
 800b4aa:	889b      	ldrh	r3, [r3, #4]
 800b4ac:	3302      	adds	r3, #2
 800b4ae:	429a      	cmp	r2, r3
 800b4b0:	d118      	bne.n	800b4e4 <PeerToPeer_Event_Handler+0x7c>
            {
              /**
               * Descriptor handle
               */
              return_value = SVCCTL_EvtAckFlowEnable;
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              /**
               * Notify to application
               */
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800b4b8:	69bb      	ldr	r3, [r7, #24]
 800b4ba:	7a1b      	ldrb	r3, [r3, #8]
 800b4bc:	f003 0301 	and.w	r3, r3, #1
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d007      	beq.n	800b4d4 <PeerToPeer_Event_Handler+0x6c>
              {
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800b4c8:	f107 0308 	add.w	r3, r7, #8
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	f001 fab9 	bl	800ca44 <P2PS_STM_App_Notification>
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
              P2PS_STM_App_Notification(&Notification);
            }
#endif
        }
        break;
 800b4d2:	e022      	b.n	800b51a <PeerToPeer_Event_Handler+0xb2>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800b4d8:	f107 0308 	add.w	r3, r7, #8
 800b4dc:	4618      	mov	r0, r3
 800b4de:	f001 fab1 	bl	800ca44 <P2PS_STM_App_Notification>
        break;
 800b4e2:	e01a      	b.n	800b51a <PeerToPeer_Event_Handler+0xb2>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 800b4e4:	69bb      	ldr	r3, [r7, #24]
 800b4e6:	885b      	ldrh	r3, [r3, #2]
 800b4e8:	b29b      	uxth	r3, r3
 800b4ea:	461a      	mov	r2, r3
 800b4ec:	4b0f      	ldr	r3, [pc, #60]	; (800b52c <PeerToPeer_Event_Handler+0xc4>)
 800b4ee:	885b      	ldrh	r3, [r3, #2]
 800b4f0:	3301      	adds	r3, #1
 800b4f2:	429a      	cmp	r2, r3
 800b4f4:	d111      	bne.n	800b51a <PeerToPeer_Event_Handler+0xb2>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 800b4f6:	2303      	movs	r3, #3
 800b4f8:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800b4fa:	69bb      	ldr	r3, [r7, #24]
 800b4fc:	88db      	ldrh	r3, [r3, #6]
 800b4fe:	b29b      	uxth	r3, r3
 800b500:	b2db      	uxtb	r3, r3
 800b502:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800b504:	69bb      	ldr	r3, [r7, #24]
 800b506:	3308      	adds	r3, #8
 800b508:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 800b50a:	f107 0308 	add.w	r3, r7, #8
 800b50e:	4618      	mov	r0, r3
 800b510:	f001 fa98 	bl	800ca44 <P2PS_STM_App_Notification>
        break;
 800b514:	e001      	b.n	800b51a <PeerToPeer_Event_Handler+0xb2>

        default:
          break;
 800b516:	bf00      	nop
 800b518:	e002      	b.n	800b520 <PeerToPeer_Event_Handler+0xb8>
        break;
 800b51a:	bf00      	nop
      }
    }
    break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800b51c:	e000      	b.n	800b520 <PeerToPeer_Event_Handler+0xb8>

    default:
      break;
 800b51e:	bf00      	nop
  }

  return(return_value);
 800b520:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 800b524:	4618      	mov	r0, r3
 800b526:	3728      	adds	r7, #40	; 0x28
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}
 800b52c:	2000023c 	.word	0x2000023c

0800b530 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b08a      	sub	sp, #40	; 0x28
 800b534:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 800b536:	484a      	ldr	r0, [pc, #296]	; (800b660 <P2PS_STM_Init+0x130>)
 800b538:	f000 f940 	bl	800b7bc <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 800b53c:	238f      	movs	r3, #143	; 0x8f
 800b53e:	703b      	strb	r3, [r7, #0]
 800b540:	23e5      	movs	r3, #229	; 0xe5
 800b542:	707b      	strb	r3, [r7, #1]
 800b544:	23b3      	movs	r3, #179	; 0xb3
 800b546:	70bb      	strb	r3, [r7, #2]
 800b548:	23d5      	movs	r3, #213	; 0xd5
 800b54a:	70fb      	strb	r3, [r7, #3]
 800b54c:	232e      	movs	r3, #46	; 0x2e
 800b54e:	713b      	strb	r3, [r7, #4]
 800b550:	237f      	movs	r3, #127	; 0x7f
 800b552:	717b      	strb	r3, [r7, #5]
 800b554:	234a      	movs	r3, #74	; 0x4a
 800b556:	71bb      	strb	r3, [r7, #6]
 800b558:	2398      	movs	r3, #152	; 0x98
 800b55a:	71fb      	strb	r3, [r7, #7]
 800b55c:	232a      	movs	r3, #42	; 0x2a
 800b55e:	723b      	strb	r3, [r7, #8]
 800b560:	2348      	movs	r3, #72	; 0x48
 800b562:	727b      	strb	r3, [r7, #9]
 800b564:	237a      	movs	r3, #122	; 0x7a
 800b566:	72bb      	strb	r3, [r7, #10]
 800b568:	23cc      	movs	r3, #204	; 0xcc
 800b56a:	72fb      	strb	r3, [r7, #11]
 800b56c:	2340      	movs	r3, #64	; 0x40
 800b56e:	733b      	strb	r3, [r7, #12]
 800b570:	23fe      	movs	r3, #254	; 0xfe
 800b572:	737b      	strb	r3, [r7, #13]
 800b574:	2300      	movs	r3, #0
 800b576:	73bb      	strb	r3, [r7, #14]
 800b578:	2300      	movs	r3, #0
 800b57a:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 800b57c:	4639      	mov	r1, r7
 800b57e:	4b39      	ldr	r3, [pc, #228]	; (800b664 <P2PS_STM_Init+0x134>)
 800b580:	9300      	str	r3, [sp, #0]
 800b582:	2308      	movs	r3, #8
 800b584:	2201      	movs	r2, #1
 800b586:	2002      	movs	r0, #2
 800b588:	f7ff fb31 	bl	800abee <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 800b58c:	2319      	movs	r3, #25
 800b58e:	703b      	strb	r3, [r7, #0]
 800b590:	23ed      	movs	r3, #237	; 0xed
 800b592:	707b      	strb	r3, [r7, #1]
 800b594:	2382      	movs	r3, #130	; 0x82
 800b596:	70bb      	strb	r3, [r7, #2]
 800b598:	23ae      	movs	r3, #174	; 0xae
 800b59a:	70fb      	strb	r3, [r7, #3]
 800b59c:	23ed      	movs	r3, #237	; 0xed
 800b59e:	713b      	strb	r3, [r7, #4]
 800b5a0:	2321      	movs	r3, #33	; 0x21
 800b5a2:	717b      	strb	r3, [r7, #5]
 800b5a4:	234c      	movs	r3, #76	; 0x4c
 800b5a6:	71bb      	strb	r3, [r7, #6]
 800b5a8:	239d      	movs	r3, #157	; 0x9d
 800b5aa:	71fb      	strb	r3, [r7, #7]
 800b5ac:	2341      	movs	r3, #65	; 0x41
 800b5ae:	723b      	strb	r3, [r7, #8]
 800b5b0:	2345      	movs	r3, #69	; 0x45
 800b5b2:	727b      	strb	r3, [r7, #9]
 800b5b4:	2322      	movs	r3, #34	; 0x22
 800b5b6:	72bb      	strb	r3, [r7, #10]
 800b5b8:	238e      	movs	r3, #142	; 0x8e
 800b5ba:	72fb      	strb	r3, [r7, #11]
 800b5bc:	2341      	movs	r3, #65	; 0x41
 800b5be:	733b      	strb	r3, [r7, #12]
 800b5c0:	23fe      	movs	r3, #254	; 0xfe
 800b5c2:	737b      	strb	r3, [r7, #13]
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	73bb      	strb	r3, [r7, #14]
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800b5cc:	4b25      	ldr	r3, [pc, #148]	; (800b664 <P2PS_STM_Init+0x134>)
 800b5ce:	8818      	ldrh	r0, [r3, #0]
 800b5d0:	463a      	mov	r2, r7
 800b5d2:	4b25      	ldr	r3, [pc, #148]	; (800b668 <P2PS_STM_Init+0x138>)
 800b5d4:	9305      	str	r3, [sp, #20]
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	9304      	str	r3, [sp, #16]
 800b5da:	230a      	movs	r3, #10
 800b5dc:	9303      	str	r3, [sp, #12]
 800b5de:	2301      	movs	r3, #1
 800b5e0:	9302      	str	r3, [sp, #8]
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	9301      	str	r3, [sp, #4]
 800b5e6:	2306      	movs	r3, #6
 800b5e8:	9300      	str	r3, [sp, #0]
 800b5ea:	2302      	movs	r3, #2
 800b5ec:	2102      	movs	r1, #2
 800b5ee:	f7ff fbad 	bl	800ad4c <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 800b5f2:	2319      	movs	r3, #25
 800b5f4:	703b      	strb	r3, [r7, #0]
 800b5f6:	23ed      	movs	r3, #237	; 0xed
 800b5f8:	707b      	strb	r3, [r7, #1]
 800b5fa:	2382      	movs	r3, #130	; 0x82
 800b5fc:	70bb      	strb	r3, [r7, #2]
 800b5fe:	23ae      	movs	r3, #174	; 0xae
 800b600:	70fb      	strb	r3, [r7, #3]
 800b602:	23ed      	movs	r3, #237	; 0xed
 800b604:	713b      	strb	r3, [r7, #4]
 800b606:	2321      	movs	r3, #33	; 0x21
 800b608:	717b      	strb	r3, [r7, #5]
 800b60a:	234c      	movs	r3, #76	; 0x4c
 800b60c:	71bb      	strb	r3, [r7, #6]
 800b60e:	239d      	movs	r3, #157	; 0x9d
 800b610:	71fb      	strb	r3, [r7, #7]
 800b612:	2341      	movs	r3, #65	; 0x41
 800b614:	723b      	strb	r3, [r7, #8]
 800b616:	2345      	movs	r3, #69	; 0x45
 800b618:	727b      	strb	r3, [r7, #9]
 800b61a:	2322      	movs	r3, #34	; 0x22
 800b61c:	72bb      	strb	r3, [r7, #10]
 800b61e:	238e      	movs	r3, #142	; 0x8e
 800b620:	72fb      	strb	r3, [r7, #11]
 800b622:	2342      	movs	r3, #66	; 0x42
 800b624:	733b      	strb	r3, [r7, #12]
 800b626:	23fe      	movs	r3, #254	; 0xfe
 800b628:	737b      	strb	r3, [r7, #13]
 800b62a:	2300      	movs	r3, #0
 800b62c:	73bb      	strb	r3, [r7, #14]
 800b62e:	2300      	movs	r3, #0
 800b630:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800b632:	4b0c      	ldr	r3, [pc, #48]	; (800b664 <P2PS_STM_Init+0x134>)
 800b634:	8818      	ldrh	r0, [r3, #0]
 800b636:	463a      	mov	r2, r7
 800b638:	4b0c      	ldr	r3, [pc, #48]	; (800b66c <P2PS_STM_Init+0x13c>)
 800b63a:	9305      	str	r3, [sp, #20]
 800b63c:	2301      	movs	r3, #1
 800b63e:	9304      	str	r3, [sp, #16]
 800b640:	230a      	movs	r3, #10
 800b642:	9303      	str	r3, [sp, #12]
 800b644:	2301      	movs	r3, #1
 800b646:	9302      	str	r3, [sp, #8]
 800b648:	2300      	movs	r3, #0
 800b64a:	9301      	str	r3, [sp, #4]
 800b64c:	2310      	movs	r3, #16
 800b64e:	9300      	str	r3, [sp, #0]
 800b650:	2302      	movs	r3, #2
 800b652:	2102      	movs	r1, #2
 800b654:	f7ff fb7a 	bl	800ad4c <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 800b658:	bf00      	nop
}
 800b65a:	3710      	adds	r7, #16
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd80      	pop	{r7, pc}
 800b660:	0800b469 	.word	0x0800b469
 800b664:	2000023c 	.word	0x2000023c
 800b668:	2000023e 	.word	0x2000023e
 800b66c:	20000240 	.word	0x20000240

0800b670 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BAS_Init( void )
{
 800b670:	b480      	push	{r7}
 800b672:	af00      	add	r7, sp, #0
  return;
 800b674:	bf00      	nop
}
 800b676:	46bd      	mov	sp, r7
 800b678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67c:	4770      	bx	lr

0800b67e <BLS_Init>:

__weak void BLS_Init( void )
{
 800b67e:	b480      	push	{r7}
 800b680:	af00      	add	r7, sp, #0
  return;
 800b682:	bf00      	nop
}
 800b684:	46bd      	mov	sp, r7
 800b686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68a:	4770      	bx	lr

0800b68c <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 800b68c:	b480      	push	{r7}
 800b68e:	af00      	add	r7, sp, #0
  return;
 800b690:	bf00      	nop
}
 800b692:	46bd      	mov	sp, r7
 800b694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b698:	4770      	bx	lr

0800b69a <DIS_Init>:
__weak void DIS_Init( void )
{
 800b69a:	b480      	push	{r7}
 800b69c:	af00      	add	r7, sp, #0
  return;
 800b69e:	bf00      	nop
}
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a6:	4770      	bx	lr

0800b6a8 <EDS_STM_Init>:
__weak void EDS_STM_Init( void )
{
 800b6a8:	b480      	push	{r7}
 800b6aa:	af00      	add	r7, sp, #0
  return;
 800b6ac:	bf00      	nop
}
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b4:	4770      	bx	lr

0800b6b6 <HIDS_Init>:
__weak void HIDS_Init( void )
{
 800b6b6:	b480      	push	{r7}
 800b6b8:	af00      	add	r7, sp, #0
  return;
 800b6ba:	bf00      	nop
}
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c2:	4770      	bx	lr

0800b6c4 <HRS_Init>:
__weak void HRS_Init( void )
{
 800b6c4:	b480      	push	{r7}
 800b6c6:	af00      	add	r7, sp, #0
  return;
 800b6c8:	bf00      	nop
}
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d0:	4770      	bx	lr

0800b6d2 <HTS_Init>:
__weak void HTS_Init( void )
{
 800b6d2:	b480      	push	{r7}
 800b6d4:	af00      	add	r7, sp, #0
  return;
 800b6d6:	bf00      	nop
}
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6de:	4770      	bx	lr

0800b6e0 <IAS_Init>:
__weak void IAS_Init( void )
{
 800b6e0:	b480      	push	{r7}
 800b6e2:	af00      	add	r7, sp, #0
  return;
 800b6e4:	bf00      	nop
}
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ec:	4770      	bx	lr

0800b6ee <LLS_Init>:
__weak void LLS_Init( void )
{
 800b6ee:	b480      	push	{r7}
 800b6f0:	af00      	add	r7, sp, #0
  return;
 800b6f2:	bf00      	nop
}
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fa:	4770      	bx	lr

0800b6fc <TPS_Init>:
__weak void TPS_Init( void )
{
 800b6fc:	b480      	push	{r7}
 800b6fe:	af00      	add	r7, sp, #0
  return;
 800b700:	bf00      	nop
}
 800b702:	46bd      	mov	sp, r7
 800b704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b708:	4770      	bx	lr

0800b70a <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 800b70a:	b480      	push	{r7}
 800b70c:	af00      	add	r7, sp, #0
  return;
 800b70e:	bf00      	nop
}
 800b710:	46bd      	mov	sp, r7
 800b712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b716:	4770      	bx	lr

0800b718 <OTAS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
  return;
}
__weak void OTAS_STM_Init( void )
{
 800b718:	b480      	push	{r7}
 800b71a:	af00      	add	r7, sp, #0
  return;
 800b71c:	bf00      	nop
}
 800b71e:	46bd      	mov	sp, r7
 800b720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b724:	4770      	bx	lr

0800b726 <MESH_Init>:
__weak void MESH_Init( void )
{
 800b726:	b480      	push	{r7}
 800b728:	af00      	add	r7, sp, #0
  return;
 800b72a:	bf00      	nop
}
 800b72c:	46bd      	mov	sp, r7
 800b72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b732:	4770      	bx	lr

0800b734 <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 800b734:	b480      	push	{r7}
 800b736:	af00      	add	r7, sp, #0
  return;
 800b738:	bf00      	nop
}
 800b73a:	46bd      	mov	sp, r7
 800b73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b740:	4770      	bx	lr

0800b742 <SVCCTL_InitCustomSvc>:
__weak void SVCCTL_InitCustomSvc( void )
{
 800b742:	b480      	push	{r7}
 800b744:	af00      	add	r7, sp, #0
  return;
 800b746:	bf00      	nop
}
 800b748:	46bd      	mov	sp, r7
 800b74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74e:	4770      	bx	lr

0800b750 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800b750:	b580      	push	{r7, lr}
 800b752:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800b754:	4b04      	ldr	r3, [pc, #16]	; (800b768 <SVCCTL_Init+0x18>)
 800b756:	2200      	movs	r2, #0
 800b758:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800b75a:	4b04      	ldr	r3, [pc, #16]	; (800b76c <SVCCTL_Init+0x1c>)
 800b75c:	2200      	movs	r2, #0
 800b75e:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800b760:	f000 f806 	bl	800b770 <SVCCTL_SvcInit>

  return;
 800b764:	bf00      	nop
}
 800b766:	bd80      	pop	{r7, pc}
 800b768:	20000244 	.word	0x20000244
 800b76c:	20000264 	.word	0x20000264

0800b770 <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	af00      	add	r7, sp, #0
  BAS_Init();
 800b774:	f7ff ff7c 	bl	800b670 <BAS_Init>

  BLS_Init();
 800b778:	f7ff ff81 	bl	800b67e <BLS_Init>

  CRS_STM_Init();
 800b77c:	f7ff ff86 	bl	800b68c <CRS_STM_Init>

  DIS_Init();
 800b780:	f7ff ff8b 	bl	800b69a <DIS_Init>

  EDS_STM_Init();
 800b784:	f7ff ff90 	bl	800b6a8 <EDS_STM_Init>

  HIDS_Init();
 800b788:	f7ff ff95 	bl	800b6b6 <HIDS_Init>

  HRS_Init();
 800b78c:	f7ff ff9a 	bl	800b6c4 <HRS_Init>

  HTS_Init();
 800b790:	f7ff ff9f 	bl	800b6d2 <HTS_Init>

  IAS_Init();
 800b794:	f7ff ffa4 	bl	800b6e0 <IAS_Init>

  LLS_Init();
 800b798:	f7ff ffa9 	bl	800b6ee <LLS_Init>

  TPS_Init();
 800b79c:	f7ff ffae 	bl	800b6fc <TPS_Init>

  MOTENV_STM_Init();
 800b7a0:	f7ff ffb3 	bl	800b70a <MOTENV_STM_Init>

  P2PS_STM_Init();
 800b7a4:	f7ff fec4 	bl	800b530 <P2PS_STM_Init>

  OTAS_STM_Init();
 800b7a8:	f7ff ffb6 	bl	800b718 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800b7ac:	f7ff ffc2 	bl	800b734 <BVOPUS_STM_Init>

  MESH_Init();
 800b7b0:	f7ff ffb9 	bl	800b726 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800b7b4:	f7ff ffc5 	bl	800b742 <SVCCTL_InitCustomSvc>
  
  return;
 800b7b8:	bf00      	nop
}
 800b7ba:	bd80      	pop	{r7, pc}

0800b7bc <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800b7bc:	b480      	push	{r7}
 800b7be:	b083      	sub	sp, #12
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800b7c4:	4b09      	ldr	r3, [pc, #36]	; (800b7ec <SVCCTL_RegisterSvcHandler+0x30>)
 800b7c6:	7f1b      	ldrb	r3, [r3, #28]
 800b7c8:	4619      	mov	r1, r3
 800b7ca:	4a08      	ldr	r2, [pc, #32]	; (800b7ec <SVCCTL_RegisterSvcHandler+0x30>)
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800b7d2:	4b06      	ldr	r3, [pc, #24]	; (800b7ec <SVCCTL_RegisterSvcHandler+0x30>)
 800b7d4:	7f1b      	ldrb	r3, [r3, #28]
 800b7d6:	3301      	adds	r3, #1
 800b7d8:	b2da      	uxtb	r2, r3
 800b7da:	4b04      	ldr	r3, [pc, #16]	; (800b7ec <SVCCTL_RegisterSvcHandler+0x30>)
 800b7dc:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800b7de:	bf00      	nop
}
 800b7e0:	370c      	adds	r7, #12
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e8:	4770      	bx	lr
 800b7ea:	bf00      	nop
 800b7ec:	20000244 	.word	0x20000244

0800b7f0 <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b086      	sub	sp, #24
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	3301      	adds	r3, #1
 800b7fc:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800b7fe:	2300      	movs	r3, #0
 800b800:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800b802:	693b      	ldr	r3, [r7, #16]
 800b804:	781b      	ldrb	r3, [r3, #0]
 800b806:	2bff      	cmp	r3, #255	; 0xff
 800b808:	d125      	bne.n	800b856 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800b80a:	693b      	ldr	r3, [r7, #16]
 800b80c:	3302      	adds	r3, #2
 800b80e:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	881b      	ldrh	r3, [r3, #0]
 800b814:	b29b      	uxth	r3, r3
 800b816:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b81a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b81e:	d118      	bne.n	800b852 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800b820:	2300      	movs	r3, #0
 800b822:	757b      	strb	r3, [r7, #21]
 800b824:	e00d      	b.n	800b842 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800b826:	7d7b      	ldrb	r3, [r7, #21]
 800b828:	4a1a      	ldr	r2, [pc, #104]	; (800b894 <SVCCTL_UserEvtRx+0xa4>)
 800b82a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	4798      	blx	r3
 800b832:	4603      	mov	r3, r0
 800b834:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800b836:	7dfb      	ldrb	r3, [r7, #23]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d108      	bne.n	800b84e <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800b83c:	7d7b      	ldrb	r3, [r7, #21]
 800b83e:	3301      	adds	r3, #1
 800b840:	757b      	strb	r3, [r7, #21]
 800b842:	4b14      	ldr	r3, [pc, #80]	; (800b894 <SVCCTL_UserEvtRx+0xa4>)
 800b844:	7f1b      	ldrb	r3, [r3, #28]
 800b846:	7d7a      	ldrb	r2, [r7, #21]
 800b848:	429a      	cmp	r2, r3
 800b84a:	d3ec      	bcc.n	800b826 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800b84c:	e002      	b.n	800b854 <SVCCTL_UserEvtRx+0x64>
              break;
 800b84e:	bf00      	nop
          break;
 800b850:	e000      	b.n	800b854 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800b852:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800b854:	e000      	b.n	800b858 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800b856:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800b858:	7dfb      	ldrb	r3, [r7, #23]
 800b85a:	2b02      	cmp	r3, #2
 800b85c:	d00f      	beq.n	800b87e <SVCCTL_UserEvtRx+0x8e>
 800b85e:	2b02      	cmp	r3, #2
 800b860:	dc10      	bgt.n	800b884 <SVCCTL_UserEvtRx+0x94>
 800b862:	2b00      	cmp	r3, #0
 800b864:	d002      	beq.n	800b86c <SVCCTL_UserEvtRx+0x7c>
 800b866:	2b01      	cmp	r3, #1
 800b868:	d006      	beq.n	800b878 <SVCCTL_UserEvtRx+0x88>
 800b86a:	e00b      	b.n	800b884 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800b86c:	6878      	ldr	r0, [r7, #4]
 800b86e:	f000 fe33 	bl	800c4d8 <SVCCTL_App_Notification>
 800b872:	4603      	mov	r3, r0
 800b874:	75bb      	strb	r3, [r7, #22]
      break;
 800b876:	e008      	b.n	800b88a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800b878:	2301      	movs	r3, #1
 800b87a:	75bb      	strb	r3, [r7, #22]
      break;
 800b87c:	e005      	b.n	800b88a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800b87e:	2300      	movs	r3, #0
 800b880:	75bb      	strb	r3, [r7, #22]
      break;
 800b882:	e002      	b.n	800b88a <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800b884:	2301      	movs	r3, #1
 800b886:	75bb      	strb	r3, [r7, #22]
      break;
 800b888:	bf00      	nop
  }

  return (return_status);
 800b88a:	7dbb      	ldrb	r3, [r7, #22]
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	3718      	adds	r7, #24
 800b890:	46bd      	mov	sp, r7
 800b892:	bd80      	pop	{r7, pc}
 800b894:	20000244 	.word	0x20000244

0800b898 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b088      	sub	sp, #32
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800b8a0:	f107 030c 	add.w	r3, r7, #12
 800b8a4:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800b8ac:	69fb      	ldr	r3, [r7, #28]
 800b8ae:	2124      	movs	r1, #36	; 0x24
 800b8b0:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800b8b4:	f000 fa1e 	bl	800bcf4 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800b8b8:	69fb      	ldr	r3, [r7, #28]
 800b8ba:	330b      	adds	r3, #11
 800b8bc:	78db      	ldrb	r3, [r3, #3]
}
 800b8be:	4618      	mov	r0, r3
 800b8c0:	3720      	adds	r7, #32
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd80      	pop	{r7, pc}

0800b8c6 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800b8c6:	b580      	push	{r7, lr}
 800b8c8:	b088      	sub	sp, #32
 800b8ca:	af00      	add	r7, sp, #0
 800b8cc:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800b8ce:	f107 030c 	add.w	r3, r7, #12
 800b8d2:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800b8da:	69fb      	ldr	r3, [r7, #28]
 800b8dc:	210f      	movs	r1, #15
 800b8de:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800b8e2:	f000 fa07 	bl	800bcf4 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800b8e6:	69fb      	ldr	r3, [r7, #28]
 800b8e8:	330b      	adds	r3, #11
 800b8ea:	78db      	ldrb	r3, [r3, #3]
}
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	3720      	adds	r7, #32
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	bd80      	pop	{r7, pc}

0800b8f4 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b082      	sub	sp, #8
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
 800b8fc:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	685b      	ldr	r3, [r3, #4]
 800b902:	4a08      	ldr	r2, [pc, #32]	; (800b924 <hci_init+0x30>)
 800b904:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800b906:	4a08      	ldr	r2, [pc, #32]	; (800b928 <hci_init+0x34>)
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800b90c:	4806      	ldr	r0, [pc, #24]	; (800b928 <hci_init+0x34>)
 800b90e:	f000 f973 	bl	800bbf8 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	4618      	mov	r0, r3
 800b918:	f000 f8d4 	bl	800bac4 <TlInit>

  return;
 800b91c:	bf00      	nop
}
 800b91e:	3708      	adds	r7, #8
 800b920:	46bd      	mov	sp, r7
 800b922:	bd80      	pop	{r7, pc}
 800b924:	20000368 	.word	0x20000368
 800b928:	20000340 	.word	0x20000340

0800b92c <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b084      	sub	sp, #16
 800b930:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800b932:	4822      	ldr	r0, [pc, #136]	; (800b9bc <hci_user_evt_proc+0x90>)
 800b934:	f000 fc92 	bl	800c25c <LST_is_empty>
 800b938:	4603      	mov	r3, r0
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d12b      	bne.n	800b996 <hci_user_evt_proc+0x6a>
 800b93e:	4b20      	ldr	r3, [pc, #128]	; (800b9c0 <hci_user_evt_proc+0x94>)
 800b940:	781b      	ldrb	r3, [r3, #0]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d027      	beq.n	800b996 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800b946:	f107 030c 	add.w	r3, r7, #12
 800b94a:	4619      	mov	r1, r3
 800b94c:	481b      	ldr	r0, [pc, #108]	; (800b9bc <hci_user_evt_proc+0x90>)
 800b94e:	f000 fd14 	bl	800c37a <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800b952:	4b1c      	ldr	r3, [pc, #112]	; (800b9c4 <hci_user_evt_proc+0x98>)
 800b954:	69db      	ldr	r3, [r3, #28]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d00c      	beq.n	800b974 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800b95e:	2301      	movs	r3, #1
 800b960:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800b962:	4b18      	ldr	r3, [pc, #96]	; (800b9c4 <hci_user_evt_proc+0x98>)
 800b964:	69db      	ldr	r3, [r3, #28]
 800b966:	1d3a      	adds	r2, r7, #4
 800b968:	4610      	mov	r0, r2
 800b96a:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800b96c:	793a      	ldrb	r2, [r7, #4]
 800b96e:	4b14      	ldr	r3, [pc, #80]	; (800b9c0 <hci_user_evt_proc+0x94>)
 800b970:	701a      	strb	r2, [r3, #0]
 800b972:	e002      	b.n	800b97a <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800b974:	4b12      	ldr	r3, [pc, #72]	; (800b9c0 <hci_user_evt_proc+0x94>)
 800b976:	2201      	movs	r2, #1
 800b978:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800b97a:	4b11      	ldr	r3, [pc, #68]	; (800b9c0 <hci_user_evt_proc+0x94>)
 800b97c:	781b      	ldrb	r3, [r3, #0]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d004      	beq.n	800b98c <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	4618      	mov	r0, r3
 800b986:	f000 fb91 	bl	800c0ac <TL_MM_EvtDone>
 800b98a:	e004      	b.n	800b996 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	4619      	mov	r1, r3
 800b990:	480a      	ldr	r0, [pc, #40]	; (800b9bc <hci_user_evt_proc+0x90>)
 800b992:	f000 fc85 	bl	800c2a0 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800b996:	4809      	ldr	r0, [pc, #36]	; (800b9bc <hci_user_evt_proc+0x90>)
 800b998:	f000 fc60 	bl	800c25c <LST_is_empty>
 800b99c:	4603      	mov	r3, r0
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d107      	bne.n	800b9b2 <hci_user_evt_proc+0x86>
 800b9a2:	4b07      	ldr	r3, [pc, #28]	; (800b9c0 <hci_user_evt_proc+0x94>)
 800b9a4:	781b      	ldrb	r3, [r3, #0]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d003      	beq.n	800b9b2 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800b9aa:	4804      	ldr	r0, [pc, #16]	; (800b9bc <hci_user_evt_proc+0x90>)
 800b9ac:	f000 fff1 	bl	800c992 <hci_notify_asynch_evt>
  }


  return;
 800b9b0:	bf00      	nop
 800b9b2:	bf00      	nop
}
 800b9b4:	3710      	adds	r7, #16
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	bd80      	pop	{r7, pc}
 800b9ba:	bf00      	nop
 800b9bc:	2000026c 	.word	0x2000026c
 800b9c0:	20000278 	.word	0x20000278
 800b9c4:	20000340 	.word	0x20000340

0800b9c8 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b088      	sub	sp, #32
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
 800b9d0:	460b      	mov	r3, r1
 800b9d2:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800b9d4:	2000      	movs	r0, #0
 800b9d6:	f000 f8cb 	bl	800bb70 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800b9da:	2300      	movs	r3, #0
 800b9dc:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	885b      	ldrh	r3, [r3, #2]
 800b9e2:	b21b      	sxth	r3, r3
 800b9e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b9e8:	b21a      	sxth	r2, r3
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	881b      	ldrh	r3, [r3, #0]
 800b9ee:	029b      	lsls	r3, r3, #10
 800b9f0:	b21b      	sxth	r3, r3
 800b9f2:	4313      	orrs	r3, r2
 800b9f4:	b21b      	sxth	r3, r3
 800b9f6:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	68db      	ldr	r3, [r3, #12]
 800b9fc:	b2d9      	uxtb	r1, r3
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	689a      	ldr	r2, [r3, #8]
 800ba02:	8bbb      	ldrh	r3, [r7, #28]
 800ba04:	4618      	mov	r0, r3
 800ba06:	f000 f88d 	bl	800bb24 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800ba0a:	e04e      	b.n	800baaa <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800ba0c:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800ba10:	f000 ffd6 	bl	800c9c0 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800ba14:	e043      	b.n	800ba9e <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800ba16:	f107 030c 	add.w	r3, r7, #12
 800ba1a:	4619      	mov	r1, r3
 800ba1c:	4828      	ldr	r0, [pc, #160]	; (800bac0 <hci_send_req+0xf8>)
 800ba1e:	f000 fcac 	bl	800c37a <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	7a5b      	ldrb	r3, [r3, #9]
 800ba26:	2b0f      	cmp	r3, #15
 800ba28:	d114      	bne.n	800ba54 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	330b      	adds	r3, #11
 800ba2e:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800ba30:	693b      	ldr	r3, [r7, #16]
 800ba32:	885b      	ldrh	r3, [r3, #2]
 800ba34:	b29b      	uxth	r3, r3
 800ba36:	8bba      	ldrh	r2, [r7, #28]
 800ba38:	429a      	cmp	r2, r3
 800ba3a:	d104      	bne.n	800ba46 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	691b      	ldr	r3, [r3, #16]
 800ba40:	693a      	ldr	r2, [r7, #16]
 800ba42:	7812      	ldrb	r2, [r2, #0]
 800ba44:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800ba46:	693b      	ldr	r3, [r7, #16]
 800ba48:	785b      	ldrb	r3, [r3, #1]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d027      	beq.n	800ba9e <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800ba4e:	2301      	movs	r3, #1
 800ba50:	77fb      	strb	r3, [r7, #31]
 800ba52:	e024      	b.n	800ba9e <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	330b      	adds	r3, #11
 800ba58:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800ba5a:	69bb      	ldr	r3, [r7, #24]
 800ba5c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ba60:	b29b      	uxth	r3, r3
 800ba62:	8bba      	ldrh	r2, [r7, #28]
 800ba64:	429a      	cmp	r2, r3
 800ba66:	d114      	bne.n	800ba92 <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	7a9b      	ldrb	r3, [r3, #10]
 800ba6c:	3b03      	subs	r3, #3
 800ba6e:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	695a      	ldr	r2, [r3, #20]
 800ba74:	7dfb      	ldrb	r3, [r7, #23]
 800ba76:	429a      	cmp	r2, r3
 800ba78:	bfa8      	it	ge
 800ba7a:	461a      	movge	r2, r3
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	6918      	ldr	r0, [r3, #16]
 800ba84:	69bb      	ldr	r3, [r7, #24]
 800ba86:	1cd9      	adds	r1, r3, #3
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	695b      	ldr	r3, [r3, #20]
 800ba8c:	461a      	mov	r2, r3
 800ba8e:	f002 f931 	bl	800dcf4 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800ba92:	69bb      	ldr	r3, [r7, #24]
 800ba94:	781b      	ldrb	r3, [r3, #0]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d001      	beq.n	800ba9e <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800ba9e:	4808      	ldr	r0, [pc, #32]	; (800bac0 <hci_send_req+0xf8>)
 800baa0:	f000 fbdc 	bl	800c25c <LST_is_empty>
 800baa4:	4603      	mov	r3, r0
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d0b5      	beq.n	800ba16 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800baaa:	7ffb      	ldrb	r3, [r7, #31]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d0ad      	beq.n	800ba0c <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800bab0:	2001      	movs	r0, #1
 800bab2:	f000 f85d 	bl	800bb70 <NotifyCmdStatus>

  return 0;
 800bab6:	2300      	movs	r3, #0
}
 800bab8:	4618      	mov	r0, r3
 800baba:	3720      	adds	r7, #32
 800babc:	46bd      	mov	sp, r7
 800babe:	bd80      	pop	{r7, pc}
 800bac0:	20000360 	.word	0x20000360

0800bac4 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b086      	sub	sp, #24
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800bacc:	480f      	ldr	r0, [pc, #60]	; (800bb0c <TlInit+0x48>)
 800bace:	f000 fbb5 	bl	800c23c <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800bad2:	4a0f      	ldr	r2, [pc, #60]	; (800bb10 <TlInit+0x4c>)
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800bad8:	480e      	ldr	r0, [pc, #56]	; (800bb14 <TlInit+0x50>)
 800bada:	f000 fbaf 	bl	800c23c <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800bade:	4b0e      	ldr	r3, [pc, #56]	; (800bb18 <TlInit+0x54>)
 800bae0:	2201      	movs	r2, #1
 800bae2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800bae4:	4b0d      	ldr	r3, [pc, #52]	; (800bb1c <TlInit+0x58>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d00a      	beq.n	800bb02 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800baf0:	4b0b      	ldr	r3, [pc, #44]	; (800bb20 <TlInit+0x5c>)
 800baf2:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800baf4:	4b09      	ldr	r3, [pc, #36]	; (800bb1c <TlInit+0x58>)
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	f107 0208 	add.w	r2, r7, #8
 800bafc:	4610      	mov	r0, r2
 800bafe:	4798      	blx	r3
  }

  return;
 800bb00:	bf00      	nop
 800bb02:	bf00      	nop
}
 800bb04:	3718      	adds	r7, #24
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bd80      	pop	{r7, pc}
 800bb0a:	bf00      	nop
 800bb0c:	20000360 	.word	0x20000360
 800bb10:	20000274 	.word	0x20000274
 800bb14:	2000026c 	.word	0x2000026c
 800bb18:	20000278 	.word	0x20000278
 800bb1c:	20000340 	.word	0x20000340
 800bb20:	0800bbb1 	.word	0x0800bbb1

0800bb24 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b082      	sub	sp, #8
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	603a      	str	r2, [r7, #0]
 800bb2e:	80fb      	strh	r3, [r7, #6]
 800bb30:	460b      	mov	r3, r1
 800bb32:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800bb34:	4b0c      	ldr	r3, [pc, #48]	; (800bb68 <SendCmd+0x44>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	88fa      	ldrh	r2, [r7, #6]
 800bb3a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800bb3e:	4b0a      	ldr	r3, [pc, #40]	; (800bb68 <SendCmd+0x44>)
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	797a      	ldrb	r2, [r7, #5]
 800bb44:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800bb46:	4b08      	ldr	r3, [pc, #32]	; (800bb68 <SendCmd+0x44>)
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	330c      	adds	r3, #12
 800bb4c:	797a      	ldrb	r2, [r7, #5]
 800bb4e:	6839      	ldr	r1, [r7, #0]
 800bb50:	4618      	mov	r0, r3
 800bb52:	f002 f8cf 	bl	800dcf4 <memcpy>

  hciContext.io.Send(0,0);
 800bb56:	4b05      	ldr	r3, [pc, #20]	; (800bb6c <SendCmd+0x48>)
 800bb58:	691b      	ldr	r3, [r3, #16]
 800bb5a:	2100      	movs	r1, #0
 800bb5c:	2000      	movs	r0, #0
 800bb5e:	4798      	blx	r3

  return;
 800bb60:	bf00      	nop
}
 800bb62:	3708      	adds	r7, #8
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}
 800bb68:	20000274 	.word	0x20000274
 800bb6c:	20000340 	.word	0x20000340

0800bb70 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b082      	sub	sp, #8
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	4603      	mov	r3, r0
 800bb78:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800bb7a:	79fb      	ldrb	r3, [r7, #7]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d108      	bne.n	800bb92 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800bb80:	4b0a      	ldr	r3, [pc, #40]	; (800bbac <NotifyCmdStatus+0x3c>)
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d00d      	beq.n	800bba4 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800bb88:	4b08      	ldr	r3, [pc, #32]	; (800bbac <NotifyCmdStatus+0x3c>)
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	2000      	movs	r0, #0
 800bb8e:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800bb90:	e008      	b.n	800bba4 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800bb92:	4b06      	ldr	r3, [pc, #24]	; (800bbac <NotifyCmdStatus+0x3c>)
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d004      	beq.n	800bba4 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800bb9a:	4b04      	ldr	r3, [pc, #16]	; (800bbac <NotifyCmdStatus+0x3c>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	2001      	movs	r0, #1
 800bba0:	4798      	blx	r3
  return;
 800bba2:	bf00      	nop
 800bba4:	bf00      	nop
}
 800bba6:	3708      	adds	r7, #8
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	bd80      	pop	{r7, pc}
 800bbac:	20000368 	.word	0x20000368

0800bbb0 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b082      	sub	sp, #8
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	7a5b      	ldrb	r3, [r3, #9]
 800bbbc:	2b0f      	cmp	r3, #15
 800bbbe:	d003      	beq.n	800bbc8 <TlEvtReceived+0x18>
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	7a5b      	ldrb	r3, [r3, #9]
 800bbc4:	2b0e      	cmp	r3, #14
 800bbc6:	d107      	bne.n	800bbd8 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800bbc8:	6879      	ldr	r1, [r7, #4]
 800bbca:	4809      	ldr	r0, [pc, #36]	; (800bbf0 <TlEvtReceived+0x40>)
 800bbcc:	f000 fb8e 	bl	800c2ec <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800bbd0:	2000      	movs	r0, #0
 800bbd2:	f000 feea 	bl	800c9aa <hci_cmd_resp_release>
 800bbd6:	e006      	b.n	800bbe6 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800bbd8:	6879      	ldr	r1, [r7, #4]
 800bbda:	4806      	ldr	r0, [pc, #24]	; (800bbf4 <TlEvtReceived+0x44>)
 800bbdc:	f000 fb86 	bl	800c2ec <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800bbe0:	4804      	ldr	r0, [pc, #16]	; (800bbf4 <TlEvtReceived+0x44>)
 800bbe2:	f000 fed6 	bl	800c992 <hci_notify_asynch_evt>
  }

  return;
 800bbe6:	bf00      	nop
}
 800bbe8:	3708      	adds	r7, #8
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}
 800bbee:	bf00      	nop
 800bbf0:	20000360 	.word	0x20000360
 800bbf4:	2000026c 	.word	0x2000026c

0800bbf8 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800bbf8:	b480      	push	{r7}
 800bbfa:	b083      	sub	sp, #12
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	4a05      	ldr	r2, [pc, #20]	; (800bc18 <hci_register_io_bus+0x20>)
 800bc04:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	4a04      	ldr	r2, [pc, #16]	; (800bc1c <hci_register_io_bus+0x24>)
 800bc0a:	611a      	str	r2, [r3, #16]

  return;
 800bc0c:	bf00      	nop
}
 800bc0e:	370c      	adds	r7, #12
 800bc10:	46bd      	mov	sp, r7
 800bc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc16:	4770      	bx	lr
 800bc18:	0800bf09 	.word	0x0800bf09
 800bc1c:	0800bf71 	.word	0x0800bf71

0800bc20 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b082      	sub	sp, #8
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
 800bc28:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	685b      	ldr	r3, [r3, #4]
 800bc2e:	4a08      	ldr	r2, [pc, #32]	; (800bc50 <shci_init+0x30>)
 800bc30:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800bc32:	4a08      	ldr	r2, [pc, #32]	; (800bc54 <shci_init+0x34>)
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800bc38:	4806      	ldr	r0, [pc, #24]	; (800bc54 <shci_init+0x34>)
 800bc3a:	f000 f911 	bl	800be60 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	4618      	mov	r0, r3
 800bc44:	f000 f894 	bl	800bd70 <TlInit>

  return;
 800bc48:	bf00      	nop
}
 800bc4a:	3708      	adds	r7, #8
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bd80      	pop	{r7, pc}
 800bc50:	2000038c 	.word	0x2000038c
 800bc54:	2000036c 	.word	0x2000036c

0800bc58 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b084      	sub	sp, #16
 800bc5c:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800bc5e:	4822      	ldr	r0, [pc, #136]	; (800bce8 <shci_user_evt_proc+0x90>)
 800bc60:	f000 fafc 	bl	800c25c <LST_is_empty>
 800bc64:	4603      	mov	r3, r0
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d12b      	bne.n	800bcc2 <shci_user_evt_proc+0x6a>
 800bc6a:	4b20      	ldr	r3, [pc, #128]	; (800bcec <shci_user_evt_proc+0x94>)
 800bc6c:	781b      	ldrb	r3, [r3, #0]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d027      	beq.n	800bcc2 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800bc72:	f107 030c 	add.w	r3, r7, #12
 800bc76:	4619      	mov	r1, r3
 800bc78:	481b      	ldr	r0, [pc, #108]	; (800bce8 <shci_user_evt_proc+0x90>)
 800bc7a:	f000 fb7e 	bl	800c37a <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800bc7e:	4b1c      	ldr	r3, [pc, #112]	; (800bcf0 <shci_user_evt_proc+0x98>)
 800bc80:	69db      	ldr	r3, [r3, #28]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d00c      	beq.n	800bca0 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800bc8a:	2301      	movs	r3, #1
 800bc8c:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800bc8e:	4b18      	ldr	r3, [pc, #96]	; (800bcf0 <shci_user_evt_proc+0x98>)
 800bc90:	69db      	ldr	r3, [r3, #28]
 800bc92:	1d3a      	adds	r2, r7, #4
 800bc94:	4610      	mov	r0, r2
 800bc96:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800bc98:	793a      	ldrb	r2, [r7, #4]
 800bc9a:	4b14      	ldr	r3, [pc, #80]	; (800bcec <shci_user_evt_proc+0x94>)
 800bc9c:	701a      	strb	r2, [r3, #0]
 800bc9e:	e002      	b.n	800bca6 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800bca0:	4b12      	ldr	r3, [pc, #72]	; (800bcec <shci_user_evt_proc+0x94>)
 800bca2:	2201      	movs	r2, #1
 800bca4:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800bca6:	4b11      	ldr	r3, [pc, #68]	; (800bcec <shci_user_evt_proc+0x94>)
 800bca8:	781b      	ldrb	r3, [r3, #0]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d004      	beq.n	800bcb8 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	f000 f9fb 	bl	800c0ac <TL_MM_EvtDone>
 800bcb6:	e004      	b.n	800bcc2 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	4619      	mov	r1, r3
 800bcbc:	480a      	ldr	r0, [pc, #40]	; (800bce8 <shci_user_evt_proc+0x90>)
 800bcbe:	f000 faef 	bl	800c2a0 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800bcc2:	4809      	ldr	r0, [pc, #36]	; (800bce8 <shci_user_evt_proc+0x90>)
 800bcc4:	f000 faca 	bl	800c25c <LST_is_empty>
 800bcc8:	4603      	mov	r3, r0
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d107      	bne.n	800bcde <shci_user_evt_proc+0x86>
 800bcce:	4b07      	ldr	r3, [pc, #28]	; (800bcec <shci_user_evt_proc+0x94>)
 800bcd0:	781b      	ldrb	r3, [r3, #0]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d003      	beq.n	800bcde <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800bcd6:	4804      	ldr	r0, [pc, #16]	; (800bce8 <shci_user_evt_proc+0x90>)
 800bcd8:	f7f4 fc9b 	bl	8000612 <shci_notify_asynch_evt>
  }


  return;
 800bcdc:	bf00      	nop
 800bcde:	bf00      	nop
}
 800bce0:	3710      	adds	r7, #16
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bd80      	pop	{r7, pc}
 800bce6:	bf00      	nop
 800bce8:	2000027c 	.word	0x2000027c
 800bcec:	2000028c 	.word	0x2000028c
 800bcf0:	2000036c 	.word	0x2000036c

0800bcf4 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b084      	sub	sp, #16
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	60ba      	str	r2, [r7, #8]
 800bcfc:	607b      	str	r3, [r7, #4]
 800bcfe:	4603      	mov	r3, r0
 800bd00:	81fb      	strh	r3, [r7, #14]
 800bd02:	460b      	mov	r3, r1
 800bd04:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800bd06:	2000      	movs	r0, #0
 800bd08:	f000 f864 	bl	800bdd4 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800bd0c:	4b16      	ldr	r3, [pc, #88]	; (800bd68 <shci_send+0x74>)
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	89fa      	ldrh	r2, [r7, #14]
 800bd12:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800bd16:	4b14      	ldr	r3, [pc, #80]	; (800bd68 <shci_send+0x74>)
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	7b7a      	ldrb	r2, [r7, #13]
 800bd1c:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800bd1e:	4b12      	ldr	r3, [pc, #72]	; (800bd68 <shci_send+0x74>)
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	330c      	adds	r3, #12
 800bd24:	7b7a      	ldrb	r2, [r7, #13]
 800bd26:	68b9      	ldr	r1, [r7, #8]
 800bd28:	4618      	mov	r0, r3
 800bd2a:	f001 ffe3 	bl	800dcf4 <memcpy>

  shciContext.io.Send(0,0);
 800bd2e:	4b0f      	ldr	r3, [pc, #60]	; (800bd6c <shci_send+0x78>)
 800bd30:	691b      	ldr	r3, [r3, #16]
 800bd32:	2100      	movs	r1, #0
 800bd34:	2000      	movs	r0, #0
 800bd36:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800bd38:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800bd3c:	f7f4 fc80 	bl	8000640 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	f103 0008 	add.w	r0, r3, #8
 800bd46:	4b08      	ldr	r3, [pc, #32]	; (800bd68 <shci_send+0x74>)
 800bd48:	6819      	ldr	r1, [r3, #0]
 800bd4a:	4b07      	ldr	r3, [pc, #28]	; (800bd68 <shci_send+0x74>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	789b      	ldrb	r3, [r3, #2]
 800bd50:	3303      	adds	r3, #3
 800bd52:	461a      	mov	r2, r3
 800bd54:	f001 ffce 	bl	800dcf4 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800bd58:	2001      	movs	r0, #1
 800bd5a:	f000 f83b 	bl	800bdd4 <Cmd_SetStatus>

  return;
 800bd5e:	bf00      	nop
}
 800bd60:	3710      	adds	r7, #16
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}
 800bd66:	bf00      	nop
 800bd68:	20000288 	.word	0x20000288
 800bd6c:	2000036c 	.word	0x2000036c

0800bd70 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b086      	sub	sp, #24
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800bd78:	4a10      	ldr	r2, [pc, #64]	; (800bdbc <TlInit+0x4c>)
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800bd7e:	4810      	ldr	r0, [pc, #64]	; (800bdc0 <TlInit+0x50>)
 800bd80:	f000 fa5c 	bl	800c23c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800bd84:	2001      	movs	r0, #1
 800bd86:	f000 f825 	bl	800bdd4 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800bd8a:	4b0e      	ldr	r3, [pc, #56]	; (800bdc4 <TlInit+0x54>)
 800bd8c:	2201      	movs	r2, #1
 800bd8e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800bd90:	4b0d      	ldr	r3, [pc, #52]	; (800bdc8 <TlInit+0x58>)
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d00c      	beq.n	800bdb2 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800bd9c:	4b0b      	ldr	r3, [pc, #44]	; (800bdcc <TlInit+0x5c>)
 800bd9e:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800bda0:	4b0b      	ldr	r3, [pc, #44]	; (800bdd0 <TlInit+0x60>)
 800bda2:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800bda4:	4b08      	ldr	r3, [pc, #32]	; (800bdc8 <TlInit+0x58>)
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	f107 020c 	add.w	r2, r7, #12
 800bdac:	4610      	mov	r0, r2
 800bdae:	4798      	blx	r3
  }

  return;
 800bdb0:	bf00      	nop
 800bdb2:	bf00      	nop
}
 800bdb4:	3718      	adds	r7, #24
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bd80      	pop	{r7, pc}
 800bdba:	bf00      	nop
 800bdbc:	20000288 	.word	0x20000288
 800bdc0:	2000027c 	.word	0x2000027c
 800bdc4:	2000028c 	.word	0x2000028c
 800bdc8:	2000036c 	.word	0x2000036c
 800bdcc:	0800be25 	.word	0x0800be25
 800bdd0:	0800be3d 	.word	0x0800be3d

0800bdd4 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b082      	sub	sp, #8
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	4603      	mov	r3, r0
 800bddc:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800bdde:	79fb      	ldrb	r3, [r7, #7]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d10b      	bne.n	800bdfc <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800bde4:	4b0d      	ldr	r3, [pc, #52]	; (800be1c <Cmd_SetStatus+0x48>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d003      	beq.n	800bdf4 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800bdec:	4b0b      	ldr	r3, [pc, #44]	; (800be1c <Cmd_SetStatus+0x48>)
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	2000      	movs	r0, #0
 800bdf2:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800bdf4:	4b0a      	ldr	r3, [pc, #40]	; (800be20 <Cmd_SetStatus+0x4c>)
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800bdfa:	e00b      	b.n	800be14 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800bdfc:	4b08      	ldr	r3, [pc, #32]	; (800be20 <Cmd_SetStatus+0x4c>)
 800bdfe:	2201      	movs	r2, #1
 800be00:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800be02:	4b06      	ldr	r3, [pc, #24]	; (800be1c <Cmd_SetStatus+0x48>)
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d004      	beq.n	800be14 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800be0a:	4b04      	ldr	r3, [pc, #16]	; (800be1c <Cmd_SetStatus+0x48>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	2001      	movs	r0, #1
 800be10:	4798      	blx	r3
  return;
 800be12:	bf00      	nop
 800be14:	bf00      	nop
}
 800be16:	3708      	adds	r7, #8
 800be18:	46bd      	mov	sp, r7
 800be1a:	bd80      	pop	{r7, pc}
 800be1c:	2000038c 	.word	0x2000038c
 800be20:	20000284 	.word	0x20000284

0800be24 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b082      	sub	sp, #8
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800be2c:	2000      	movs	r0, #0
 800be2e:	f7f4 fbfc 	bl	800062a <shci_cmd_resp_release>

  return;
 800be32:	bf00      	nop
}
 800be34:	3708      	adds	r7, #8
 800be36:	46bd      	mov	sp, r7
 800be38:	bd80      	pop	{r7, pc}
	...

0800be3c <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b082      	sub	sp, #8
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800be44:	6879      	ldr	r1, [r7, #4]
 800be46:	4805      	ldr	r0, [pc, #20]	; (800be5c <TlUserEvtReceived+0x20>)
 800be48:	f000 fa50 	bl	800c2ec <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800be4c:	4803      	ldr	r0, [pc, #12]	; (800be5c <TlUserEvtReceived+0x20>)
 800be4e:	f7f4 fbe0 	bl	8000612 <shci_notify_asynch_evt>

  return;
 800be52:	bf00      	nop
}
 800be54:	3708      	adds	r7, #8
 800be56:	46bd      	mov	sp, r7
 800be58:	bd80      	pop	{r7, pc}
 800be5a:	bf00      	nop
 800be5c:	2000027c 	.word	0x2000027c

0800be60 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800be60:	b480      	push	{r7}
 800be62:	b083      	sub	sp, #12
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	4a05      	ldr	r2, [pc, #20]	; (800be80 <shci_register_io_bus+0x20>)
 800be6c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	4a04      	ldr	r2, [pc, #16]	; (800be84 <shci_register_io_bus+0x24>)
 800be72:	611a      	str	r2, [r3, #16]

  return;
 800be74:	bf00      	nop
}
 800be76:	370c      	adds	r7, #12
 800be78:	46bd      	mov	sp, r7
 800be7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7e:	4770      	bx	lr
 800be80:	0800bfa9 	.word	0x0800bfa9
 800be84:	0800bffd 	.word	0x0800bffd

0800be88 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800be8c:	f000 fee6 	bl	800cc5c <HW_IPCC_Enable>

  return;
 800be90:	bf00      	nop
}
 800be92:	bd80      	pop	{r7, pc}

0800be94 <TL_Init>:


void TL_Init( void )
{
 800be94:	b580      	push	{r7, lr}
 800be96:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800be98:	4b10      	ldr	r3, [pc, #64]	; (800bedc <TL_Init+0x48>)
 800be9a:	4a11      	ldr	r2, [pc, #68]	; (800bee0 <TL_Init+0x4c>)
 800be9c:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800be9e:	4b0f      	ldr	r3, [pc, #60]	; (800bedc <TL_Init+0x48>)
 800bea0:	4a10      	ldr	r2, [pc, #64]	; (800bee4 <TL_Init+0x50>)
 800bea2:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800bea4:	4b0d      	ldr	r3, [pc, #52]	; (800bedc <TL_Init+0x48>)
 800bea6:	4a10      	ldr	r2, [pc, #64]	; (800bee8 <TL_Init+0x54>)
 800bea8:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800beaa:	4b0c      	ldr	r3, [pc, #48]	; (800bedc <TL_Init+0x48>)
 800beac:	4a0f      	ldr	r2, [pc, #60]	; (800beec <TL_Init+0x58>)
 800beae:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800beb0:	4b0a      	ldr	r3, [pc, #40]	; (800bedc <TL_Init+0x48>)
 800beb2:	4a0f      	ldr	r2, [pc, #60]	; (800bef0 <TL_Init+0x5c>)
 800beb4:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800beb6:	4b09      	ldr	r3, [pc, #36]	; (800bedc <TL_Init+0x48>)
 800beb8:	4a0e      	ldr	r2, [pc, #56]	; (800bef4 <TL_Init+0x60>)
 800beba:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800bebc:	4b07      	ldr	r3, [pc, #28]	; (800bedc <TL_Init+0x48>)
 800bebe:	4a0e      	ldr	r2, [pc, #56]	; (800bef8 <TL_Init+0x64>)
 800bec0:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800bec2:	4b06      	ldr	r3, [pc, #24]	; (800bedc <TL_Init+0x48>)
 800bec4:	4a0d      	ldr	r2, [pc, #52]	; (800befc <TL_Init+0x68>)
 800bec6:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800bec8:	4b04      	ldr	r3, [pc, #16]	; (800bedc <TL_Init+0x48>)
 800beca:	4a0d      	ldr	r2, [pc, #52]	; (800bf00 <TL_Init+0x6c>)
 800becc:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800bece:	4b03      	ldr	r3, [pc, #12]	; (800bedc <TL_Init+0x48>)
 800bed0:	4a0c      	ldr	r2, [pc, #48]	; (800bf04 <TL_Init+0x70>)
 800bed2:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800bed4:	f000 fed6 	bl	800cc84 <HW_IPCC_Init>

  return;
 800bed8:	bf00      	nop
}
 800beda:	bd80      	pop	{r7, pc}
 800bedc:	20030000 	.word	0x20030000
 800bee0:	20030028 	.word	0x20030028
 800bee4:	20030048 	.word	0x20030048
 800bee8:	20030058 	.word	0x20030058
 800beec:	20030064 	.word	0x20030064
 800bef0:	2003006c 	.word	0x2003006c
 800bef4:	20030074 	.word	0x20030074
 800bef8:	2003007c 	.word	0x2003007c
 800befc:	20030098 	.word	0x20030098
 800bf00:	2003009c 	.word	0x2003009c
 800bf04:	200300a8 	.word	0x200300a8

0800bf08 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b084      	sub	sp, #16
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800bf14:	4811      	ldr	r0, [pc, #68]	; (800bf5c <TL_BLE_Init+0x54>)
 800bf16:	f000 f991 	bl	800c23c <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800bf1a:	4b11      	ldr	r3, [pc, #68]	; (800bf60 <TL_BLE_Init+0x58>)
 800bf1c:	685b      	ldr	r3, [r3, #4]
 800bf1e:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	689a      	ldr	r2, [r3, #8]
 800bf24:	68bb      	ldr	r3, [r7, #8]
 800bf26:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	68da      	ldr	r2, [r3, #12]
 800bf2c:	68bb      	ldr	r3, [r7, #8]
 800bf2e:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800bf30:	68bb      	ldr	r3, [r7, #8]
 800bf32:	4a0c      	ldr	r2, [pc, #48]	; (800bf64 <TL_BLE_Init+0x5c>)
 800bf34:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800bf36:	68bb      	ldr	r3, [r7, #8]
 800bf38:	4a08      	ldr	r2, [pc, #32]	; (800bf5c <TL_BLE_Init+0x54>)
 800bf3a:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800bf3c:	f000 feb8 	bl	800ccb0 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	4a08      	ldr	r2, [pc, #32]	; (800bf68 <TL_BLE_Init+0x60>)
 800bf46:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	685b      	ldr	r3, [r3, #4]
 800bf4c:	4a07      	ldr	r2, [pc, #28]	; (800bf6c <TL_BLE_Init+0x64>)
 800bf4e:	6013      	str	r3, [r2, #0]

  return 0;
 800bf50:	2300      	movs	r3, #0
}
 800bf52:	4618      	mov	r0, r3
 800bf54:	3710      	adds	r7, #16
 800bf56:	46bd      	mov	sp, r7
 800bf58:	bd80      	pop	{r7, pc}
 800bf5a:	bf00      	nop
 800bf5c:	200300c4 	.word	0x200300c4
 800bf60:	20030000 	.word	0x20030000
 800bf64:	20030a48 	.word	0x20030a48
 800bf68:	20000398 	.word	0x20000398
 800bf6c:	2000039c 	.word	0x2000039c

0800bf70 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b082      	sub	sp, #8
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
 800bf78:	460b      	mov	r3, r1
 800bf7a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800bf7c:	4b09      	ldr	r3, [pc, #36]	; (800bfa4 <TL_BLE_SendCmd+0x34>)
 800bf7e:	685b      	ldr	r3, [r3, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	2201      	movs	r2, #1
 800bf84:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800bf86:	4b07      	ldr	r3, [pc, #28]	; (800bfa4 <TL_BLE_SendCmd+0x34>)
 800bf88:	685b      	ldr	r3, [r3, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	4619      	mov	r1, r3
 800bf8e:	2001      	movs	r0, #1
 800bf90:	f000 f8d6 	bl	800c140 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800bf94:	f000 fe96 	bl	800ccc4 <HW_IPCC_BLE_SendCmd>

  return 0;
 800bf98:	2300      	movs	r3, #0
}
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	3708      	adds	r7, #8
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	bd80      	pop	{r7, pc}
 800bfa2:	bf00      	nop
 800bfa4:	20030000 	.word	0x20030000

0800bfa8 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b084      	sub	sp, #16
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800bfb4:	480d      	ldr	r0, [pc, #52]	; (800bfec <TL_SYS_Init+0x44>)
 800bfb6:	f000 f941 	bl	800c23c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800bfba:	4b0d      	ldr	r3, [pc, #52]	; (800bff0 <TL_SYS_Init+0x48>)
 800bfbc:	68db      	ldr	r3, [r3, #12]
 800bfbe:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	689a      	ldr	r2, [r3, #8]
 800bfc4:	68bb      	ldr	r3, [r7, #8]
 800bfc6:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800bfc8:	68bb      	ldr	r3, [r7, #8]
 800bfca:	4a08      	ldr	r2, [pc, #32]	; (800bfec <TL_SYS_Init+0x44>)
 800bfcc:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800bfce:	f000 fe83 	bl	800ccd8 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	4a07      	ldr	r2, [pc, #28]	; (800bff4 <TL_SYS_Init+0x4c>)
 800bfd8:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	685b      	ldr	r3, [r3, #4]
 800bfde:	4a06      	ldr	r2, [pc, #24]	; (800bff8 <TL_SYS_Init+0x50>)
 800bfe0:	6013      	str	r3, [r2, #0]

  return 0;
 800bfe2:	2300      	movs	r3, #0
}
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	3710      	adds	r7, #16
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bd80      	pop	{r7, pc}
 800bfec:	200300cc 	.word	0x200300cc
 800bff0:	20030000 	.word	0x20030000
 800bff4:	200003a0 	.word	0x200003a0
 800bff8:	200003a4 	.word	0x200003a4

0800bffc <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b082      	sub	sp, #8
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
 800c004:	460b      	mov	r3, r1
 800c006:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800c008:	4b09      	ldr	r3, [pc, #36]	; (800c030 <TL_SYS_SendCmd+0x34>)
 800c00a:	68db      	ldr	r3, [r3, #12]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	2210      	movs	r2, #16
 800c010:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800c012:	4b07      	ldr	r3, [pc, #28]	; (800c030 <TL_SYS_SendCmd+0x34>)
 800c014:	68db      	ldr	r3, [r3, #12]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	4619      	mov	r1, r3
 800c01a:	2004      	movs	r0, #4
 800c01c:	f000 f890 	bl	800c140 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800c020:	f000 fe64 	bl	800ccec <HW_IPCC_SYS_SendCmd>

  return 0;
 800c024:	2300      	movs	r3, #0
}
 800c026:	4618      	mov	r0, r3
 800c028:	3708      	adds	r7, #8
 800c02a:	46bd      	mov	sp, r7
 800c02c:	bd80      	pop	{r7, pc}
 800c02e:	bf00      	nop
 800c030:	20030000 	.word	0x20030000

0800c034 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b082      	sub	sp, #8
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800c03c:	4817      	ldr	r0, [pc, #92]	; (800c09c <TL_MM_Init+0x68>)
 800c03e:	f000 f8fd 	bl	800c23c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800c042:	4817      	ldr	r0, [pc, #92]	; (800c0a0 <TL_MM_Init+0x6c>)
 800c044:	f000 f8fa 	bl	800c23c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800c048:	4b16      	ldr	r3, [pc, #88]	; (800c0a4 <TL_MM_Init+0x70>)
 800c04a:	691b      	ldr	r3, [r3, #16]
 800c04c:	4a16      	ldr	r2, [pc, #88]	; (800c0a8 <TL_MM_Init+0x74>)
 800c04e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800c050:	4b15      	ldr	r3, [pc, #84]	; (800c0a8 <TL_MM_Init+0x74>)
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	687a      	ldr	r2, [r7, #4]
 800c056:	6892      	ldr	r2, [r2, #8]
 800c058:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800c05a:	4b13      	ldr	r3, [pc, #76]	; (800c0a8 <TL_MM_Init+0x74>)
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	687a      	ldr	r2, [r7, #4]
 800c060:	68d2      	ldr	r2, [r2, #12]
 800c062:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800c064:	4b10      	ldr	r3, [pc, #64]	; (800c0a8 <TL_MM_Init+0x74>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	4a0c      	ldr	r2, [pc, #48]	; (800c09c <TL_MM_Init+0x68>)
 800c06a:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800c06c:	4b0e      	ldr	r3, [pc, #56]	; (800c0a8 <TL_MM_Init+0x74>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	687a      	ldr	r2, [r7, #4]
 800c072:	6812      	ldr	r2, [r2, #0]
 800c074:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800c076:	4b0c      	ldr	r3, [pc, #48]	; (800c0a8 <TL_MM_Init+0x74>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	687a      	ldr	r2, [r7, #4]
 800c07c:	6852      	ldr	r2, [r2, #4]
 800c07e:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800c080:	4b09      	ldr	r3, [pc, #36]	; (800c0a8 <TL_MM_Init+0x74>)
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	687a      	ldr	r2, [r7, #4]
 800c086:	6912      	ldr	r2, [r2, #16]
 800c088:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800c08a:	4b07      	ldr	r3, [pc, #28]	; (800c0a8 <TL_MM_Init+0x74>)
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	687a      	ldr	r2, [r7, #4]
 800c090:	6952      	ldr	r2, [r2, #20]
 800c092:	619a      	str	r2, [r3, #24]

  return;
 800c094:	bf00      	nop
}
 800c096:	3708      	adds	r7, #8
 800c098:	46bd      	mov	sp, r7
 800c09a:	bd80      	pop	{r7, pc}
 800c09c:	200300b4 	.word	0x200300b4
 800c0a0:	20000390 	.word	0x20000390
 800c0a4:	20030000 	.word	0x20030000
 800c0a8:	200003a8 	.word	0x200003a8

0800c0ac <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b082      	sub	sp, #8
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800c0b4:	6879      	ldr	r1, [r7, #4]
 800c0b6:	4807      	ldr	r0, [pc, #28]	; (800c0d4 <TL_MM_EvtDone+0x28>)
 800c0b8:	f000 f918 	bl	800c2ec <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800c0bc:	6879      	ldr	r1, [r7, #4]
 800c0be:	2000      	movs	r0, #0
 800c0c0:	f000 f83e 	bl	800c140 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800c0c4:	4804      	ldr	r0, [pc, #16]	; (800c0d8 <TL_MM_EvtDone+0x2c>)
 800c0c6:	f000 fe1f 	bl	800cd08 <HW_IPCC_MM_SendFreeBuf>

  return;
 800c0ca:	bf00      	nop
}
 800c0cc:	3708      	adds	r7, #8
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	bd80      	pop	{r7, pc}
 800c0d2:	bf00      	nop
 800c0d4:	20000390 	.word	0x20000390
 800c0d8:	0800c0dd 	.word	0x0800c0dd

0800c0dc <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b082      	sub	sp, #8
 800c0e0:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800c0e2:	e00c      	b.n	800c0fe <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800c0e4:	1d3b      	adds	r3, r7, #4
 800c0e6:	4619      	mov	r1, r3
 800c0e8:	480a      	ldr	r0, [pc, #40]	; (800c114 <SendFreeBuf+0x38>)
 800c0ea:	f000 f946 	bl	800c37a <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800c0ee:	4b0a      	ldr	r3, [pc, #40]	; (800c118 <SendFreeBuf+0x3c>)
 800c0f0:	691b      	ldr	r3, [r3, #16]
 800c0f2:	691b      	ldr	r3, [r3, #16]
 800c0f4:	687a      	ldr	r2, [r7, #4]
 800c0f6:	4611      	mov	r1, r2
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	f000 f8f7 	bl	800c2ec <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800c0fe:	4805      	ldr	r0, [pc, #20]	; (800c114 <SendFreeBuf+0x38>)
 800c100:	f000 f8ac 	bl	800c25c <LST_is_empty>
 800c104:	4603      	mov	r3, r0
 800c106:	2b00      	cmp	r3, #0
 800c108:	d0ec      	beq.n	800c0e4 <SendFreeBuf+0x8>
  }

  return;
 800c10a:	bf00      	nop
}
 800c10c:	3708      	adds	r7, #8
 800c10e:	46bd      	mov	sp, r7
 800c110:	bd80      	pop	{r7, pc}
 800c112:	bf00      	nop
 800c114:	20000390 	.word	0x20000390
 800c118:	20030000 	.word	0x20030000

0800c11c <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800c120:	4805      	ldr	r0, [pc, #20]	; (800c138 <TL_TRACES_Init+0x1c>)
 800c122:	f000 f88b 	bl	800c23c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800c126:	4b05      	ldr	r3, [pc, #20]	; (800c13c <TL_TRACES_Init+0x20>)
 800c128:	695b      	ldr	r3, [r3, #20]
 800c12a:	4a03      	ldr	r2, [pc, #12]	; (800c138 <TL_TRACES_Init+0x1c>)
 800c12c:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800c12e:	f000 fe0d 	bl	800cd4c <HW_IPCC_TRACES_Init>

  return;
 800c132:	bf00      	nop
}
 800c134:	bd80      	pop	{r7, pc}
 800c136:	bf00      	nop
 800c138:	200300bc 	.word	0x200300bc
 800c13c:	20030000 	.word	0x20030000

0800c140 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800c140:	b480      	push	{r7}
 800c142:	b085      	sub	sp, #20
 800c144:	af00      	add	r7, sp, #0
 800c146:	4603      	mov	r3, r0
 800c148:	6039      	str	r1, [r7, #0]
 800c14a:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800c14c:	79fb      	ldrb	r3, [r7, #7]
 800c14e:	2b06      	cmp	r3, #6
 800c150:	d845      	bhi.n	800c1de <OutputDbgTrace+0x9e>
 800c152:	a201      	add	r2, pc, #4	; (adr r2, 800c158 <OutputDbgTrace+0x18>)
 800c154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c158:	0800c175 	.word	0x0800c175
 800c15c:	0800c199 	.word	0x0800c199
 800c160:	0800c19f 	.word	0x0800c19f
 800c164:	0800c1b3 	.word	0x0800c1b3
 800c168:	0800c1bf 	.word	0x0800c1bf
 800c16c:	0800c1c5 	.word	0x0800c1c5
 800c170:	0800c1d3 	.word	0x0800c1d3
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c174:	683b      	ldr	r3, [r7, #0]
 800c176:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	7a5b      	ldrb	r3, [r3, #9]
 800c17c:	2bff      	cmp	r3, #255	; 0xff
 800c17e:	d005      	beq.n	800c18c <OutputDbgTrace+0x4c>
 800c180:	2bff      	cmp	r3, #255	; 0xff
 800c182:	dc05      	bgt.n	800c190 <OutputDbgTrace+0x50>
 800c184:	2b0e      	cmp	r3, #14
 800c186:	d005      	beq.n	800c194 <OutputDbgTrace+0x54>
 800c188:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800c18a:	e001      	b.n	800c190 <OutputDbgTrace+0x50>
          break;
 800c18c:	bf00      	nop
 800c18e:	e027      	b.n	800c1e0 <OutputDbgTrace+0xa0>
          break;
 800c190:	bf00      	nop
 800c192:	e025      	b.n	800c1e0 <OutputDbgTrace+0xa0>
          break;
 800c194:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800c196:	e023      	b.n	800c1e0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800c19c:	e020      	b.n	800c1e0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	7a5b      	ldrb	r3, [r3, #9]
 800c1a6:	2b0e      	cmp	r3, #14
 800c1a8:	d001      	beq.n	800c1ae <OutputDbgTrace+0x6e>
 800c1aa:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800c1ac:	e000      	b.n	800c1b0 <OutputDbgTrace+0x70>
          break;
 800c1ae:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c1b0:	e016      	b.n	800c1e0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	7a5b      	ldrb	r3, [r3, #9]
 800c1ba:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c1bc:	e010      	b.n	800c1e0 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800c1c2:	e00d      	b.n	800c1e0 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c1c4:	683b      	ldr	r3, [r7, #0]
 800c1c6:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	7a5b      	ldrb	r3, [r3, #9]
 800c1cc:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800c1ce:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c1d0:	e006      	b.n	800c1e0 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	7a5b      	ldrb	r3, [r3, #9]
 800c1da:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c1dc:	e000      	b.n	800c1e0 <OutputDbgTrace+0xa0>

    default:
      break;
 800c1de:	bf00      	nop
  }

  return;
 800c1e0:	bf00      	nop
}
 800c1e2:	3714      	adds	r7, #20
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ea:	4770      	bx	lr

0800c1ec <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800c1ec:	b480      	push	{r7}
 800c1ee:	b085      	sub	sp, #20
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800c1f6:	4b0f      	ldr	r3, [pc, #60]	; (800c234 <OTP_Read+0x48>)
 800c1f8:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800c1fa:	e002      	b.n	800c202 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	3b08      	subs	r3, #8
 800c200:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	3307      	adds	r3, #7
 800c206:	781b      	ldrb	r3, [r3, #0]
 800c208:	79fa      	ldrb	r2, [r7, #7]
 800c20a:	429a      	cmp	r2, r3
 800c20c:	d003      	beq.n	800c216 <OTP_Read+0x2a>
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	4a09      	ldr	r2, [pc, #36]	; (800c238 <OTP_Read+0x4c>)
 800c212:	4293      	cmp	r3, r2
 800c214:	d1f2      	bne.n	800c1fc <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	3307      	adds	r3, #7
 800c21a:	781b      	ldrb	r3, [r3, #0]
 800c21c:	79fa      	ldrb	r2, [r7, #7]
 800c21e:	429a      	cmp	r2, r3
 800c220:	d001      	beq.n	800c226 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800c222:	2300      	movs	r3, #0
 800c224:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800c226:	68fb      	ldr	r3, [r7, #12]
}
 800c228:	4618      	mov	r0, r3
 800c22a:	3714      	adds	r7, #20
 800c22c:	46bd      	mov	sp, r7
 800c22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c232:	4770      	bx	lr
 800c234:	1fff73f8 	.word	0x1fff73f8
 800c238:	1fff7000 	.word	0x1fff7000

0800c23c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800c23c:	b480      	push	{r7}
 800c23e:	b083      	sub	sp, #12
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	687a      	ldr	r2, [r7, #4]
 800c248:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	687a      	ldr	r2, [r7, #4]
 800c24e:	605a      	str	r2, [r3, #4]
}
 800c250:	bf00      	nop
 800c252:	370c      	adds	r7, #12
 800c254:	46bd      	mov	sp, r7
 800c256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25a:	4770      	bx	lr

0800c25c <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800c25c:	b480      	push	{r7}
 800c25e:	b087      	sub	sp, #28
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c264:	f3ef 8310 	mrs	r3, PRIMASK
 800c268:	60fb      	str	r3, [r7, #12]
  return(result);
 800c26a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c26c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c26e:	b672      	cpsid	i
}
 800c270:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	687a      	ldr	r2, [r7, #4]
 800c278:	429a      	cmp	r2, r3
 800c27a:	d102      	bne.n	800c282 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800c27c:	2301      	movs	r3, #1
 800c27e:	75fb      	strb	r3, [r7, #23]
 800c280:	e001      	b.n	800c286 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800c282:	2300      	movs	r3, #0
 800c284:	75fb      	strb	r3, [r7, #23]
 800c286:	693b      	ldr	r3, [r7, #16]
 800c288:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c28a:	68bb      	ldr	r3, [r7, #8]
 800c28c:	f383 8810 	msr	PRIMASK, r3
}
 800c290:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800c292:	7dfb      	ldrb	r3, [r7, #23]
}
 800c294:	4618      	mov	r0, r3
 800c296:	371c      	adds	r7, #28
 800c298:	46bd      	mov	sp, r7
 800c29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29e:	4770      	bx	lr

0800c2a0 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800c2a0:	b480      	push	{r7}
 800c2a2:	b087      	sub	sp, #28
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
 800c2a8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c2aa:	f3ef 8310 	mrs	r3, PRIMASK
 800c2ae:	60fb      	str	r3, [r7, #12]
  return(result);
 800c2b0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c2b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c2b4:	b672      	cpsid	i
}
 800c2b6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681a      	ldr	r2, [r3, #0]
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800c2c0:	683b      	ldr	r3, [r7, #0]
 800c2c2:	687a      	ldr	r2, [r7, #4]
 800c2c4:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	683a      	ldr	r2, [r7, #0]
 800c2ca:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800c2cc:	683b      	ldr	r3, [r7, #0]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	683a      	ldr	r2, [r7, #0]
 800c2d2:	605a      	str	r2, [r3, #4]
 800c2d4:	697b      	ldr	r3, [r7, #20]
 800c2d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c2d8:	693b      	ldr	r3, [r7, #16]
 800c2da:	f383 8810 	msr	PRIMASK, r3
}
 800c2de:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c2e0:	bf00      	nop
 800c2e2:	371c      	adds	r7, #28
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ea:	4770      	bx	lr

0800c2ec <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800c2ec:	b480      	push	{r7}
 800c2ee:	b087      	sub	sp, #28
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
 800c2f4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c2f6:	f3ef 8310 	mrs	r3, PRIMASK
 800c2fa:	60fb      	str	r3, [r7, #12]
  return(result);
 800c2fc:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c2fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c300:	b672      	cpsid	i
}
 800c302:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800c304:	683b      	ldr	r3, [r7, #0]
 800c306:	687a      	ldr	r2, [r7, #4]
 800c308:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	685a      	ldr	r2, [r3, #4]
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	683a      	ldr	r2, [r7, #0]
 800c316:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800c318:	683b      	ldr	r3, [r7, #0]
 800c31a:	685b      	ldr	r3, [r3, #4]
 800c31c:	683a      	ldr	r2, [r7, #0]
 800c31e:	601a      	str	r2, [r3, #0]
 800c320:	697b      	ldr	r3, [r7, #20]
 800c322:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c324:	693b      	ldr	r3, [r7, #16]
 800c326:	f383 8810 	msr	PRIMASK, r3
}
 800c32a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c32c:	bf00      	nop
 800c32e:	371c      	adds	r7, #28
 800c330:	46bd      	mov	sp, r7
 800c332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c336:	4770      	bx	lr

0800c338 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800c338:	b480      	push	{r7}
 800c33a:	b087      	sub	sp, #28
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c340:	f3ef 8310 	mrs	r3, PRIMASK
 800c344:	60fb      	str	r3, [r7, #12]
  return(result);
 800c346:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c348:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c34a:	b672      	cpsid	i
}
 800c34c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	685b      	ldr	r3, [r3, #4]
 800c352:	687a      	ldr	r2, [r7, #4]
 800c354:	6812      	ldr	r2, [r2, #0]
 800c356:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	687a      	ldr	r2, [r7, #4]
 800c35e:	6852      	ldr	r2, [r2, #4]
 800c360:	605a      	str	r2, [r3, #4]
 800c362:	697b      	ldr	r3, [r7, #20]
 800c364:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c366:	693b      	ldr	r3, [r7, #16]
 800c368:	f383 8810 	msr	PRIMASK, r3
}
 800c36c:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c36e:	bf00      	nop
 800c370:	371c      	adds	r7, #28
 800c372:	46bd      	mov	sp, r7
 800c374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c378:	4770      	bx	lr

0800c37a <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800c37a:	b580      	push	{r7, lr}
 800c37c:	b086      	sub	sp, #24
 800c37e:	af00      	add	r7, sp, #0
 800c380:	6078      	str	r0, [r7, #4]
 800c382:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c384:	f3ef 8310 	mrs	r3, PRIMASK
 800c388:	60fb      	str	r3, [r7, #12]
  return(result);
 800c38a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c38c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c38e:	b672      	cpsid	i
}
 800c390:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681a      	ldr	r2, [r3, #0]
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	4618      	mov	r0, r3
 800c3a0:	f7ff ffca 	bl	800c338 <LST_remove_node>
 800c3a4:	697b      	ldr	r3, [r7, #20]
 800c3a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c3a8:	693b      	ldr	r3, [r7, #16]
 800c3aa:	f383 8810 	msr	PRIMASK, r3
}
 800c3ae:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c3b0:	bf00      	nop
 800c3b2:	3718      	adds	r7, #24
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bd80      	pop	{r7, pc}

0800c3b8 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800c3b8:	b480      	push	{r7}
 800c3ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800c3bc:	4b03      	ldr	r3, [pc, #12]	; (800c3cc <LL_FLASH_GetUDN+0x14>)
 800c3be:	681b      	ldr	r3, [r3, #0]
}
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c8:	4770      	bx	lr
 800c3ca:	bf00      	nop
 800c3cc:	1fff7580 	.word	0x1fff7580

0800c3d0 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800c3d0:	b480      	push	{r7}
 800c3d2:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800c3d4:	4b03      	ldr	r3, [pc, #12]	; (800c3e4 <LL_FLASH_GetDeviceID+0x14>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	b2db      	uxtb	r3, r3
}
 800c3da:	4618      	mov	r0, r3
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e2:	4770      	bx	lr
 800c3e4:	1fff7584 	.word	0x1fff7584

0800c3e8 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800c3e8:	b480      	push	{r7}
 800c3ea:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 800c3ec:	4b03      	ldr	r3, [pc, #12]	; (800c3fc <LL_FLASH_GetSTCompanyID+0x14>)
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	0a1b      	lsrs	r3, r3, #8
}
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fa:	4770      	bx	lr
 800c3fc:	1fff7584 	.word	0x1fff7584

0800c400 <APP_BLE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 800c400:	b5b0      	push	{r4, r5, r7, lr}
 800c402:	b08c      	sub	sp, #48	; 0x30
 800c404:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800c406:	4b2a      	ldr	r3, [pc, #168]	; (800c4b0 <APP_BLE_Init+0xb0>)
 800c408:	463c      	mov	r4, r7
 800c40a:	461d      	mov	r5, r3
 800c40c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c40e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c410:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c412:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c414:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800c418:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 800c41c:	f000 f904 	bl	800c628 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800c420:	2101      	movs	r1, #1
 800c422:	2002      	movs	r0, #2
 800c424:	f001 f9c4 	bl	800d7b0 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800c428:	4a22      	ldr	r2, [pc, #136]	; (800c4b4 <APP_BLE_Init+0xb4>)
 800c42a:	2100      	movs	r1, #0
 800c42c:	2004      	movs	r0, #4
 800c42e:	f001 fb05 	bl	800da3c <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  if (SHCI_C2_BLE_Init( &ble_init_cmd_packet ) != SHCI_Success)
 800c432:	463b      	mov	r3, r7
 800c434:	4618      	mov	r0, r3
 800c436:	f7ff fa2f 	bl	800b898 <SHCI_C2_BLE_Init>
 800c43a:	4603      	mov	r3, r0
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d001      	beq.n	800c444 <APP_BLE_Init+0x44>
  {
    Error_Handler();
 800c440:	f7f5 f908 	bl	8001654 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800c444:	f000 f906 	bl	800c654 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800c448:	f7ff f982 	bl	800b750 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800c44c:	4b1a      	ldr	r3, [pc, #104]	; (800c4b8 <APP_BLE_Init+0xb8>)
 800c44e:	2200      	movs	r2, #0
 800c450:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800c454:	4b18      	ldr	r3, [pc, #96]	; (800c4b8 <APP_BLE_Init+0xb8>)
 800c456:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c45a:	82da      	strh	r2, [r3, #22]
  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800c45c:	4a17      	ldr	r2, [pc, #92]	; (800c4bc <APP_BLE_Init+0xbc>)
 800c45e:	2100      	movs	r1, #0
 800c460:	2001      	movs	r0, #1
 800c462:	f001 faeb 	bl	800da3c <UTIL_SEQ_RegTask>
   */
#if(BLE_CFG_OTA_REBOOT_CHAR != 0)
  manuf_data[sizeof(manuf_data)-8] = CFG_FEATURE_OTA_REBOOT;
#endif
#if(RADIO_ACTIVITY_EVENT != 0)
  aci_hal_set_radio_activity_mask(0x0006);
 800c466:	2006      	movs	r0, #6
 800c468:	f7fe fea1 	bl	800b1ae <aci_hal_set_radio_activity_mask>
  mutex = 1;
#endif
  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 800c46c:	f000 fb1a 	bl	800caa4 <P2PS_APP_Init>

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 800c470:	4b13      	ldr	r3, [pc, #76]	; (800c4c0 <APP_BLE_Init+0xc0>)
 800c472:	2200      	movs	r2, #0
 800c474:	4913      	ldr	r1, [pc, #76]	; (800c4c4 <APP_BLE_Init+0xc4>)
 800c476:	2000      	movs	r0, #0
 800c478:	f7f4 fd2a 	bl	8000ed0 <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 800c47c:	4b12      	ldr	r3, [pc, #72]	; (800c4c8 <APP_BLE_Init+0xc8>)
 800c47e:	2200      	movs	r2, #0
 800c480:	4912      	ldr	r1, [pc, #72]	; (800c4cc <APP_BLE_Init+0xcc>)
 800c482:	2000      	movs	r0, #0
 800c484:	f7f4 fd24 	bl	8000ed0 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800c488:	4b0b      	ldr	r3, [pc, #44]	; (800c4b8 <APP_BLE_Init+0xb8>)
 800c48a:	2200      	movs	r2, #0
 800c48c:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800c48e:	4b0a      	ldr	r3, [pc, #40]	; (800c4b8 <APP_BLE_Init+0xb8>)
 800c490:	2200      	movs	r2, #0
 800c492:	761a      	strb	r2, [r3, #24]

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 800c494:	4b0e      	ldr	r3, [pc, #56]	; (800c4d0 <APP_BLE_Init+0xd0>)
 800c496:	2280      	movs	r2, #128	; 0x80
 800c498:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 800c49a:	4b0e      	ldr	r3, [pc, #56]	; (800c4d4 <APP_BLE_Init+0xd4>)
 800c49c:	22a0      	movs	r2, #160	; 0xa0
 800c49e:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
   Adv_Request(APP_BLE_FAST_ADV);
 800c4a0:	2001      	movs	r0, #1
 800c4a2:	f000 f999 	bl	800c7d8 <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 800c4a6:	bf00      	nop
}
 800c4a8:	3730      	adds	r7, #48	; 0x30
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bdb0      	pop	{r4, r5, r7, pc}
 800c4ae:	bf00      	nop
 800c4b0:	0800dd80 	.word	0x0800dd80
 800c4b4:	0800b92d 	.word	0x0800b92d
 800c4b8:	20000290 	.word	0x20000290
 800c4bc:	0800c941 	.word	0x0800c941
 800c4c0:	0800c975 	.word	0x0800c975
 800c4c4:	20000311 	.word	0x20000311
 800c4c8:	0800c985 	.word	0x0800c985
 800c4cc:	20000312 	.word	0x20000312
 800c4d0:	20000314 	.word	0x20000314
 800c4d4:	20000316 	.word	0x20000316

0800c4d8 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b08a      	sub	sp, #40	; 0x28
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blecore_aci *blecore_evt;
  hci_le_phy_update_complete_event_rp0 *evt_le_phy_update_complete;
  uint8_t TX_PHY, RX_PHY;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800c4e0:	2342      	movs	r3, #66	; 0x42
 800c4e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	3301      	adds	r3, #1
 800c4ea:	623b      	str	r3, [r7, #32]

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  switch (event_pckt->evt)
 800c4ec:	6a3b      	ldr	r3, [r7, #32]
 800c4ee:	781b      	ldrb	r3, [r3, #0]
 800c4f0:	2bff      	cmp	r3, #255	; 0xff
 800c4f2:	d076      	beq.n	800c5e2 <SVCCTL_App_Notification+0x10a>
 800c4f4:	2bff      	cmp	r3, #255	; 0xff
 800c4f6:	f300 808b 	bgt.w	800c610 <SVCCTL_App_Notification+0x138>
 800c4fa:	2b05      	cmp	r3, #5
 800c4fc:	d002      	beq.n	800c504 <SVCCTL_App_Notification+0x2c>
 800c4fe:	2b3e      	cmp	r3, #62	; 0x3e
 800c500:	d020      	beq.n	800c544 <SVCCTL_App_Notification+0x6c>

      default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800c502:	e085      	b.n	800c610 <SVCCTL_App_Notification+0x138>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 800c504:	6a3b      	ldr	r3, [r7, #32]
 800c506:	3302      	adds	r3, #2
 800c508:	60fb      	str	r3, [r7, #12]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c510:	b29a      	uxth	r2, r3
 800c512:	4b43      	ldr	r3, [pc, #268]	; (800c620 <SVCCTL_App_Notification+0x148>)
 800c514:	8adb      	ldrh	r3, [r3, #22]
 800c516:	429a      	cmp	r2, r3
 800c518:	d106      	bne.n	800c528 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800c51a:	4b41      	ldr	r3, [pc, #260]	; (800c620 <SVCCTL_App_Notification+0x148>)
 800c51c:	2200      	movs	r2, #0
 800c51e:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800c520:	4b3f      	ldr	r3, [pc, #252]	; (800c620 <SVCCTL_App_Notification+0x148>)
 800c522:	2200      	movs	r2, #0
 800c524:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 800c528:	2001      	movs	r0, #1
 800c52a:	f000 f955 	bl	800c7d8 <Adv_Request>
      handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 800c52e:	4b3d      	ldr	r3, [pc, #244]	; (800c624 <SVCCTL_App_Notification+0x14c>)
 800c530:	2201      	movs	r2, #1
 800c532:	701a      	strb	r2, [r3, #0]
      handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800c534:	4b3a      	ldr	r3, [pc, #232]	; (800c620 <SVCCTL_App_Notification+0x148>)
 800c536:	8ada      	ldrh	r2, [r3, #22]
 800c538:	4b3a      	ldr	r3, [pc, #232]	; (800c624 <SVCCTL_App_Notification+0x14c>)
 800c53a:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&handleNotification);
 800c53c:	4839      	ldr	r0, [pc, #228]	; (800c624 <SVCCTL_App_Notification+0x14c>)
 800c53e:	f000 fa9d 	bl	800ca7c <P2PS_APP_Notification>
    break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800c542:	e068      	b.n	800c616 <SVCCTL_App_Notification+0x13e>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 800c544:	6a3b      	ldr	r3, [r7, #32]
 800c546:	3302      	adds	r3, #2
 800c548:	61bb      	str	r3, [r7, #24]
      switch (meta_evt->subevent)
 800c54a:	69bb      	ldr	r3, [r7, #24]
 800c54c:	781b      	ldrb	r3, [r3, #0]
 800c54e:	2b0c      	cmp	r3, #12
 800c550:	d005      	beq.n	800c55e <SVCCTL_App_Notification+0x86>
 800c552:	2b0c      	cmp	r3, #12
 800c554:	dc41      	bgt.n	800c5da <SVCCTL_App_Notification+0x102>
 800c556:	2b01      	cmp	r3, #1
 800c558:	d017      	beq.n	800c58a <SVCCTL_App_Notification+0xb2>
 800c55a:	2b03      	cmp	r3, #3
          break;
 800c55c:	e03d      	b.n	800c5da <SVCCTL_App_Notification+0x102>
          evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)meta_evt->data;
 800c55e:	69bb      	ldr	r3, [r7, #24]
 800c560:	3301      	adds	r3, #1
 800c562:	617b      	str	r3, [r7, #20]
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,&TX_PHY,&RX_PHY);
 800c564:	4b2e      	ldr	r3, [pc, #184]	; (800c620 <SVCCTL_App_Notification+0x148>)
 800c566:	8adb      	ldrh	r3, [r3, #22]
 800c568:	f107 020a 	add.w	r2, r7, #10
 800c56c:	f107 010b 	add.w	r1, r7, #11
 800c570:	4618      	mov	r0, r3
 800c572:	f7fe fe8a 	bl	800b28a <hci_le_read_phy>
 800c576:	4603      	mov	r3, r0
 800c578:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret == BLE_STATUS_SUCCESS)
 800c57c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c580:	2b00      	cmp	r3, #0
 800c582:	d12c      	bne.n	800c5de <SVCCTL_App_Notification+0x106>
            if ((TX_PHY == TX_2M) && (RX_PHY == RX_2M))
 800c584:	7afb      	ldrb	r3, [r7, #11]
 800c586:	2b02      	cmp	r3, #2
          break;
 800c588:	e029      	b.n	800c5de <SVCCTL_App_Notification+0x106>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 800c58a:	69bb      	ldr	r3, [r7, #24]
 800c58c:	3301      	adds	r3, #1
 800c58e:	613b      	str	r3, [r7, #16]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800c590:	4b23      	ldr	r3, [pc, #140]	; (800c620 <SVCCTL_App_Notification+0x148>)
 800c592:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c596:	4618      	mov	r0, r3
 800c598:	f7f4 fd14 	bl	8000fc4 <HW_TS_Stop>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800c59c:	4b20      	ldr	r3, [pc, #128]	; (800c620 <SVCCTL_App_Notification+0x148>)
 800c59e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c5a2:	2b04      	cmp	r3, #4
 800c5a4:	d104      	bne.n	800c5b0 <SVCCTL_App_Notification+0xd8>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800c5a6:	4b1e      	ldr	r3, [pc, #120]	; (800c620 <SVCCTL_App_Notification+0x148>)
 800c5a8:	2206      	movs	r2, #6
 800c5aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 800c5ae:	e003      	b.n	800c5b8 <SVCCTL_App_Notification+0xe0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800c5b0:	4b1b      	ldr	r3, [pc, #108]	; (800c620 <SVCCTL_App_Notification+0x148>)
 800c5b2:	2205      	movs	r2, #5
 800c5b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 800c5b8:	693b      	ldr	r3, [r7, #16]
 800c5ba:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c5be:	b29a      	uxth	r2, r3
 800c5c0:	4b17      	ldr	r3, [pc, #92]	; (800c620 <SVCCTL_App_Notification+0x148>)
 800c5c2:	82da      	strh	r2, [r3, #22]
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 800c5c4:	4b17      	ldr	r3, [pc, #92]	; (800c624 <SVCCTL_App_Notification+0x14c>)
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800c5ca:	4b15      	ldr	r3, [pc, #84]	; (800c620 <SVCCTL_App_Notification+0x148>)
 800c5cc:	8ada      	ldrh	r2, [r3, #22]
 800c5ce:	4b15      	ldr	r3, [pc, #84]	; (800c624 <SVCCTL_App_Notification+0x14c>)
 800c5d0:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 800c5d2:	4814      	ldr	r0, [pc, #80]	; (800c624 <SVCCTL_App_Notification+0x14c>)
 800c5d4:	f000 fa52 	bl	800ca7c <P2PS_APP_Notification>
        break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800c5d8:	e002      	b.n	800c5e0 <SVCCTL_App_Notification+0x108>
          break;
 800c5da:	bf00      	nop
 800c5dc:	e01b      	b.n	800c616 <SVCCTL_App_Notification+0x13e>
          break;
 800c5de:	bf00      	nop
    break; /* HCI_LE_META_EVT_CODE */
 800c5e0:	e019      	b.n	800c616 <SVCCTL_App_Notification+0x13e>
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800c5e2:	6a3b      	ldr	r3, [r7, #32]
 800c5e4:	3302      	adds	r3, #2
 800c5e6:	61fb      	str	r3, [r7, #28]
      switch (blecore_evt->ecode)
 800c5e8:	69fb      	ldr	r3, [r7, #28]
 800c5ea:	881b      	ldrh	r3, [r3, #0]
 800c5ec:	b29b      	uxth	r3, r3
 800c5ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c5f2:	d009      	beq.n	800c608 <SVCCTL_App_Notification+0x130>
 800c5f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c5f8:	dc0c      	bgt.n	800c614 <SVCCTL_App_Notification+0x13c>
 800c5fa:	2b04      	cmp	r3, #4
 800c5fc:	d006      	beq.n	800c60c <SVCCTL_App_Notification+0x134>
 800c5fe:	f240 4207 	movw	r2, #1031	; 0x407
 800c602:	4293      	cmp	r3, r2
 800c604:	d106      	bne.n	800c614 <SVCCTL_App_Notification+0x13c>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800c606:	e002      	b.n	800c60e <SVCCTL_App_Notification+0x136>
      break;
 800c608:	bf00      	nop
 800c60a:	e003      	b.n	800c614 <SVCCTL_App_Notification+0x13c>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800c60c:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800c60e:	e001      	b.n	800c614 <SVCCTL_App_Notification+0x13c>
      break;
 800c610:	bf00      	nop
 800c612:	e000      	b.n	800c616 <SVCCTL_App_Notification+0x13e>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800c614:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800c616:	2301      	movs	r3, #1
}
 800c618:	4618      	mov	r0, r3
 800c61a:	3728      	adds	r7, #40	; 0x28
 800c61c:	46bd      	mov	sp, r7
 800c61e:	bd80      	pop	{r7, pc}
 800c620:	20000290 	.word	0x20000290
 800c624:	20000784 	.word	0x20000784

0800c628 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b082      	sub	sp, #8
 800c62c:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800c62e:	4b06      	ldr	r3, [pc, #24]	; (800c648 <Ble_Tl_Init+0x20>)
 800c630:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800c632:	4b06      	ldr	r3, [pc, #24]	; (800c64c <Ble_Tl_Init+0x24>)
 800c634:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800c636:	463b      	mov	r3, r7
 800c638:	4619      	mov	r1, r3
 800c63a:	4805      	ldr	r0, [pc, #20]	; (800c650 <Ble_Tl_Init+0x28>)
 800c63c:	f7ff f95a 	bl	800b8f4 <hci_init>

  return;
 800c640:	bf00      	nop
}
 800c642:	3708      	adds	r7, #8
 800c644:	46bd      	mov	sp, r7
 800c646:	bd80      	pop	{r7, pc}
 800c648:	200300d4 	.word	0x200300d4
 800c64c:	0800ca0f 	.word	0x0800ca0f
 800c650:	0800c9d7 	.word	0x0800c9d7

0800c654 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 800c654:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c656:	b08f      	sub	sp, #60	; 0x3c
 800c658:	af06      	add	r7, sp, #24

  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 800c65a:	2300      	movs	r3, #0
 800c65c:	803b      	strh	r3, [r7, #0]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 800c65e:	f7fe fdf0 	bl	800b242 <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 800c662:	f000 f929 	bl	800c8b8 <BleGetBdAddress>
 800c666:	61f8      	str	r0, [r7, #28]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 800c668:	69fa      	ldr	r2, [r7, #28]
 800c66a:	2106      	movs	r1, #6
 800c66c:	2000      	movs	r0, #0
 800c66e:	f7fe fcde 	bl	800b02e <aci_hal_write_config_data>
                            CONFIG_DATA_PUBADDR_LEN,
                            (uint8_t*) bd_addr);

  /* BLE MAC in ADV Packet */
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 800c672:	69fb      	ldr	r3, [r7, #28]
 800c674:	795a      	ldrb	r2, [r3, #5]
 800c676:	4b52      	ldr	r3, [pc, #328]	; (800c7c0 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800c678:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 800c67a:	69fb      	ldr	r3, [r7, #28]
 800c67c:	791a      	ldrb	r2, [r3, #4]
 800c67e:	4b50      	ldr	r3, [pc, #320]	; (800c7c0 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800c680:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 800c682:	69fb      	ldr	r3, [r7, #28]
 800c684:	78da      	ldrb	r2, [r3, #3]
 800c686:	4b4e      	ldr	r3, [pc, #312]	; (800c7c0 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800c688:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 800c68a:	69fb      	ldr	r3, [r7, #28]
 800c68c:	789a      	ldrb	r2, [r3, #2]
 800c68e:	4b4c      	ldr	r3, [pc, #304]	; (800c7c0 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800c690:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 800c692:	69fb      	ldr	r3, [r7, #28]
 800c694:	785a      	ldrb	r2, [r3, #1]
 800c696:	4b4a      	ldr	r3, [pc, #296]	; (800c7c0 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800c698:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 800c69a:	69fb      	ldr	r3, [r7, #28]
 800c69c:	781a      	ldrb	r2, [r3, #0]
 800c69e:	4b48      	ldr	r3, [pc, #288]	; (800c7c0 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800c6a0:	735a      	strb	r2, [r3, #13]
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 800c6a2:	f64e 536e 	movw	r3, #60782	; 0xed6e
 800c6a6:	60bb      	str	r3, [r7, #8]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 800c6a8:	f7ff fe86 	bl	800c3b8 <LL_FLASH_GetUDN>
 800c6ac:	4603      	mov	r3, r0
 800c6ae:	607b      	str	r3, [r7, #4]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 800c6b0:	1d3b      	adds	r3, r7, #4
 800c6b2:	461a      	mov	r2, r3
 800c6b4:	2106      	movs	r1, #6
 800c6b6:	202e      	movs	r0, #46	; 0x2e
 800c6b8:	f7fe fcb9 	bl	800b02e <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 800c6bc:	4a41      	ldr	r2, [pc, #260]	; (800c7c4 <Ble_Hci_Gap_Gatt_Init+0x170>)
 800c6be:	2110      	movs	r1, #16
 800c6c0:	2018      	movs	r0, #24
 800c6c2:	f7fe fcb4 	bl	800b02e <aci_hal_write_config_data>

   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 800c6c6:	4a40      	ldr	r2, [pc, #256]	; (800c7c8 <Ble_Hci_Gap_Gatt_Init+0x174>)
 800c6c8:	2110      	movs	r1, #16
 800c6ca:	2008      	movs	r0, #8
 800c6cc:	f7fe fcaf 	bl	800b02e <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800c6d0:	211a      	movs	r1, #26
 800c6d2:	2001      	movs	r0, #1
 800c6d4:	f7fe fd14 	bl	800b100 <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 800c6d8:	f7fe fa64 	bl	800aba4 <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 800c6dc:	2300      	movs	r3, #0
 800c6de:	76fb      	strb	r3, [r7, #27]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800c6e0:	7efb      	ldrb	r3, [r7, #27]
 800c6e2:	f043 0301 	orr.w	r3, r3, #1
 800c6e6:	76fb      	strb	r3, [r7, #27]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 800c6e8:	7efb      	ldrb	r3, [r7, #27]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d01e      	beq.n	800c72c <Ble_Hci_Gap_Gatt_Init+0xd8>
  {
    const char *name = "LPN-01";
 800c6ee:	4b37      	ldr	r3, [pc, #220]	; (800c7cc <Ble_Hci_Gap_Gatt_Init+0x178>)
 800c6f0:	617b      	str	r3, [r7, #20]
    aci_gap_init(role, 0,
 800c6f2:	f107 0212 	add.w	r2, r7, #18
 800c6f6:	7ef8      	ldrb	r0, [r7, #27]
 800c6f8:	f107 030e 	add.w	r3, r7, #14
 800c6fc:	9301      	str	r3, [sp, #4]
 800c6fe:	f107 0310 	add.w	r3, r7, #16
 800c702:	9300      	str	r3, [sp, #0]
 800c704:	4613      	mov	r3, r2
 800c706:	2207      	movs	r2, #7
 800c708:	2100      	movs	r1, #0
 800c70a:	f7fe f940 	bl	800a98e <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 800c70e:	8a7c      	ldrh	r4, [r7, #18]
 800c710:	8a3d      	ldrh	r5, [r7, #16]
 800c712:	6978      	ldr	r0, [r7, #20]
 800c714:	f7f3 fd32 	bl	800017c <strlen>
 800c718:	4603      	mov	r3, r0
 800c71a:	b2da      	uxtb	r2, r3
 800c71c:	697b      	ldr	r3, [r7, #20]
 800c71e:	9300      	str	r3, [sp, #0]
 800c720:	4613      	mov	r3, r2
 800c722:	2200      	movs	r2, #0
 800c724:	4629      	mov	r1, r5
 800c726:	4620      	mov	r0, r4
 800c728:	f7fe fbfa 	bl	800af20 <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 800c72c:	8a78      	ldrh	r0, [r7, #18]
 800c72e:	89f9      	ldrh	r1, [r7, #14]
 800c730:	463b      	mov	r3, r7
 800c732:	9300      	str	r3, [sp, #0]
 800c734:	2302      	movs	r3, #2
 800c736:	2200      	movs	r2, #0
 800c738:	f7fe fbf2 	bl	800af20 <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
  /**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800c73c:	2202      	movs	r2, #2
 800c73e:	2102      	movs	r1, #2
 800c740:	2000      	movs	r0, #0
 800c742:	f7fe fe0a 	bl	800b35a <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800c746:	4b22      	ldr	r3, [pc, #136]	; (800c7d0 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 800c748:	2201      	movs	r2, #1
 800c74a:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800c74c:	4b20      	ldr	r3, [pc, #128]	; (800c7d0 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 800c74e:	781b      	ldrb	r3, [r3, #0]
 800c750:	4618      	mov	r0, r3
 800c752:	f7fe f82a 	bl	800a7aa <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800c756:	4b1e      	ldr	r3, [pc, #120]	; (800c7d0 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 800c758:	2201      	movs	r2, #1
 800c75a:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800c75c:	4b1c      	ldr	r3, [pc, #112]	; (800c7d0 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 800c75e:	2208      	movs	r2, #8
 800c760:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800c762:	4b1b      	ldr	r3, [pc, #108]	; (800c7d0 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 800c764:	2210      	movs	r2, #16
 800c766:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800c768:	4b19      	ldr	r3, [pc, #100]	; (800c7d0 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 800c76a:	2200      	movs	r2, #0
 800c76c:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800c76e:	4b18      	ldr	r3, [pc, #96]	; (800c7d0 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 800c770:	4a18      	ldr	r2, [pc, #96]	; (800c7d4 <Ble_Hci_Gap_Gatt_Init+0x180>)
 800c772:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800c774:	4b16      	ldr	r3, [pc, #88]	; (800c7d0 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 800c776:	2201      	movs	r2, #1
 800c778:	709a      	strb	r2, [r3, #2]

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800c77a:	4b15      	ldr	r3, [pc, #84]	; (800c7d0 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 800c77c:	789c      	ldrb	r4, [r3, #2]
 800c77e:	4b14      	ldr	r3, [pc, #80]	; (800c7d0 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 800c780:	785d      	ldrb	r5, [r3, #1]
 800c782:	4b13      	ldr	r3, [pc, #76]	; (800c7d0 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 800c784:	791b      	ldrb	r3, [r3, #4]
 800c786:	4a12      	ldr	r2, [pc, #72]	; (800c7d0 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 800c788:	7952      	ldrb	r2, [r2, #5]
 800c78a:	4911      	ldr	r1, [pc, #68]	; (800c7d0 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 800c78c:	78c9      	ldrb	r1, [r1, #3]
 800c78e:	4810      	ldr	r0, [pc, #64]	; (800c7d0 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 800c790:	6880      	ldr	r0, [r0, #8]
 800c792:	2600      	movs	r6, #0
 800c794:	9604      	str	r6, [sp, #16]
 800c796:	9003      	str	r0, [sp, #12]
 800c798:	9102      	str	r1, [sp, #8]
 800c79a:	9201      	str	r2, [sp, #4]
 800c79c:	9300      	str	r3, [sp, #0]
 800c79e:	2300      	movs	r3, #0
 800c7a0:	2201      	movs	r2, #1
 800c7a2:	4629      	mov	r1, r5
 800c7a4:	4620      	mov	r0, r4
 800c7a6:	f7fe f84a 	bl	800a83e <aci_gap_set_authentication_requirement>
                                         );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800c7aa:	4b09      	ldr	r3, [pc, #36]	; (800c7d0 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 800c7ac:	789b      	ldrb	r3, [r3, #2]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d001      	beq.n	800c7b6 <Ble_Hci_Gap_Gatt_Init+0x162>
   {
     aci_gap_configure_whitelist();
 800c7b2:	f7fe f9d3 	bl	800ab5c <aci_gap_configure_whitelist>
   }
}
 800c7b6:	bf00      	nop
 800c7b8:	3724      	adds	r7, #36	; 0x24
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c7be:	bf00      	nop
 800c7c0:	20000120 	.word	0x20000120
 800c7c4:	0800dfe0 	.word	0x0800dfe0
 800c7c8:	0800dff0 	.word	0x0800dff0
 800c7cc:	0800ddb0 	.word	0x0800ddb0
 800c7d0:	20000290 	.word	0x20000290
 800c7d4:	0001b207 	.word	0x0001b207

0800c7d8 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b08c      	sub	sp, #48	; 0x30
 800c7dc:	af08      	add	r7, sp, #32
 800c7de:	4603      	mov	r3, r0
 800c7e0:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800c7e2:	2342      	movs	r3, #66	; 0x42
 800c7e4:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (New_Status == APP_BLE_FAST_ADV)
 800c7e6:	79fb      	ldrb	r3, [r7, #7]
 800c7e8:	2b01      	cmp	r3, #1
 800c7ea:	d106      	bne.n	800c7fa <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 800c7ec:	4b2b      	ldr	r3, [pc, #172]	; (800c89c <Adv_Request+0xc4>)
 800c7ee:	881b      	ldrh	r3, [r3, #0]
 800c7f0:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 800c7f2:	4b2b      	ldr	r3, [pc, #172]	; (800c8a0 <Adv_Request+0xc8>)
 800c7f4:	881b      	ldrh	r3, [r3, #0]
 800c7f6:	81bb      	strh	r3, [r7, #12]
 800c7f8:	e005      	b.n	800c806 <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 800c7fa:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 800c7fe:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 800c800:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800c804:	81bb      	strh	r3, [r7, #12]

    /**
     * Stop the timer, it will be restarted for a new shot
     * It does not hurt if the timer was not running
     */
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800c806:	4b27      	ldr	r3, [pc, #156]	; (800c8a4 <Adv_Request+0xcc>)
 800c808:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c80c:	4618      	mov	r0, r3
 800c80e:	f7f4 fbd9 	bl	8000fc4 <HW_TS_Stop>

    APP_DBG_MSG("First index in %d state \n", BleApplicationContext.Device_Connection_Status);

    if ((New_Status == APP_BLE_LP_ADV)
 800c812:	79fb      	ldrb	r3, [r7, #7]
 800c814:	2b02      	cmp	r3, #2
 800c816:	d10d      	bne.n	800c834 <Adv_Request+0x5c>
        && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 800c818:	4b22      	ldr	r3, [pc, #136]	; (800c8a4 <Adv_Request+0xcc>)
 800c81a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c81e:	2b01      	cmp	r3, #1
 800c820:	d004      	beq.n	800c82c <Adv_Request+0x54>
            || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 800c822:	4b20      	ldr	r3, [pc, #128]	; (800c8a4 <Adv_Request+0xcc>)
 800c824:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c828:	2b02      	cmp	r3, #2
 800c82a:	d103      	bne.n	800c834 <Adv_Request+0x5c>
    {
      /* Connection in ADVERTISE mode have to stop the current advertising */
      ret = aci_gap_set_non_discoverable();
 800c82c:	f7fd febb 	bl	800a5a6 <aci_gap_set_non_discoverable>
 800c830:	4603      	mov	r3, r0
 800c832:	72fb      	strb	r3, [r7, #11]
      {
        APP_DBG_MSG("Stop Advertising Failed , result: %d \n", ret);
      }
    }

    BleApplicationContext.Device_Connection_Status = New_Status;
 800c834:	4a1b      	ldr	r2, [pc, #108]	; (800c8a4 <Adv_Request+0xcc>)
 800c836:	79fb      	ldrb	r3, [r7, #7]
 800c838:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 800c83c:	4b19      	ldr	r3, [pc, #100]	; (800c8a4 <Adv_Request+0xcc>)
 800c83e:	7e1b      	ldrb	r3, [r3, #24]
 800c840:	89ba      	ldrh	r2, [r7, #12]
 800c842:	89f9      	ldrh	r1, [r7, #14]
 800c844:	2000      	movs	r0, #0
 800c846:	9006      	str	r0, [sp, #24]
 800c848:	2000      	movs	r0, #0
 800c84a:	9005      	str	r0, [sp, #20]
 800c84c:	4816      	ldr	r0, [pc, #88]	; (800c8a8 <Adv_Request+0xd0>)
 800c84e:	9004      	str	r0, [sp, #16]
 800c850:	9303      	str	r3, [sp, #12]
 800c852:	4b16      	ldr	r3, [pc, #88]	; (800c8ac <Adv_Request+0xd4>)
 800c854:	9302      	str	r3, [sp, #8]
 800c856:	2307      	movs	r3, #7
 800c858:	9301      	str	r3, [sp, #4]
 800c85a:	2300      	movs	r3, #0
 800c85c:	9300      	str	r3, [sp, #0]
 800c85e:	2300      	movs	r3, #0
 800c860:	2000      	movs	r0, #0
 800c862:	f7fd fec4 	bl	800a5ee <aci_gap_set_discoverable>
 800c866:	4603      	mov	r3, r0
 800c868:	72fb      	strb	r3, [r7, #11]
        BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
        0,
        0);

    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 800c86a:	4911      	ldr	r1, [pc, #68]	; (800c8b0 <Adv_Request+0xd8>)
 800c86c:	200e      	movs	r0, #14
 800c86e:	f7fe f919 	bl	800aaa4 <aci_gap_update_adv_data>
 800c872:	4603      	mov	r3, r0
 800c874:	72fb      	strb	r3, [r7, #11]
    if (ret == BLE_STATUS_SUCCESS)
 800c876:	7afb      	ldrb	r3, [r7, #11]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d10a      	bne.n	800c892 <Adv_Request+0xba>
    {
      if (New_Status == APP_BLE_FAST_ADV)
 800c87c:	79fb      	ldrb	r3, [r7, #7]
 800c87e:	2b01      	cmp	r3, #1
 800c880:	d107      	bne.n	800c892 <Adv_Request+0xba>
      {
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
        /* Start Timer to STOP ADV - TIMEOUT */
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 800c882:	4b08      	ldr	r3, [pc, #32]	; (800c8a4 <Adv_Request+0xcc>)
 800c884:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c888:	490a      	ldr	r1, [pc, #40]	; (800c8b4 <Adv_Request+0xdc>)
 800c88a:	4618      	mov	r0, r3
 800c88c:	f7f4 fc26 	bl	80010dc <HW_TS_Start>
      {
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
      }
    }

  return;
 800c890:	bf00      	nop
 800c892:	bf00      	nop
}
 800c894:	3710      	adds	r7, #16
 800c896:	46bd      	mov	sp, r7
 800c898:	bd80      	pop	{r7, pc}
 800c89a:	bf00      	nop
 800c89c:	20000314 	.word	0x20000314
 800c8a0:	20000316 	.word	0x20000316
 800c8a4:	20000290 	.word	0x20000290
 800c8a8:	200002a9 	.word	0x200002a9
 800c8ac:	0800e000 	.word	0x0800e000
 800c8b0:	20000120 	.word	0x20000120
 800c8b4:	0001e046 	.word	0x0001e046

0800c8b8 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b086      	sub	sp, #24
 800c8bc:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800c8be:	f7ff fd7b 	bl	800c3b8 <LL_FLASH_GetUDN>
 800c8c2:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 800c8c4:	693b      	ldr	r3, [r7, #16]
 800c8c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8ca:	d023      	beq.n	800c914 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800c8cc:	f7ff fd8c 	bl	800c3e8 <LL_FLASH_GetSTCompanyID>
 800c8d0:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800c8d2:	f7ff fd7d 	bl	800c3d0 <LL_FLASH_GetDeviceID>
 800c8d6:	6078      	str	r0, [r7, #4]
 * bit[23:16] : Device ID.
 * bit[15:0] : The last 16bits from the UDN
 * Note: In order to use the Public Address in a final product, a dedicated
 * 24bits company ID (OUI) shall be bought.
 */
    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 800c8d8:	693b      	ldr	r3, [r7, #16]
 800c8da:	b2da      	uxtb	r2, r3
 800c8dc:	4b16      	ldr	r3, [pc, #88]	; (800c938 <BleGetBdAddress+0x80>)
 800c8de:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 800c8e0:	693b      	ldr	r3, [r7, #16]
 800c8e2:	0a1b      	lsrs	r3, r3, #8
 800c8e4:	b2da      	uxtb	r2, r3
 800c8e6:	4b14      	ldr	r3, [pc, #80]	; (800c938 <BleGetBdAddress+0x80>)
 800c8e8:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)device_id;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	b2da      	uxtb	r2, r3
 800c8ee:	4b12      	ldr	r3, [pc, #72]	; (800c938 <BleGetBdAddress+0x80>)
 800c8f0:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)(company_id & 0x000000FF);
 800c8f2:	68bb      	ldr	r3, [r7, #8]
 800c8f4:	b2da      	uxtb	r2, r3
 800c8f6:	4b10      	ldr	r3, [pc, #64]	; (800c938 <BleGetBdAddress+0x80>)
 800c8f8:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 800c8fa:	68bb      	ldr	r3, [r7, #8]
 800c8fc:	0a1b      	lsrs	r3, r3, #8
 800c8fe:	b2da      	uxtb	r2, r3
 800c900:	4b0d      	ldr	r3, [pc, #52]	; (800c938 <BleGetBdAddress+0x80>)
 800c902:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x00FF0000) >> 16 );
 800c904:	68bb      	ldr	r3, [r7, #8]
 800c906:	0c1b      	lsrs	r3, r3, #16
 800c908:	b2da      	uxtb	r2, r3
 800c90a:	4b0b      	ldr	r3, [pc, #44]	; (800c938 <BleGetBdAddress+0x80>)
 800c90c:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 800c90e:	4b0a      	ldr	r3, [pc, #40]	; (800c938 <BleGetBdAddress+0x80>)
 800c910:	617b      	str	r3, [r7, #20]
 800c912:	e00b      	b.n	800c92c <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 800c914:	2000      	movs	r0, #0
 800c916:	f7ff fc69 	bl	800c1ec <OTP_Read>
 800c91a:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d002      	beq.n	800c928 <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	617b      	str	r3, [r7, #20]
 800c926:	e001      	b.n	800c92c <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 800c928:	4b04      	ldr	r3, [pc, #16]	; (800c93c <BleGetBdAddress+0x84>)
 800c92a:	617b      	str	r3, [r7, #20]
    }
  }

  return bd_addr;
 800c92c:	697b      	ldr	r3, [r7, #20]
}
 800c92e:	4618      	mov	r0, r3
 800c930:	3718      	adds	r7, #24
 800c932:	46bd      	mov	sp, r7
 800c934:	bd80      	pop	{r7, pc}
 800c936:	bf00      	nop
 800c938:	200003ac 	.word	0x200003ac
 800c93c:	0800dfd8 	.word	0x0800dfd8

0800c940 <Adv_Cancel>:
 *
 *SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel( void )
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b082      	sub	sp, #8
 800c944:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_1 */

/* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800c946:	4b0a      	ldr	r3, [pc, #40]	; (800c970 <Adv_Cancel+0x30>)
 800c948:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c94c:	2b05      	cmp	r3, #5
 800c94e:	d00a      	beq.n	800c966 <Adv_Cancel+0x26>

  {

    tBleStatus result = 0x00;
 800c950:	2300      	movs	r3, #0
 800c952:	71fb      	strb	r3, [r7, #7]

    result = aci_gap_set_non_discoverable();
 800c954:	f7fd fe27 	bl	800a5a6 <aci_gap_set_non_discoverable>
 800c958:	4603      	mov	r3, r0
 800c95a:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800c95c:	4b04      	ldr	r3, [pc, #16]	; (800c970 <Adv_Cancel+0x30>)
 800c95e:	2200      	movs	r2, #0
 800c960:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  }

/* USER CODE BEGIN Adv_Cancel_2 */

/* USER CODE END Adv_Cancel_2 */
  return;
 800c964:	bf00      	nop
 800c966:	bf00      	nop
}
 800c968:	3708      	adds	r7, #8
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bd80      	pop	{r7, pc}
 800c96e:	bf00      	nop
 800c970:	20000290 	.word	0x20000290

0800c974 <Adv_Cancel_Req>:

static void Adv_Cancel_Req( void )
{
 800c974:	b580      	push	{r7, lr}
 800c976:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_Req_1 */

/* USER CODE END Adv_Cancel_Req_1 */
  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 800c978:	2100      	movs	r1, #0
 800c97a:	2001      	movs	r0, #1
 800c97c:	f001 f880 	bl	800da80 <UTIL_SEQ_SetTask>
/* USER CODE BEGIN Adv_Cancel_Req_2 */

/* USER CODE END Adv_Cancel_Req_2 */
  return;
 800c980:	bf00      	nop
}
 800c982:	bd80      	pop	{r7, pc}

0800c984 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO(){
 800c984:	b480      	push	{r7}
 800c986:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Switch_OFF_GPIO */

/* USER CODE END Switch_OFF_GPIO */
}
 800c988:	bf00      	nop
 800c98a:	46bd      	mov	sp, r7
 800c98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c990:	4770      	bx	lr

0800c992 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 800c992:	b580      	push	{r7, lr}
 800c994:	b082      	sub	sp, #8
 800c996:	af00      	add	r7, sp, #0
 800c998:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800c99a:	2100      	movs	r1, #0
 800c99c:	2004      	movs	r0, #4
 800c99e:	f001 f86f 	bl	800da80 <UTIL_SEQ_SetTask>
  return;
 800c9a2:	bf00      	nop
}
 800c9a4:	3708      	adds	r7, #8
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	bd80      	pop	{r7, pc}

0800c9aa <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 800c9aa:	b580      	push	{r7, lr}
 800c9ac:	b082      	sub	sp, #8
 800c9ae:	af00      	add	r7, sp, #0
 800c9b0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800c9b2:	2001      	movs	r0, #1
 800c9b4:	f001 f8d0 	bl	800db58 <UTIL_SEQ_SetEvt>
  return;
 800c9b8:	bf00      	nop
}
 800c9ba:	3708      	adds	r7, #8
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	bd80      	pop	{r7, pc}

0800c9c0 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b082      	sub	sp, #8
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800c9c8:	2001      	movs	r0, #1
 800c9ca:	f001 f8e5 	bl	800db98 <UTIL_SEQ_WaitEvt>
  return;
 800c9ce:	bf00      	nop
}
 800c9d0:	3708      	adds	r7, #8
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	bd80      	pop	{r7, pc}

0800c9d6 <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 800c9d6:	b580      	push	{r7, lr}
 800c9d8:	b084      	sub	sp, #16
 800c9da:	af00      	add	r7, sp, #0
 800c9dc:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	685b      	ldr	r3, [r3, #4]
 800c9e6:	3308      	adds	r3, #8
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	f7fe ff01 	bl	800b7f0 <SVCCTL_UserEvtRx>
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800c9f2:	7afb      	ldrb	r3, [r7, #11]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d003      	beq.n	800ca00 <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	2201      	movs	r2, #1
 800c9fc:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 800c9fe:	e002      	b.n	800ca06 <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	2200      	movs	r2, #0
 800ca04:	701a      	strb	r2, [r3, #0]
}
 800ca06:	bf00      	nop
 800ca08:	3710      	adds	r7, #16
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	bd80      	pop	{r7, pc}

0800ca0e <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 800ca0e:	b580      	push	{r7, lr}
 800ca10:	b084      	sub	sp, #16
 800ca12:	af00      	add	r7, sp, #0
 800ca14:	4603      	mov	r3, r0
 800ca16:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 800ca18:	79fb      	ldrb	r3, [r7, #7]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d002      	beq.n	800ca24 <BLE_StatusNot+0x16>
 800ca1e:	2b01      	cmp	r3, #1
 800ca20:	d006      	beq.n	800ca30 <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 800ca22:	e00b      	b.n	800ca3c <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800ca24:	2307      	movs	r3, #7
 800ca26:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800ca28:	68f8      	ldr	r0, [r7, #12]
 800ca2a:	f001 f855 	bl	800dad8 <UTIL_SEQ_PauseTask>
      break;
 800ca2e:	e005      	b.n	800ca3c <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800ca30:	2307      	movs	r3, #7
 800ca32:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800ca34:	68f8      	ldr	r0, [r7, #12]
 800ca36:	f001 f86f 	bl	800db18 <UTIL_SEQ_ResumeTask>
      break;
 800ca3a:	bf00      	nop
  }
  return;
 800ca3c:	bf00      	nop
}
 800ca3e:	3710      	adds	r7, #16
 800ca40:	46bd      	mov	sp, r7
 800ca42:	bd80      	pop	{r7, pc}

0800ca44 <P2PS_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 800ca44:	b480      	push	{r7}
 800ca46:	b083      	sub	sp, #12
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	781b      	ldrb	r3, [r3, #0]
 800ca50:	2b03      	cmp	r3, #3
 800ca52:	d006      	beq.n	800ca62 <P2PS_STM_App_Notification+0x1e>
 800ca54:	2b03      	cmp	r3, #3
 800ca56:	dc06      	bgt.n	800ca66 <P2PS_STM_App_Notification+0x22>
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d006      	beq.n	800ca6a <P2PS_STM_App_Notification+0x26>
 800ca5c:	2b01      	cmp	r3, #1
 800ca5e:	d006      	beq.n	800ca6e <P2PS_STM_App_Notification+0x2a>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */

/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 800ca60:	e001      	b.n	800ca66 <P2PS_STM_App_Notification+0x22>
      break;
 800ca62:	bf00      	nop
 800ca64:	e004      	b.n	800ca70 <P2PS_STM_App_Notification+0x2c>
      break;
 800ca66:	bf00      	nop
 800ca68:	e002      	b.n	800ca70 <P2PS_STM_App_Notification+0x2c>
      break;
 800ca6a:	bf00      	nop
 800ca6c:	e000      	b.n	800ca70 <P2PS_STM_App_Notification+0x2c>
      break;
 800ca6e:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 800ca70:	bf00      	nop
}
 800ca72:	370c      	adds	r7, #12
 800ca74:	46bd      	mov	sp, r7
 800ca76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7a:	4770      	bx	lr

0800ca7c <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 800ca7c:	b480      	push	{r7}
 800ca7e:	b083      	sub	sp, #12
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	781b      	ldrb	r3, [r3, #0]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d002      	beq.n	800ca92 <P2PS_APP_Notification+0x16>
 800ca8c:	2b01      	cmp	r3, #1
 800ca8e:	d002      	beq.n	800ca96 <P2PS_APP_Notification+0x1a>

    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 800ca90:	e002      	b.n	800ca98 <P2PS_APP_Notification+0x1c>
    break;
 800ca92:	bf00      	nop
 800ca94:	e000      	b.n	800ca98 <P2PS_APP_Notification+0x1c>
    break;
 800ca96:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 800ca98:	bf00      	nop
}
 800ca9a:	370c      	adds	r7, #12
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa2:	4770      	bx	lr

0800caa4 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 800caa4:	b480      	push	{r7}
 800caa6:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */

/* USER CODE END P2PS_APP_Init */
  return;
 800caa8:	bf00      	nop
}
 800caaa:	46bd      	mov	sp, r7
 800caac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab0:	4770      	bx	lr
	...

0800cab4 <LL_PWR_EnableBootC2>:
{
 800cab4:	b480      	push	{r7}
 800cab6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800cab8:	4b05      	ldr	r3, [pc, #20]	; (800cad0 <LL_PWR_EnableBootC2+0x1c>)
 800caba:	68db      	ldr	r3, [r3, #12]
 800cabc:	4a04      	ldr	r2, [pc, #16]	; (800cad0 <LL_PWR_EnableBootC2+0x1c>)
 800cabe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cac2:	60d3      	str	r3, [r2, #12]
}
 800cac4:	bf00      	nop
 800cac6:	46bd      	mov	sp, r7
 800cac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cacc:	4770      	bx	lr
 800cace:	bf00      	nop
 800cad0:	58000400 	.word	0x58000400

0800cad4 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800cad4:	b480      	push	{r7}
 800cad6:	b083      	sub	sp, #12
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800cadc:	4b06      	ldr	r3, [pc, #24]	; (800caf8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800cade:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800cae2:	4905      	ldr	r1, [pc, #20]	; (800caf8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	4313      	orrs	r3, r2
 800cae8:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800caec:	bf00      	nop
 800caee:	370c      	adds	r7, #12
 800caf0:	46bd      	mov	sp, r7
 800caf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf6:	4770      	bx	lr
 800caf8:	58000800 	.word	0x58000800

0800cafc <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800cafc:	b480      	push	{r7}
 800cafe:	b083      	sub	sp, #12
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800cb04:	4b05      	ldr	r3, [pc, #20]	; (800cb1c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800cb06:	6a1a      	ldr	r2, [r3, #32]
 800cb08:	4904      	ldr	r1, [pc, #16]	; (800cb1c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	4313      	orrs	r3, r2
 800cb0e:	620b      	str	r3, [r1, #32]
}
 800cb10:	bf00      	nop
 800cb12:	370c      	adds	r7, #12
 800cb14:	46bd      	mov	sp, r7
 800cb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1a:	4770      	bx	lr
 800cb1c:	58000800 	.word	0x58000800

0800cb20 <LL_AHB3_GRP1_EnableClock>:
{
 800cb20:	b480      	push	{r7}
 800cb22:	b085      	sub	sp, #20
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800cb28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cb2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cb2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	4313      	orrs	r3, r2
 800cb36:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800cb38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cb3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	4013      	ands	r3, r2
 800cb42:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800cb44:	68fb      	ldr	r3, [r7, #12]
}
 800cb46:	bf00      	nop
 800cb48:	3714      	adds	r7, #20
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb50:	4770      	bx	lr

0800cb52 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800cb52:	b480      	push	{r7}
 800cb54:	b085      	sub	sp, #20
 800cb56:	af00      	add	r7, sp, #0
 800cb58:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800cb5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cb5e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800cb62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	4313      	orrs	r3, r2
 800cb6a:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800cb6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cb72:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	4013      	ands	r3, r2
 800cb7a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800cb7c:	68fb      	ldr	r3, [r7, #12]
}
 800cb7e:	bf00      	nop
 800cb80:	3714      	adds	r7, #20
 800cb82:	46bd      	mov	sp, r7
 800cb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb88:	4770      	bx	lr

0800cb8a <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800cb8a:	b480      	push	{r7}
 800cb8c:	b083      	sub	sp, #12
 800cb8e:	af00      	add	r7, sp, #0
 800cb90:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	601a      	str	r2, [r3, #0]
}
 800cb9e:	bf00      	nop
 800cba0:	370c      	adds	r7, #12
 800cba2:	46bd      	mov	sp, r7
 800cba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba8:	4770      	bx	lr

0800cbaa <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800cbaa:	b480      	push	{r7}
 800cbac:	b083      	sub	sp, #12
 800cbae:	af00      	add	r7, sp, #0
 800cbb0:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	f043 0201 	orr.w	r2, r3, #1
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	601a      	str	r2, [r3, #0]
}
 800cbbe:	bf00      	nop
 800cbc0:	370c      	adds	r7, #12
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc8:	4770      	bx	lr

0800cbca <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800cbca:	b480      	push	{r7}
 800cbcc:	b083      	sub	sp, #12
 800cbce:	af00      	add	r7, sp, #0
 800cbd0:	6078      	str	r0, [r7, #4]
 800cbd2:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	685a      	ldr	r2, [r3, #4]
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	041b      	lsls	r3, r3, #16
 800cbdc:	43db      	mvns	r3, r3
 800cbde:	401a      	ands	r2, r3
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	605a      	str	r2, [r3, #4]
}
 800cbe4:	bf00      	nop
 800cbe6:	370c      	adds	r7, #12
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbee:	4770      	bx	lr

0800cbf0 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800cbf0:	b480      	push	{r7}
 800cbf2:	b083      	sub	sp, #12
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
 800cbf8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	685a      	ldr	r2, [r3, #4]
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	43db      	mvns	r3, r3
 800cc02:	401a      	ands	r2, r3
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	605a      	str	r2, [r3, #4]
}
 800cc08:	bf00      	nop
 800cc0a:	370c      	adds	r7, #12
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc12:	4770      	bx	lr

0800cc14 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800cc14:	b480      	push	{r7}
 800cc16:	b083      	sub	sp, #12
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
 800cc1c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	041a      	lsls	r2, r3, #16
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	609a      	str	r2, [r3, #8]
}
 800cc26:	bf00      	nop
 800cc28:	370c      	adds	r7, #12
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc30:	4770      	bx	lr

0800cc32 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800cc32:	b480      	push	{r7}
 800cc34:	b083      	sub	sp, #12
 800cc36:	af00      	add	r7, sp, #0
 800cc38:	6078      	str	r0, [r7, #4]
 800cc3a:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	68da      	ldr	r2, [r3, #12]
 800cc40:	683b      	ldr	r3, [r7, #0]
 800cc42:	4013      	ands	r3, r2
 800cc44:	683a      	ldr	r2, [r7, #0]
 800cc46:	429a      	cmp	r2, r3
 800cc48:	d101      	bne.n	800cc4e <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800cc4a:	2301      	movs	r3, #1
 800cc4c:	e000      	b.n	800cc50 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800cc4e:	2300      	movs	r3, #0
}
 800cc50:	4618      	mov	r0, r3
 800cc52:	370c      	adds	r7, #12
 800cc54:	46bd      	mov	sp, r7
 800cc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5a:	4770      	bx	lr

0800cc5c <HW_IPCC_Enable>:
}
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800cc60:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800cc64:	f7ff ff75 	bl	800cb52 <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800cc68:	f44f 7000 	mov.w	r0, #512	; 0x200
 800cc6c:	f7ff ff32 	bl	800cad4 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800cc70:	f44f 7000 	mov.w	r0, #512	; 0x200
 800cc74:	f7ff ff42 	bl	800cafc <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800cc78:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800cc7a:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800cc7c:	f7ff ff1a 	bl	800cab4 <LL_PWR_EnableBootC2>

  return;
 800cc80:	bf00      	nop
}
 800cc82:	bd80      	pop	{r7, pc}

0800cc84 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800cc88:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800cc8c:	f7ff ff48 	bl	800cb20 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800cc90:	4806      	ldr	r0, [pc, #24]	; (800ccac <HW_IPCC_Init+0x28>)
 800cc92:	f7ff ff8a 	bl	800cbaa <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800cc96:	4805      	ldr	r0, [pc, #20]	; (800ccac <HW_IPCC_Init+0x28>)
 800cc98:	f7ff ff77 	bl	800cb8a <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800cc9c:	202c      	movs	r0, #44	; 0x2c
 800cc9e:	f7f5 f880 	bl	8001da2 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800cca2:	202d      	movs	r0, #45	; 0x2d
 800cca4:	f7f5 f87d 	bl	8001da2 <HAL_NVIC_EnableIRQ>

  return;
 800cca8:	bf00      	nop
}
 800ccaa:	bd80      	pop	{r7, pc}
 800ccac:	58000c00 	.word	0x58000c00

0800ccb0 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800ccb4:	2101      	movs	r1, #1
 800ccb6:	4802      	ldr	r0, [pc, #8]	; (800ccc0 <HW_IPCC_BLE_Init+0x10>)
 800ccb8:	f7ff ff9a 	bl	800cbf0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800ccbc:	bf00      	nop
}
 800ccbe:	bd80      	pop	{r7, pc}
 800ccc0:	58000c00 	.word	0x58000c00

0800ccc4 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800ccc8:	2101      	movs	r1, #1
 800ccca:	4802      	ldr	r0, [pc, #8]	; (800ccd4 <HW_IPCC_BLE_SendCmd+0x10>)
 800cccc:	f7ff ffa2 	bl	800cc14 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800ccd0:	bf00      	nop
}
 800ccd2:	bd80      	pop	{r7, pc}
 800ccd4:	58000c00 	.word	0x58000c00

0800ccd8 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800ccdc:	2102      	movs	r1, #2
 800ccde:	4802      	ldr	r0, [pc, #8]	; (800cce8 <HW_IPCC_SYS_Init+0x10>)
 800cce0:	f7ff ff86 	bl	800cbf0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800cce4:	bf00      	nop
}
 800cce6:	bd80      	pop	{r7, pc}
 800cce8:	58000c00 	.word	0x58000c00

0800ccec <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800ccf0:	2102      	movs	r1, #2
 800ccf2:	4804      	ldr	r0, [pc, #16]	; (800cd04 <HW_IPCC_SYS_SendCmd+0x18>)
 800ccf4:	f7ff ff8e 	bl	800cc14 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800ccf8:	2102      	movs	r1, #2
 800ccfa:	4802      	ldr	r0, [pc, #8]	; (800cd04 <HW_IPCC_SYS_SendCmd+0x18>)
 800ccfc:	f7ff ff65 	bl	800cbca <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800cd00:	bf00      	nop
}
 800cd02:	bd80      	pop	{r7, pc}
 800cd04:	58000c00 	.word	0x58000c00

0800cd08 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b082      	sub	sp, #8
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800cd10:	2108      	movs	r1, #8
 800cd12:	480c      	ldr	r0, [pc, #48]	; (800cd44 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800cd14:	f7ff ff8d 	bl	800cc32 <LL_C1_IPCC_IsActiveFlag_CHx>
 800cd18:	4603      	mov	r3, r0
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d007      	beq.n	800cd2e <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800cd1e:	4a0a      	ldr	r2, [pc, #40]	; (800cd48 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800cd24:	2108      	movs	r1, #8
 800cd26:	4807      	ldr	r0, [pc, #28]	; (800cd44 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800cd28:	f7ff ff4f 	bl	800cbca <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800cd2c:	e006      	b.n	800cd3c <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800cd32:	2108      	movs	r1, #8
 800cd34:	4803      	ldr	r0, [pc, #12]	; (800cd44 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800cd36:	f7ff ff6d 	bl	800cc14 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800cd3a:	bf00      	nop
}
 800cd3c:	3708      	adds	r7, #8
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	bd80      	pop	{r7, pc}
 800cd42:	bf00      	nop
 800cd44:	58000c00 	.word	0x58000c00
 800cd48:	200003b4 	.word	0x200003b4

0800cd4c <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800cd50:	2108      	movs	r1, #8
 800cd52:	4802      	ldr	r0, [pc, #8]	; (800cd5c <HW_IPCC_TRACES_Init+0x10>)
 800cd54:	f7ff ff4c 	bl	800cbf0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800cd58:	bf00      	nop
}
 800cd5a:	bd80      	pop	{r7, pc}
 800cd5c:	58000c00 	.word	0x58000c00

0800cd60 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800cd64:	2200      	movs	r2, #0
 800cd66:	4912      	ldr	r1, [pc, #72]	; (800cdb0 <MX_USB_Device_Init+0x50>)
 800cd68:	4812      	ldr	r0, [pc, #72]	; (800cdb4 <MX_USB_Device_Init+0x54>)
 800cd6a:	f7fc fafd 	bl	8009368 <USBD_Init>
 800cd6e:	4603      	mov	r3, r0
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d001      	beq.n	800cd78 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800cd74:	f7f4 fc6e 	bl	8001654 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800cd78:	490f      	ldr	r1, [pc, #60]	; (800cdb8 <MX_USB_Device_Init+0x58>)
 800cd7a:	480e      	ldr	r0, [pc, #56]	; (800cdb4 <MX_USB_Device_Init+0x54>)
 800cd7c:	f7fc fb24 	bl	80093c8 <USBD_RegisterClass>
 800cd80:	4603      	mov	r3, r0
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d001      	beq.n	800cd8a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800cd86:	f7f4 fc65 	bl	8001654 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800cd8a:	490c      	ldr	r1, [pc, #48]	; (800cdbc <MX_USB_Device_Init+0x5c>)
 800cd8c:	4809      	ldr	r0, [pc, #36]	; (800cdb4 <MX_USB_Device_Init+0x54>)
 800cd8e:	f7fc fa75 	bl	800927c <USBD_CDC_RegisterInterface>
 800cd92:	4603      	mov	r3, r0
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d001      	beq.n	800cd9c <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800cd98:	f7f4 fc5c 	bl	8001654 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800cd9c:	4805      	ldr	r0, [pc, #20]	; (800cdb4 <MX_USB_Device_Init+0x54>)
 800cd9e:	f7fc fb3a 	bl	8009416 <USBD_Start>
 800cda2:	4603      	mov	r3, r0
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d001      	beq.n	800cdac <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800cda8:	f7f4 fc54 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800cdac:	bf00      	nop
 800cdae:	bd80      	pop	{r7, pc}
 800cdb0:	20000144 	.word	0x20000144
 800cdb4:	20000788 	.word	0x20000788
 800cdb8:	2000001c 	.word	0x2000001c
 800cdbc:	20000130 	.word	0x20000130

0800cdc0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	4905      	ldr	r1, [pc, #20]	; (800cddc <CDC_Init_FS+0x1c>)
 800cdc8:	4805      	ldr	r0, [pc, #20]	; (800cde0 <CDC_Init_FS+0x20>)
 800cdca:	f7fc fa6c 	bl	80092a6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cdce:	4905      	ldr	r1, [pc, #20]	; (800cde4 <CDC_Init_FS+0x24>)
 800cdd0:	4803      	ldr	r0, [pc, #12]	; (800cde0 <CDC_Init_FS+0x20>)
 800cdd2:	f7fc fa86 	bl	80092e2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cdd6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cdd8:	4618      	mov	r0, r3
 800cdda:	bd80      	pop	{r7, pc}
 800cddc:	20001258 	.word	0x20001258
 800cde0:	20000788 	.word	0x20000788
 800cde4:	20000a58 	.word	0x20000a58

0800cde8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cde8:	b480      	push	{r7}
 800cdea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cdec:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cdee:	4618      	mov	r0, r3
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf6:	4770      	bx	lr

0800cdf8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cdf8:	b480      	push	{r7}
 800cdfa:	b083      	sub	sp, #12
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	4603      	mov	r3, r0
 800ce00:	6039      	str	r1, [r7, #0]
 800ce02:	71fb      	strb	r3, [r7, #7]
 800ce04:	4613      	mov	r3, r2
 800ce06:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ce08:	79fb      	ldrb	r3, [r7, #7]
 800ce0a:	2b23      	cmp	r3, #35	; 0x23
 800ce0c:	d84a      	bhi.n	800cea4 <CDC_Control_FS+0xac>
 800ce0e:	a201      	add	r2, pc, #4	; (adr r2, 800ce14 <CDC_Control_FS+0x1c>)
 800ce10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce14:	0800cea5 	.word	0x0800cea5
 800ce18:	0800cea5 	.word	0x0800cea5
 800ce1c:	0800cea5 	.word	0x0800cea5
 800ce20:	0800cea5 	.word	0x0800cea5
 800ce24:	0800cea5 	.word	0x0800cea5
 800ce28:	0800cea5 	.word	0x0800cea5
 800ce2c:	0800cea5 	.word	0x0800cea5
 800ce30:	0800cea5 	.word	0x0800cea5
 800ce34:	0800cea5 	.word	0x0800cea5
 800ce38:	0800cea5 	.word	0x0800cea5
 800ce3c:	0800cea5 	.word	0x0800cea5
 800ce40:	0800cea5 	.word	0x0800cea5
 800ce44:	0800cea5 	.word	0x0800cea5
 800ce48:	0800cea5 	.word	0x0800cea5
 800ce4c:	0800cea5 	.word	0x0800cea5
 800ce50:	0800cea5 	.word	0x0800cea5
 800ce54:	0800cea5 	.word	0x0800cea5
 800ce58:	0800cea5 	.word	0x0800cea5
 800ce5c:	0800cea5 	.word	0x0800cea5
 800ce60:	0800cea5 	.word	0x0800cea5
 800ce64:	0800cea5 	.word	0x0800cea5
 800ce68:	0800cea5 	.word	0x0800cea5
 800ce6c:	0800cea5 	.word	0x0800cea5
 800ce70:	0800cea5 	.word	0x0800cea5
 800ce74:	0800cea5 	.word	0x0800cea5
 800ce78:	0800cea5 	.word	0x0800cea5
 800ce7c:	0800cea5 	.word	0x0800cea5
 800ce80:	0800cea5 	.word	0x0800cea5
 800ce84:	0800cea5 	.word	0x0800cea5
 800ce88:	0800cea5 	.word	0x0800cea5
 800ce8c:	0800cea5 	.word	0x0800cea5
 800ce90:	0800cea5 	.word	0x0800cea5
 800ce94:	0800cea5 	.word	0x0800cea5
 800ce98:	0800cea5 	.word	0x0800cea5
 800ce9c:	0800cea5 	.word	0x0800cea5
 800cea0:	0800cea5 	.word	0x0800cea5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cea4:	bf00      	nop
  }

  return (USBD_OK);
 800cea6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cea8:	4618      	mov	r0, r3
 800ceaa:	370c      	adds	r7, #12
 800ceac:	46bd      	mov	sp, r7
 800ceae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb2:	4770      	bx	lr

0800ceb4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b082      	sub	sp, #8
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
 800cebc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cebe:	6879      	ldr	r1, [r7, #4]
 800cec0:	4805      	ldr	r0, [pc, #20]	; (800ced8 <CDC_Receive_FS+0x24>)
 800cec2:	f7fc fa0e 	bl	80092e2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cec6:	4804      	ldr	r0, [pc, #16]	; (800ced8 <CDC_Receive_FS+0x24>)
 800cec8:	f7fc fa24 	bl	8009314 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800cecc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cece:	4618      	mov	r0, r3
 800ced0:	3708      	adds	r7, #8
 800ced2:	46bd      	mov	sp, r7
 800ced4:	bd80      	pop	{r7, pc}
 800ced6:	bf00      	nop
 800ced8:	20000788 	.word	0x20000788

0800cedc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800cedc:	b480      	push	{r7}
 800cede:	b087      	sub	sp, #28
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	60f8      	str	r0, [r7, #12]
 800cee4:	60b9      	str	r1, [r7, #8]
 800cee6:	4613      	mov	r3, r2
 800cee8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ceea:	2300      	movs	r3, #0
 800ceec:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ceee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cef2:	4618      	mov	r0, r3
 800cef4:	371c      	adds	r7, #28
 800cef6:	46bd      	mov	sp, r7
 800cef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefc:	4770      	bx	lr
	...

0800cf00 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf00:	b480      	push	{r7}
 800cf02:	b083      	sub	sp, #12
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	4603      	mov	r3, r0
 800cf08:	6039      	str	r1, [r7, #0]
 800cf0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800cf0c:	683b      	ldr	r3, [r7, #0]
 800cf0e:	2212      	movs	r2, #18
 800cf10:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800cf12:	4b03      	ldr	r3, [pc, #12]	; (800cf20 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800cf14:	4618      	mov	r0, r3
 800cf16:	370c      	adds	r7, #12
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1e:	4770      	bx	lr
 800cf20:	20000164 	.word	0x20000164

0800cf24 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf24:	b480      	push	{r7}
 800cf26:	b083      	sub	sp, #12
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	4603      	mov	r3, r0
 800cf2c:	6039      	str	r1, [r7, #0]
 800cf2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cf30:	683b      	ldr	r3, [r7, #0]
 800cf32:	2204      	movs	r2, #4
 800cf34:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cf36:	4b03      	ldr	r3, [pc, #12]	; (800cf44 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800cf38:	4618      	mov	r0, r3
 800cf3a:	370c      	adds	r7, #12
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf42:	4770      	bx	lr
 800cf44:	20000178 	.word	0x20000178

0800cf48 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b082      	sub	sp, #8
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	4603      	mov	r3, r0
 800cf50:	6039      	str	r1, [r7, #0]
 800cf52:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cf54:	79fb      	ldrb	r3, [r7, #7]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d105      	bne.n	800cf66 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800cf5a:	683a      	ldr	r2, [r7, #0]
 800cf5c:	4907      	ldr	r1, [pc, #28]	; (800cf7c <USBD_CDC_ProductStrDescriptor+0x34>)
 800cf5e:	4808      	ldr	r0, [pc, #32]	; (800cf80 <USBD_CDC_ProductStrDescriptor+0x38>)
 800cf60:	f7fd fa41 	bl	800a3e6 <USBD_GetString>
 800cf64:	e004      	b.n	800cf70 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800cf66:	683a      	ldr	r2, [r7, #0]
 800cf68:	4904      	ldr	r1, [pc, #16]	; (800cf7c <USBD_CDC_ProductStrDescriptor+0x34>)
 800cf6a:	4805      	ldr	r0, [pc, #20]	; (800cf80 <USBD_CDC_ProductStrDescriptor+0x38>)
 800cf6c:	f7fd fa3b 	bl	800a3e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cf70:	4b02      	ldr	r3, [pc, #8]	; (800cf7c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800cf72:	4618      	mov	r0, r3
 800cf74:	3708      	adds	r7, #8
 800cf76:	46bd      	mov	sp, r7
 800cf78:	bd80      	pop	{r7, pc}
 800cf7a:	bf00      	nop
 800cf7c:	20001a58 	.word	0x20001a58
 800cf80:	0800ddb8 	.word	0x0800ddb8

0800cf84 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b082      	sub	sp, #8
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	6039      	str	r1, [r7, #0]
 800cf8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cf90:	683a      	ldr	r2, [r7, #0]
 800cf92:	4904      	ldr	r1, [pc, #16]	; (800cfa4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800cf94:	4804      	ldr	r0, [pc, #16]	; (800cfa8 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800cf96:	f7fd fa26 	bl	800a3e6 <USBD_GetString>
  return USBD_StrDesc;
 800cf9a:	4b02      	ldr	r3, [pc, #8]	; (800cfa4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	3708      	adds	r7, #8
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	bd80      	pop	{r7, pc}
 800cfa4:	20001a58 	.word	0x20001a58
 800cfa8:	0800ddd0 	.word	0x0800ddd0

0800cfac <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cfac:	b580      	push	{r7, lr}
 800cfae:	b082      	sub	sp, #8
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	4603      	mov	r3, r0
 800cfb4:	6039      	str	r1, [r7, #0]
 800cfb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cfb8:	683b      	ldr	r3, [r7, #0]
 800cfba:	221a      	movs	r2, #26
 800cfbc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cfbe:	f000 f843 	bl	800d048 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800cfc2:	4b02      	ldr	r3, [pc, #8]	; (800cfcc <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	3708      	adds	r7, #8
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	bd80      	pop	{r7, pc}
 800cfcc:	2000017c 	.word	0x2000017c

0800cfd0 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b082      	sub	sp, #8
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	4603      	mov	r3, r0
 800cfd8:	6039      	str	r1, [r7, #0]
 800cfda:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cfdc:	79fb      	ldrb	r3, [r7, #7]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d105      	bne.n	800cfee <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800cfe2:	683a      	ldr	r2, [r7, #0]
 800cfe4:	4907      	ldr	r1, [pc, #28]	; (800d004 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800cfe6:	4808      	ldr	r0, [pc, #32]	; (800d008 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800cfe8:	f7fd f9fd 	bl	800a3e6 <USBD_GetString>
 800cfec:	e004      	b.n	800cff8 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800cfee:	683a      	ldr	r2, [r7, #0]
 800cff0:	4904      	ldr	r1, [pc, #16]	; (800d004 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800cff2:	4805      	ldr	r0, [pc, #20]	; (800d008 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800cff4:	f7fd f9f7 	bl	800a3e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cff8:	4b02      	ldr	r3, [pc, #8]	; (800d004 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800cffa:	4618      	mov	r0, r3
 800cffc:	3708      	adds	r7, #8
 800cffe:	46bd      	mov	sp, r7
 800d000:	bd80      	pop	{r7, pc}
 800d002:	bf00      	nop
 800d004:	20001a58 	.word	0x20001a58
 800d008:	0800dde4 	.word	0x0800dde4

0800d00c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b082      	sub	sp, #8
 800d010:	af00      	add	r7, sp, #0
 800d012:	4603      	mov	r3, r0
 800d014:	6039      	str	r1, [r7, #0]
 800d016:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d018:	79fb      	ldrb	r3, [r7, #7]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d105      	bne.n	800d02a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800d01e:	683a      	ldr	r2, [r7, #0]
 800d020:	4907      	ldr	r1, [pc, #28]	; (800d040 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800d022:	4808      	ldr	r0, [pc, #32]	; (800d044 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800d024:	f7fd f9df 	bl	800a3e6 <USBD_GetString>
 800d028:	e004      	b.n	800d034 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800d02a:	683a      	ldr	r2, [r7, #0]
 800d02c:	4904      	ldr	r1, [pc, #16]	; (800d040 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800d02e:	4805      	ldr	r0, [pc, #20]	; (800d044 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800d030:	f7fd f9d9 	bl	800a3e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d034:	4b02      	ldr	r3, [pc, #8]	; (800d040 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800d036:	4618      	mov	r0, r3
 800d038:	3708      	adds	r7, #8
 800d03a:	46bd      	mov	sp, r7
 800d03c:	bd80      	pop	{r7, pc}
 800d03e:	bf00      	nop
 800d040:	20001a58 	.word	0x20001a58
 800d044:	0800ddf0 	.word	0x0800ddf0

0800d048 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b084      	sub	sp, #16
 800d04c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d04e:	4b0f      	ldr	r3, [pc, #60]	; (800d08c <Get_SerialNum+0x44>)
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d054:	4b0e      	ldr	r3, [pc, #56]	; (800d090 <Get_SerialNum+0x48>)
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d05a:	4b0e      	ldr	r3, [pc, #56]	; (800d094 <Get_SerialNum+0x4c>)
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d060:	68fa      	ldr	r2, [r7, #12]
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	4413      	add	r3, r2
 800d066:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d009      	beq.n	800d082 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d06e:	2208      	movs	r2, #8
 800d070:	4909      	ldr	r1, [pc, #36]	; (800d098 <Get_SerialNum+0x50>)
 800d072:	68f8      	ldr	r0, [r7, #12]
 800d074:	f000 f814 	bl	800d0a0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d078:	2204      	movs	r2, #4
 800d07a:	4908      	ldr	r1, [pc, #32]	; (800d09c <Get_SerialNum+0x54>)
 800d07c:	68b8      	ldr	r0, [r7, #8]
 800d07e:	f000 f80f 	bl	800d0a0 <IntToUnicode>
  }
}
 800d082:	bf00      	nop
 800d084:	3710      	adds	r7, #16
 800d086:	46bd      	mov	sp, r7
 800d088:	bd80      	pop	{r7, pc}
 800d08a:	bf00      	nop
 800d08c:	1fff7590 	.word	0x1fff7590
 800d090:	1fff7594 	.word	0x1fff7594
 800d094:	1fff7598 	.word	0x1fff7598
 800d098:	2000017e 	.word	0x2000017e
 800d09c:	2000018e 	.word	0x2000018e

0800d0a0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d0a0:	b480      	push	{r7}
 800d0a2:	b087      	sub	sp, #28
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	60f8      	str	r0, [r7, #12]
 800d0a8:	60b9      	str	r1, [r7, #8]
 800d0aa:	4613      	mov	r3, r2
 800d0ac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	75fb      	strb	r3, [r7, #23]
 800d0b6:	e027      	b.n	800d108 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	0f1b      	lsrs	r3, r3, #28
 800d0bc:	2b09      	cmp	r3, #9
 800d0be:	d80b      	bhi.n	800d0d8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	0f1b      	lsrs	r3, r3, #28
 800d0c4:	b2da      	uxtb	r2, r3
 800d0c6:	7dfb      	ldrb	r3, [r7, #23]
 800d0c8:	005b      	lsls	r3, r3, #1
 800d0ca:	4619      	mov	r1, r3
 800d0cc:	68bb      	ldr	r3, [r7, #8]
 800d0ce:	440b      	add	r3, r1
 800d0d0:	3230      	adds	r2, #48	; 0x30
 800d0d2:	b2d2      	uxtb	r2, r2
 800d0d4:	701a      	strb	r2, [r3, #0]
 800d0d6:	e00a      	b.n	800d0ee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	0f1b      	lsrs	r3, r3, #28
 800d0dc:	b2da      	uxtb	r2, r3
 800d0de:	7dfb      	ldrb	r3, [r7, #23]
 800d0e0:	005b      	lsls	r3, r3, #1
 800d0e2:	4619      	mov	r1, r3
 800d0e4:	68bb      	ldr	r3, [r7, #8]
 800d0e6:	440b      	add	r3, r1
 800d0e8:	3237      	adds	r2, #55	; 0x37
 800d0ea:	b2d2      	uxtb	r2, r2
 800d0ec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	011b      	lsls	r3, r3, #4
 800d0f2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d0f4:	7dfb      	ldrb	r3, [r7, #23]
 800d0f6:	005b      	lsls	r3, r3, #1
 800d0f8:	3301      	adds	r3, #1
 800d0fa:	68ba      	ldr	r2, [r7, #8]
 800d0fc:	4413      	add	r3, r2
 800d0fe:	2200      	movs	r2, #0
 800d100:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d102:	7dfb      	ldrb	r3, [r7, #23]
 800d104:	3301      	adds	r3, #1
 800d106:	75fb      	strb	r3, [r7, #23]
 800d108:	7dfa      	ldrb	r2, [r7, #23]
 800d10a:	79fb      	ldrb	r3, [r7, #7]
 800d10c:	429a      	cmp	r2, r3
 800d10e:	d3d3      	bcc.n	800d0b8 <IntToUnicode+0x18>
  }
}
 800d110:	bf00      	nop
 800d112:	bf00      	nop
 800d114:	371c      	adds	r7, #28
 800d116:	46bd      	mov	sp, r7
 800d118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11c:	4770      	bx	lr

0800d11e <LL_AHB2_GRP1_EnableClock>:
{
 800d11e:	b480      	push	{r7}
 800d120:	b085      	sub	sp, #20
 800d122:	af00      	add	r7, sp, #0
 800d124:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800d126:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d12a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d12c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	4313      	orrs	r3, r2
 800d134:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800d136:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d13a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	4013      	ands	r3, r2
 800d140:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800d142:	68fb      	ldr	r3, [r7, #12]
}
 800d144:	bf00      	nop
 800d146:	3714      	adds	r7, #20
 800d148:	46bd      	mov	sp, r7
 800d14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14e:	4770      	bx	lr

0800d150 <LL_APB1_GRP1_EnableClock>:
{
 800d150:	b480      	push	{r7}
 800d152:	b085      	sub	sp, #20
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800d158:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d15c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d15e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	4313      	orrs	r3, r2
 800d166:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800d168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d16c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	4013      	ands	r3, r2
 800d172:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800d174:	68fb      	ldr	r3, [r7, #12]
}
 800d176:	bf00      	nop
 800d178:	3714      	adds	r7, #20
 800d17a:	46bd      	mov	sp, r7
 800d17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d180:	4770      	bx	lr
	...

0800d184 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 800d184:	b580      	push	{r7, lr}
 800d186:	b088      	sub	sp, #32
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d18c:	f107 030c 	add.w	r3, r7, #12
 800d190:	2200      	movs	r2, #0
 800d192:	601a      	str	r2, [r3, #0]
 800d194:	605a      	str	r2, [r3, #4]
 800d196:	609a      	str	r2, [r3, #8]
 800d198:	60da      	str	r2, [r3, #12]
 800d19a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	4a13      	ldr	r2, [pc, #76]	; (800d1f0 <HAL_PCD_MspInit+0x6c>)
 800d1a2:	4293      	cmp	r3, r2
 800d1a4:	d120      	bne.n	800d1e8 <HAL_PCD_MspInit+0x64>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d1a6:	2001      	movs	r0, #1
 800d1a8:	f7ff ffb9 	bl	800d11e <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d1ac:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d1b0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d1b2:	2302      	movs	r3, #2
 800d1b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800d1be:	230a      	movs	r3, #10
 800d1c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d1c2:	f107 030c 	add.w	r3, r7, #12
 800d1c6:	4619      	mov	r1, r3
 800d1c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d1cc:	f7f4 fe2e 	bl	8001e2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d1d0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800d1d4:	f7ff ffbc 	bl	800d150 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800d1d8:	2200      	movs	r2, #0
 800d1da:	2100      	movs	r1, #0
 800d1dc:	2014      	movs	r0, #20
 800d1de:	f7f4 fdc6 	bl	8001d6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800d1e2:	2014      	movs	r0, #20
 800d1e4:	f7f4 fddd 	bl	8001da2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d1e8:	bf00      	nop
 800d1ea:	3720      	adds	r7, #32
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	bd80      	pop	{r7, pc}
 800d1f0:	40006800 	.word	0x40006800

0800d1f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b082      	sub	sp, #8
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800d208:	4619      	mov	r1, r3
 800d20a:	4610      	mov	r0, r2
 800d20c:	f7fc f94e 	bl	80094ac <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800d210:	bf00      	nop
 800d212:	3708      	adds	r7, #8
 800d214:	46bd      	mov	sp, r7
 800d216:	bd80      	pop	{r7, pc}

0800d218 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b082      	sub	sp, #8
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
 800d220:	460b      	mov	r3, r1
 800d222:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800d22a:	78fa      	ldrb	r2, [r7, #3]
 800d22c:	6879      	ldr	r1, [r7, #4]
 800d22e:	4613      	mov	r3, r2
 800d230:	009b      	lsls	r3, r3, #2
 800d232:	4413      	add	r3, r2
 800d234:	00db      	lsls	r3, r3, #3
 800d236:	440b      	add	r3, r1
 800d238:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800d23c:	681a      	ldr	r2, [r3, #0]
 800d23e:	78fb      	ldrb	r3, [r7, #3]
 800d240:	4619      	mov	r1, r3
 800d242:	f7fc f988 	bl	8009556 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800d246:	bf00      	nop
 800d248:	3708      	adds	r7, #8
 800d24a:	46bd      	mov	sp, r7
 800d24c:	bd80      	pop	{r7, pc}

0800d24e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d24e:	b580      	push	{r7, lr}
 800d250:	b082      	sub	sp, #8
 800d252:	af00      	add	r7, sp, #0
 800d254:	6078      	str	r0, [r7, #4]
 800d256:	460b      	mov	r3, r1
 800d258:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800d260:	78fa      	ldrb	r2, [r7, #3]
 800d262:	6879      	ldr	r1, [r7, #4]
 800d264:	4613      	mov	r3, r2
 800d266:	009b      	lsls	r3, r3, #2
 800d268:	4413      	add	r3, r2
 800d26a:	00db      	lsls	r3, r3, #3
 800d26c:	440b      	add	r3, r1
 800d26e:	333c      	adds	r3, #60	; 0x3c
 800d270:	681a      	ldr	r2, [r3, #0]
 800d272:	78fb      	ldrb	r3, [r7, #3]
 800d274:	4619      	mov	r1, r3
 800d276:	f7fc f9d1 	bl	800961c <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800d27a:	bf00      	nop
 800d27c:	3708      	adds	r7, #8
 800d27e:	46bd      	mov	sp, r7
 800d280:	bd80      	pop	{r7, pc}

0800d282 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d282:	b580      	push	{r7, lr}
 800d284:	b082      	sub	sp, #8
 800d286:	af00      	add	r7, sp, #0
 800d288:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d290:	4618      	mov	r0, r3
 800d292:	f7fc fae5 	bl	8009860 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800d296:	bf00      	nop
 800d298:	3708      	adds	r7, #8
 800d29a:	46bd      	mov	sp, r7
 800d29c:	bd80      	pop	{r7, pc}

0800d29e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d29e:	b580      	push	{r7, lr}
 800d2a0:	b084      	sub	sp, #16
 800d2a2:	af00      	add	r7, sp, #0
 800d2a4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d2a6:	2301      	movs	r3, #1
 800d2a8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	689b      	ldr	r3, [r3, #8]
 800d2ae:	2b02      	cmp	r3, #2
 800d2b0:	d001      	beq.n	800d2b6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d2b2:	f7f4 f9cf 	bl	8001654 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d2bc:	7bfa      	ldrb	r2, [r7, #15]
 800d2be:	4611      	mov	r1, r2
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	f7fc fa8f 	bl	80097e4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	f7fc fa3b 	bl	8009748 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800d2d2:	bf00      	nop
 800d2d4:	3710      	adds	r7, #16
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	bd80      	pop	{r7, pc}
	...

0800d2dc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b082      	sub	sp, #8
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	f7fc fa8a 	bl	8009804 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	699b      	ldr	r3, [r3, #24]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d005      	beq.n	800d304 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d2f8:	4b04      	ldr	r3, [pc, #16]	; (800d30c <HAL_PCD_SuspendCallback+0x30>)
 800d2fa:	691b      	ldr	r3, [r3, #16]
 800d2fc:	4a03      	ldr	r2, [pc, #12]	; (800d30c <HAL_PCD_SuspendCallback+0x30>)
 800d2fe:	f043 0306 	orr.w	r3, r3, #6
 800d302:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800d304:	bf00      	nop
 800d306:	3708      	adds	r7, #8
 800d308:	46bd      	mov	sp, r7
 800d30a:	bd80      	pop	{r7, pc}
 800d30c:	e000ed00 	.word	0xe000ed00

0800d310 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d310:	b580      	push	{r7, lr}
 800d312:	b082      	sub	sp, #8
 800d314:	af00      	add	r7, sp, #0
 800d316:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	699b      	ldr	r3, [r3, #24]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d007      	beq.n	800d330 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d320:	4b08      	ldr	r3, [pc, #32]	; (800d344 <HAL_PCD_ResumeCallback+0x34>)
 800d322:	691b      	ldr	r3, [r3, #16]
 800d324:	4a07      	ldr	r2, [pc, #28]	; (800d344 <HAL_PCD_ResumeCallback+0x34>)
 800d326:	f023 0306 	bic.w	r3, r3, #6
 800d32a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800d32c:	f000 f9fc 	bl	800d728 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d336:	4618      	mov	r0, r3
 800d338:	f7fc fa7a 	bl	8009830 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800d33c:	bf00      	nop
 800d33e:	3708      	adds	r7, #8
 800d340:	46bd      	mov	sp, r7
 800d342:	bd80      	pop	{r7, pc}
 800d344:	e000ed00 	.word	0xe000ed00

0800d348 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d348:	b580      	push	{r7, lr}
 800d34a:	b082      	sub	sp, #8
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800d350:	4a2c      	ldr	r2, [pc, #176]	; (800d404 <USBD_LL_Init+0xbc>)
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	4a2a      	ldr	r2, [pc, #168]	; (800d404 <USBD_LL_Init+0xbc>)
 800d35c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800d360:	f7f6 fbc2 	bl	8003ae8 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 800d364:	4b27      	ldr	r3, [pc, #156]	; (800d404 <USBD_LL_Init+0xbc>)
 800d366:	4a28      	ldr	r2, [pc, #160]	; (800d408 <USBD_LL_Init+0xc0>)
 800d368:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d36a:	4b26      	ldr	r3, [pc, #152]	; (800d404 <USBD_LL_Init+0xbc>)
 800d36c:	2208      	movs	r2, #8
 800d36e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d370:	4b24      	ldr	r3, [pc, #144]	; (800d404 <USBD_LL_Init+0xbc>)
 800d372:	2202      	movs	r2, #2
 800d374:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d376:	4b23      	ldr	r3, [pc, #140]	; (800d404 <USBD_LL_Init+0xbc>)
 800d378:	2202      	movs	r2, #2
 800d37a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800d37c:	4b21      	ldr	r3, [pc, #132]	; (800d404 <USBD_LL_Init+0xbc>)
 800d37e:	2200      	movs	r2, #0
 800d380:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d382:	4b20      	ldr	r3, [pc, #128]	; (800d404 <USBD_LL_Init+0xbc>)
 800d384:	2200      	movs	r2, #0
 800d386:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d388:	4b1e      	ldr	r3, [pc, #120]	; (800d404 <USBD_LL_Init+0xbc>)
 800d38a:	2200      	movs	r2, #0
 800d38c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d38e:	4b1d      	ldr	r3, [pc, #116]	; (800d404 <USBD_LL_Init+0xbc>)
 800d390:	2200      	movs	r2, #0
 800d392:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d394:	481b      	ldr	r0, [pc, #108]	; (800d404 <USBD_LL_Init+0xbc>)
 800d396:	f7f4 fef5 	bl	8002184 <HAL_PCD_Init>
 800d39a:	4603      	mov	r3, r0
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d001      	beq.n	800d3a4 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800d3a0:	f7f4 f958 	bl	8001654 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d3aa:	2318      	movs	r3, #24
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	2100      	movs	r1, #0
 800d3b0:	f7f6 fb0f 	bl	80039d2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d3ba:	2358      	movs	r3, #88	; 0x58
 800d3bc:	2200      	movs	r2, #0
 800d3be:	2180      	movs	r1, #128	; 0x80
 800d3c0:	f7f6 fb07 	bl	80039d2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d3ca:	23c0      	movs	r3, #192	; 0xc0
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	2181      	movs	r1, #129	; 0x81
 800d3d0:	f7f6 faff 	bl	80039d2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d3da:	f44f 7388 	mov.w	r3, #272	; 0x110
 800d3de:	2200      	movs	r2, #0
 800d3e0:	2101      	movs	r1, #1
 800d3e2:	f7f6 faf6 	bl	80039d2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d3ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d3f0:	2200      	movs	r2, #0
 800d3f2:	2182      	movs	r1, #130	; 0x82
 800d3f4:	f7f6 faed 	bl	80039d2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d3f8:	2300      	movs	r3, #0
}
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	3708      	adds	r7, #8
 800d3fe:	46bd      	mov	sp, r7
 800d400:	bd80      	pop	{r7, pc}
 800d402:	bf00      	nop
 800d404:	20001c58 	.word	0x20001c58
 800d408:	40006800 	.word	0x40006800

0800d40c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b084      	sub	sp, #16
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d414:	2300      	movs	r3, #0
 800d416:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d418:	2300      	movs	r3, #0
 800d41a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d422:	4618      	mov	r0, r3
 800d424:	f7f4 ff93 	bl	800234e <HAL_PCD_Start>
 800d428:	4603      	mov	r3, r0
 800d42a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d42c:	7bfb      	ldrb	r3, [r7, #15]
 800d42e:	4618      	mov	r0, r3
 800d430:	f000 f980 	bl	800d734 <USBD_Get_USB_Status>
 800d434:	4603      	mov	r3, r0
 800d436:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d438:	7bbb      	ldrb	r3, [r7, #14]
}
 800d43a:	4618      	mov	r0, r3
 800d43c:	3710      	adds	r7, #16
 800d43e:	46bd      	mov	sp, r7
 800d440:	bd80      	pop	{r7, pc}

0800d442 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d442:	b580      	push	{r7, lr}
 800d444:	b084      	sub	sp, #16
 800d446:	af00      	add	r7, sp, #0
 800d448:	6078      	str	r0, [r7, #4]
 800d44a:	4608      	mov	r0, r1
 800d44c:	4611      	mov	r1, r2
 800d44e:	461a      	mov	r2, r3
 800d450:	4603      	mov	r3, r0
 800d452:	70fb      	strb	r3, [r7, #3]
 800d454:	460b      	mov	r3, r1
 800d456:	70bb      	strb	r3, [r7, #2]
 800d458:	4613      	mov	r3, r2
 800d45a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d45c:	2300      	movs	r3, #0
 800d45e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d460:	2300      	movs	r3, #0
 800d462:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d46a:	78bb      	ldrb	r3, [r7, #2]
 800d46c:	883a      	ldrh	r2, [r7, #0]
 800d46e:	78f9      	ldrb	r1, [r7, #3]
 800d470:	f7f5 f902 	bl	8002678 <HAL_PCD_EP_Open>
 800d474:	4603      	mov	r3, r0
 800d476:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d478:	7bfb      	ldrb	r3, [r7, #15]
 800d47a:	4618      	mov	r0, r3
 800d47c:	f000 f95a 	bl	800d734 <USBD_Get_USB_Status>
 800d480:	4603      	mov	r3, r0
 800d482:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d484:	7bbb      	ldrb	r3, [r7, #14]
}
 800d486:	4618      	mov	r0, r3
 800d488:	3710      	adds	r7, #16
 800d48a:	46bd      	mov	sp, r7
 800d48c:	bd80      	pop	{r7, pc}

0800d48e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d48e:	b580      	push	{r7, lr}
 800d490:	b084      	sub	sp, #16
 800d492:	af00      	add	r7, sp, #0
 800d494:	6078      	str	r0, [r7, #4]
 800d496:	460b      	mov	r3, r1
 800d498:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d49a:	2300      	movs	r3, #0
 800d49c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d49e:	2300      	movs	r3, #0
 800d4a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d4a8:	78fa      	ldrb	r2, [r7, #3]
 800d4aa:	4611      	mov	r1, r2
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	f7f5 f949 	bl	8002744 <HAL_PCD_EP_Close>
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d4b6:	7bfb      	ldrb	r3, [r7, #15]
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	f000 f93b 	bl	800d734 <USBD_Get_USB_Status>
 800d4be:	4603      	mov	r3, r0
 800d4c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d4c2:	7bbb      	ldrb	r3, [r7, #14]
}
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	3710      	adds	r7, #16
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	bd80      	pop	{r7, pc}

0800d4cc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b084      	sub	sp, #16
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
 800d4d4:	460b      	mov	r3, r1
 800d4d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4d8:	2300      	movs	r3, #0
 800d4da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4dc:	2300      	movs	r3, #0
 800d4de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d4e6:	78fa      	ldrb	r2, [r7, #3]
 800d4e8:	4611      	mov	r1, r2
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	f7f5 fa0a 	bl	8002904 <HAL_PCD_EP_SetStall>
 800d4f0:	4603      	mov	r3, r0
 800d4f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d4f4:	7bfb      	ldrb	r3, [r7, #15]
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	f000 f91c 	bl	800d734 <USBD_Get_USB_Status>
 800d4fc:	4603      	mov	r3, r0
 800d4fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d500:	7bbb      	ldrb	r3, [r7, #14]
}
 800d502:	4618      	mov	r0, r3
 800d504:	3710      	adds	r7, #16
 800d506:	46bd      	mov	sp, r7
 800d508:	bd80      	pop	{r7, pc}

0800d50a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d50a:	b580      	push	{r7, lr}
 800d50c:	b084      	sub	sp, #16
 800d50e:	af00      	add	r7, sp, #0
 800d510:	6078      	str	r0, [r7, #4]
 800d512:	460b      	mov	r3, r1
 800d514:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d516:	2300      	movs	r3, #0
 800d518:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d51a:	2300      	movs	r3, #0
 800d51c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d524:	78fa      	ldrb	r2, [r7, #3]
 800d526:	4611      	mov	r1, r2
 800d528:	4618      	mov	r0, r3
 800d52a:	f7f5 fa3d 	bl	80029a8 <HAL_PCD_EP_ClrStall>
 800d52e:	4603      	mov	r3, r0
 800d530:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d532:	7bfb      	ldrb	r3, [r7, #15]
 800d534:	4618      	mov	r0, r3
 800d536:	f000 f8fd 	bl	800d734 <USBD_Get_USB_Status>
 800d53a:	4603      	mov	r3, r0
 800d53c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d53e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d540:	4618      	mov	r0, r3
 800d542:	3710      	adds	r7, #16
 800d544:	46bd      	mov	sp, r7
 800d546:	bd80      	pop	{r7, pc}

0800d548 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d548:	b480      	push	{r7}
 800d54a:	b085      	sub	sp, #20
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	6078      	str	r0, [r7, #4]
 800d550:	460b      	mov	r3, r1
 800d552:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d55a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d55c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d560:	2b00      	cmp	r3, #0
 800d562:	da0c      	bge.n	800d57e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d564:	78fb      	ldrb	r3, [r7, #3]
 800d566:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d56a:	68f9      	ldr	r1, [r7, #12]
 800d56c:	1c5a      	adds	r2, r3, #1
 800d56e:	4613      	mov	r3, r2
 800d570:	009b      	lsls	r3, r3, #2
 800d572:	4413      	add	r3, r2
 800d574:	00db      	lsls	r3, r3, #3
 800d576:	440b      	add	r3, r1
 800d578:	3302      	adds	r3, #2
 800d57a:	781b      	ldrb	r3, [r3, #0]
 800d57c:	e00b      	b.n	800d596 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d57e:	78fb      	ldrb	r3, [r7, #3]
 800d580:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d584:	68f9      	ldr	r1, [r7, #12]
 800d586:	4613      	mov	r3, r2
 800d588:	009b      	lsls	r3, r3, #2
 800d58a:	4413      	add	r3, r2
 800d58c:	00db      	lsls	r3, r3, #3
 800d58e:	440b      	add	r3, r1
 800d590:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800d594:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d596:	4618      	mov	r0, r3
 800d598:	3714      	adds	r7, #20
 800d59a:	46bd      	mov	sp, r7
 800d59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a0:	4770      	bx	lr

0800d5a2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d5a2:	b580      	push	{r7, lr}
 800d5a4:	b084      	sub	sp, #16
 800d5a6:	af00      	add	r7, sp, #0
 800d5a8:	6078      	str	r0, [r7, #4]
 800d5aa:	460b      	mov	r3, r1
 800d5ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d5bc:	78fa      	ldrb	r2, [r7, #3]
 800d5be:	4611      	mov	r1, r2
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	f7f5 f834 	bl	800262e <HAL_PCD_SetAddress>
 800d5c6:	4603      	mov	r3, r0
 800d5c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d5ca:	7bfb      	ldrb	r3, [r7, #15]
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	f000 f8b1 	bl	800d734 <USBD_Get_USB_Status>
 800d5d2:	4603      	mov	r3, r0
 800d5d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d5d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800d5d8:	4618      	mov	r0, r3
 800d5da:	3710      	adds	r7, #16
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bd80      	pop	{r7, pc}

0800d5e0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b086      	sub	sp, #24
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	60f8      	str	r0, [r7, #12]
 800d5e8:	607a      	str	r2, [r7, #4]
 800d5ea:	603b      	str	r3, [r7, #0]
 800d5ec:	460b      	mov	r3, r1
 800d5ee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d5fe:	7af9      	ldrb	r1, [r7, #11]
 800d600:	683b      	ldr	r3, [r7, #0]
 800d602:	687a      	ldr	r2, [r7, #4]
 800d604:	f7f5 f93b 	bl	800287e <HAL_PCD_EP_Transmit>
 800d608:	4603      	mov	r3, r0
 800d60a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d60c:	7dfb      	ldrb	r3, [r7, #23]
 800d60e:	4618      	mov	r0, r3
 800d610:	f000 f890 	bl	800d734 <USBD_Get_USB_Status>
 800d614:	4603      	mov	r3, r0
 800d616:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d618:	7dbb      	ldrb	r3, [r7, #22]
}
 800d61a:	4618      	mov	r0, r3
 800d61c:	3718      	adds	r7, #24
 800d61e:	46bd      	mov	sp, r7
 800d620:	bd80      	pop	{r7, pc}

0800d622 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d622:	b580      	push	{r7, lr}
 800d624:	b086      	sub	sp, #24
 800d626:	af00      	add	r7, sp, #0
 800d628:	60f8      	str	r0, [r7, #12]
 800d62a:	607a      	str	r2, [r7, #4]
 800d62c:	603b      	str	r3, [r7, #0]
 800d62e:	460b      	mov	r3, r1
 800d630:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d632:	2300      	movs	r3, #0
 800d634:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d636:	2300      	movs	r3, #0
 800d638:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d640:	7af9      	ldrb	r1, [r7, #11]
 800d642:	683b      	ldr	r3, [r7, #0]
 800d644:	687a      	ldr	r2, [r7, #4]
 800d646:	f7f5 f8c5 	bl	80027d4 <HAL_PCD_EP_Receive>
 800d64a:	4603      	mov	r3, r0
 800d64c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d64e:	7dfb      	ldrb	r3, [r7, #23]
 800d650:	4618      	mov	r0, r3
 800d652:	f000 f86f 	bl	800d734 <USBD_Get_USB_Status>
 800d656:	4603      	mov	r3, r0
 800d658:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d65a:	7dbb      	ldrb	r3, [r7, #22]
}
 800d65c:	4618      	mov	r0, r3
 800d65e:	3718      	adds	r7, #24
 800d660:	46bd      	mov	sp, r7
 800d662:	bd80      	pop	{r7, pc}

0800d664 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b082      	sub	sp, #8
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
 800d66c:	460b      	mov	r3, r1
 800d66e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d676:	78fa      	ldrb	r2, [r7, #3]
 800d678:	4611      	mov	r1, r2
 800d67a:	4618      	mov	r0, r3
 800d67c:	f7f5 f8e7 	bl	800284e <HAL_PCD_EP_GetRxCount>
 800d680:	4603      	mov	r3, r0
}
 800d682:	4618      	mov	r0, r3
 800d684:	3708      	adds	r7, #8
 800d686:	46bd      	mov	sp, r7
 800d688:	bd80      	pop	{r7, pc}
	...

0800d68c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b082      	sub	sp, #8
 800d690:	af00      	add	r7, sp, #0
 800d692:	6078      	str	r0, [r7, #4]
 800d694:	460b      	mov	r3, r1
 800d696:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800d698:	78fb      	ldrb	r3, [r7, #3]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d002      	beq.n	800d6a4 <HAL_PCDEx_LPM_Callback+0x18>
 800d69e:	2b01      	cmp	r3, #1
 800d6a0:	d013      	beq.n	800d6ca <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800d6a2:	e023      	b.n	800d6ec <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	699b      	ldr	r3, [r3, #24]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d007      	beq.n	800d6bc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800d6ac:	f000 f83c 	bl	800d728 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d6b0:	4b10      	ldr	r3, [pc, #64]	; (800d6f4 <HAL_PCDEx_LPM_Callback+0x68>)
 800d6b2:	691b      	ldr	r3, [r3, #16]
 800d6b4:	4a0f      	ldr	r2, [pc, #60]	; (800d6f4 <HAL_PCDEx_LPM_Callback+0x68>)
 800d6b6:	f023 0306 	bic.w	r3, r3, #6
 800d6ba:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	f7fc f8b4 	bl	8009830 <USBD_LL_Resume>
    break;
 800d6c8:	e010      	b.n	800d6ec <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	f7fc f897 	bl	8009804 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	699b      	ldr	r3, [r3, #24]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d005      	beq.n	800d6ea <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d6de:	4b05      	ldr	r3, [pc, #20]	; (800d6f4 <HAL_PCDEx_LPM_Callback+0x68>)
 800d6e0:	691b      	ldr	r3, [r3, #16]
 800d6e2:	4a04      	ldr	r2, [pc, #16]	; (800d6f4 <HAL_PCDEx_LPM_Callback+0x68>)
 800d6e4:	f043 0306 	orr.w	r3, r3, #6
 800d6e8:	6113      	str	r3, [r2, #16]
    break;
 800d6ea:	bf00      	nop
}
 800d6ec:	bf00      	nop
 800d6ee:	3708      	adds	r7, #8
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	bd80      	pop	{r7, pc}
 800d6f4:	e000ed00 	.word	0xe000ed00

0800d6f8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d6f8:	b480      	push	{r7}
 800d6fa:	b083      	sub	sp, #12
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d700:	4b03      	ldr	r3, [pc, #12]	; (800d710 <USBD_static_malloc+0x18>)
}
 800d702:	4618      	mov	r0, r3
 800d704:	370c      	adds	r7, #12
 800d706:	46bd      	mov	sp, r7
 800d708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70c:	4770      	bx	lr
 800d70e:	bf00      	nop
 800d710:	200003b8 	.word	0x200003b8

0800d714 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d714:	b480      	push	{r7}
 800d716:	b083      	sub	sp, #12
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]

}
 800d71c:	bf00      	nop
 800d71e:	370c      	adds	r7, #12
 800d720:	46bd      	mov	sp, r7
 800d722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d726:	4770      	bx	lr

0800d728 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d72c:	f7f3 fdc0 	bl	80012b0 <SystemClock_Config>
}
 800d730:	bf00      	nop
 800d732:	bd80      	pop	{r7, pc}

0800d734 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d734:	b480      	push	{r7}
 800d736:	b085      	sub	sp, #20
 800d738:	af00      	add	r7, sp, #0
 800d73a:	4603      	mov	r3, r0
 800d73c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d73e:	2300      	movs	r3, #0
 800d740:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d742:	79fb      	ldrb	r3, [r7, #7]
 800d744:	2b03      	cmp	r3, #3
 800d746:	d817      	bhi.n	800d778 <USBD_Get_USB_Status+0x44>
 800d748:	a201      	add	r2, pc, #4	; (adr r2, 800d750 <USBD_Get_USB_Status+0x1c>)
 800d74a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d74e:	bf00      	nop
 800d750:	0800d761 	.word	0x0800d761
 800d754:	0800d767 	.word	0x0800d767
 800d758:	0800d76d 	.word	0x0800d76d
 800d75c:	0800d773 	.word	0x0800d773
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d760:	2300      	movs	r3, #0
 800d762:	73fb      	strb	r3, [r7, #15]
    break;
 800d764:	e00b      	b.n	800d77e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d766:	2303      	movs	r3, #3
 800d768:	73fb      	strb	r3, [r7, #15]
    break;
 800d76a:	e008      	b.n	800d77e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d76c:	2301      	movs	r3, #1
 800d76e:	73fb      	strb	r3, [r7, #15]
    break;
 800d770:	e005      	b.n	800d77e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d772:	2303      	movs	r3, #3
 800d774:	73fb      	strb	r3, [r7, #15]
    break;
 800d776:	e002      	b.n	800d77e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d778:	2303      	movs	r3, #3
 800d77a:	73fb      	strb	r3, [r7, #15]
    break;
 800d77c:	bf00      	nop
  }
  return usb_status;
 800d77e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d780:	4618      	mov	r0, r3
 800d782:	3714      	adds	r7, #20
 800d784:	46bd      	mov	sp, r7
 800d786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78a:	4770      	bx	lr

0800d78c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800d78c:	b480      	push	{r7}
 800d78e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800d790:	4b05      	ldr	r3, [pc, #20]	; (800d7a8 <UTIL_LPM_Init+0x1c>)
 800d792:	2200      	movs	r2, #0
 800d794:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800d796:	4b05      	ldr	r3, [pc, #20]	; (800d7ac <UTIL_LPM_Init+0x20>)
 800d798:	2200      	movs	r2, #0
 800d79a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800d79c:	bf00      	nop
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a4:	4770      	bx	lr
 800d7a6:	bf00      	nop
 800d7a8:	200005d8 	.word	0x200005d8
 800d7ac:	200005dc 	.word	0x200005dc

0800d7b0 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800d7b0:	b480      	push	{r7}
 800d7b2:	b087      	sub	sp, #28
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
 800d7b8:	460b      	mov	r3, r1
 800d7ba:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d7bc:	f3ef 8310 	mrs	r3, PRIMASK
 800d7c0:	613b      	str	r3, [r7, #16]
  return(result);
 800d7c2:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800d7c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d7c6:	b672      	cpsid	i
}
 800d7c8:	bf00      	nop
  
  switch(state)
 800d7ca:	78fb      	ldrb	r3, [r7, #3]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d008      	beq.n	800d7e2 <UTIL_LPM_SetOffMode+0x32>
 800d7d0:	2b01      	cmp	r3, #1
 800d7d2:	d10e      	bne.n	800d7f2 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800d7d4:	4b0d      	ldr	r3, [pc, #52]	; (800d80c <UTIL_LPM_SetOffMode+0x5c>)
 800d7d6:	681a      	ldr	r2, [r3, #0]
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	4313      	orrs	r3, r2
 800d7dc:	4a0b      	ldr	r2, [pc, #44]	; (800d80c <UTIL_LPM_SetOffMode+0x5c>)
 800d7de:	6013      	str	r3, [r2, #0]
      break;
 800d7e0:	e008      	b.n	800d7f4 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	43da      	mvns	r2, r3
 800d7e6:	4b09      	ldr	r3, [pc, #36]	; (800d80c <UTIL_LPM_SetOffMode+0x5c>)
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	4013      	ands	r3, r2
 800d7ec:	4a07      	ldr	r2, [pc, #28]	; (800d80c <UTIL_LPM_SetOffMode+0x5c>)
 800d7ee:	6013      	str	r3, [r2, #0]
      break;
 800d7f0:	e000      	b.n	800d7f4 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800d7f2:	bf00      	nop
 800d7f4:	697b      	ldr	r3, [r7, #20]
 800d7f6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	f383 8810 	msr	PRIMASK, r3
}
 800d7fe:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800d800:	bf00      	nop
 800d802:	371c      	adds	r7, #28
 800d804:	46bd      	mov	sp, r7
 800d806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80a:	4770      	bx	lr
 800d80c:	200005dc 	.word	0x200005dc

0800d810 <UTIL_SEQ_Init>:

/** @addtogroup SEQUENCER_Exported_function SEQUENCER exported functions
 *  @{
 */
void UTIL_SEQ_Init( void )
{
 800d810:	b580      	push	{r7, lr}
 800d812:	af00      	add	r7, sp, #0
  TaskSet = UTIL_SEQ_NO_BIT_SET;
 800d814:	4b0f      	ldr	r3, [pc, #60]	; (800d854 <UTIL_SEQ_Init+0x44>)
 800d816:	2200      	movs	r2, #0
 800d818:	601a      	str	r2, [r3, #0]
  TaskMask = UTIL_SEQ_ALL_BIT_SET;
 800d81a:	4b0f      	ldr	r3, [pc, #60]	; (800d858 <UTIL_SEQ_Init+0x48>)
 800d81c:	f04f 32ff 	mov.w	r2, #4294967295
 800d820:	601a      	str	r2, [r3, #0]
  SuperMask = UTIL_SEQ_ALL_BIT_SET;
 800d822:	4b0e      	ldr	r3, [pc, #56]	; (800d85c <UTIL_SEQ_Init+0x4c>)
 800d824:	f04f 32ff 	mov.w	r2, #4294967295
 800d828:	601a      	str	r2, [r3, #0]
  EvtSet = UTIL_SEQ_NO_BIT_SET;
 800d82a:	4b0d      	ldr	r3, [pc, #52]	; (800d860 <UTIL_SEQ_Init+0x50>)
 800d82c:	2200      	movs	r2, #0
 800d82e:	601a      	str	r2, [r3, #0]
  EvtWaited = UTIL_SEQ_NO_BIT_SET;
 800d830:	4b0c      	ldr	r3, [pc, #48]	; (800d864 <UTIL_SEQ_Init+0x54>)
 800d832:	2200      	movs	r2, #0
 800d834:	601a      	str	r2, [r3, #0]
  CurrentTaskIdx = 0U;
 800d836:	4b0c      	ldr	r3, [pc, #48]	; (800d868 <UTIL_SEQ_Init+0x58>)
 800d838:	2200      	movs	r2, #0
 800d83a:	601a      	str	r2, [r3, #0]
  (void)UTIL_SEQ_MEMSET8(TaskCb, 0, sizeof(TaskCb));
 800d83c:	2280      	movs	r2, #128	; 0x80
 800d83e:	2100      	movs	r1, #0
 800d840:	480a      	ldr	r0, [pc, #40]	; (800d86c <UTIL_SEQ_Init+0x5c>)
 800d842:	f000 fa65 	bl	800dd10 <memset>
  (void)UTIL_SEQ_MEMSET8(TaskPrio, 0, sizeof(TaskPrio));
 800d846:	2210      	movs	r2, #16
 800d848:	2100      	movs	r1, #0
 800d84a:	4809      	ldr	r0, [pc, #36]	; (800d870 <UTIL_SEQ_Init+0x60>)
 800d84c:	f000 fa60 	bl	800dd10 <memset>
  UTIL_SEQ_INIT_CRITICAL_SECTION( );
}
 800d850:	bf00      	nop
 800d852:	bd80      	pop	{r7, pc}
 800d854:	200005e0 	.word	0x200005e0
 800d858:	20000198 	.word	0x20000198
 800d85c:	2000019c 	.word	0x2000019c
 800d860:	200005e4 	.word	0x200005e4
 800d864:	200005e8 	.word	0x200005e8
 800d868:	200005ec 	.word	0x200005ec
 800d86c:	200005f0 	.word	0x200005f0
 800d870:	20000670 	.word	0x20000670

0800d874 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800d874:	b580      	push	{r7, lr}
 800d876:	b08c      	sub	sp, #48	; 0x30
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800d87c:	4b67      	ldr	r3, [pc, #412]	; (800da1c <UTIL_SEQ_Run+0x1a8>)
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800d882:	4b66      	ldr	r3, [pc, #408]	; (800da1c <UTIL_SEQ_Run+0x1a8>)
 800d884:	681a      	ldr	r2, [r3, #0]
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	4013      	ands	r3, r2
 800d88a:	4a64      	ldr	r2, [pc, #400]	; (800da1c <UTIL_SEQ_Run+0x1a8>)
 800d88c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800d88e:	e083      	b.n	800d998 <UTIL_SEQ_Run+0x124>
  {
    counter = 0U;
 800d890:	2300      	movs	r3, #0
 800d892:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800d894:	e002      	b.n	800d89c <UTIL_SEQ_Run+0x28>
    {
      counter++;
 800d896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d898:	3301      	adds	r3, #1
 800d89a:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800d89c:	4a60      	ldr	r2, [pc, #384]	; (800da20 <UTIL_SEQ_Run+0x1ac>)
 800d89e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8a0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800d8a4:	4b5f      	ldr	r3, [pc, #380]	; (800da24 <UTIL_SEQ_Run+0x1b0>)
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	401a      	ands	r2, r3
 800d8aa:	4b5c      	ldr	r3, [pc, #368]	; (800da1c <UTIL_SEQ_Run+0x1a8>)
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	4013      	ands	r3, r2
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d0f0      	beq.n	800d896 <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 800d8b4:	4a5a      	ldr	r2, [pc, #360]	; (800da20 <UTIL_SEQ_Run+0x1ac>)
 800d8b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8b8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800d8bc:	4b59      	ldr	r3, [pc, #356]	; (800da24 <UTIL_SEQ_Run+0x1b0>)
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	401a      	ands	r2, r3
 800d8c2:	4b56      	ldr	r3, [pc, #344]	; (800da1c <UTIL_SEQ_Run+0x1a8>)
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	4013      	ands	r3, r2
 800d8c8:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800d8ca:	4a55      	ldr	r2, [pc, #340]	; (800da20 <UTIL_SEQ_Run+0x1ac>)
 800d8cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ce:	00db      	lsls	r3, r3, #3
 800d8d0:	4413      	add	r3, r2
 800d8d2:	685a      	ldr	r2, [r3, #4]
 800d8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8d6:	4013      	ands	r3, r2
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d106      	bne.n	800d8ea <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800d8dc:	4a50      	ldr	r2, [pc, #320]	; (800da20 <UTIL_SEQ_Run+0x1ac>)
 800d8de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8e0:	00db      	lsls	r3, r3, #3
 800d8e2:	4413      	add	r3, r2
 800d8e4:	f04f 32ff 	mov.w	r2, #4294967295
 800d8e8:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800d8ea:	4a4d      	ldr	r2, [pc, #308]	; (800da20 <UTIL_SEQ_Run+0x1ac>)
 800d8ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ee:	00db      	lsls	r3, r3, #3
 800d8f0:	4413      	add	r3, r2
 800d8f2:	685a      	ldr	r2, [r3, #4]
 800d8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8f6:	4013      	ands	r3, r2
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	f000 f99d 	bl	800dc38 <SEQ_BitPosition>
 800d8fe:	4603      	mov	r3, r0
 800d900:	461a      	mov	r2, r3
 800d902:	4b49      	ldr	r3, [pc, #292]	; (800da28 <UTIL_SEQ_Run+0x1b4>)
 800d904:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800d906:	4a46      	ldr	r2, [pc, #280]	; (800da20 <UTIL_SEQ_Run+0x1ac>)
 800d908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d90a:	00db      	lsls	r3, r3, #3
 800d90c:	4413      	add	r3, r2
 800d90e:	685a      	ldr	r2, [r3, #4]
 800d910:	4b45      	ldr	r3, [pc, #276]	; (800da28 <UTIL_SEQ_Run+0x1b4>)
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	2101      	movs	r1, #1
 800d916:	fa01 f303 	lsl.w	r3, r1, r3
 800d91a:	43db      	mvns	r3, r3
 800d91c:	401a      	ands	r2, r3
 800d91e:	4940      	ldr	r1, [pc, #256]	; (800da20 <UTIL_SEQ_Run+0x1ac>)
 800d920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d922:	00db      	lsls	r3, r3, #3
 800d924:	440b      	add	r3, r1
 800d926:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d928:	f3ef 8310 	mrs	r3, PRIMASK
 800d92c:	61bb      	str	r3, [r7, #24]
  return(result);
 800d92e:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d930:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800d932:	b672      	cpsid	i
}
 800d934:	bf00      	nop
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800d936:	4b3c      	ldr	r3, [pc, #240]	; (800da28 <UTIL_SEQ_Run+0x1b4>)
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	2201      	movs	r2, #1
 800d93c:	fa02 f303 	lsl.w	r3, r2, r3
 800d940:	43da      	mvns	r2, r3
 800d942:	4b3a      	ldr	r3, [pc, #232]	; (800da2c <UTIL_SEQ_Run+0x1b8>)
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	4013      	ands	r3, r2
 800d948:	4a38      	ldr	r2, [pc, #224]	; (800da2c <UTIL_SEQ_Run+0x1b8>)
 800d94a:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800d94c:	2302      	movs	r3, #2
 800d94e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d950:	e013      	b.n	800d97a <UTIL_SEQ_Run+0x106>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800d952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d954:	3b01      	subs	r3, #1
 800d956:	4a32      	ldr	r2, [pc, #200]	; (800da20 <UTIL_SEQ_Run+0x1ac>)
 800d958:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800d95c:	4b32      	ldr	r3, [pc, #200]	; (800da28 <UTIL_SEQ_Run+0x1b4>)
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	2201      	movs	r2, #1
 800d962:	fa02 f303 	lsl.w	r3, r2, r3
 800d966:	43da      	mvns	r2, r3
 800d968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d96a:	3b01      	subs	r3, #1
 800d96c:	400a      	ands	r2, r1
 800d96e:	492c      	ldr	r1, [pc, #176]	; (800da20 <UTIL_SEQ_Run+0x1ac>)
 800d970:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800d974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d976:	3b01      	subs	r3, #1
 800d978:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d97a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d1e8      	bne.n	800d952 <UTIL_SEQ_Run+0xde>
 800d980:	6a3b      	ldr	r3, [r7, #32]
 800d982:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d984:	697b      	ldr	r3, [r7, #20]
 800d986:	f383 8810 	msr	PRIMASK, r3
}
 800d98a:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800d98c:	4b26      	ldr	r3, [pc, #152]	; (800da28 <UTIL_SEQ_Run+0x1b4>)
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	4a27      	ldr	r2, [pc, #156]	; (800da30 <UTIL_SEQ_Run+0x1bc>)
 800d992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d996:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800d998:	4b24      	ldr	r3, [pc, #144]	; (800da2c <UTIL_SEQ_Run+0x1b8>)
 800d99a:	681a      	ldr	r2, [r3, #0]
 800d99c:	4b21      	ldr	r3, [pc, #132]	; (800da24 <UTIL_SEQ_Run+0x1b0>)
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	401a      	ands	r2, r3
 800d9a2:	4b1e      	ldr	r3, [pc, #120]	; (800da1c <UTIL_SEQ_Run+0x1a8>)
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	4013      	ands	r3, r2
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d007      	beq.n	800d9bc <UTIL_SEQ_Run+0x148>
 800d9ac:	4b21      	ldr	r3, [pc, #132]	; (800da34 <UTIL_SEQ_Run+0x1c0>)
 800d9ae:	681a      	ldr	r2, [r3, #0]
 800d9b0:	4b21      	ldr	r3, [pc, #132]	; (800da38 <UTIL_SEQ_Run+0x1c4>)
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	4013      	ands	r3, r2
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	f43f af6a 	beq.w	800d890 <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800d9bc:	4b1a      	ldr	r3, [pc, #104]	; (800da28 <UTIL_SEQ_Run+0x1b4>)
 800d9be:	f04f 32ff 	mov.w	r2, #4294967295
 800d9c2:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800d9c4:	f000 f92a 	bl	800dc1c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d9c8:	f3ef 8310 	mrs	r3, PRIMASK
 800d9cc:	613b      	str	r3, [r7, #16]
  return(result);
 800d9ce:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800d9d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800d9d2:	b672      	cpsid	i
}
 800d9d4:	bf00      	nop
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 800d9d6:	4b15      	ldr	r3, [pc, #84]	; (800da2c <UTIL_SEQ_Run+0x1b8>)
 800d9d8:	681a      	ldr	r2, [r3, #0]
 800d9da:	4b12      	ldr	r3, [pc, #72]	; (800da24 <UTIL_SEQ_Run+0x1b0>)
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	401a      	ands	r2, r3
 800d9e0:	4b0e      	ldr	r3, [pc, #56]	; (800da1c <UTIL_SEQ_Run+0x1a8>)
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	4013      	ands	r3, r2
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d108      	bne.n	800d9fc <UTIL_SEQ_Run+0x188>
 800d9ea:	4b12      	ldr	r3, [pc, #72]	; (800da34 <UTIL_SEQ_Run+0x1c0>)
 800d9ec:	681a      	ldr	r2, [r3, #0]
 800d9ee:	4b12      	ldr	r3, [pc, #72]	; (800da38 <UTIL_SEQ_Run+0x1c4>)
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	4013      	ands	r3, r2
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d101      	bne.n	800d9fc <UTIL_SEQ_Run+0x188>
  {
	UTIL_SEQ_Idle( );
 800d9f8:	f7f2 fdf7 	bl	80005ea <UTIL_SEQ_Idle>
 800d9fc:	69fb      	ldr	r3, [r7, #28]
 800d9fe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	f383 8810 	msr	PRIMASK, r3
}
 800da06:	bf00      	nop
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 800da08:	f000 f90f 	bl	800dc2a <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800da0c:	4a03      	ldr	r2, [pc, #12]	; (800da1c <UTIL_SEQ_Run+0x1a8>)
 800da0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da10:	6013      	str	r3, [r2, #0]

  return;
 800da12:	bf00      	nop
}
 800da14:	3730      	adds	r7, #48	; 0x30
 800da16:	46bd      	mov	sp, r7
 800da18:	bd80      	pop	{r7, pc}
 800da1a:	bf00      	nop
 800da1c:	2000019c 	.word	0x2000019c
 800da20:	20000670 	.word	0x20000670
 800da24:	20000198 	.word	0x20000198
 800da28:	200005ec 	.word	0x200005ec
 800da2c:	200005e0 	.word	0x200005e0
 800da30:	200005f0 	.word	0x200005f0
 800da34:	200005e4 	.word	0x200005e4
 800da38:	200005e8 	.word	0x200005e8

0800da3c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b088      	sub	sp, #32
 800da40:	af00      	add	r7, sp, #0
 800da42:	60f8      	str	r0, [r7, #12]
 800da44:	60b9      	str	r1, [r7, #8]
 800da46:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da48:	f3ef 8310 	mrs	r3, PRIMASK
 800da4c:	617b      	str	r3, [r7, #20]
  return(result);
 800da4e:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800da50:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800da52:	b672      	cpsid	i
}
 800da54:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800da56:	68f8      	ldr	r0, [r7, #12]
 800da58:	f000 f8ee 	bl	800dc38 <SEQ_BitPosition>
 800da5c:	4603      	mov	r3, r0
 800da5e:	4619      	mov	r1, r3
 800da60:	4a06      	ldr	r2, [pc, #24]	; (800da7c <UTIL_SEQ_RegTask+0x40>)
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800da68:	69fb      	ldr	r3, [r7, #28]
 800da6a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da6c:	69bb      	ldr	r3, [r7, #24]
 800da6e:	f383 8810 	msr	PRIMASK, r3
}
 800da72:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800da74:	bf00      	nop
}
 800da76:	3720      	adds	r7, #32
 800da78:	46bd      	mov	sp, r7
 800da7a:	bd80      	pop	{r7, pc}
 800da7c:	200005f0 	.word	0x200005f0

0800da80 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800da80:	b480      	push	{r7}
 800da82:	b087      	sub	sp, #28
 800da84:	af00      	add	r7, sp, #0
 800da86:	6078      	str	r0, [r7, #4]
 800da88:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da8a:	f3ef 8310 	mrs	r3, PRIMASK
 800da8e:	60fb      	str	r3, [r7, #12]
  return(result);
 800da90:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800da92:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800da94:	b672      	cpsid	i
}
 800da96:	bf00      	nop

  TaskSet |= TaskId_bm;
 800da98:	4b0d      	ldr	r3, [pc, #52]	; (800dad0 <UTIL_SEQ_SetTask+0x50>)
 800da9a:	681a      	ldr	r2, [r3, #0]
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	4313      	orrs	r3, r2
 800daa0:	4a0b      	ldr	r2, [pc, #44]	; (800dad0 <UTIL_SEQ_SetTask+0x50>)
 800daa2:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800daa4:	4a0b      	ldr	r2, [pc, #44]	; (800dad4 <UTIL_SEQ_SetTask+0x54>)
 800daa6:	683b      	ldr	r3, [r7, #0]
 800daa8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	431a      	orrs	r2, r3
 800dab0:	4908      	ldr	r1, [pc, #32]	; (800dad4 <UTIL_SEQ_SetTask+0x54>)
 800dab2:	683b      	ldr	r3, [r7, #0]
 800dab4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800dab8:	697b      	ldr	r3, [r7, #20]
 800daba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dabc:	693b      	ldr	r3, [r7, #16]
 800dabe:	f383 8810 	msr	PRIMASK, r3
}
 800dac2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800dac4:	bf00      	nop
}
 800dac6:	371c      	adds	r7, #28
 800dac8:	46bd      	mov	sp, r7
 800daca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dace:	4770      	bx	lr
 800dad0:	200005e0 	.word	0x200005e0
 800dad4:	20000670 	.word	0x20000670

0800dad8 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800dad8:	b480      	push	{r7}
 800dada:	b087      	sub	sp, #28
 800dadc:	af00      	add	r7, sp, #0
 800dade:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dae0:	f3ef 8310 	mrs	r3, PRIMASK
 800dae4:	60fb      	str	r3, [r7, #12]
  return(result);
 800dae6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800dae8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800daea:	b672      	cpsid	i
}
 800daec:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	43da      	mvns	r2, r3
 800daf2:	4b08      	ldr	r3, [pc, #32]	; (800db14 <UTIL_SEQ_PauseTask+0x3c>)
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	4013      	ands	r3, r2
 800daf8:	4a06      	ldr	r2, [pc, #24]	; (800db14 <UTIL_SEQ_PauseTask+0x3c>)
 800dafa:	6013      	str	r3, [r2, #0]
 800dafc:	697b      	ldr	r3, [r7, #20]
 800dafe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db00:	693b      	ldr	r3, [r7, #16]
 800db02:	f383 8810 	msr	PRIMASK, r3
}
 800db06:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800db08:	bf00      	nop
}
 800db0a:	371c      	adds	r7, #28
 800db0c:	46bd      	mov	sp, r7
 800db0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db12:	4770      	bx	lr
 800db14:	20000198 	.word	0x20000198

0800db18 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800db18:	b480      	push	{r7}
 800db1a:	b087      	sub	sp, #28
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db20:	f3ef 8310 	mrs	r3, PRIMASK
 800db24:	60fb      	str	r3, [r7, #12]
  return(result);
 800db26:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800db28:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800db2a:	b672      	cpsid	i
}
 800db2c:	bf00      	nop

  TaskMask |= TaskId_bm;
 800db2e:	4b09      	ldr	r3, [pc, #36]	; (800db54 <UTIL_SEQ_ResumeTask+0x3c>)
 800db30:	681a      	ldr	r2, [r3, #0]
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	4313      	orrs	r3, r2
 800db36:	4a07      	ldr	r2, [pc, #28]	; (800db54 <UTIL_SEQ_ResumeTask+0x3c>)
 800db38:	6013      	str	r3, [r2, #0]
 800db3a:	697b      	ldr	r3, [r7, #20]
 800db3c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db3e:	693b      	ldr	r3, [r7, #16]
 800db40:	f383 8810 	msr	PRIMASK, r3
}
 800db44:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800db46:	bf00      	nop
}
 800db48:	371c      	adds	r7, #28
 800db4a:	46bd      	mov	sp, r7
 800db4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db50:	4770      	bx	lr
 800db52:	bf00      	nop
 800db54:	20000198 	.word	0x20000198

0800db58 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800db58:	b480      	push	{r7}
 800db5a:	b087      	sub	sp, #28
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db60:	f3ef 8310 	mrs	r3, PRIMASK
 800db64:	60fb      	str	r3, [r7, #12]
  return(result);
 800db66:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800db68:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800db6a:	b672      	cpsid	i
}
 800db6c:	bf00      	nop

  EvtSet |= EvtId_bm;
 800db6e:	4b09      	ldr	r3, [pc, #36]	; (800db94 <UTIL_SEQ_SetEvt+0x3c>)
 800db70:	681a      	ldr	r2, [r3, #0]
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	4313      	orrs	r3, r2
 800db76:	4a07      	ldr	r2, [pc, #28]	; (800db94 <UTIL_SEQ_SetEvt+0x3c>)
 800db78:	6013      	str	r3, [r2, #0]
 800db7a:	697b      	ldr	r3, [r7, #20]
 800db7c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db7e:	693b      	ldr	r3, [r7, #16]
 800db80:	f383 8810 	msr	PRIMASK, r3
}
 800db84:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800db86:	bf00      	nop
}
 800db88:	371c      	adds	r7, #28
 800db8a:	46bd      	mov	sp, r7
 800db8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db90:	4770      	bx	lr
 800db92:	bf00      	nop
 800db94:	200005e4 	.word	0x200005e4

0800db98 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800db98:	b580      	push	{r7, lr}
 800db9a:	b086      	sub	sp, #24
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_idx;
  UTIL_SEQ_bm_t wait_task_idx;
  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800dba0:	4b1b      	ldr	r3, [pc, #108]	; (800dc10 <UTIL_SEQ_WaitEvt+0x78>)
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	613b      	str	r3, [r7, #16]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800dba6:	4b1a      	ldr	r3, [pc, #104]	; (800dc10 <UTIL_SEQ_WaitEvt+0x78>)
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbae:	d102      	bne.n	800dbb6 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0;
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	617b      	str	r3, [r7, #20]
 800dbb4:	e005      	b.n	800dbc2 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = 1 << CurrentTaskIdx;
 800dbb6:	4b16      	ldr	r3, [pc, #88]	; (800dc10 <UTIL_SEQ_WaitEvt+0x78>)
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	2201      	movs	r2, #1
 800dbbc:	fa02 f303 	lsl.w	r3, r2, r3
 800dbc0:	617b      	str	r3, [r7, #20]
  }

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800dbc2:	4b14      	ldr	r3, [pc, #80]	; (800dc14 <UTIL_SEQ_WaitEvt+0x7c>)
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	60fb      	str	r3, [r7, #12]
  EvtWaited = EvtId_bm;
 800dbc8:	4a12      	ldr	r2, [pc, #72]	; (800dc14 <UTIL_SEQ_WaitEvt+0x7c>)
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again from the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while ((EvtSet & EvtWaited) == 0U)
 800dbce:	e005      	b.n	800dbdc <UTIL_SEQ_WaitEvt+0x44>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 800dbd0:	4b10      	ldr	r3, [pc, #64]	; (800dc14 <UTIL_SEQ_WaitEvt+0x7c>)
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	4619      	mov	r1, r3
 800dbd6:	6978      	ldr	r0, [r7, #20]
 800dbd8:	f7f2 fd0e 	bl	80005f8 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtWaited) == 0U)
 800dbdc:	4b0e      	ldr	r3, [pc, #56]	; (800dc18 <UTIL_SEQ_WaitEvt+0x80>)
 800dbde:	681a      	ldr	r2, [r3, #0]
 800dbe0:	4b0c      	ldr	r3, [pc, #48]	; (800dc14 <UTIL_SEQ_WaitEvt+0x7c>)
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	4013      	ands	r3, r2
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d0f2      	beq.n	800dbd0 <UTIL_SEQ_WaitEvt+0x38>
  /**
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800dbea:	4a09      	ldr	r2, [pc, #36]	; (800dc10 <UTIL_SEQ_WaitEvt+0x78>)
 800dbec:	693b      	ldr	r3, [r7, #16]
 800dbee:	6013      	str	r3, [r2, #0]

  EvtSet &= (~EvtWaited);
 800dbf0:	4b08      	ldr	r3, [pc, #32]	; (800dc14 <UTIL_SEQ_WaitEvt+0x7c>)
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	43da      	mvns	r2, r3
 800dbf6:	4b08      	ldr	r3, [pc, #32]	; (800dc18 <UTIL_SEQ_WaitEvt+0x80>)
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	4013      	ands	r3, r2
 800dbfc:	4a06      	ldr	r2, [pc, #24]	; (800dc18 <UTIL_SEQ_WaitEvt+0x80>)
 800dbfe:	6013      	str	r3, [r2, #0]
  EvtWaited = event_waited_id_backup;
 800dc00:	4a04      	ldr	r2, [pc, #16]	; (800dc14 <UTIL_SEQ_WaitEvt+0x7c>)
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	6013      	str	r3, [r2, #0]

  return;
 800dc06:	bf00      	nop
}
 800dc08:	3718      	adds	r7, #24
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	bd80      	pop	{r7, pc}
 800dc0e:	bf00      	nop
 800dc10:	200005ec 	.word	0x200005ec
 800dc14:	200005e8 	.word	0x200005e8
 800dc18:	200005e4 	.word	0x200005e4

0800dc1c <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800dc1c:	b480      	push	{r7}
 800dc1e:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800dc20:	bf00      	nop
}
 800dc22:	46bd      	mov	sp, r7
 800dc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc28:	4770      	bx	lr

0800dc2a <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800dc2a:	b480      	push	{r7}
 800dc2c:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800dc2e:	bf00      	nop
}
 800dc30:	46bd      	mov	sp, r7
 800dc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc36:	4770      	bx	lr

0800dc38 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800dc38:	b480      	push	{r7}
 800dc3a:	b085      	sub	sp, #20
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 800dc40:	2300      	movs	r3, #0
 800dc42:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	0c1b      	lsrs	r3, r3, #16
 800dc48:	041b      	lsls	r3, r3, #16
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d104      	bne.n	800dc58 <SEQ_BitPosition+0x20>
 800dc4e:	2310      	movs	r3, #16
 800dc50:	73fb      	strb	r3, [r7, #15]
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	041b      	lsls	r3, r3, #16
 800dc56:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d105      	bne.n	800dc6e <SEQ_BitPosition+0x36>
 800dc62:	7bfb      	ldrb	r3, [r7, #15]
 800dc64:	3308      	adds	r3, #8
 800dc66:	73fb      	strb	r3, [r7, #15]
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	021b      	lsls	r3, r3, #8
 800dc6c:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d105      	bne.n	800dc84 <SEQ_BitPosition+0x4c>
 800dc78:	7bfb      	ldrb	r3, [r7, #15]
 800dc7a:	3304      	adds	r3, #4
 800dc7c:	73fb      	strb	r3, [r7, #15]
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	011b      	lsls	r3, r3, #4
 800dc82:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	0f1b      	lsrs	r3, r3, #28
 800dc88:	4a07      	ldr	r2, [pc, #28]	; (800dca8 <SEQ_BitPosition+0x70>)
 800dc8a:	5cd2      	ldrb	r2, [r2, r3]
 800dc8c:	7bfb      	ldrb	r3, [r7, #15]
 800dc8e:	4413      	add	r3, r2
 800dc90:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800dc92:	7bfb      	ldrb	r3, [r7, #15]
 800dc94:	f1c3 031f 	rsb	r3, r3, #31
 800dc98:	b2db      	uxtb	r3, r3
}
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	3714      	adds	r7, #20
 800dc9e:	46bd      	mov	sp, r7
 800dca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca4:	4770      	bx	lr
 800dca6:	bf00      	nop
 800dca8:	0800e008 	.word	0x0800e008

0800dcac <__libc_init_array>:
 800dcac:	b570      	push	{r4, r5, r6, lr}
 800dcae:	4d0d      	ldr	r5, [pc, #52]	; (800dce4 <__libc_init_array+0x38>)
 800dcb0:	4c0d      	ldr	r4, [pc, #52]	; (800dce8 <__libc_init_array+0x3c>)
 800dcb2:	1b64      	subs	r4, r4, r5
 800dcb4:	10a4      	asrs	r4, r4, #2
 800dcb6:	2600      	movs	r6, #0
 800dcb8:	42a6      	cmp	r6, r4
 800dcba:	d109      	bne.n	800dcd0 <__libc_init_array+0x24>
 800dcbc:	4d0b      	ldr	r5, [pc, #44]	; (800dcec <__libc_init_array+0x40>)
 800dcbe:	4c0c      	ldr	r4, [pc, #48]	; (800dcf0 <__libc_init_array+0x44>)
 800dcc0:	f000 f82e 	bl	800dd20 <_init>
 800dcc4:	1b64      	subs	r4, r4, r5
 800dcc6:	10a4      	asrs	r4, r4, #2
 800dcc8:	2600      	movs	r6, #0
 800dcca:	42a6      	cmp	r6, r4
 800dccc:	d105      	bne.n	800dcda <__libc_init_array+0x2e>
 800dcce:	bd70      	pop	{r4, r5, r6, pc}
 800dcd0:	f855 3b04 	ldr.w	r3, [r5], #4
 800dcd4:	4798      	blx	r3
 800dcd6:	3601      	adds	r6, #1
 800dcd8:	e7ee      	b.n	800dcb8 <__libc_init_array+0xc>
 800dcda:	f855 3b04 	ldr.w	r3, [r5], #4
 800dcde:	4798      	blx	r3
 800dce0:	3601      	adds	r6, #1
 800dce2:	e7f2      	b.n	800dcca <__libc_init_array+0x1e>
 800dce4:	0800e020 	.word	0x0800e020
 800dce8:	0800e020 	.word	0x0800e020
 800dcec:	0800e020 	.word	0x0800e020
 800dcf0:	0800e024 	.word	0x0800e024

0800dcf4 <memcpy>:
 800dcf4:	440a      	add	r2, r1
 800dcf6:	4291      	cmp	r1, r2
 800dcf8:	f100 33ff 	add.w	r3, r0, #4294967295
 800dcfc:	d100      	bne.n	800dd00 <memcpy+0xc>
 800dcfe:	4770      	bx	lr
 800dd00:	b510      	push	{r4, lr}
 800dd02:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dd06:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dd0a:	4291      	cmp	r1, r2
 800dd0c:	d1f9      	bne.n	800dd02 <memcpy+0xe>
 800dd0e:	bd10      	pop	{r4, pc}

0800dd10 <memset>:
 800dd10:	4402      	add	r2, r0
 800dd12:	4603      	mov	r3, r0
 800dd14:	4293      	cmp	r3, r2
 800dd16:	d100      	bne.n	800dd1a <memset+0xa>
 800dd18:	4770      	bx	lr
 800dd1a:	f803 1b01 	strb.w	r1, [r3], #1
 800dd1e:	e7f9      	b.n	800dd14 <memset+0x4>

0800dd20 <_init>:
 800dd20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd22:	bf00      	nop
 800dd24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd26:	bc08      	pop	{r3}
 800dd28:	469e      	mov	lr, r3
 800dd2a:	4770      	bx	lr

0800dd2c <_fini>:
 800dd2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd2e:	bf00      	nop
 800dd30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd32:	bc08      	pop	{r3}
 800dd34:	469e      	mov	lr, r3
 800dd36:	4770      	bx	lr
