
BLE_Beacon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a074  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000390  0800a1b0  0800a1b0  0001a1b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a540  0800a540  0001a540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a548  0800a548  0001a548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a54c  0800a54c  0001a54c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000090  20000004  0800a550  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  20000094  0800a5e0  00020094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 00000035  20000130  0800a679  00020130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000168  0800a6ae  00020168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000013e8  2000017c  0800a6bf  0002017c  2**2
                  ALLOC
 11 ._user_heap_stack 00001404  20001564  0800a6bf  00021564  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020179  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 14 MB_MEM1       000001b8  20030028  20030028  00030000  2**2
                  ALLOC
 15 MB_MEM2       00000877  200301e0  200301e0  00030000  2**2
                  ALLOC
 16 .debug_line   0002d7e7  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_info   0003e14a  00000000  00000000  0004d990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00007a0c  00000000  00000000  0008bada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00002968  00000000  00000000  000934e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f790f  00000000  00000000  00095e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00002680  00000000  00000000  0018d760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  0002dd6a  00000000  00000000  0018fde0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000053  00000000  00000000  001bdb4a  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000b110  00000000  00000000  001bdba0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000017c 	.word	0x2000017c
 8000158:	00000000 	.word	0x00000000
 800015c:	0800a198 	.word	0x0800a198

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000180 	.word	0x20000180
 8000178:	0800a198 	.word	0x0800a198

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b96e 	b.w	8000480 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9d08      	ldr	r5, [sp, #32]
 80001c2:	4604      	mov	r4, r0
 80001c4:	468c      	mov	ip, r1
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	f040 8083 	bne.w	80002d2 <__udivmoddi4+0x116>
 80001cc:	428a      	cmp	r2, r1
 80001ce:	4617      	mov	r7, r2
 80001d0:	d947      	bls.n	8000262 <__udivmoddi4+0xa6>
 80001d2:	fab2 f282 	clz	r2, r2
 80001d6:	b142      	cbz	r2, 80001ea <__udivmoddi4+0x2e>
 80001d8:	f1c2 0020 	rsb	r0, r2, #32
 80001dc:	fa24 f000 	lsr.w	r0, r4, r0
 80001e0:	4091      	lsls	r1, r2
 80001e2:	4097      	lsls	r7, r2
 80001e4:	ea40 0c01 	orr.w	ip, r0, r1
 80001e8:	4094      	lsls	r4, r2
 80001ea:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001ee:	0c23      	lsrs	r3, r4, #16
 80001f0:	fbbc f6f8 	udiv	r6, ip, r8
 80001f4:	fa1f fe87 	uxth.w	lr, r7
 80001f8:	fb08 c116 	mls	r1, r8, r6, ip
 80001fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000200:	fb06 f10e 	mul.w	r1, r6, lr
 8000204:	4299      	cmp	r1, r3
 8000206:	d909      	bls.n	800021c <__udivmoddi4+0x60>
 8000208:	18fb      	adds	r3, r7, r3
 800020a:	f106 30ff 	add.w	r0, r6, #4294967295
 800020e:	f080 8119 	bcs.w	8000444 <__udivmoddi4+0x288>
 8000212:	4299      	cmp	r1, r3
 8000214:	f240 8116 	bls.w	8000444 <__udivmoddi4+0x288>
 8000218:	3e02      	subs	r6, #2
 800021a:	443b      	add	r3, r7
 800021c:	1a5b      	subs	r3, r3, r1
 800021e:	b2a4      	uxth	r4, r4
 8000220:	fbb3 f0f8 	udiv	r0, r3, r8
 8000224:	fb08 3310 	mls	r3, r8, r0, r3
 8000228:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800022c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000230:	45a6      	cmp	lr, r4
 8000232:	d909      	bls.n	8000248 <__udivmoddi4+0x8c>
 8000234:	193c      	adds	r4, r7, r4
 8000236:	f100 33ff 	add.w	r3, r0, #4294967295
 800023a:	f080 8105 	bcs.w	8000448 <__udivmoddi4+0x28c>
 800023e:	45a6      	cmp	lr, r4
 8000240:	f240 8102 	bls.w	8000448 <__udivmoddi4+0x28c>
 8000244:	3802      	subs	r0, #2
 8000246:	443c      	add	r4, r7
 8000248:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800024c:	eba4 040e 	sub.w	r4, r4, lr
 8000250:	2600      	movs	r6, #0
 8000252:	b11d      	cbz	r5, 800025c <__udivmoddi4+0xa0>
 8000254:	40d4      	lsrs	r4, r2
 8000256:	2300      	movs	r3, #0
 8000258:	e9c5 4300 	strd	r4, r3, [r5]
 800025c:	4631      	mov	r1, r6
 800025e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000262:	b902      	cbnz	r2, 8000266 <__udivmoddi4+0xaa>
 8000264:	deff      	udf	#255	; 0xff
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	2a00      	cmp	r2, #0
 800026c:	d150      	bne.n	8000310 <__udivmoddi4+0x154>
 800026e:	1bcb      	subs	r3, r1, r7
 8000270:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000274:	fa1f f887 	uxth.w	r8, r7
 8000278:	2601      	movs	r6, #1
 800027a:	fbb3 fcfe 	udiv	ip, r3, lr
 800027e:	0c21      	lsrs	r1, r4, #16
 8000280:	fb0e 331c 	mls	r3, lr, ip, r3
 8000284:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000288:	fb08 f30c 	mul.w	r3, r8, ip
 800028c:	428b      	cmp	r3, r1
 800028e:	d907      	bls.n	80002a0 <__udivmoddi4+0xe4>
 8000290:	1879      	adds	r1, r7, r1
 8000292:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000296:	d202      	bcs.n	800029e <__udivmoddi4+0xe2>
 8000298:	428b      	cmp	r3, r1
 800029a:	f200 80e9 	bhi.w	8000470 <__udivmoddi4+0x2b4>
 800029e:	4684      	mov	ip, r0
 80002a0:	1ac9      	subs	r1, r1, r3
 80002a2:	b2a3      	uxth	r3, r4
 80002a4:	fbb1 f0fe 	udiv	r0, r1, lr
 80002a8:	fb0e 1110 	mls	r1, lr, r0, r1
 80002ac:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002b0:	fb08 f800 	mul.w	r8, r8, r0
 80002b4:	45a0      	cmp	r8, r4
 80002b6:	d907      	bls.n	80002c8 <__udivmoddi4+0x10c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	d202      	bcs.n	80002c6 <__udivmoddi4+0x10a>
 80002c0:	45a0      	cmp	r8, r4
 80002c2:	f200 80d9 	bhi.w	8000478 <__udivmoddi4+0x2bc>
 80002c6:	4618      	mov	r0, r3
 80002c8:	eba4 0408 	sub.w	r4, r4, r8
 80002cc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002d0:	e7bf      	b.n	8000252 <__udivmoddi4+0x96>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d909      	bls.n	80002ea <__udivmoddi4+0x12e>
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	f000 80b1 	beq.w	800043e <__udivmoddi4+0x282>
 80002dc:	2600      	movs	r6, #0
 80002de:	e9c5 0100 	strd	r0, r1, [r5]
 80002e2:	4630      	mov	r0, r6
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	fab3 f683 	clz	r6, r3
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	d14a      	bne.n	8000388 <__udivmoddi4+0x1cc>
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0x140>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80b8 	bhi.w	800046c <__udivmoddi4+0x2b0>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb61 0103 	sbc.w	r1, r1, r3
 8000302:	2001      	movs	r0, #1
 8000304:	468c      	mov	ip, r1
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0a8      	beq.n	800025c <__udivmoddi4+0xa0>
 800030a:	e9c5 4c00 	strd	r4, ip, [r5]
 800030e:	e7a5      	b.n	800025c <__udivmoddi4+0xa0>
 8000310:	f1c2 0320 	rsb	r3, r2, #32
 8000314:	fa20 f603 	lsr.w	r6, r0, r3
 8000318:	4097      	lsls	r7, r2
 800031a:	fa01 f002 	lsl.w	r0, r1, r2
 800031e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000322:	40d9      	lsrs	r1, r3
 8000324:	4330      	orrs	r0, r6
 8000326:	0c03      	lsrs	r3, r0, #16
 8000328:	fbb1 f6fe 	udiv	r6, r1, lr
 800032c:	fa1f f887 	uxth.w	r8, r7
 8000330:	fb0e 1116 	mls	r1, lr, r6, r1
 8000334:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000338:	fb06 f108 	mul.w	r1, r6, r8
 800033c:	4299      	cmp	r1, r3
 800033e:	fa04 f402 	lsl.w	r4, r4, r2
 8000342:	d909      	bls.n	8000358 <__udivmoddi4+0x19c>
 8000344:	18fb      	adds	r3, r7, r3
 8000346:	f106 3cff 	add.w	ip, r6, #4294967295
 800034a:	f080 808d 	bcs.w	8000468 <__udivmoddi4+0x2ac>
 800034e:	4299      	cmp	r1, r3
 8000350:	f240 808a 	bls.w	8000468 <__udivmoddi4+0x2ac>
 8000354:	3e02      	subs	r6, #2
 8000356:	443b      	add	r3, r7
 8000358:	1a5b      	subs	r3, r3, r1
 800035a:	b281      	uxth	r1, r0
 800035c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000360:	fb0e 3310 	mls	r3, lr, r0, r3
 8000364:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000368:	fb00 f308 	mul.w	r3, r0, r8
 800036c:	428b      	cmp	r3, r1
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x1c4>
 8000370:	1879      	adds	r1, r7, r1
 8000372:	f100 3cff 	add.w	ip, r0, #4294967295
 8000376:	d273      	bcs.n	8000460 <__udivmoddi4+0x2a4>
 8000378:	428b      	cmp	r3, r1
 800037a:	d971      	bls.n	8000460 <__udivmoddi4+0x2a4>
 800037c:	3802      	subs	r0, #2
 800037e:	4439      	add	r1, r7
 8000380:	1acb      	subs	r3, r1, r3
 8000382:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000386:	e778      	b.n	800027a <__udivmoddi4+0xbe>
 8000388:	f1c6 0c20 	rsb	ip, r6, #32
 800038c:	fa03 f406 	lsl.w	r4, r3, r6
 8000390:	fa22 f30c 	lsr.w	r3, r2, ip
 8000394:	431c      	orrs	r4, r3
 8000396:	fa20 f70c 	lsr.w	r7, r0, ip
 800039a:	fa01 f306 	lsl.w	r3, r1, r6
 800039e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003a2:	fa21 f10c 	lsr.w	r1, r1, ip
 80003a6:	431f      	orrs	r7, r3
 80003a8:	0c3b      	lsrs	r3, r7, #16
 80003aa:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ae:	fa1f f884 	uxth.w	r8, r4
 80003b2:	fb0e 1119 	mls	r1, lr, r9, r1
 80003b6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003ba:	fb09 fa08 	mul.w	sl, r9, r8
 80003be:	458a      	cmp	sl, r1
 80003c0:	fa02 f206 	lsl.w	r2, r2, r6
 80003c4:	fa00 f306 	lsl.w	r3, r0, r6
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x220>
 80003ca:	1861      	adds	r1, r4, r1
 80003cc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d0:	d248      	bcs.n	8000464 <__udivmoddi4+0x2a8>
 80003d2:	458a      	cmp	sl, r1
 80003d4:	d946      	bls.n	8000464 <__udivmoddi4+0x2a8>
 80003d6:	f1a9 0902 	sub.w	r9, r9, #2
 80003da:	4421      	add	r1, r4
 80003dc:	eba1 010a 	sub.w	r1, r1, sl
 80003e0:	b2bf      	uxth	r7, r7
 80003e2:	fbb1 f0fe 	udiv	r0, r1, lr
 80003e6:	fb0e 1110 	mls	r1, lr, r0, r1
 80003ea:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80003ee:	fb00 f808 	mul.w	r8, r0, r8
 80003f2:	45b8      	cmp	r8, r7
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x24a>
 80003f6:	19e7      	adds	r7, r4, r7
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d22e      	bcs.n	800045c <__udivmoddi4+0x2a0>
 80003fe:	45b8      	cmp	r8, r7
 8000400:	d92c      	bls.n	800045c <__udivmoddi4+0x2a0>
 8000402:	3802      	subs	r0, #2
 8000404:	4427      	add	r7, r4
 8000406:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800040a:	eba7 0708 	sub.w	r7, r7, r8
 800040e:	fba0 8902 	umull	r8, r9, r0, r2
 8000412:	454f      	cmp	r7, r9
 8000414:	46c6      	mov	lr, r8
 8000416:	4649      	mov	r1, r9
 8000418:	d31a      	bcc.n	8000450 <__udivmoddi4+0x294>
 800041a:	d017      	beq.n	800044c <__udivmoddi4+0x290>
 800041c:	b15d      	cbz	r5, 8000436 <__udivmoddi4+0x27a>
 800041e:	ebb3 020e 	subs.w	r2, r3, lr
 8000422:	eb67 0701 	sbc.w	r7, r7, r1
 8000426:	fa07 fc0c 	lsl.w	ip, r7, ip
 800042a:	40f2      	lsrs	r2, r6
 800042c:	ea4c 0202 	orr.w	r2, ip, r2
 8000430:	40f7      	lsrs	r7, r6
 8000432:	e9c5 2700 	strd	r2, r7, [r5]
 8000436:	2600      	movs	r6, #0
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	462e      	mov	r6, r5
 8000440:	4628      	mov	r0, r5
 8000442:	e70b      	b.n	800025c <__udivmoddi4+0xa0>
 8000444:	4606      	mov	r6, r0
 8000446:	e6e9      	b.n	800021c <__udivmoddi4+0x60>
 8000448:	4618      	mov	r0, r3
 800044a:	e6fd      	b.n	8000248 <__udivmoddi4+0x8c>
 800044c:	4543      	cmp	r3, r8
 800044e:	d2e5      	bcs.n	800041c <__udivmoddi4+0x260>
 8000450:	ebb8 0e02 	subs.w	lr, r8, r2
 8000454:	eb69 0104 	sbc.w	r1, r9, r4
 8000458:	3801      	subs	r0, #1
 800045a:	e7df      	b.n	800041c <__udivmoddi4+0x260>
 800045c:	4608      	mov	r0, r1
 800045e:	e7d2      	b.n	8000406 <__udivmoddi4+0x24a>
 8000460:	4660      	mov	r0, ip
 8000462:	e78d      	b.n	8000380 <__udivmoddi4+0x1c4>
 8000464:	4681      	mov	r9, r0
 8000466:	e7b9      	b.n	80003dc <__udivmoddi4+0x220>
 8000468:	4666      	mov	r6, ip
 800046a:	e775      	b.n	8000358 <__udivmoddi4+0x19c>
 800046c:	4630      	mov	r0, r6
 800046e:	e74a      	b.n	8000306 <__udivmoddi4+0x14a>
 8000470:	f1ac 0c02 	sub.w	ip, ip, #2
 8000474:	4439      	add	r1, r7
 8000476:	e713      	b.n	80002a0 <__udivmoddi4+0xe4>
 8000478:	3802      	subs	r0, #2
 800047a:	443c      	add	r4, r7
 800047c:	e724      	b.n	80002c8 <__udivmoddi4+0x10c>
 800047e:	bf00      	nop

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000484:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000486:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000488:	3304      	adds	r3, #4

0800048a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800048a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800048c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800048e:	d3f9      	bcc.n	8000484 <CopyDataInit>
  bx lr
 8000490:	4770      	bx	lr

08000492 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000492:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000494:	3004      	adds	r0, #4

08000496 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000496:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000498:	d3fb      	bcc.n	8000492 <FillZerobss>
  bx lr
 800049a:	4770      	bx	lr

0800049c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800049c:	480c      	ldr	r0, [pc, #48]	; (80004d0 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800049e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80004a0:	480c      	ldr	r0, [pc, #48]	; (80004d4 <LoopForever+0x8>)
 80004a2:	490d      	ldr	r1, [pc, #52]	; (80004d8 <LoopForever+0xc>)
 80004a4:	4a0d      	ldr	r2, [pc, #52]	; (80004dc <LoopForever+0x10>)
 80004a6:	2300      	movs	r3, #0
 80004a8:	f7ff ffef 	bl	800048a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80004ac:	480c      	ldr	r0, [pc, #48]	; (80004e0 <LoopForever+0x14>)
 80004ae:	490d      	ldr	r1, [pc, #52]	; (80004e4 <LoopForever+0x18>)
 80004b0:	2300      	movs	r3, #0
 80004b2:	f7ff fff0 	bl	8000496 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80004b6:	480c      	ldr	r0, [pc, #48]	; (80004e8 <LoopForever+0x1c>)
 80004b8:	490c      	ldr	r1, [pc, #48]	; (80004ec <LoopForever+0x20>)
 80004ba:	2300      	movs	r3, #0
 80004bc:	f7ff ffeb 	bl	8000496 <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80004c0:	f002 fd7e 	bl	8002fc0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80004c4:	f009 f968 	bl	8009798 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80004c8:	f001 fa6a 	bl	80019a0 <main>

080004cc <LoopForever>:

LoopForever:
  b LoopForever
 80004cc:	e7fe      	b.n	80004cc <LoopForever>
 80004ce:	0000      	.short	0x0000
  ldr   r0, =_estack
 80004d0:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80004d4:	20000004 	.word	0x20000004
 80004d8:	20000094 	.word	0x20000094
 80004dc:	0800a550 	.word	0x0800a550
  INIT_BSS _sbss, _ebss
 80004e0:	2000017c 	.word	0x2000017c
 80004e4:	20001564 	.word	0x20001564
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80004e8:	200301e0 	.word	0x200301e0
 80004ec:	20030a57 	.word	0x20030a57

080004f0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80004f0:	e7fe      	b.n	80004f0 <ADC1_IRQHandler>
	...

080004f4 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80004fc:	4b06      	ldr	r3, [pc, #24]	; (8000518 <LL_EXTI_EnableIT_32_63+0x24>)
 80004fe:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000502:	4905      	ldr	r1, [pc, #20]	; (8000518 <LL_EXTI_EnableIT_32_63+0x24>)
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	4313      	orrs	r3, r2
 8000508:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800050c:	bf00      	nop
 800050e:	370c      	adds	r7, #12
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr
 8000518:	58000800 	.word	0x58000800

0800051c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000524:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000528:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800052a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	4313      	orrs	r3, r2
 8000532:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000534:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000538:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	4013      	ands	r3, r2
 800053e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000540:	68fb      	ldr	r3, [r7, #12]
}
 8000542:	bf00      	nop
 8000544:	3714      	adds	r7, #20
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr

0800054e <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800054e:	b480      	push	{r7}
 8000550:	b085      	sub	sp, #20
 8000552:	af00      	add	r7, sp, #0
 8000554:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000556:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800055a:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 800055e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4313      	orrs	r3, r2
 8000566:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 800056a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800056e:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	4013      	ands	r3, r2
 8000576:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000578:	68fb      	ldr	r3, [r7, #12]
}
 800057a:	bf00      	nop
 800057c:	3714      	adds	r7, #20
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr

08000586 <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8000586:	b580      	push	{r7, lr}
 8000588:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 800058a:	f002 fe21 	bl	80031d0 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 800058e:	f002 fe25 	bl	80031dc <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8000592:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000596:	f7ff ffad 	bl	80004f4 <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 800059a:	f008 f933 	bl	8008804 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 800059e:	f000 f821 	bl	80005e4 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 80005a2:	f000 f8c3 	bl	800072c <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 80005a6:	bf00      	nop
}
 80005a8:	bd80      	pop	{r7, pc}
	...

080005ac <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 80005ac:	b5b0      	push	{r4, r5, r7, lr}
 80005ae:	b088      	sub	sp, #32
 80005b0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 80005b2:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <APPD_EnableCPU2+0x34>)
 80005b4:	1d3c      	adds	r4, r7, #4
 80005b6:	461d      	mov	r5, r3
 80005b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005c0:	c403      	stmia	r4!, {r0, r1}
 80005c2:	8022      	strh	r2, [r4, #0]
 80005c4:	3402      	adds	r4, #2
 80005c6:	0c13      	lsrs	r3, r2, #16
 80005c8:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80005ca:	f008 f857 	bl	800867c <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	4618      	mov	r0, r3
 80005d2:	f007 fc4a 	bl	8007e6a <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80005d6:	bf00      	nop
}
 80005d8:	3720      	adds	r7, #32
 80005da:	46bd      	mov	sp, r7
 80005dc:	bdb0      	pop	{r4, r5, r7, pc}
 80005de:	bf00      	nop
 80005e0:	0800a1b0 	.word	0x0800a1b0

080005e4 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b088      	sub	sp, #32
 80005e8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8000600:	2300      	movs	r3, #0
 8000602:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000604:	2300      	movs	r3, #0
 8000606:	77fb      	strb	r3, [r7, #31]
 8000608:	e038      	b.n	800067c <APPD_SetCPU2GpioConfig+0x98>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 800060a:	7ffb      	ldrb	r3, [r7, #31]
 800060c:	4a44      	ldr	r2, [pc, #272]	; (8000720 <APPD_SetCPU2GpioConfig+0x13c>)
 800060e:	00db      	lsls	r3, r3, #3
 8000610:	4413      	add	r3, r2
 8000612:	799b      	ldrb	r3, [r3, #6]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d02b      	beq.n	8000670 <APPD_SetCPU2GpioConfig+0x8c>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8000618:	7ffb      	ldrb	r3, [r7, #31]
 800061a:	4a41      	ldr	r2, [pc, #260]	; (8000720 <APPD_SetCPU2GpioConfig+0x13c>)
 800061c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000620:	4a40      	ldr	r2, [pc, #256]	; (8000724 <APPD_SetCPU2GpioConfig+0x140>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d01b      	beq.n	800065e <APPD_SetCPU2GpioConfig+0x7a>
 8000626:	4a3f      	ldr	r2, [pc, #252]	; (8000724 <APPD_SetCPU2GpioConfig+0x140>)
 8000628:	4293      	cmp	r3, r2
 800062a:	d823      	bhi.n	8000674 <APPD_SetCPU2GpioConfig+0x90>
 800062c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000630:	d003      	beq.n	800063a <APPD_SetCPU2GpioConfig+0x56>
 8000632:	4a3d      	ldr	r2, [pc, #244]	; (8000728 <APPD_SetCPU2GpioConfig+0x144>)
 8000634:	4293      	cmp	r3, r2
 8000636:	d009      	beq.n	800064c <APPD_SetCPU2GpioConfig+0x68>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 8000638:	e01c      	b.n	8000674 <APPD_SetCPU2GpioConfig+0x90>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 800063a:	7ffb      	ldrb	r3, [r7, #31]
 800063c:	4a38      	ldr	r2, [pc, #224]	; (8000720 <APPD_SetCPU2GpioConfig+0x13c>)
 800063e:	00db      	lsls	r3, r3, #3
 8000640:	4413      	add	r3, r2
 8000642:	889a      	ldrh	r2, [r3, #4]
 8000644:	8bbb      	ldrh	r3, [r7, #28]
 8000646:	4313      	orrs	r3, r2
 8000648:	83bb      	strh	r3, [r7, #28]
          break;
 800064a:	e014      	b.n	8000676 <APPD_SetCPU2GpioConfig+0x92>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 800064c:	7ffb      	ldrb	r3, [r7, #31]
 800064e:	4a34      	ldr	r2, [pc, #208]	; (8000720 <APPD_SetCPU2GpioConfig+0x13c>)
 8000650:	00db      	lsls	r3, r3, #3
 8000652:	4413      	add	r3, r2
 8000654:	889a      	ldrh	r2, [r3, #4]
 8000656:	8b7b      	ldrh	r3, [r7, #26]
 8000658:	4313      	orrs	r3, r2
 800065a:	837b      	strh	r3, [r7, #26]
          break;
 800065c:	e00b      	b.n	8000676 <APPD_SetCPU2GpioConfig+0x92>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 800065e:	7ffb      	ldrb	r3, [r7, #31]
 8000660:	4a2f      	ldr	r2, [pc, #188]	; (8000720 <APPD_SetCPU2GpioConfig+0x13c>)
 8000662:	00db      	lsls	r3, r3, #3
 8000664:	4413      	add	r3, r2
 8000666:	889a      	ldrh	r2, [r3, #4]
 8000668:	8b3b      	ldrh	r3, [r7, #24]
 800066a:	4313      	orrs	r3, r2
 800066c:	833b      	strh	r3, [r7, #24]
          break;
 800066e:	e002      	b.n	8000676 <APPD_SetCPU2GpioConfig+0x92>
      }
    }
 8000670:	bf00      	nop
 8000672:	e000      	b.n	8000676 <APPD_SetCPU2GpioConfig+0x92>
          break;
 8000674:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000676:	7ffb      	ldrb	r3, [r7, #31]
 8000678:	3301      	adds	r3, #1
 800067a:	77fb      	strb	r3, [r7, #31]
 800067c:	7ffb      	ldrb	r3, [r7, #31]
 800067e:	2b21      	cmp	r3, #33	; 0x21
 8000680:	d9c3      	bls.n	800060a <APPD_SetCPU2GpioConfig+0x26>
  }

  gpio_config.Pull = GPIO_NOPULL;
 8000682:	2300      	movs	r3, #0
 8000684:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8000686:	2301      	movs	r3, #1
 8000688:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800068a:	2303      	movs	r3, #3
 800068c:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 800068e:	8bbb      	ldrh	r3, [r7, #28]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d014      	beq.n	80006be <APPD_SetCPU2GpioConfig+0xda>
  {
    gpio_config.Pin = gpioa_pin_list;
 8000694:	8bbb      	ldrh	r3, [r7, #28]
 8000696:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000698:	2001      	movs	r0, #1
 800069a:	f7ff ff3f 	bl	800051c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 800069e:	2001      	movs	r0, #1
 80006a0:	f7ff ff55 	bl	800054e <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 80006a4:	1d3b      	adds	r3, r7, #4
 80006a6:	4619      	mov	r1, r3
 80006a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ac:	f003 fc0a 	bl	8003ec4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 80006b0:	8bbb      	ldrh	r3, [r7, #28]
 80006b2:	2200      	movs	r2, #0
 80006b4:	4619      	mov	r1, r3
 80006b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ba:	f003 fd73 	bl	80041a4 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 80006be:	8b7b      	ldrh	r3, [r7, #26]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d012      	beq.n	80006ea <APPD_SetCPU2GpioConfig+0x106>
  {
    gpio_config.Pin = gpiob_pin_list;
 80006c4:	8b7b      	ldrh	r3, [r7, #26]
 80006c6:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c8:	2002      	movs	r0, #2
 80006ca:	f7ff ff27 	bl	800051c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 80006ce:	2002      	movs	r0, #2
 80006d0:	f7ff ff3d 	bl	800054e <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 80006d4:	1d3b      	adds	r3, r7, #4
 80006d6:	4619      	mov	r1, r3
 80006d8:	4813      	ldr	r0, [pc, #76]	; (8000728 <APPD_SetCPU2GpioConfig+0x144>)
 80006da:	f003 fbf3 	bl	8003ec4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 80006de:	8b7b      	ldrh	r3, [r7, #26]
 80006e0:	2200      	movs	r2, #0
 80006e2:	4619      	mov	r1, r3
 80006e4:	4810      	ldr	r0, [pc, #64]	; (8000728 <APPD_SetCPU2GpioConfig+0x144>)
 80006e6:	f003 fd5d 	bl	80041a4 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 80006ea:	8b3b      	ldrh	r3, [r7, #24]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d013      	beq.n	8000718 <APPD_SetCPU2GpioConfig+0x134>
  {
    gpio_config.Pin = gpioc_pin_list;
 80006f0:	8b3b      	ldrh	r3, [r7, #24]
 80006f2:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f4:	2004      	movs	r0, #4
 80006f6:	f7ff ff11 	bl	800051c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 80006fa:	2004      	movs	r0, #4
 80006fc:	f7ff ff27 	bl	800054e <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8000700:	1d3b      	adds	r3, r7, #4
 8000702:	4619      	mov	r1, r3
 8000704:	4807      	ldr	r0, [pc, #28]	; (8000724 <APPD_SetCPU2GpioConfig+0x140>)
 8000706:	f003 fbdd 	bl	8003ec4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 800070a:	8b3b      	ldrh	r3, [r7, #24]
 800070c:	2200      	movs	r2, #0
 800070e:	4619      	mov	r1, r3
 8000710:	4804      	ldr	r0, [pc, #16]	; (8000724 <APPD_SetCPU2GpioConfig+0x140>)
 8000712:	f003 fd47 	bl	80041a4 <HAL_GPIO_WritePin>
  }
  
/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 8000716:	bf00      	nop
 8000718:	bf00      	nop
}
 800071a:	3720      	adds	r7, #32
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	0800a2b8 	.word	0x0800a2b8
 8000724:	48000800 	.word	0x48000800
 8000728:	48000400 	.word	0x48000400

0800072c <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8000730:	bf00      	nop
}
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr

0800073a <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 800073a:	b580      	push	{r7, lr}
 800073c:	af00      	add	r7, sp, #0
#endif
}
else if (CFG_DEBUG_TRACE_UART == hw_uart1)
{
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 800073e:	f001 f9e9 	bl	8001b14 <MX_USART1_UART_Init>
#endif
}
#endif

/* USER CODE END DbgOutputInit */
  return;
 8000742:	bf00      	nop
}
 8000744:	bd80      	pop	{r7, pc}

08000746 <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8000746:	b580      	push	{r7, lr}
 8000748:	b084      	sub	sp, #16
 800074a:	af00      	add	r7, sp, #0
 800074c:	60f8      	str	r0, [r7, #12]
 800074e:	460b      	mov	r3, r1
 8000750:	607a      	str	r2, [r7, #4]
 8000752:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8000754:	897a      	ldrh	r2, [r7, #10]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	68f9      	ldr	r1, [r7, #12]
 800075a:	2000      	movs	r0, #0
 800075c:	f000 ff26 	bl	80015ac <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8000760:	bf00      	nop
}
 8000762:	3710      	adds	r7, #16
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000770:	4b07      	ldr	r3, [pc, #28]	; (8000790 <LL_C2_PWR_SetPowerMode+0x28>)
 8000772:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000776:	f023 0207 	bic.w	r2, r3, #7
 800077a:	4905      	ldr	r1, [pc, #20]	; (8000790 <LL_C2_PWR_SetPowerMode+0x28>)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	4313      	orrs	r3, r2
 8000780:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000784:	bf00      	nop
 8000786:	370c      	adds	r7, #12
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	58000400 	.word	0x58000400

08000794 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800079c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007a0:	689b      	ldr	r3, [r3, #8]
 80007a2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80007a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4313      	orrs	r3, r2
 80007ae:	608b      	str	r3, [r1, #8]
}
 80007b0:	bf00      	nop
 80007b2:	370c      	adds	r7, #12
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr

080007bc <APPE_Init>:
static void Button_Init( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 80007c0:	f000 f814 	bl	80007ec <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80007c4:	4908      	ldr	r1, [pc, #32]	; (80007e8 <APPE_Init+0x2c>)
 80007c6:	2000      	movs	r0, #0
 80007c8:	f000 fce8 	bl	800119c <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 80007cc:	f7ff fedb 	bl	8000586 <APPD_Init>
  
  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 80007d0:	2101      	movs	r1, #1
 80007d2:	2001      	movs	r0, #1
 80007d4:	f008 f8ce 	bl	8008974 <UTIL_LPM_SetOffMode>

  Led_Init();
 80007d8:	f000 f867 	bl	80008aa <Led_Init>

  Button_Init();
 80007dc:	f000 f875 	bl	80008ca <Button_Init>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80007e0:	f000 f812 	bl	8000808 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 80007e4:	bf00      	nop
}
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	200014cc 	.word	0x200014cc

080007ec <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80007f0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80007f4:	f7ff ffce 	bl	8000794 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80007f8:	f008 f8aa 	bl	8008950 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80007fc:	2004      	movs	r0, #4
 80007fe:	f7ff ffb3 	bl	8000768 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8000802:	bf00      	nop
}
 8000804:	bd80      	pop	{r7, pc}
	...

08000808 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b088      	sub	sp, #32
 800080c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800080e:	f007 fd7f 	bl	8008310 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 8000812:	4a11      	ldr	r2, [pc, #68]	; (8000858 <appe_Tl_Init+0x50>)
 8000814:	2100      	movs	r1, #0
 8000816:	2004      	movs	r0, #4
 8000818:	f008 f9c0 	bl	8008b9c <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <appe_Tl_Init+0x54>)
 800081e:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000820:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <appe_Tl_Init+0x58>)
 8000822:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000824:	463b      	mov	r3, r7
 8000826:	4619      	mov	r1, r3
 8000828:	480e      	ldr	r0, [pc, #56]	; (8000864 <appe_Tl_Init+0x5c>)
 800082a:	f007 fb35 	bl	8007e98 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <appe_Tl_Init+0x60>)
 8000830:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000832:	4b0e      	ldr	r3, [pc, #56]	; (800086c <appe_Tl_Init+0x64>)
 8000834:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000836:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <appe_Tl_Init+0x68>)
 8000838:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800083a:	f240 533c 	movw	r3, #1340	; 0x53c
 800083e:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8000840:	f107 0308 	add.w	r3, r7, #8
 8000844:	4618      	mov	r0, r3
 8000846:	f007 fea5 	bl	8008594 <TL_MM_Init>

  TL_Enable();
 800084a:	f007 fd5b 	bl	8008304 <TL_Enable>

  return;
 800084e:	bf00      	nop
}
 8000850:	3720      	adds	r7, #32
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	08007ed1 	.word	0x08007ed1
 800085c:	20030724 	.word	0x20030724
 8000860:	08000875 	.word	0x08000875
 8000864:	0800088b 	.word	0x0800088b
 8000868:	2003093c 	.word	0x2003093c
 800086c:	20030830 	.word	0x20030830
 8000870:	200301e8 	.word	0x200301e8

08000874 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800087e:	bf00      	nop
}
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr

0800088a <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 800088a:	b580      	push	{r7, lr}
 800088c:	b082      	sub	sp, #8
 800088e:	af00      	add	r7, sp, #0
 8000890:	6078      	str	r0, [r7, #4]
  UNUSED(pPayload);
  /* Traces channel initialization */
  APPD_EnableCPU2( );
 8000892:	f7ff fe8b 	bl	80005ac <APPD_EnableCPU2>

  APP_BLE_Init( );
 8000896:	f001 fd83 	bl	80023a0 <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 800089a:	2100      	movs	r1, #0
 800089c:	2001      	movs	r0, #1
 800089e:	f008 f869 	bl	8008974 <UTIL_LPM_SetOffMode>
  return;
 80008a2:	bf00      	nop
}
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <Led_Init>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
static void Led_Init( void )
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	af00      	add	r7, sp, #0
#if (CFG_LED_SUPPORTED == 1)
  /**
   * Leds Initialization
   */

  BSP_LED_Init(LED_BLUE);
 80008ae:	2000      	movs	r0, #0
 80008b0:	f002 fac0 	bl	8002e34 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 80008b4:	2001      	movs	r0, #1
 80008b6:	f002 fabd 	bl	8002e34 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80008ba:	2002      	movs	r0, #2
 80008bc:	f002 faba 	bl	8002e34 <BSP_LED_Init>

  BSP_LED_On(LED_GREEN);
 80008c0:	2001      	movs	r0, #1
 80008c2:	f002 faf1 	bl	8002ea8 <BSP_LED_On>
#endif

  return;
 80008c6:	bf00      	nop
}
 80008c8:	bd80      	pop	{r7, pc}

080008ca <Button_Init>:

static void Button_Init( void )
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	af00      	add	r7, sp, #0
#if (CFG_BUTTON_SUPPORTED == 1)
  /**
   * Button Initialization
   */

  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 80008ce:	2101      	movs	r1, #1
 80008d0:	2000      	movs	r0, #0
 80008d2:	f002 fb03 	bl	8002edc <BSP_PB_Init>
#endif

  return;
 80008d6:	bf00      	nop
}
 80008d8:	bd80      	pop	{r7, pc}

080008da <UTIL_SEQ_Idle>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void UTIL_SEQ_Idle( void )
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
 80008de:	bf00      	nop
}
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr

080008e8 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 80008f2:	f04f 30ff 	mov.w	r0, #4294967295
 80008f6:	f008 f86d 	bl	80089d4 <UTIL_SEQ_Run>
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}

08000902 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	b082      	sub	sp, #8
 8000906:	af00      	add	r7, sp, #0
 8000908:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800090a:	2100      	movs	r1, #0
 800090c:	2004      	movs	r0, #4
 800090e:	f008 f967 	bl	8008be0 <UTIL_SEQ_SetTask>
  return;
 8000912:	bf00      	nop
}
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}

0800091a <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	b082      	sub	sp, #8
 800091e:	af00      	add	r7, sp, #0
 8000920:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000922:	2002      	movs	r0, #2
 8000924:	f008 f9c8 	bl	8008cb8 <UTIL_SEQ_SetEvt>
  return;
 8000928:	bf00      	nop
}
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}

08000930 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000938:	2002      	movs	r0, #2
 800093a:	f008 f9dd 	bl	8008cf8 <UTIL_SEQ_WaitEvt>
  return;
 800093e:	bf00      	nop
}
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
	...

08000948 <LL_EXTI_EnableIT_0_31>:
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000950:	4b06      	ldr	r3, [pc, #24]	; (800096c <LL_EXTI_EnableIT_0_31+0x24>)
 8000952:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000956:	4905      	ldr	r1, [pc, #20]	; (800096c <LL_EXTI_EnableIT_0_31+0x24>)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4313      	orrs	r3, r2
 800095c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000960:	bf00      	nop
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr
 800096c:	58000800 	.word	0x58000800

08000970 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000978:	4b05      	ldr	r3, [pc, #20]	; (8000990 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	4904      	ldr	r1, [pc, #16]	; (8000990 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4313      	orrs	r3, r2
 8000982:	600b      	str	r3, [r1, #0]

}
 8000984:	bf00      	nop
 8000986:	370c      	adds	r7, #12
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr
 8000990:	58000800 	.word	0x58000800

08000994 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800099a:	4b0d      	ldr	r3, [pc, #52]	; (80009d0 <ReadRtcSsrValue+0x3c>)
 800099c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800099e:	b29b      	uxth	r3, r3
 80009a0:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80009a2:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <ReadRtcSsrValue+0x3c>)
 80009a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009a6:	b29b      	uxth	r3, r3
 80009a8:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80009aa:	e005      	b.n	80009b8 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80009b0:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <ReadRtcSsrValue+0x3c>)
 80009b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80009b8:	687a      	ldr	r2, [r7, #4]
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	429a      	cmp	r2, r3
 80009be:	d1f5      	bne.n	80009ac <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80009c0:	683b      	ldr	r3, [r7, #0]
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	40002800 	.word	0x40002800

080009d4 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b085      	sub	sp, #20
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	460a      	mov	r2, r1
 80009de:	71fb      	strb	r3, [r7, #7]
 80009e0:	4613      	mov	r3, r2
 80009e2:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80009e4:	79ba      	ldrb	r2, [r7, #6]
 80009e6:	491d      	ldr	r1, [pc, #116]	; (8000a5c <LinkTimerAfter+0x88>)
 80009e8:	4613      	mov	r3, r2
 80009ea:	005b      	lsls	r3, r3, #1
 80009ec:	4413      	add	r3, r2
 80009ee:	00db      	lsls	r3, r3, #3
 80009f0:	440b      	add	r3, r1
 80009f2:	3315      	adds	r3, #21
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80009f8:	7bfb      	ldrb	r3, [r7, #15]
 80009fa:	2b06      	cmp	r3, #6
 80009fc:	d009      	beq.n	8000a12 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80009fe:	7bfa      	ldrb	r2, [r7, #15]
 8000a00:	4916      	ldr	r1, [pc, #88]	; (8000a5c <LinkTimerAfter+0x88>)
 8000a02:	4613      	mov	r3, r2
 8000a04:	005b      	lsls	r3, r3, #1
 8000a06:	4413      	add	r3, r2
 8000a08:	00db      	lsls	r3, r3, #3
 8000a0a:	440b      	add	r3, r1
 8000a0c:	3314      	adds	r3, #20
 8000a0e:	79fa      	ldrb	r2, [r7, #7]
 8000a10:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000a12:	79fa      	ldrb	r2, [r7, #7]
 8000a14:	4911      	ldr	r1, [pc, #68]	; (8000a5c <LinkTimerAfter+0x88>)
 8000a16:	4613      	mov	r3, r2
 8000a18:	005b      	lsls	r3, r3, #1
 8000a1a:	4413      	add	r3, r2
 8000a1c:	00db      	lsls	r3, r3, #3
 8000a1e:	440b      	add	r3, r1
 8000a20:	3315      	adds	r3, #21
 8000a22:	7bfa      	ldrb	r2, [r7, #15]
 8000a24:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000a26:	79fa      	ldrb	r2, [r7, #7]
 8000a28:	490c      	ldr	r1, [pc, #48]	; (8000a5c <LinkTimerAfter+0x88>)
 8000a2a:	4613      	mov	r3, r2
 8000a2c:	005b      	lsls	r3, r3, #1
 8000a2e:	4413      	add	r3, r2
 8000a30:	00db      	lsls	r3, r3, #3
 8000a32:	440b      	add	r3, r1
 8000a34:	3314      	adds	r3, #20
 8000a36:	79ba      	ldrb	r2, [r7, #6]
 8000a38:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000a3a:	79ba      	ldrb	r2, [r7, #6]
 8000a3c:	4907      	ldr	r1, [pc, #28]	; (8000a5c <LinkTimerAfter+0x88>)
 8000a3e:	4613      	mov	r3, r2
 8000a40:	005b      	lsls	r3, r3, #1
 8000a42:	4413      	add	r3, r2
 8000a44:	00db      	lsls	r3, r3, #3
 8000a46:	440b      	add	r3, r1
 8000a48:	3315      	adds	r3, #21
 8000a4a:	79fa      	ldrb	r2, [r7, #7]
 8000a4c:	701a      	strb	r2, [r3, #0]

  return;
 8000a4e:	bf00      	nop
}
 8000a50:	3714      	adds	r7, #20
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	20000094 	.word	0x20000094

08000a60 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b085      	sub	sp, #20
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	460a      	mov	r2, r1
 8000a6a:	71fb      	strb	r3, [r7, #7]
 8000a6c:	4613      	mov	r3, r2
 8000a6e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000a70:	4b29      	ldr	r3, [pc, #164]	; (8000b18 <LinkTimerBefore+0xb8>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	79ba      	ldrb	r2, [r7, #6]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d032      	beq.n	8000ae2 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000a7c:	79ba      	ldrb	r2, [r7, #6]
 8000a7e:	4927      	ldr	r1, [pc, #156]	; (8000b1c <LinkTimerBefore+0xbc>)
 8000a80:	4613      	mov	r3, r2
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	4413      	add	r3, r2
 8000a86:	00db      	lsls	r3, r3, #3
 8000a88:	440b      	add	r3, r1
 8000a8a:	3314      	adds	r3, #20
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000a90:	7bfa      	ldrb	r2, [r7, #15]
 8000a92:	4922      	ldr	r1, [pc, #136]	; (8000b1c <LinkTimerBefore+0xbc>)
 8000a94:	4613      	mov	r3, r2
 8000a96:	005b      	lsls	r3, r3, #1
 8000a98:	4413      	add	r3, r2
 8000a9a:	00db      	lsls	r3, r3, #3
 8000a9c:	440b      	add	r3, r1
 8000a9e:	3315      	adds	r3, #21
 8000aa0:	79fa      	ldrb	r2, [r7, #7]
 8000aa2:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000aa4:	79fa      	ldrb	r2, [r7, #7]
 8000aa6:	491d      	ldr	r1, [pc, #116]	; (8000b1c <LinkTimerBefore+0xbc>)
 8000aa8:	4613      	mov	r3, r2
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	4413      	add	r3, r2
 8000aae:	00db      	lsls	r3, r3, #3
 8000ab0:	440b      	add	r3, r1
 8000ab2:	3315      	adds	r3, #21
 8000ab4:	79ba      	ldrb	r2, [r7, #6]
 8000ab6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000ab8:	79fa      	ldrb	r2, [r7, #7]
 8000aba:	4918      	ldr	r1, [pc, #96]	; (8000b1c <LinkTimerBefore+0xbc>)
 8000abc:	4613      	mov	r3, r2
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	4413      	add	r3, r2
 8000ac2:	00db      	lsls	r3, r3, #3
 8000ac4:	440b      	add	r3, r1
 8000ac6:	3314      	adds	r3, #20
 8000ac8:	7bfa      	ldrb	r2, [r7, #15]
 8000aca:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000acc:	79ba      	ldrb	r2, [r7, #6]
 8000ace:	4913      	ldr	r1, [pc, #76]	; (8000b1c <LinkTimerBefore+0xbc>)
 8000ad0:	4613      	mov	r3, r2
 8000ad2:	005b      	lsls	r3, r3, #1
 8000ad4:	4413      	add	r3, r2
 8000ad6:	00db      	lsls	r3, r3, #3
 8000ad8:	440b      	add	r3, r1
 8000ada:	3314      	adds	r3, #20
 8000adc:	79fa      	ldrb	r2, [r7, #7]
 8000ade:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000ae0:	e014      	b.n	8000b0c <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000ae2:	79fa      	ldrb	r2, [r7, #7]
 8000ae4:	490d      	ldr	r1, [pc, #52]	; (8000b1c <LinkTimerBefore+0xbc>)
 8000ae6:	4613      	mov	r3, r2
 8000ae8:	005b      	lsls	r3, r3, #1
 8000aea:	4413      	add	r3, r2
 8000aec:	00db      	lsls	r3, r3, #3
 8000aee:	440b      	add	r3, r1
 8000af0:	3315      	adds	r3, #21
 8000af2:	79ba      	ldrb	r2, [r7, #6]
 8000af4:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000af6:	79ba      	ldrb	r2, [r7, #6]
 8000af8:	4908      	ldr	r1, [pc, #32]	; (8000b1c <LinkTimerBefore+0xbc>)
 8000afa:	4613      	mov	r3, r2
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	4413      	add	r3, r2
 8000b00:	00db      	lsls	r3, r3, #3
 8000b02:	440b      	add	r3, r1
 8000b04:	3314      	adds	r3, #20
 8000b06:	79fa      	ldrb	r2, [r7, #7]
 8000b08:	701a      	strb	r2, [r3, #0]
  return;
 8000b0a:	bf00      	nop
}
 8000b0c:	3714      	adds	r7, #20
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	20000124 	.word	0x20000124
 8000b1c:	20000094 	.word	0x20000094

08000b20 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000b2a:	4b4e      	ldr	r3, [pc, #312]	; (8000c64 <linkTimer+0x144>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	2b06      	cmp	r3, #6
 8000b32:	d118      	bne.n	8000b66 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000b34:	4b4b      	ldr	r3, [pc, #300]	; (8000c64 <linkTimer+0x144>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	b2da      	uxtb	r2, r3
 8000b3a:	4b4b      	ldr	r3, [pc, #300]	; (8000c68 <linkTimer+0x148>)
 8000b3c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000b3e:	4a49      	ldr	r2, [pc, #292]	; (8000c64 <linkTimer+0x144>)
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000b44:	79fa      	ldrb	r2, [r7, #7]
 8000b46:	4949      	ldr	r1, [pc, #292]	; (8000c6c <linkTimer+0x14c>)
 8000b48:	4613      	mov	r3, r2
 8000b4a:	005b      	lsls	r3, r3, #1
 8000b4c:	4413      	add	r3, r2
 8000b4e:	00db      	lsls	r3, r3, #3
 8000b50:	440b      	add	r3, r1
 8000b52:	3315      	adds	r3, #21
 8000b54:	2206      	movs	r2, #6
 8000b56:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000b58:	4b45      	ldr	r3, [pc, #276]	; (8000c70 <linkTimer+0x150>)
 8000b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8000b5e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	81fb      	strh	r3, [r7, #14]
 8000b64:	e078      	b.n	8000c58 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000b66:	f000 f909 	bl	8000d7c <ReturnTimeElapsed>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000b6e:	79fa      	ldrb	r2, [r7, #7]
 8000b70:	493e      	ldr	r1, [pc, #248]	; (8000c6c <linkTimer+0x14c>)
 8000b72:	4613      	mov	r3, r2
 8000b74:	005b      	lsls	r3, r3, #1
 8000b76:	4413      	add	r3, r2
 8000b78:	00db      	lsls	r3, r3, #3
 8000b7a:	440b      	add	r3, r1
 8000b7c:	3308      	adds	r3, #8
 8000b7e:	6819      	ldr	r1, [r3, #0]
 8000b80:	89fb      	ldrh	r3, [r7, #14]
 8000b82:	79fa      	ldrb	r2, [r7, #7]
 8000b84:	4419      	add	r1, r3
 8000b86:	4839      	ldr	r0, [pc, #228]	; (8000c6c <linkTimer+0x14c>)
 8000b88:	4613      	mov	r3, r2
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	4413      	add	r3, r2
 8000b8e:	00db      	lsls	r3, r3, #3
 8000b90:	4403      	add	r3, r0
 8000b92:	3308      	adds	r3, #8
 8000b94:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000b96:	79fa      	ldrb	r2, [r7, #7]
 8000b98:	4934      	ldr	r1, [pc, #208]	; (8000c6c <linkTimer+0x14c>)
 8000b9a:	4613      	mov	r3, r2
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	4413      	add	r3, r2
 8000ba0:	00db      	lsls	r3, r3, #3
 8000ba2:	440b      	add	r3, r1
 8000ba4:	3308      	adds	r3, #8
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000baa:	4b2e      	ldr	r3, [pc, #184]	; (8000c64 <linkTimer+0x144>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4a2e      	ldr	r2, [pc, #184]	; (8000c6c <linkTimer+0x14c>)
 8000bb4:	460b      	mov	r3, r1
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	440b      	add	r3, r1
 8000bba:	00db      	lsls	r3, r3, #3
 8000bbc:	4413      	add	r3, r2
 8000bbe:	3308      	adds	r3, #8
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	68ba      	ldr	r2, [r7, #8]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d337      	bcc.n	8000c38 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000bc8:	4b26      	ldr	r3, [pc, #152]	; (8000c64 <linkTimer+0x144>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000bce:	7b7a      	ldrb	r2, [r7, #13]
 8000bd0:	4926      	ldr	r1, [pc, #152]	; (8000c6c <linkTimer+0x14c>)
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	4413      	add	r3, r2
 8000bd8:	00db      	lsls	r3, r3, #3
 8000bda:	440b      	add	r3, r1
 8000bdc:	3315      	adds	r3, #21
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000be2:	e013      	b.n	8000c0c <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000be4:	7b7a      	ldrb	r2, [r7, #13]
 8000be6:	4921      	ldr	r1, [pc, #132]	; (8000c6c <linkTimer+0x14c>)
 8000be8:	4613      	mov	r3, r2
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	4413      	add	r3, r2
 8000bee:	00db      	lsls	r3, r3, #3
 8000bf0:	440b      	add	r3, r1
 8000bf2:	3315      	adds	r3, #21
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000bf8:	7b7a      	ldrb	r2, [r7, #13]
 8000bfa:	491c      	ldr	r1, [pc, #112]	; (8000c6c <linkTimer+0x14c>)
 8000bfc:	4613      	mov	r3, r2
 8000bfe:	005b      	lsls	r3, r3, #1
 8000c00:	4413      	add	r3, r2
 8000c02:	00db      	lsls	r3, r3, #3
 8000c04:	440b      	add	r3, r1
 8000c06:	3315      	adds	r3, #21
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000c0c:	7b3b      	ldrb	r3, [r7, #12]
 8000c0e:	2b06      	cmp	r3, #6
 8000c10:	d00b      	beq.n	8000c2a <linkTimer+0x10a>
 8000c12:	7b3a      	ldrb	r2, [r7, #12]
 8000c14:	4915      	ldr	r1, [pc, #84]	; (8000c6c <linkTimer+0x14c>)
 8000c16:	4613      	mov	r3, r2
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	4413      	add	r3, r2
 8000c1c:	00db      	lsls	r3, r3, #3
 8000c1e:	440b      	add	r3, r1
 8000c20:	3308      	adds	r3, #8
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	68ba      	ldr	r2, [r7, #8]
 8000c26:	429a      	cmp	r2, r3
 8000c28:	d2dc      	bcs.n	8000be4 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000c2a:	7b7a      	ldrb	r2, [r7, #13]
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	4611      	mov	r1, r2
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff fecf 	bl	80009d4 <LinkTimerAfter>
 8000c36:	e00f      	b.n	8000c58 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000c38:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <linkTimer+0x144>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	b2da      	uxtb	r2, r3
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	4611      	mov	r1, r2
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff ff0c 	bl	8000a60 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <linkTimer+0x144>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	b2da      	uxtb	r2, r3
 8000c4e:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <linkTimer+0x148>)
 8000c50:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000c52:	4a04      	ldr	r2, [pc, #16]	; (8000c64 <linkTimer+0x144>)
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000c58:	89fb      	ldrh	r3, [r7, #14]
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000124 	.word	0x20000124
 8000c68:	20000125 	.word	0x20000125
 8000c6c:	20000094 	.word	0x20000094
 8000c70:	20000128 	.word	0x20000128

08000c74 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	460a      	mov	r2, r1
 8000c7e:	71fb      	strb	r3, [r7, #7]
 8000c80:	4613      	mov	r3, r2
 8000c82:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000c84:	4b39      	ldr	r3, [pc, #228]	; (8000d6c <UnlinkTimer+0xf8>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	79fa      	ldrb	r2, [r7, #7]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d111      	bne.n	8000cb4 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000c90:	4b36      	ldr	r3, [pc, #216]	; (8000d6c <UnlinkTimer+0xf8>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	b2da      	uxtb	r2, r3
 8000c96:	4b36      	ldr	r3, [pc, #216]	; (8000d70 <UnlinkTimer+0xfc>)
 8000c98:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000c9a:	79fa      	ldrb	r2, [r7, #7]
 8000c9c:	4935      	ldr	r1, [pc, #212]	; (8000d74 <UnlinkTimer+0x100>)
 8000c9e:	4613      	mov	r3, r2
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	4413      	add	r3, r2
 8000ca4:	00db      	lsls	r3, r3, #3
 8000ca6:	440b      	add	r3, r1
 8000ca8:	3315      	adds	r3, #21
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	b2da      	uxtb	r2, r3
 8000cae:	4b2f      	ldr	r3, [pc, #188]	; (8000d6c <UnlinkTimer+0xf8>)
 8000cb0:	701a      	strb	r2, [r3, #0]
 8000cb2:	e03e      	b.n	8000d32 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000cb4:	79fa      	ldrb	r2, [r7, #7]
 8000cb6:	492f      	ldr	r1, [pc, #188]	; (8000d74 <UnlinkTimer+0x100>)
 8000cb8:	4613      	mov	r3, r2
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	4413      	add	r3, r2
 8000cbe:	00db      	lsls	r3, r3, #3
 8000cc0:	440b      	add	r3, r1
 8000cc2:	3314      	adds	r3, #20
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000cc8:	79fa      	ldrb	r2, [r7, #7]
 8000cca:	492a      	ldr	r1, [pc, #168]	; (8000d74 <UnlinkTimer+0x100>)
 8000ccc:	4613      	mov	r3, r2
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	4413      	add	r3, r2
 8000cd2:	00db      	lsls	r3, r3, #3
 8000cd4:	440b      	add	r3, r1
 8000cd6:	3315      	adds	r3, #21
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000cdc:	79f9      	ldrb	r1, [r7, #7]
 8000cde:	7bfa      	ldrb	r2, [r7, #15]
 8000ce0:	4824      	ldr	r0, [pc, #144]	; (8000d74 <UnlinkTimer+0x100>)
 8000ce2:	460b      	mov	r3, r1
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	440b      	add	r3, r1
 8000ce8:	00db      	lsls	r3, r3, #3
 8000cea:	4403      	add	r3, r0
 8000cec:	3315      	adds	r3, #21
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	b2d8      	uxtb	r0, r3
 8000cf2:	4920      	ldr	r1, [pc, #128]	; (8000d74 <UnlinkTimer+0x100>)
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	4413      	add	r3, r2
 8000cfa:	00db      	lsls	r3, r3, #3
 8000cfc:	440b      	add	r3, r1
 8000cfe:	3315      	adds	r3, #21
 8000d00:	4602      	mov	r2, r0
 8000d02:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000d04:	7bbb      	ldrb	r3, [r7, #14]
 8000d06:	2b06      	cmp	r3, #6
 8000d08:	d013      	beq.n	8000d32 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000d0a:	79f9      	ldrb	r1, [r7, #7]
 8000d0c:	7bba      	ldrb	r2, [r7, #14]
 8000d0e:	4819      	ldr	r0, [pc, #100]	; (8000d74 <UnlinkTimer+0x100>)
 8000d10:	460b      	mov	r3, r1
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	440b      	add	r3, r1
 8000d16:	00db      	lsls	r3, r3, #3
 8000d18:	4403      	add	r3, r0
 8000d1a:	3314      	adds	r3, #20
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	b2d8      	uxtb	r0, r3
 8000d20:	4914      	ldr	r1, [pc, #80]	; (8000d74 <UnlinkTimer+0x100>)
 8000d22:	4613      	mov	r3, r2
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	4413      	add	r3, r2
 8000d28:	00db      	lsls	r3, r3, #3
 8000d2a:	440b      	add	r3, r1
 8000d2c:	3314      	adds	r3, #20
 8000d2e:	4602      	mov	r2, r0
 8000d30:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000d32:	79fa      	ldrb	r2, [r7, #7]
 8000d34:	490f      	ldr	r1, [pc, #60]	; (8000d74 <UnlinkTimer+0x100>)
 8000d36:	4613      	mov	r3, r2
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	4413      	add	r3, r2
 8000d3c:	00db      	lsls	r3, r3, #3
 8000d3e:	440b      	add	r3, r1
 8000d40:	330c      	adds	r3, #12
 8000d42:	2201      	movs	r2, #1
 8000d44:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000d46:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <UnlinkTimer+0xf8>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	2b06      	cmp	r3, #6
 8000d4e:	d107      	bne.n	8000d60 <UnlinkTimer+0xec>
 8000d50:	79bb      	ldrb	r3, [r7, #6]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d104      	bne.n	8000d60 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000d56:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <UnlinkTimer+0x104>)
 8000d58:	f04f 32ff 	mov.w	r2, #4294967295
 8000d5c:	601a      	str	r2, [r3, #0]
  }

  return;
 8000d5e:	bf00      	nop
 8000d60:	bf00      	nop
}
 8000d62:	3714      	adds	r7, #20
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	20000124 	.word	0x20000124
 8000d70:	20000125 	.word	0x20000125
 8000d74:	20000094 	.word	0x20000094
 8000d78:	20000128 	.word	0x20000128

08000d7c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000d82:	4b1a      	ldr	r3, [pc, #104]	; (8000dec <ReturnTimeElapsed+0x70>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d8a:	d026      	beq.n	8000dda <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000d8c:	f7ff fe02 	bl	8000994 <ReadRtcSsrValue>
 8000d90:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000d92:	4b16      	ldr	r3, [pc, #88]	; (8000dec <ReturnTimeElapsed+0x70>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	687a      	ldr	r2, [r7, #4]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d805      	bhi.n	8000da8 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000d9c:	4b13      	ldr	r3, [pc, #76]	; (8000dec <ReturnTimeElapsed+0x70>)
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	1ad3      	subs	r3, r2, r3
 8000da4:	607b      	str	r3, [r7, #4]
 8000da6:	e00a      	b.n	8000dbe <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000da8:	4b11      	ldr	r3, [pc, #68]	; (8000df0 <ReturnTimeElapsed+0x74>)
 8000daa:	881b      	ldrh	r3, [r3, #0]
 8000dac:	461a      	mov	r2, r3
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000db4:	4b0d      	ldr	r3, [pc, #52]	; (8000dec <ReturnTimeElapsed+0x70>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	683a      	ldr	r2, [r7, #0]
 8000dba:	4413      	add	r3, r2
 8000dbc:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000dbe:	4b0d      	ldr	r3, [pc, #52]	; (8000df4 <ReturnTimeElapsed+0x78>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	fb02 f303 	mul.w	r3, r2, r3
 8000dca:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000dcc:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <ReturnTimeElapsed+0x7c>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	40d3      	lsrs	r3, r2
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	e001      	b.n	8000dde <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	b29b      	uxth	r3, r3
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000128 	.word	0x20000128
 8000df0:	2000019e 	.word	0x2000019e
 8000df4:	2000019d 	.word	0x2000019d
 8000df8:	2000019c 	.word	0x2000019c

08000dfc <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8000e06:	88fb      	ldrh	r3, [r7, #6]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d108      	bne.n	8000e1e <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000e0c:	f7ff fdc2 	bl	8000994 <ReadRtcSsrValue>
 8000e10:	4603      	mov	r3, r0
 8000e12:	4a24      	ldr	r2, [pc, #144]	; (8000ea4 <RestartWakeupCounter+0xa8>)
 8000e14:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000e16:	2003      	movs	r0, #3
 8000e18:	f002 fb63 	bl	80034e2 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000e1c:	e03e      	b.n	8000e9c <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000e1e:	88fb      	ldrh	r3, [r7, #6]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d803      	bhi.n	8000e2c <RestartWakeupCounter+0x30>
 8000e24:	4b20      	ldr	r3, [pc, #128]	; (8000ea8 <RestartWakeupCounter+0xac>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d002      	beq.n	8000e32 <RestartWakeupCounter+0x36>
      Value -= 1;
 8000e2c:	88fb      	ldrh	r3, [r7, #6]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000e32:	bf00      	nop
 8000e34:	4b1d      	ldr	r3, [pc, #116]	; (8000eac <RestartWakeupCounter+0xb0>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	f003 0304 	and.w	r3, r3, #4
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d0f7      	beq.n	8000e34 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000e44:	4b19      	ldr	r3, [pc, #100]	; (8000eac <RestartWakeupCounter+0xb0>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	4b17      	ldr	r3, [pc, #92]	; (8000eac <RestartWakeupCounter+0xb0>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000e58:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000e5a:	4b15      	ldr	r3, [pc, #84]	; (8000eb0 <RestartWakeupCounter+0xb4>)
 8000e5c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000e60:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000e62:	2003      	movs	r0, #3
 8000e64:	f002 fb4b 	bl	80034fe <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000e68:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <RestartWakeupCounter+0xb8>)
 8000e6a:	695b      	ldr	r3, [r3, #20]
 8000e6c:	0c1b      	lsrs	r3, r3, #16
 8000e6e:	041b      	lsls	r3, r3, #16
 8000e70:	88fa      	ldrh	r2, [r7, #6]
 8000e72:	4910      	ldr	r1, [pc, #64]	; (8000eb4 <RestartWakeupCounter+0xb8>)
 8000e74:	4313      	orrs	r3, r2
 8000e76:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000e78:	f7ff fd8c 	bl	8000994 <ReadRtcSsrValue>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	4a09      	ldr	r2, [pc, #36]	; (8000ea4 <RestartWakeupCounter+0xa8>)
 8000e80:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8000e82:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <RestartWakeupCounter+0xb0>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	689a      	ldr	r2, [r3, #8]
 8000e8a:	4b08      	ldr	r3, [pc, #32]	; (8000eac <RestartWakeupCounter+0xb0>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000e94:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000e96:	f3af 8000 	nop.w
  return ;
 8000e9a:	bf00      	nop
}
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000128 	.word	0x20000128
 8000ea8:	2000019c 	.word	0x2000019c
 8000eac:	20000198 	.word	0x20000198
 8000eb0:	58000800 	.word	0x58000800
 8000eb4:	40002800 	.word	0x40002800

08000eb8 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000ebe:	4b47      	ldr	r3, [pc, #284]	; (8000fdc <RescheduleTimerList+0x124>)
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ec6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000eca:	d108      	bne.n	8000ede <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000ecc:	bf00      	nop
 8000ece:	4b44      	ldr	r3, [pc, #272]	; (8000fe0 <RescheduleTimerList+0x128>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	68db      	ldr	r3, [r3, #12]
 8000ed6:	f003 0304 	and.w	r3, r3, #4
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d1f7      	bne.n	8000ece <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000ede:	4b40      	ldr	r3, [pc, #256]	; (8000fe0 <RescheduleTimerList+0x128>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	689a      	ldr	r2, [r3, #8]
 8000ee6:	4b3e      	ldr	r3, [pc, #248]	; (8000fe0 <RescheduleTimerList+0x128>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ef0:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000ef2:	4b3c      	ldr	r3, [pc, #240]	; (8000fe4 <RescheduleTimerList+0x12c>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000ef8:	7bfa      	ldrb	r2, [r7, #15]
 8000efa:	493b      	ldr	r1, [pc, #236]	; (8000fe8 <RescheduleTimerList+0x130>)
 8000efc:	4613      	mov	r3, r2
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	4413      	add	r3, r2
 8000f02:	00db      	lsls	r3, r3, #3
 8000f04:	440b      	add	r3, r1
 8000f06:	3308      	adds	r3, #8
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000f0c:	f7ff ff36 	bl	8000d7c <ReturnTimeElapsed>
 8000f10:	4603      	mov	r3, r0
 8000f12:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000f14:	88fb      	ldrh	r3, [r7, #6]
 8000f16:	68ba      	ldr	r2, [r7, #8]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d205      	bcs.n	8000f28 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000f20:	4b32      	ldr	r3, [pc, #200]	; (8000fec <RescheduleTimerList+0x134>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	701a      	strb	r2, [r3, #0]
 8000f26:	e04d      	b.n	8000fc4 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000f28:	88fb      	ldrh	r3, [r7, #6]
 8000f2a:	4a31      	ldr	r2, [pc, #196]	; (8000ff0 <RescheduleTimerList+0x138>)
 8000f2c:	8812      	ldrh	r2, [r2, #0]
 8000f2e:	b292      	uxth	r2, r2
 8000f30:	4413      	add	r3, r2
 8000f32:	461a      	mov	r2, r3
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d906      	bls.n	8000f48 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000f3a:	4b2d      	ldr	r3, [pc, #180]	; (8000ff0 <RescheduleTimerList+0x138>)
 8000f3c:	881b      	ldrh	r3, [r3, #0]
 8000f3e:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000f40:	4b2a      	ldr	r3, [pc, #168]	; (8000fec <RescheduleTimerList+0x134>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	701a      	strb	r2, [r3, #0]
 8000f46:	e03d      	b.n	8000fc4 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	b29a      	uxth	r2, r3
 8000f4c:	88fb      	ldrh	r3, [r7, #6]
 8000f4e:	1ad3      	subs	r3, r2, r3
 8000f50:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000f52:	4b26      	ldr	r3, [pc, #152]	; (8000fec <RescheduleTimerList+0x134>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000f58:	e034      	b.n	8000fc4 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000f5a:	7bfa      	ldrb	r2, [r7, #15]
 8000f5c:	4922      	ldr	r1, [pc, #136]	; (8000fe8 <RescheduleTimerList+0x130>)
 8000f5e:	4613      	mov	r3, r2
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	4413      	add	r3, r2
 8000f64:	00db      	lsls	r3, r3, #3
 8000f66:	440b      	add	r3, r1
 8000f68:	3308      	adds	r3, #8
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	88fb      	ldrh	r3, [r7, #6]
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d20a      	bcs.n	8000f88 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000f72:	7bfa      	ldrb	r2, [r7, #15]
 8000f74:	491c      	ldr	r1, [pc, #112]	; (8000fe8 <RescheduleTimerList+0x130>)
 8000f76:	4613      	mov	r3, r2
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	4413      	add	r3, r2
 8000f7c:	00db      	lsls	r3, r3, #3
 8000f7e:	440b      	add	r3, r1
 8000f80:	3308      	adds	r3, #8
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	e013      	b.n	8000fb0 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000f88:	7bfa      	ldrb	r2, [r7, #15]
 8000f8a:	4917      	ldr	r1, [pc, #92]	; (8000fe8 <RescheduleTimerList+0x130>)
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	4413      	add	r3, r2
 8000f92:	00db      	lsls	r3, r3, #3
 8000f94:	440b      	add	r3, r1
 8000f96:	3308      	adds	r3, #8
 8000f98:	6819      	ldr	r1, [r3, #0]
 8000f9a:	88fb      	ldrh	r3, [r7, #6]
 8000f9c:	7bfa      	ldrb	r2, [r7, #15]
 8000f9e:	1ac9      	subs	r1, r1, r3
 8000fa0:	4811      	ldr	r0, [pc, #68]	; (8000fe8 <RescheduleTimerList+0x130>)
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	4413      	add	r3, r2
 8000fa8:	00db      	lsls	r3, r3, #3
 8000faa:	4403      	add	r3, r0
 8000fac:	3308      	adds	r3, #8
 8000fae:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000fb0:	7bfa      	ldrb	r2, [r7, #15]
 8000fb2:	490d      	ldr	r1, [pc, #52]	; (8000fe8 <RescheduleTimerList+0x130>)
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	4413      	add	r3, r2
 8000fba:	00db      	lsls	r3, r3, #3
 8000fbc:	440b      	add	r3, r1
 8000fbe:	3315      	adds	r3, #21
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000fc4:	7bfb      	ldrb	r3, [r7, #15]
 8000fc6:	2b06      	cmp	r3, #6
 8000fc8:	d1c7      	bne.n	8000f5a <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000fca:	89bb      	ldrh	r3, [r7, #12]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff ff15 	bl	8000dfc <RestartWakeupCounter>

  return ;
 8000fd2:	bf00      	nop
}
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40002800 	.word	0x40002800
 8000fe0:	20000198 	.word	0x20000198
 8000fe4:	20000124 	.word	0x20000124
 8000fe8:	20000094 	.word	0x20000094
 8000fec:	2000012c 	.word	0x2000012c
 8000ff0:	200001a0 	.word	0x200001a0

08000ff4 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08a      	sub	sp, #40	; 0x28
 8000ff8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000ffa:	f3ef 8310 	mrs	r3, PRIMASK
 8000ffe:	617b      	str	r3, [r7, #20]
  return(result);
 8001000:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001004:	b672      	cpsid	i
}
 8001006:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001008:	4b5f      	ldr	r3, [pc, #380]	; (8001188 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	22ca      	movs	r2, #202	; 0xca
 8001010:	625a      	str	r2, [r3, #36]	; 0x24
 8001012:	4b5d      	ldr	r3, [pc, #372]	; (8001188 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2253      	movs	r2, #83	; 0x53
 800101a:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 800101c:	4b5a      	ldr	r3, [pc, #360]	; (8001188 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	689a      	ldr	r2, [r3, #8]
 8001024:	4b58      	ldr	r3, [pc, #352]	; (8001188 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800102e:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001030:	4b56      	ldr	r3, [pc, #344]	; (800118c <HW_TS_RTC_Wakeup_Handler+0x198>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001038:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800103c:	4954      	ldr	r1, [pc, #336]	; (8001190 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 800103e:	4613      	mov	r3, r2
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	4413      	add	r3, r2
 8001044:	00db      	lsls	r3, r3, #3
 8001046:	440b      	add	r3, r1
 8001048:	330c      	adds	r3, #12
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	b2db      	uxtb	r3, r3
 800104e:	2b02      	cmp	r3, #2
 8001050:	d172      	bne.n	8001138 <HW_TS_RTC_Wakeup_Handler+0x144>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001052:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001056:	494e      	ldr	r1, [pc, #312]	; (8001190 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001058:	4613      	mov	r3, r2
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	4413      	add	r3, r2
 800105e:	00db      	lsls	r3, r3, #3
 8001060:	440b      	add	r3, r1
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001066:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800106a:	4949      	ldr	r1, [pc, #292]	; (8001190 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 800106c:	4613      	mov	r3, r2
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	4413      	add	r3, r2
 8001072:	00db      	lsls	r3, r3, #3
 8001074:	440b      	add	r3, r1
 8001076:	3310      	adds	r3, #16
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 800107c:	4b45      	ldr	r3, [pc, #276]	; (8001194 <HW_TS_RTC_Wakeup_Handler+0x1a0>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	b2db      	uxtb	r3, r3
 8001082:	2b00      	cmp	r3, #0
 8001084:	d050      	beq.n	8001128 <HW_TS_RTC_Wakeup_Handler+0x134>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001086:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800108a:	4941      	ldr	r1, [pc, #260]	; (8001190 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 800108c:	4613      	mov	r3, r2
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	4413      	add	r3, r2
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	440b      	add	r3, r1
 8001096:	330d      	adds	r3, #13
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	b2db      	uxtb	r3, r3
 800109c:	2b01      	cmp	r3, #1
 800109e:	d126      	bne.n	80010ee <HW_TS_RTC_Wakeup_Handler+0xfa>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 80010a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80010a4:	2101      	movs	r1, #1
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff fde4 	bl	8000c74 <UnlinkTimer>
 80010ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ae:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	f383 8810 	msr	PRIMASK, r3
}
 80010b6:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 80010b8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80010bc:	4934      	ldr	r1, [pc, #208]	; (8001190 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 80010be:	4613      	mov	r3, r2
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	4413      	add	r3, r2
 80010c4:	00db      	lsls	r3, r3, #3
 80010c6:	440b      	add	r3, r1
 80010c8:	3304      	adds	r3, #4
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80010d0:	4611      	mov	r1, r2
 80010d2:	4618      	mov	r0, r3
 80010d4:	f000 f9d4 	bl	8001480 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80010d8:	4b2b      	ldr	r3, [pc, #172]	; (8001188 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	22ca      	movs	r2, #202	; 0xca
 80010e0:	625a      	str	r2, [r3, #36]	; 0x24
 80010e2:	4b29      	ldr	r3, [pc, #164]	; (8001188 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2253      	movs	r2, #83	; 0x53
 80010ea:	625a      	str	r2, [r3, #36]	; 0x24
 80010ec:	e014      	b.n	8001118 <HW_TS_RTC_Wakeup_Handler+0x124>
 80010ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	f383 8810 	msr	PRIMASK, r3
}
 80010f8:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80010fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80010fe:	4618      	mov	r0, r3
 8001100:	f000 f932 	bl	8001368 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001104:	4b20      	ldr	r3, [pc, #128]	; (8001188 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	22ca      	movs	r2, #202	; 0xca
 800110c:	625a      	str	r2, [r3, #36]	; 0x24
 800110e:	4b1e      	ldr	r3, [pc, #120]	; (8001188 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2253      	movs	r2, #83	; 0x53
 8001116:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001118:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800111c:	69fa      	ldr	r2, [r7, #28]
 800111e:	4619      	mov	r1, r3
 8001120:	69b8      	ldr	r0, [r7, #24]
 8001122:	f000 fa35 	bl	8001590 <HW_TS_RTC_Int_AppNot>
 8001126:	e025      	b.n	8001174 <HW_TS_RTC_Wakeup_Handler+0x180>
    }
    else
    {
      RescheduleTimerList();
 8001128:	f7ff fec6 	bl	8000eb8 <RescheduleTimerList>
 800112c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	f383 8810 	msr	PRIMASK, r3
}
 8001136:	e01d      	b.n	8001174 <HW_TS_RTC_Wakeup_Handler+0x180>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001138:	bf00      	nop
 800113a:	4b13      	ldr	r3, [pc, #76]	; (8001188 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	f003 0304 	and.w	r3, r3, #4
 8001146:	2b00      	cmp	r3, #0
 8001148:	d0f7      	beq.n	800113a <HW_TS_RTC_Wakeup_Handler+0x146>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800114a:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	68db      	ldr	r3, [r3, #12]
 8001152:	b2da      	uxtb	r2, r3
 8001154:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800115e:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001160:	4b0d      	ldr	r3, [pc, #52]	; (8001198 <HW_TS_RTC_Wakeup_Handler+0x1a4>)
 8001162:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001166:	60da      	str	r2, [r3, #12]
 8001168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f383 8810 	msr	PRIMASK, r3
}
 8001172:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001174:	4b04      	ldr	r3, [pc, #16]	; (8001188 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	22ff      	movs	r2, #255	; 0xff
 800117c:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 800117e:	bf00      	nop
}
 8001180:	3728      	adds	r7, #40	; 0x28
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000198 	.word	0x20000198
 800118c:	20000124 	.word	0x20000124
 8001190:	20000094 	.word	0x20000094
 8001194:	2000012c 	.word	0x2000012c
 8001198:	58000800 	.word	0x58000800

0800119c <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b088      	sub	sp, #32
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	6039      	str	r1, [r7, #0]
 80011a6:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 80011a8:	4a64      	ldr	r2, [pc, #400]	; (800133c <HW_TS_Init+0x1a0>)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80011ae:	4b63      	ldr	r3, [pc, #396]	; (800133c <HW_TS_Init+0x1a0>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	22ca      	movs	r2, #202	; 0xca
 80011b6:	625a      	str	r2, [r3, #36]	; 0x24
 80011b8:	4b60      	ldr	r3, [pc, #384]	; (800133c <HW_TS_Init+0x1a0>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2253      	movs	r2, #83	; 0x53
 80011c0:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80011c2:	4b5f      	ldr	r3, [pc, #380]	; (8001340 <HW_TS_Init+0x1a4>)
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	4a5e      	ldr	r2, [pc, #376]	; (8001340 <HW_TS_Init+0x1a4>)
 80011c8:	f043 0320 	orr.w	r3, r3, #32
 80011cc:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80011ce:	4b5c      	ldr	r3, [pc, #368]	; (8001340 <HW_TS_Init+0x1a4>)
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	f003 0307 	and.w	r3, r3, #7
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	f1c3 0304 	rsb	r3, r3, #4
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	4b58      	ldr	r3, [pc, #352]	; (8001344 <HW_TS_Init+0x1a8>)
 80011e2:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80011e4:	4b56      	ldr	r3, [pc, #344]	; (8001340 <HW_TS_Init+0x1a4>)
 80011e6:	691b      	ldr	r3, [r3, #16]
 80011e8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80011ec:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 80011f0:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	fa92 f2a2 	rbit	r2, r2
 80011f8:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80011fa:	68fa      	ldr	r2, [r7, #12]
 80011fc:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80011fe:	697a      	ldr	r2, [r7, #20]
 8001200:	2a00      	cmp	r2, #0
 8001202:	d101      	bne.n	8001208 <HW_TS_Init+0x6c>
  {
    return 32U;
 8001204:	2220      	movs	r2, #32
 8001206:	e003      	b.n	8001210 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 8001208:	697a      	ldr	r2, [r7, #20]
 800120a:	fab2 f282 	clz	r2, r2
 800120e:	b2d2      	uxtb	r2, r2
 8001210:	40d3      	lsrs	r3, r2
 8001212:	b2db      	uxtb	r3, r3
 8001214:	3301      	adds	r3, #1
 8001216:	b2da      	uxtb	r2, r3
 8001218:	4b4b      	ldr	r3, [pc, #300]	; (8001348 <HW_TS_Init+0x1ac>)
 800121a:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 800121c:	4b48      	ldr	r3, [pc, #288]	; (8001340 <HW_TS_Init+0x1a4>)
 800121e:	691b      	ldr	r3, [r3, #16]
 8001220:	b29b      	uxth	r3, r3
 8001222:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001226:	b29b      	uxth	r3, r3
 8001228:	3301      	adds	r3, #1
 800122a:	b29a      	uxth	r2, r3
 800122c:	4b47      	ldr	r3, [pc, #284]	; (800134c <HW_TS_Init+0x1b0>)
 800122e:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001230:	4b46      	ldr	r3, [pc, #280]	; (800134c <HW_TS_Init+0x1b0>)
 8001232:	881b      	ldrh	r3, [r3, #0]
 8001234:	3b01      	subs	r3, #1
 8001236:	4a44      	ldr	r2, [pc, #272]	; (8001348 <HW_TS_Init+0x1ac>)
 8001238:	7812      	ldrb	r2, [r2, #0]
 800123a:	fb02 f303 	mul.w	r3, r2, r3
 800123e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001242:	4a40      	ldr	r2, [pc, #256]	; (8001344 <HW_TS_Init+0x1a8>)
 8001244:	7812      	ldrb	r2, [r2, #0]
 8001246:	40d3      	lsrs	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001250:	4293      	cmp	r3, r2
 8001252:	d904      	bls.n	800125e <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001254:	4b3e      	ldr	r3, [pc, #248]	; (8001350 <HW_TS_Init+0x1b4>)
 8001256:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800125a:	801a      	strh	r2, [r3, #0]
 800125c:	e003      	b.n	8001266 <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	b29a      	uxth	r2, r3
 8001262:	4b3b      	ldr	r3, [pc, #236]	; (8001350 <HW_TS_Init+0x1b4>)
 8001264:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001266:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800126a:	f7ff fb81 	bl	8000970 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800126e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001272:	f7ff fb69 	bl	8000948 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d143      	bne.n	8001304 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800127c:	4b35      	ldr	r3, [pc, #212]	; (8001354 <HW_TS_Init+0x1b8>)
 800127e:	2201      	movs	r2, #1
 8001280:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001282:	4b35      	ldr	r3, [pc, #212]	; (8001358 <HW_TS_Init+0x1bc>)
 8001284:	f04f 32ff 	mov.w	r2, #4294967295
 8001288:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800128a:	2300      	movs	r3, #0
 800128c:	77fb      	strb	r3, [r7, #31]
 800128e:	e00c      	b.n	80012aa <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001290:	7ffa      	ldrb	r2, [r7, #31]
 8001292:	4932      	ldr	r1, [pc, #200]	; (800135c <HW_TS_Init+0x1c0>)
 8001294:	4613      	mov	r3, r2
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	4413      	add	r3, r2
 800129a:	00db      	lsls	r3, r3, #3
 800129c:	440b      	add	r3, r1
 800129e:	330c      	adds	r3, #12
 80012a0:	2200      	movs	r2, #0
 80012a2:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80012a4:	7ffb      	ldrb	r3, [r7, #31]
 80012a6:	3301      	adds	r3, #1
 80012a8:	77fb      	strb	r3, [r7, #31]
 80012aa:	7ffb      	ldrb	r3, [r7, #31]
 80012ac:	2b05      	cmp	r3, #5
 80012ae:	d9ef      	bls.n	8001290 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80012b0:	4b2b      	ldr	r3, [pc, #172]	; (8001360 <HW_TS_Init+0x1c4>)
 80012b2:	2206      	movs	r2, #6
 80012b4:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 80012b6:	4b21      	ldr	r3, [pc, #132]	; (800133c <HW_TS_Init+0x1a0>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	689a      	ldr	r2, [r3, #8]
 80012be:	4b1f      	ldr	r3, [pc, #124]	; (800133c <HW_TS_Init+0x1a0>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012c8:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80012ca:	4b1c      	ldr	r3, [pc, #112]	; (800133c <HW_TS_Init+0x1a0>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	68db      	ldr	r3, [r3, #12]
 80012d2:	b2da      	uxtb	r2, r3
 80012d4:	4b19      	ldr	r3, [pc, #100]	; (800133c <HW_TS_Init+0x1a0>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80012de:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80012e0:	4b20      	ldr	r3, [pc, #128]	; (8001364 <HW_TS_Init+0x1c8>)
 80012e2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80012e6:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80012e8:	2003      	movs	r0, #3
 80012ea:	f002 f908 	bl	80034fe <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80012ee:	4b13      	ldr	r3, [pc, #76]	; (800133c <HW_TS_Init+0x1a0>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	689a      	ldr	r2, [r3, #8]
 80012f6:	4b11      	ldr	r3, [pc, #68]	; (800133c <HW_TS_Init+0x1a0>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001300:	609a      	str	r2, [r3, #8]
 8001302:	e00a      	b.n	800131a <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8001304:	4b0d      	ldr	r3, [pc, #52]	; (800133c <HW_TS_Init+0x1a0>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001310:	2b00      	cmp	r3, #0
 8001312:	d002      	beq.n	800131a <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001314:	2003      	movs	r0, #3
 8001316:	f002 f8e4 	bl	80034e2 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800131a:	4b08      	ldr	r3, [pc, #32]	; (800133c <HW_TS_Init+0x1a0>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	22ff      	movs	r2, #255	; 0xff
 8001322:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001324:	2200      	movs	r2, #0
 8001326:	2103      	movs	r1, #3
 8001328:	2003      	movs	r0, #3
 800132a:	f002 f898 	bl	800345e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800132e:	2003      	movs	r0, #3
 8001330:	f002 f8af 	bl	8003492 <HAL_NVIC_EnableIRQ>

  return;
 8001334:	bf00      	nop
}
 8001336:	3720      	adds	r7, #32
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000198 	.word	0x20000198
 8001340:	40002800 	.word	0x40002800
 8001344:	2000019c 	.word	0x2000019c
 8001348:	2000019d 	.word	0x2000019d
 800134c:	2000019e 	.word	0x2000019e
 8001350:	200001a0 	.word	0x200001a0
 8001354:	2000012c 	.word	0x2000012c
 8001358:	20000128 	.word	0x20000128
 800135c:	20000094 	.word	0x20000094
 8001360:	20000124 	.word	0x20000124
 8001364:	58000800 	.word	0x58000800

08001368 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001372:	f3ef 8310 	mrs	r3, PRIMASK
 8001376:	60fb      	str	r3, [r7, #12]
  return(result);
 8001378:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800137a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800137c:	b672      	cpsid	i
}
 800137e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001380:	2003      	movs	r0, #3
 8001382:	f002 f894 	bl	80034ae <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001386:	4b38      	ldr	r3, [pc, #224]	; (8001468 <HW_TS_Stop+0x100>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	22ca      	movs	r2, #202	; 0xca
 800138e:	625a      	str	r2, [r3, #36]	; 0x24
 8001390:	4b35      	ldr	r3, [pc, #212]	; (8001468 <HW_TS_Stop+0x100>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2253      	movs	r2, #83	; 0x53
 8001398:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800139a:	79fa      	ldrb	r2, [r7, #7]
 800139c:	4933      	ldr	r1, [pc, #204]	; (800146c <HW_TS_Stop+0x104>)
 800139e:	4613      	mov	r3, r2
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	4413      	add	r3, r2
 80013a4:	00db      	lsls	r3, r3, #3
 80013a6:	440b      	add	r3, r1
 80013a8:	330c      	adds	r3, #12
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d148      	bne.n	8001444 <HW_TS_Stop+0xdc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	2100      	movs	r1, #0
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff fc5c 	bl	8000c74 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80013bc:	4b2c      	ldr	r3, [pc, #176]	; (8001470 <HW_TS_Stop+0x108>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80013c2:	7cfb      	ldrb	r3, [r7, #19]
 80013c4:	2b06      	cmp	r3, #6
 80013c6:	d135      	bne.n	8001434 <HW_TS_Stop+0xcc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80013c8:	4b2a      	ldr	r3, [pc, #168]	; (8001474 <HW_TS_Stop+0x10c>)
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013d4:	d108      	bne.n	80013e8 <HW_TS_Stop+0x80>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80013d6:	bf00      	nop
 80013d8:	4b23      	ldr	r3, [pc, #140]	; (8001468 <HW_TS_Stop+0x100>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	f003 0304 	and.w	r3, r3, #4
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1f7      	bne.n	80013d8 <HW_TS_Stop+0x70>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 80013e8:	4b1f      	ldr	r3, [pc, #124]	; (8001468 <HW_TS_Stop+0x100>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	689a      	ldr	r2, [r3, #8]
 80013f0:	4b1d      	ldr	r3, [pc, #116]	; (8001468 <HW_TS_Stop+0x100>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013fa:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80013fc:	bf00      	nop
 80013fe:	4b1a      	ldr	r3, [pc, #104]	; (8001468 <HW_TS_Stop+0x100>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	68db      	ldr	r3, [r3, #12]
 8001406:	f003 0304 	and.w	r3, r3, #4
 800140a:	2b00      	cmp	r3, #0
 800140c:	d0f7      	beq.n	80013fe <HW_TS_Stop+0x96>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800140e:	4b16      	ldr	r3, [pc, #88]	; (8001468 <HW_TS_Stop+0x100>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	68db      	ldr	r3, [r3, #12]
 8001416:	b2da      	uxtb	r2, r3
 8001418:	4b13      	ldr	r3, [pc, #76]	; (8001468 <HW_TS_Stop+0x100>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001422:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001424:	4b14      	ldr	r3, [pc, #80]	; (8001478 <HW_TS_Stop+0x110>)
 8001426:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800142a:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800142c:	2003      	movs	r0, #3
 800142e:	f002 f866 	bl	80034fe <HAL_NVIC_ClearPendingIRQ>
 8001432:	e007      	b.n	8001444 <HW_TS_Stop+0xdc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001434:	4b11      	ldr	r3, [pc, #68]	; (800147c <HW_TS_Stop+0x114>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	b2db      	uxtb	r3, r3
 800143a:	7cfa      	ldrb	r2, [r7, #19]
 800143c:	429a      	cmp	r2, r3
 800143e:	d001      	beq.n	8001444 <HW_TS_Stop+0xdc>
    {
      RescheduleTimerList();
 8001440:	f7ff fd3a 	bl	8000eb8 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001444:	4b08      	ldr	r3, [pc, #32]	; (8001468 <HW_TS_Stop+0x100>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	22ff      	movs	r2, #255	; 0xff
 800144c:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800144e:	2003      	movs	r0, #3
 8001450:	f002 f81f 	bl	8003492 <HAL_NVIC_EnableIRQ>
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	f383 8810 	msr	PRIMASK, r3
}
 800145e:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001460:	bf00      	nop
}
 8001462:	3718      	adds	r7, #24
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20000198 	.word	0x20000198
 800146c:	20000094 	.word	0x20000094
 8001470:	20000124 	.word	0x20000124
 8001474:	40002800 	.word	0x40002800
 8001478:	58000800 	.word	0x58000800
 800147c:	20000125 	.word	0x20000125

08001480 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	6039      	str	r1, [r7, #0]
 800148a:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800148c:	79fa      	ldrb	r2, [r7, #7]
 800148e:	493c      	ldr	r1, [pc, #240]	; (8001580 <HW_TS_Start+0x100>)
 8001490:	4613      	mov	r3, r2
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	4413      	add	r3, r2
 8001496:	00db      	lsls	r3, r3, #3
 8001498:	440b      	add	r3, r1
 800149a:	330c      	adds	r3, #12
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d103      	bne.n	80014ac <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff ff5e 	bl	8001368 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80014ac:	f3ef 8310 	mrs	r3, PRIMASK
 80014b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80014b2:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80014b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80014b6:	b672      	cpsid	i
}
 80014b8:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80014ba:	2003      	movs	r0, #3
 80014bc:	f001 fff7 	bl	80034ae <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80014c0:	4b30      	ldr	r3, [pc, #192]	; (8001584 <HW_TS_Start+0x104>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	22ca      	movs	r2, #202	; 0xca
 80014c8:	625a      	str	r2, [r3, #36]	; 0x24
 80014ca:	4b2e      	ldr	r3, [pc, #184]	; (8001584 <HW_TS_Start+0x104>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2253      	movs	r2, #83	; 0x53
 80014d2:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80014d4:	79fa      	ldrb	r2, [r7, #7]
 80014d6:	492a      	ldr	r1, [pc, #168]	; (8001580 <HW_TS_Start+0x100>)
 80014d8:	4613      	mov	r3, r2
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	4413      	add	r3, r2
 80014de:	00db      	lsls	r3, r3, #3
 80014e0:	440b      	add	r3, r1
 80014e2:	330c      	adds	r3, #12
 80014e4:	2202      	movs	r2, #2
 80014e6:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80014e8:	79fa      	ldrb	r2, [r7, #7]
 80014ea:	4925      	ldr	r1, [pc, #148]	; (8001580 <HW_TS_Start+0x100>)
 80014ec:	4613      	mov	r3, r2
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	4413      	add	r3, r2
 80014f2:	00db      	lsls	r3, r3, #3
 80014f4:	440b      	add	r3, r1
 80014f6:	3308      	adds	r3, #8
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80014fc:	79fa      	ldrb	r2, [r7, #7]
 80014fe:	4920      	ldr	r1, [pc, #128]	; (8001580 <HW_TS_Start+0x100>)
 8001500:	4613      	mov	r3, r2
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	4413      	add	r3, r2
 8001506:	00db      	lsls	r3, r3, #3
 8001508:	440b      	add	r3, r1
 800150a:	3304      	adds	r3, #4
 800150c:	683a      	ldr	r2, [r7, #0]
 800150e:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001510:	79fb      	ldrb	r3, [r7, #7]
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff fb04 	bl	8000b20 <linkTimer>
 8001518:	4603      	mov	r3, r0
 800151a:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 800151c:	4b1a      	ldr	r3, [pc, #104]	; (8001588 <HW_TS_Start+0x108>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001522:	4b1a      	ldr	r3, [pc, #104]	; (800158c <HW_TS_Start+0x10c>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	b2db      	uxtb	r3, r3
 8001528:	7c7a      	ldrb	r2, [r7, #17]
 800152a:	429a      	cmp	r2, r3
 800152c:	d002      	beq.n	8001534 <HW_TS_Start+0xb4>
  {
    RescheduleTimerList();
 800152e:	f7ff fcc3 	bl	8000eb8 <RescheduleTimerList>
 8001532:	e013      	b.n	800155c <HW_TS_Start+0xdc>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001534:	79fa      	ldrb	r2, [r7, #7]
 8001536:	4912      	ldr	r1, [pc, #72]	; (8001580 <HW_TS_Start+0x100>)
 8001538:	4613      	mov	r3, r2
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	4413      	add	r3, r2
 800153e:	00db      	lsls	r3, r3, #3
 8001540:	440b      	add	r3, r1
 8001542:	3308      	adds	r3, #8
 8001544:	6819      	ldr	r1, [r3, #0]
 8001546:	8a7b      	ldrh	r3, [r7, #18]
 8001548:	79fa      	ldrb	r2, [r7, #7]
 800154a:	1ac9      	subs	r1, r1, r3
 800154c:	480c      	ldr	r0, [pc, #48]	; (8001580 <HW_TS_Start+0x100>)
 800154e:	4613      	mov	r3, r2
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	4413      	add	r3, r2
 8001554:	00db      	lsls	r3, r3, #3
 8001556:	4403      	add	r3, r0
 8001558:	3308      	adds	r3, #8
 800155a:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800155c:	4b09      	ldr	r3, [pc, #36]	; (8001584 <HW_TS_Start+0x104>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	22ff      	movs	r2, #255	; 0xff
 8001564:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001566:	2003      	movs	r0, #3
 8001568:	f001 ff93 	bl	8003492 <HAL_NVIC_EnableIRQ>
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	f383 8810 	msr	PRIMASK, r3
}
 8001576:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001578:	bf00      	nop
}
 800157a:	3718      	adds	r7, #24
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20000094 	.word	0x20000094
 8001584:	20000198 	.word	0x20000198
 8001588:	20000124 	.word	0x20000124
 800158c:	20000125 	.word	0x20000125

08001590 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	460b      	mov	r3, r1
 800159a:	607a      	str	r2, [r7, #4]
 800159c:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4798      	blx	r3

  return;
 80015a2:	bf00      	nop
}
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
	...

080015ac <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60b9      	str	r1, [r7, #8]
 80015b4:	607b      	str	r3, [r7, #4]
 80015b6:	4603      	mov	r3, r0
 80015b8:	73fb      	strb	r3, [r7, #15]
 80015ba:	4613      	mov	r3, r2
 80015bc:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 80015be:	2300      	movs	r3, #0
 80015c0:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 80015c2:	2300      	movs	r3, #0
 80015c4:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 80015c6:	7bfb      	ldrb	r3, [r7, #15]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d10e      	bne.n	80015ea <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 80015cc:	4a17      	ldr	r2, [pc, #92]	; (800162c <HW_UART_Transmit_DMA+0x80>)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 80015d2:	4b17      	ldr	r3, [pc, #92]	; (8001630 <HW_UART_Transmit_DMA+0x84>)
 80015d4:	4a17      	ldr	r2, [pc, #92]	; (8001634 <HW_UART_Transmit_DMA+0x88>)
 80015d6:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 80015d8:	89bb      	ldrh	r3, [r7, #12]
 80015da:	461a      	mov	r2, r3
 80015dc:	68b9      	ldr	r1, [r7, #8]
 80015de:	4814      	ldr	r0, [pc, #80]	; (8001630 <HW_UART_Transmit_DMA+0x84>)
 80015e0:	f004 fe1e 	bl	8006220 <HAL_UART_Transmit_DMA>
 80015e4:	4603      	mov	r3, r0
 80015e6:	75fb      	strb	r3, [r7, #23]
            break;
 80015e8:	e000      	b.n	80015ec <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 80015ea:	bf00      	nop
    }

    switch (hal_status)
 80015ec:	7dfb      	ldrb	r3, [r7, #23]
 80015ee:	2b03      	cmp	r3, #3
 80015f0:	d816      	bhi.n	8001620 <HW_UART_Transmit_DMA+0x74>
 80015f2:	a201      	add	r2, pc, #4	; (adr r2, 80015f8 <HW_UART_Transmit_DMA+0x4c>)
 80015f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f8:	08001609 	.word	0x08001609
 80015fc:	0800160f 	.word	0x0800160f
 8001600:	08001615 	.word	0x08001615
 8001604:	0800161b 	.word	0x0800161b
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8001608:	2300      	movs	r3, #0
 800160a:	75bb      	strb	r3, [r7, #22]
            break;
 800160c:	e009      	b.n	8001622 <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 800160e:	2301      	movs	r3, #1
 8001610:	75bb      	strb	r3, [r7, #22]
            break;
 8001612:	e006      	b.n	8001622 <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8001614:	2302      	movs	r3, #2
 8001616:	75bb      	strb	r3, [r7, #22]
            break;
 8001618:	e003      	b.n	8001622 <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 800161a:	2303      	movs	r3, #3
 800161c:	75bb      	strb	r3, [r7, #22]
            break;
 800161e:	e000      	b.n	8001622 <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 8001620:	bf00      	nop
    }

    return hw_status;
 8001622:	7dbb      	ldrb	r3, [r7, #22]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3718      	adds	r7, #24
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	2000130c 	.word	0x2000130c
 8001630:	2000143c 	.word	0x2000143c
 8001634:	40013800 	.word	0x40013800

08001638 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	461a      	mov	r2, r3
 8001646:	4b09      	ldr	r3, [pc, #36]	; (800166c <HAL_UART_TxCpltCallback+0x34>)
 8001648:	429a      	cmp	r2, r3
 800164a:	d107      	bne.n	800165c <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 800164c:	4b08      	ldr	r3, [pc, #32]	; (8001670 <HAL_UART_TxCpltCallback+0x38>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d005      	beq.n	8001660 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 8001654:	4b06      	ldr	r3, [pc, #24]	; (8001670 <HAL_UART_TxCpltCallback+0x38>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4798      	blx	r3
            }
            break;
 800165a:	e001      	b.n	8001660 <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 800165c:	bf00      	nop
 800165e:	e000      	b.n	8001662 <HAL_UART_TxCpltCallback+0x2a>
            break;
 8001660:	bf00      	nop
    }

    return;
 8001662:	bf00      	nop
}
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40013800 	.word	0x40013800
 8001670:	2000130c 	.word	0x2000130c

08001674 <LL_EXTI_DisableIT_0_31>:
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800167c:	4b07      	ldr	r3, [pc, #28]	; (800169c <LL_EXTI_DisableIT_0_31+0x28>)
 800167e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	43db      	mvns	r3, r3
 8001686:	4905      	ldr	r1, [pc, #20]	; (800169c <LL_EXTI_DisableIT_0_31+0x28>)
 8001688:	4013      	ands	r3, r2
 800168a:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800168e:	bf00      	nop
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	58000800 	.word	0x58000800

080016a0 <LL_EXTI_DisableIT_32_63>:
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80016a8:	4b07      	ldr	r3, [pc, #28]	; (80016c8 <LL_EXTI_DisableIT_32_63+0x28>)
 80016aa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	43db      	mvns	r3, r3
 80016b2:	4905      	ldr	r1, [pc, #20]	; (80016c8 <LL_EXTI_DisableIT_32_63+0x28>)
 80016b4:	4013      	ands	r3, r2
 80016b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	58000800 	.word	0x58000800

080016cc <LL_RCC_HSE_SetCapacitorTuning>:
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80016d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016d8:	4a0a      	ldr	r2, [pc, #40]	; (8001704 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80016da:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80016de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80016e6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	021b      	lsls	r3, r3, #8
 80016ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016f2:	4313      	orrs	r3, r2
 80016f4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	cafecafe 	.word	0xcafecafe

08001708 <LL_RCC_LSE_SetDriveCapability>:
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001710:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001718:	f023 0218 	bic.w	r2, r3, #24
 800171c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	4313      	orrs	r3, r2
 8001724:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001738:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800173c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001740:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001748:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800175a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800175e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001762:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001766:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800176a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800176e:	bf00      	nop
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 800177c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001780:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001784:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001788:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800178c:	d101      	bne.n	8001792 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 800178e:	2301      	movs	r3, #1
 8001790:	e000      	b.n	8001794 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8001792:	2300      	movs	r3, #0
}
 8001794:	4618      	mov	r0, r3
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 80017a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80017b2:	d101      	bne.n	80017b8 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80017b4:	2301      	movs	r3, #1
 80017b6:	e000      	b.n	80017ba <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <LL_AHB1_GRP1_EnableClock>:
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80017cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80017d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4313      	orrs	r3, r2
 80017da:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80017dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4013      	ands	r3, r2
 80017e6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017e8:	68fb      	ldr	r3, [r7, #12]
}
 80017ea:	bf00      	nop
 80017ec:	3714      	adds	r7, #20
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <LL_AHB2_GRP1_EnableClock>:
{
 80017f6:	b480      	push	{r7}
 80017f8:	b085      	sub	sp, #20
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80017fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001802:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001804:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4313      	orrs	r3, r2
 800180c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800180e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001812:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4013      	ands	r3, r2
 8001818:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800181a:	68fb      	ldr	r3, [r7, #12]
}
 800181c:	bf00      	nop
 800181e:	3714      	adds	r7, #20
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <LL_AHB3_GRP1_EnableClock>:
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001830:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001834:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001836:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4313      	orrs	r3, r2
 800183e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001840:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001844:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4013      	ands	r3, r2
 800184a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800184c:	68fb      	ldr	r3, [r7, #12]
}
 800184e:	bf00      	nop
 8001850:	3714      	adds	r7, #20
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800185a:	b480      	push	{r7}
 800185c:	b083      	sub	sp, #12
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
 8001862:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	685a      	ldr	r2, [r3, #4]
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	041b      	lsls	r3, r3, #16
 800186c:	431a      	orrs	r2, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	605a      	str	r2, [r3, #4]
}
 8001872:	bf00      	nop
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800187e:	b480      	push	{r7}
 8001880:	b083      	sub	sp, #12
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
 8001886:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685a      	ldr	r2, [r3, #4]
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	431a      	orrs	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	605a      	str	r2, [r3, #4]
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	695a      	ldr	r2, [r3, #20]
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	041b      	lsls	r3, r3, #16
 80018b2:	431a      	orrs	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	615a      	str	r2, [r3, #20]
}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	695a      	ldr	r2, [r3, #20]
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	431a      	orrs	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	615a      	str	r2, [r3, #20]
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b083      	sub	sp, #12
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
 80018ee:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	609a      	str	r2, [r3, #8]
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001902:	b480      	push	{r7}
 8001904:	b083      	sub	sp, #12
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
 800190a:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	683a      	ldr	r2, [r7, #0]
 8001910:	619a      	str	r2, [r3, #24]
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
	...

08001920 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001924:	4b05      	ldr	r3, [pc, #20]	; (800193c <LL_LPM_EnableSleep+0x1c>)
 8001926:	691b      	ldr	r3, [r3, #16]
 8001928:	4a04      	ldr	r2, [pc, #16]	; (800193c <LL_LPM_EnableSleep+0x1c>)
 800192a:	f023 0304 	bic.w	r3, r3, #4
 800192e:	6113      	str	r3, [r2, #16]
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	22ff      	movs	r2, #255	; 0xff
 800194c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800194e:	bf00      	nop
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800195a:	b480      	push	{r7}
 800195c:	b083      	sub	sp, #12
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	22ca      	movs	r2, #202	; 0xca
 8001966:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2253      	movs	r2, #83	; 0x53
 800196c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800197a:	b480      	push	{r7}
 800197c:	b083      	sub	sp, #12
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
 8001982:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f023 0207 	bic.w	r2, r3, #7
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	431a      	orrs	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	609a      	str	r2, [r3, #8]
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0

  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80019a4:	4b10      	ldr	r3, [pc, #64]	; (80019e8 <main+0x48>)
 80019a6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80019aa:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019ac:	f001 fb7e 	bl	80030ac <HAL_Init>

  /* USER CODE BEGIN Init */
  Reset_Device();
 80019b0:	f000 f97f 	bl	8001cb2 <Reset_Device>
  Config_HSE();
 80019b4:	f000 f969 	bl	8001c8a <Config_HSE>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019b8:	f000 f818 	bl	80019ec <SystemClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 80019bc:	f000 f896 	bl	8001aec <MX_IPCC_Init>

  /* USER CODE BEGIN SysInit */
  PeriphClock_Config();
 80019c0:	f000 f95c 	bl	8001c7c <PeriphClock_Config>
  Init_Exti(); /**< Configure the system Power Mode */
 80019c4:	f000 f9b7 	bl	8001d36 <Init_Exti>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019c8:	f000 f94b 	bl	8001c62 <MX_GPIO_Init>
  MX_DMA_Init();
 80019cc:	f000 f92c 	bl	8001c28 <MX_DMA_Init>
  MX_RF_Init();
 80019d0:	f000 f8ee 	bl	8001bb0 <MX_RF_Init>
  MX_RTC_Init();
 80019d4:	f000 f8f4 	bl	8001bc0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  APPE_Init();
 80019d8:	f7fe fef0 	bl	80007bc <APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while(1)
	{
		UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 80019dc:	f04f 30ff 	mov.w	r0, #4294967295
 80019e0:	f006 fff8 	bl	80089d4 <UTIL_SEQ_Run>
 80019e4:	e7fa      	b.n	80019dc <main+0x3c>
 80019e6:	bf00      	nop
 80019e8:	58004000 	.word	0x58004000

080019ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b0ae      	sub	sp, #184	; 0xb8
 80019f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019f2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80019f6:	2248      	movs	r2, #72	; 0x48
 80019f8:	2100      	movs	r1, #0
 80019fa:	4618      	mov	r0, r3
 80019fc:	f007 fefe 	bl	80097fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a00:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	60da      	str	r2, [r3, #12]
 8001a0e:	611a      	str	r2, [r3, #16]
 8001a10:	615a      	str	r2, [r3, #20]
 8001a12:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a14:	1d3b      	adds	r3, r7, #4
 8001a16:	2250      	movs	r2, #80	; 0x50
 8001a18:	2100      	movs	r1, #0
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f007 feee 	bl	80097fc <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001a20:	f002 fc82 	bl	8004328 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001a24:	2000      	movs	r0, #0
 8001a26:	f7ff fe6f 	bl	8001708 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a2a:	4b2f      	ldr	r3, [pc, #188]	; (8001ae8 <SystemClock_Config+0xfc>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a32:	4a2d      	ldr	r2, [pc, #180]	; (8001ae8 <SystemClock_Config+0xfc>)
 8001a34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	4b2b      	ldr	r3, [pc, #172]	; (8001ae8 <SystemClock_Config+0xfc>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a42:	603b      	str	r3, [r7, #0]
 8001a44:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001a46:	2307      	movs	r3, #7
 8001a48:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a4e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001a50:	2301      	movs	r3, #1
 8001a52:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a58:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a5a:	2340      	movs	r3, #64	; 0x40
 8001a5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a60:	2300      	movs	r3, #0
 8001a62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a66:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f002 fff0 	bl	8004a50 <HAL_RCC_OscConfig>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001a76:	f000 f98f 	bl	8001d98 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001a7a:	236f      	movs	r3, #111	; 0x6f
 8001a7c:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a82:	2300      	movs	r3, #0
 8001a84:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a86:	2300      	movs	r3, #0
 8001a88:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001a92:	2300      	movs	r3, #0
 8001a94:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001a96:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f003 fb63 	bl	8005168 <HAL_RCC_ClockConfig>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001aa8:	f000 f976 	bl	8001d98 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8001aac:	f643 0303 	movw	r3, #14339	; 0x3803
 8001ab0:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_LPUART1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001aba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001abe:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001ac0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ac4:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001aca:	2310      	movs	r3, #16
 8001acc:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ace:	1d3b      	adds	r3, r7, #4
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f003 ff8a 	bl	80059ea <HAL_RCCEx_PeriphCLKConfig>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001adc:	f000 f95c 	bl	8001d98 <Error_Handler>
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif

  /* USER CODE END Smps */
}
 8001ae0:	bf00      	nop
 8001ae2:	37b8      	adds	r7, #184	; 0xb8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	58000400 	.word	0x58000400

08001aec <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001af0:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <MX_IPCC_Init+0x20>)
 8001af2:	4a07      	ldr	r2, [pc, #28]	; (8001b10 <MX_IPCC_Init+0x24>)
 8001af4:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001af6:	4805      	ldr	r0, [pc, #20]	; (8001b0c <MX_IPCC_Init+0x20>)
 8001af8:	f002 fb90 	bl	800421c <HAL_IPCC_Init>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001b02:	f000 f949 	bl	8001d98 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20001310 	.word	0x20001310
 8001b10:	58000c00 	.word	0x58000c00

08001b14 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b18:	4b23      	ldr	r3, [pc, #140]	; (8001ba8 <MX_USART1_UART_Init+0x94>)
 8001b1a:	4a24      	ldr	r2, [pc, #144]	; (8001bac <MX_USART1_UART_Init+0x98>)
 8001b1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b1e:	4b22      	ldr	r3, [pc, #136]	; (8001ba8 <MX_USART1_UART_Init+0x94>)
 8001b20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b26:	4b20      	ldr	r3, [pc, #128]	; (8001ba8 <MX_USART1_UART_Init+0x94>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b2c:	4b1e      	ldr	r3, [pc, #120]	; (8001ba8 <MX_USART1_UART_Init+0x94>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b32:	4b1d      	ldr	r3, [pc, #116]	; (8001ba8 <MX_USART1_UART_Init+0x94>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b38:	4b1b      	ldr	r3, [pc, #108]	; (8001ba8 <MX_USART1_UART_Init+0x94>)
 8001b3a:	220c      	movs	r2, #12
 8001b3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b3e:	4b1a      	ldr	r3, [pc, #104]	; (8001ba8 <MX_USART1_UART_Init+0x94>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8001b44:	4b18      	ldr	r3, [pc, #96]	; (8001ba8 <MX_USART1_UART_Init+0x94>)
 8001b46:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b4a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b4c:	4b16      	ldr	r3, [pc, #88]	; (8001ba8 <MX_USART1_UART_Init+0x94>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b52:	4b15      	ldr	r3, [pc, #84]	; (8001ba8 <MX_USART1_UART_Init+0x94>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b58:	4b13      	ldr	r3, [pc, #76]	; (8001ba8 <MX_USART1_UART_Init+0x94>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b5e:	4812      	ldr	r0, [pc, #72]	; (8001ba8 <MX_USART1_UART_Init+0x94>)
 8001b60:	f004 fb0e 	bl	8006180 <HAL_UART_Init>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8001b6a:	f000 f915 	bl	8001d98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b6e:	2100      	movs	r1, #0
 8001b70:	480d      	ldr	r0, [pc, #52]	; (8001ba8 <MX_USART1_UART_Init+0x94>)
 8001b72:	f005 faeb 	bl	800714c <HAL_UARTEx_SetTxFifoThreshold>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8001b7c:	f000 f90c 	bl	8001d98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b80:	2100      	movs	r1, #0
 8001b82:	4809      	ldr	r0, [pc, #36]	; (8001ba8 <MX_USART1_UART_Init+0x94>)
 8001b84:	f005 fb20 	bl	80071c8 <HAL_UARTEx_SetRxFifoThreshold>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8001b8e:	f000 f903 	bl	8001d98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001b92:	4805      	ldr	r0, [pc, #20]	; (8001ba8 <MX_USART1_UART_Init+0x94>)
 8001b94:	f005 faa1 	bl	80070da <HAL_UARTEx_DisableFifoMode>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8001b9e:	f000 f8fb 	bl	8001d98 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	2000143c 	.word	0x2000143c
 8001bac:	40013800 	.word	0x40013800

08001bb0 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001bb4:	bf00      	nop
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
	...

08001bc0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001bc4:	4b16      	ldr	r3, [pc, #88]	; (8001c20 <MX_RTC_Init+0x60>)
 8001bc6:	4a17      	ldr	r2, [pc, #92]	; (8001c24 <MX_RTC_Init+0x64>)
 8001bc8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001bca:	4b15      	ldr	r3, [pc, #84]	; (8001c20 <MX_RTC_Init+0x60>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001bd0:	4b13      	ldr	r3, [pc, #76]	; (8001c20 <MX_RTC_Init+0x60>)
 8001bd2:	220f      	movs	r2, #15
 8001bd4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001bd6:	4b12      	ldr	r3, [pc, #72]	; (8001c20 <MX_RTC_Init+0x60>)
 8001bd8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001bdc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001bde:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <MX_RTC_Init+0x60>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001be4:	4b0e      	ldr	r3, [pc, #56]	; (8001c20 <MX_RTC_Init+0x60>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001bea:	4b0d      	ldr	r3, [pc, #52]	; (8001c20 <MX_RTC_Init+0x60>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001bf0:	4b0b      	ldr	r3, [pc, #44]	; (8001c20 <MX_RTC_Init+0x60>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001bf6:	480a      	ldr	r0, [pc, #40]	; (8001c20 <MX_RTC_Init+0x60>)
 8001bf8:	f004 f97e 	bl	8005ef8 <HAL_RTC_Init>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001c02:	f000 f8c9 	bl	8001d98 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001c06:	4807      	ldr	r0, [pc, #28]	; (8001c24 <MX_RTC_Init+0x64>)
 8001c08:	f7ff fea7 	bl	800195a <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	4805      	ldr	r0, [pc, #20]	; (8001c24 <MX_RTC_Init+0x64>)
 8001c10:	f7ff feb3 	bl	800197a <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8001c14:	4803      	ldr	r0, [pc, #12]	; (8001c24 <MX_RTC_Init+0x64>)
 8001c16:	f7ff fe93 	bl	8001940 <LL_RTC_EnableWriteProtection>
  /* USER CODE END RTC_Init 2 */

}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	200014cc 	.word	0x200014cc
 8001c24:	40002800 	.word	0x40002800

08001c28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001c2c:	2004      	movs	r0, #4
 8001c2e:	f7ff fdc9 	bl	80017c4 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c32:	2001      	movs	r0, #1
 8001c34:	f7ff fdc6 	bl	80017c4 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001c38:	2002      	movs	r0, #2
 8001c3a:	f7ff fdc3 	bl	80017c4 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 15, 0);
 8001c3e:	2200      	movs	r2, #0
 8001c40:	210f      	movs	r1, #15
 8001c42:	200e      	movs	r0, #14
 8001c44:	f001 fc0b 	bl	800345e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001c48:	200e      	movs	r0, #14
 8001c4a:	f001 fc22 	bl	8003492 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 8001c4e:	2200      	movs	r2, #0
 8001c50:	210f      	movs	r1, #15
 8001c52:	203a      	movs	r0, #58	; 0x3a
 8001c54:	f001 fc03 	bl	800345e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8001c58:	203a      	movs	r0, #58	; 0x3a
 8001c5a:	f001 fc1a 	bl	8003492 <HAL_NVIC_EnableIRQ>

}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c66:	2004      	movs	r0, #4
 8001c68:	f7ff fdc5 	bl	80017f6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6c:	2001      	movs	r0, #1
 8001c6e:	f7ff fdc2 	bl	80017f6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c72:	2002      	movs	r0, #2
 8001c74:	f7ff fdbf 	bl	80017f6 <LL_AHB2_GRP1_EnableClock>

}
 8001c78:	bf00      	nop
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <PeriphClock_Config>:

/* USER CODE BEGIN 4 */

void PeriphClock_Config(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0

	/* Start automatic synchronization */
	HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
#endif

	return;
 8001c80:	bf00      	nop
}
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <Config_HSE>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/

static void Config_HSE(void)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b082      	sub	sp, #8
 8001c8e:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8001c90:	2000      	movs	r0, #0
 8001c92:	f006 fe35 	bl	8008900 <OTP_Read>
 8001c96:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d005      	beq.n	8001caa <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	799b      	ldrb	r3, [r3, #6]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff fd12 	bl	80016cc <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8001ca8:	bf00      	nop
 8001caa:	bf00      	nop
}  
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <Reset_Device>:


static void Reset_Device( void )
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
	Reset_BackupDomain();
 8001cb6:	f000 f827 	bl	8001d08 <Reset_BackupDomain>

	Reset_IPCC();
 8001cba:	f000 f803 	bl	8001cc4 <Reset_IPCC>
#endif

	return;
 8001cbe:	bf00      	nop
}
 8001cc0:	bd80      	pop	{r7, pc}
	...

08001cc4 <Reset_IPCC>:

static void Reset_IPCC( void )
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
	LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8001cc8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001ccc:	f7ff fdac 	bl	8001828 <LL_AHB3_GRP1_EnableClock>

	LL_C1_IPCC_ClearFlag_CHx(
 8001cd0:	213f      	movs	r1, #63	; 0x3f
 8001cd2:	480c      	ldr	r0, [pc, #48]	; (8001d04 <Reset_IPCC+0x40>)
 8001cd4:	f7ff fe07 	bl	80018e6 <LL_C1_IPCC_ClearFlag_CHx>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_ClearFlag_CHx(
 8001cd8:	213f      	movs	r1, #63	; 0x3f
 8001cda:	480a      	ldr	r0, [pc, #40]	; (8001d04 <Reset_IPCC+0x40>)
 8001cdc:	f7ff fe11 	bl	8001902 <LL_C2_IPCC_ClearFlag_CHx>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C1_IPCC_DisableTransmitChannel(
 8001ce0:	213f      	movs	r1, #63	; 0x3f
 8001ce2:	4808      	ldr	r0, [pc, #32]	; (8001d04 <Reset_IPCC+0x40>)
 8001ce4:	f7ff fdb9 	bl	800185a <LL_C1_IPCC_DisableTransmitChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_DisableTransmitChannel(
 8001ce8:	213f      	movs	r1, #63	; 0x3f
 8001cea:	4806      	ldr	r0, [pc, #24]	; (8001d04 <Reset_IPCC+0x40>)
 8001cec:	f7ff fdd8 	bl	80018a0 <LL_C2_IPCC_DisableTransmitChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C1_IPCC_DisableReceiveChannel(
 8001cf0:	213f      	movs	r1, #63	; 0x3f
 8001cf2:	4804      	ldr	r0, [pc, #16]	; (8001d04 <Reset_IPCC+0x40>)
 8001cf4:	f7ff fdc3 	bl	800187e <LL_C1_IPCC_DisableReceiveChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_DisableReceiveChannel(
 8001cf8:	213f      	movs	r1, #63	; 0x3f
 8001cfa:	4802      	ldr	r0, [pc, #8]	; (8001d04 <Reset_IPCC+0x40>)
 8001cfc:	f7ff fde2 	bl	80018c4 <LL_C2_IPCC_DisableReceiveChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	return;
 8001d00:	bf00      	nop
}
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	58000c00 	.word	0x58000c00

08001d08 <Reset_BackupDomain>:

static void Reset_BackupDomain( void )
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
	if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8001d0c:	f7ff fd34 	bl	8001778 <LL_RCC_IsActiveFlag_PINRST>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d00d      	beq.n	8001d32 <Reset_BackupDomain+0x2a>
 8001d16:	f7ff fd42 	bl	800179e <LL_RCC_IsActiveFlag_SFTRST>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d108      	bne.n	8001d32 <Reset_BackupDomain+0x2a>
	{
		HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8001d20:	f002 fb02 	bl	8004328 <HAL_PWR_EnableBkUpAccess>

		/**
		 *  Write twice the value to flush the APB-AHB bridge
		 *  This bit shall be written in the register before writing the next one
		 */
		HAL_PWR_EnableBkUpAccess();
 8001d24:	f002 fb00 	bl	8004328 <HAL_PWR_EnableBkUpAccess>

		__HAL_RCC_BACKUPRESET_FORCE();
 8001d28:	f7ff fd04 	bl	8001734 <LL_RCC_ForceBackupDomainReset>
		__HAL_RCC_BACKUPRESET_RELEASE();
 8001d2c:	f7ff fd13 	bl	8001756 <LL_RCC_ReleaseBackupDomainReset>
	}

	return;
 8001d30:	bf00      	nop
 8001d32:	bf00      	nop
}
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <Init_Exti>:

static void Init_Exti( void )
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	af00      	add	r7, sp, #0
  /**< Disable all wakeup interrupt on CPU1  except IPCC(36), HSEM(38) */
  LL_EXTI_DisableIT_0_31(~0);
 8001d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8001d3e:	f7ff fc99 	bl	8001674 <LL_EXTI_DisableIT_0_31>
  LL_EXTI_DisableIT_32_63( (~0) & (~(LL_EXTI_LINE_36 | LL_EXTI_LINE_38)) );
 8001d42:	f06f 0050 	mvn.w	r0, #80	; 0x50
 8001d46:	f7ff fcab 	bl	80016a0 <LL_EXTI_DisableIT_32_63>

  return;
 8001d4a:	bf00      	nop
}
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b084      	sub	sp, #16
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d56:	f001 fa17 	bl	8003188 <HAL_GetTick>
 8001d5a:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d66:	d00a      	beq.n	8001d7e <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8001d68:	f001 fa26 	bl	80031b8 <HAL_GetTickFreq>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	461a      	mov	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	4413      	add	r3, r2
 8001d74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d76:	e002      	b.n	8001d7e <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep( ); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001d78:	f7ff fdd2 	bl	8001920 <LL_LPM_EnableSleep>
     */
  #if defined ( __CC_ARM)
    __force_stores();
  #endif

    __WFI( );
 8001d7c:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8001d7e:	f001 fa03 	bl	8003188 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	68fa      	ldr	r2, [r7, #12]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d8f4      	bhi.n	8001d78 <HAL_Delay+0x2a>
  }
}
 8001d8e:	bf00      	nop
 8001d90:	bf00      	nop
 8001d92:	3710      	adds	r7, #16
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
 
  /* USER CODE END Error_Handler_Debug */
}
 8001d9c:	bf00      	nop
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <LL_RCC_SetRTCClockSource>:
{
 8001da6:	b480      	push	{r7}
 8001da8:	b083      	sub	sp, #12
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8001dae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001db6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001dba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <LL_RCC_EnableRTC>:
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001dd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001de2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001de6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001dea:	bf00      	nop
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <LL_AHB2_GRP1_EnableClock>:
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001dfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001e0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e10:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4013      	ands	r3, r2
 8001e16:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e18:	68fb      	ldr	r3, [r7, #12]
}
 8001e1a:	bf00      	nop
 8001e1c:	3714      	adds	r7, #20
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr

08001e26 <LL_AHB3_GRP1_EnableClock>:
{
 8001e26:	b480      	push	{r7}
 8001e28:	b085      	sub	sp, #20
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001e2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001e3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4013      	ands	r3, r2
 8001e48:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
}
 8001e4c:	bf00      	nop
 8001e4e:	3714      	adds	r7, #20
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <LL_APB1_GRP1_EnableClock>:
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001e60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e64:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001e70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e74:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
}
 8001e7e:	bf00      	nop
 8001e80:	3714      	adds	r7, #20
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr

08001e8a <LL_APB1_GRP2_EnableClock>:
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b085      	sub	sp, #20
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001e92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e96:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001ea2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ea6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001eae:	68fb      	ldr	r3, [r7, #12]
}
 8001eb0:	bf00      	nop
 8001eb2:	3714      	adds	r7, #20
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <LL_APB2_GRP1_EnableClock>:
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001ec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ec8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001eca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001ed4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ed8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4013      	ands	r3, r2
 8001ede:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
}
 8001ee2:	bf00      	nop
 8001ee4:	3714      	adds	r7, #20
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr

08001eee <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001ef2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001ef6:	f7ff ff96 	bl	8001e26 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8001efa:	2200      	movs	r2, #0
 8001efc:	2100      	movs	r1, #0
 8001efe:	202e      	movs	r0, #46	; 0x2e
 8001f00:	f001 faad 	bl	800345e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001f04:	202e      	movs	r0, #46	; 0x2e
 8001f06:	f001 fac4 	bl	8003492 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	bd80      	pop	{r7, pc}
	...

08001f10 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a0d      	ldr	r2, [pc, #52]	; (8001f54 <HAL_IPCC_MspInit+0x44>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d113      	bne.n	8001f4a <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8001f22:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001f26:	f7ff ff7e 	bl	8001e26 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	202c      	movs	r0, #44	; 0x2c
 8001f30:	f001 fa95 	bl	800345e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001f34:	202c      	movs	r0, #44	; 0x2c
 8001f36:	f001 faac 	bl	8003492 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	202d      	movs	r0, #45	; 0x2d
 8001f40:	f001 fa8d 	bl	800345e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001f44:	202d      	movs	r0, #45	; 0x2d
 8001f46:	f001 faa4 	bl	8003492 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8001f4a:	bf00      	nop
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	58000c00 	.word	0x58000c00

08001f58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b08c      	sub	sp, #48	; 0x30
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f60:	f107 031c 	add.w	r3, r7, #28
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	605a      	str	r2, [r3, #4]
 8001f6a:	609a      	str	r2, [r3, #8]
 8001f6c:	60da      	str	r2, [r3, #12]
 8001f6e:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  if(huart->Instance==LPUART1)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a59      	ldr	r2, [pc, #356]	; (80020dc <HAL_UART_MspInit+0x184>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d15e      	bne.n	8002038 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001f7a:	2001      	movs	r0, #1
 8001f7c:	f7ff ff85 	bl	8001e8a <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f80:	2001      	movs	r0, #1
 8001f82:	f7ff ff37 	bl	8001df4 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f86:	230c      	movs	r3, #12
 8001f88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f92:	2303      	movs	r3, #3
 8001f94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001f96:	2308      	movs	r3, #8
 8001f98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f9a:	f107 031c 	add.w	r3, r7, #28
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fa4:	f001 ff8e 	bl	8003ec4 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel4;
 8001fa8:	4b4d      	ldr	r3, [pc, #308]	; (80020e0 <HAL_UART_MspInit+0x188>)
 8001faa:	4a4e      	ldr	r2, [pc, #312]	; (80020e4 <HAL_UART_MspInit+0x18c>)
 8001fac:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8001fae:	4b4c      	ldr	r3, [pc, #304]	; (80020e0 <HAL_UART_MspInit+0x188>)
 8001fb0:	2211      	movs	r2, #17
 8001fb2:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fb4:	4b4a      	ldr	r3, [pc, #296]	; (80020e0 <HAL_UART_MspInit+0x188>)
 8001fb6:	2210      	movs	r2, #16
 8001fb8:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fba:	4b49      	ldr	r3, [pc, #292]	; (80020e0 <HAL_UART_MspInit+0x188>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001fc0:	4b47      	ldr	r3, [pc, #284]	; (80020e0 <HAL_UART_MspInit+0x188>)
 8001fc2:	2280      	movs	r2, #128	; 0x80
 8001fc4:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fc6:	4b46      	ldr	r3, [pc, #280]	; (80020e0 <HAL_UART_MspInit+0x188>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fcc:	4b44      	ldr	r3, [pc, #272]	; (80020e0 <HAL_UART_MspInit+0x188>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8001fd2:	4b43      	ldr	r3, [pc, #268]	; (80020e0 <HAL_UART_MspInit+0x188>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001fd8:	4b41      	ldr	r3, [pc, #260]	; (80020e0 <HAL_UART_MspInit+0x188>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8001fde:	4840      	ldr	r0, [pc, #256]	; (80020e0 <HAL_UART_MspInit+0x188>)
 8001fe0:	f001 fa9c 	bl	800351c <HAL_DMA_Init>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <HAL_UART_MspInit+0x96>
    {
      Error_Handler();
 8001fea:	f7ff fed5 	bl	8001d98 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_DMAMUX1_CH1_EVT;
 8001fee:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 8001ff2:	60fb      	str	r3, [r7, #12]
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	613b      	str	r3, [r7, #16]
    pSyncConfig.SyncEnable = DISABLE;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	753b      	strb	r3, [r7, #20]
    pSyncConfig.EventEnable = DISABLE;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	757b      	strb	r3, [r7, #21]
    pSyncConfig.RequestNumber = 1;
 8002000:	2301      	movs	r3, #1
 8002002:	61bb      	str	r3, [r7, #24]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_lpuart1_tx, &pSyncConfig) != HAL_OK)
 8002004:	f107 030c 	add.w	r3, r7, #12
 8002008:	4619      	mov	r1, r3
 800200a:	4835      	ldr	r0, [pc, #212]	; (80020e0 <HAL_UART_MspInit+0x188>)
 800200c:	f001 fdb8 	bl	8003b80 <HAL_DMAEx_ConfigMuxSync>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8002016:	f7ff febf 	bl	8001d98 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a30      	ldr	r2, [pc, #192]	; (80020e0 <HAL_UART_MspInit+0x188>)
 800201e:	679a      	str	r2, [r3, #120]	; 0x78
 8002020:	4a2f      	ldr	r2, [pc, #188]	; (80020e0 <HAL_UART_MspInit+0x188>)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8002026:	2200      	movs	r2, #0
 8002028:	2100      	movs	r1, #0
 800202a:	2025      	movs	r0, #37	; 0x25
 800202c:	f001 fa17 	bl	800345e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002030:	2025      	movs	r0, #37	; 0x25
 8002032:	f001 fa2e 	bl	8003492 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002036:	e04c      	b.n	80020d2 <HAL_UART_MspInit+0x17a>
  else if(huart->Instance==USART1)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a2a      	ldr	r2, [pc, #168]	; (80020e8 <HAL_UART_MspInit+0x190>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d147      	bne.n	80020d2 <HAL_UART_MspInit+0x17a>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002042:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002046:	f7ff ff39 	bl	8001ebc <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800204a:	2002      	movs	r0, #2
 800204c:	f7ff fed2 	bl	8001df4 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002050:	23c0      	movs	r3, #192	; 0xc0
 8002052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002054:	2302      	movs	r3, #2
 8002056:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002058:	2301      	movs	r3, #1
 800205a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800205c:	2303      	movs	r3, #3
 800205e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002060:	2307      	movs	r3, #7
 8002062:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002064:	f107 031c 	add.w	r3, r7, #28
 8002068:	4619      	mov	r1, r3
 800206a:	4820      	ldr	r0, [pc, #128]	; (80020ec <HAL_UART_MspInit+0x194>)
 800206c:	f001 ff2a 	bl	8003ec4 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Channel4;
 8002070:	4b1f      	ldr	r3, [pc, #124]	; (80020f0 <HAL_UART_MspInit+0x198>)
 8002072:	4a20      	ldr	r2, [pc, #128]	; (80020f4 <HAL_UART_MspInit+0x19c>)
 8002074:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002076:	4b1e      	ldr	r3, [pc, #120]	; (80020f0 <HAL_UART_MspInit+0x198>)
 8002078:	220f      	movs	r2, #15
 800207a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800207c:	4b1c      	ldr	r3, [pc, #112]	; (80020f0 <HAL_UART_MspInit+0x198>)
 800207e:	2210      	movs	r2, #16
 8002080:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002082:	4b1b      	ldr	r3, [pc, #108]	; (80020f0 <HAL_UART_MspInit+0x198>)
 8002084:	2200      	movs	r2, #0
 8002086:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002088:	4b19      	ldr	r3, [pc, #100]	; (80020f0 <HAL_UART_MspInit+0x198>)
 800208a:	2280      	movs	r2, #128	; 0x80
 800208c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800208e:	4b18      	ldr	r3, [pc, #96]	; (80020f0 <HAL_UART_MspInit+0x198>)
 8002090:	2200      	movs	r2, #0
 8002092:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002094:	4b16      	ldr	r3, [pc, #88]	; (80020f0 <HAL_UART_MspInit+0x198>)
 8002096:	2200      	movs	r2, #0
 8002098:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800209a:	4b15      	ldr	r3, [pc, #84]	; (80020f0 <HAL_UART_MspInit+0x198>)
 800209c:	2200      	movs	r2, #0
 800209e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80020a0:	4b13      	ldr	r3, [pc, #76]	; (80020f0 <HAL_UART_MspInit+0x198>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80020a6:	4812      	ldr	r0, [pc, #72]	; (80020f0 <HAL_UART_MspInit+0x198>)
 80020a8:	f001 fa38 	bl	800351c <HAL_DMA_Init>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <HAL_UART_MspInit+0x15e>
      Error_Handler();
 80020b2:	f7ff fe71 	bl	8001d98 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a0d      	ldr	r2, [pc, #52]	; (80020f0 <HAL_UART_MspInit+0x198>)
 80020ba:	679a      	str	r2, [r3, #120]	; 0x78
 80020bc:	4a0c      	ldr	r2, [pc, #48]	; (80020f0 <HAL_UART_MspInit+0x198>)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80020c2:	2200      	movs	r2, #0
 80020c4:	2100      	movs	r1, #0
 80020c6:	2024      	movs	r0, #36	; 0x24
 80020c8:	f001 f9c9 	bl	800345e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80020cc:	2024      	movs	r0, #36	; 0x24
 80020ce:	f001 f9e0 	bl	8003492 <HAL_NVIC_EnableIRQ>
}
 80020d2:	bf00      	nop
 80020d4:	3730      	adds	r7, #48	; 0x30
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40008000 	.word	0x40008000
 80020e0:	200014f0 	.word	0x200014f0
 80020e4:	40020044 	.word	0x40020044
 80020e8:	40013800 	.word	0x40013800
 80020ec:	48000400 	.word	0x48000400
 80020f0:	200013dc 	.word	0x200013dc
 80020f4:	40020444 	.word	0x40020444

080020f8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a0b      	ldr	r2, [pc, #44]	; (8002134 <HAL_RTC_MspInit+0x3c>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d110      	bne.n	800212c <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
  HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 800210a:	f002 f90d 	bl	8004328 <HAL_PWR_EnableBkUpAccess>

  /**
  *  Write twice the value to flush the APB-AHB bridge
  *  This bit shall be written in the register before writing the next one
  */
  HAL_PWR_EnableBkUpAccess();
 800210e:	f002 f90b 	bl	8004328 <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE); /**< Select LSI as RTC Input */
 8002112:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002116:	f7ff fe46 	bl	8001da6 <LL_RCC_SetRTCClockSource>
  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800211a:	f7ff fe5a 	bl	8001dd2 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800211e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002122:	f7ff fe99 	bl	8001e58 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */
  HAL_RTCEx_EnableBypassShadow(hrtc);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f003 ffd4 	bl	80060d4 <HAL_RTCEx_EnableBypassShadow>
  /* USER CODE END RTC_MspInit 1 */
  }

}
 800212c:	bf00      	nop
 800212e:	3708      	adds	r7, #8
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40002800 	.word	0x40002800

08002138 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800213c:	bf00      	nop
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr

08002146 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002146:	b480      	push	{r7}
 8002148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800214a:	e7fe      	b.n	800214a <HardFault_Handler+0x4>

0800214c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002150:	e7fe      	b.n	8002150 <MemManage_Handler+0x4>

08002152 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002152:	b480      	push	{r7}
 8002154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002156:	e7fe      	b.n	8002156 <BusFault_Handler+0x4>

08002158 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800215c:	e7fe      	b.n	800215c <UsageFault_Handler+0x4>

0800215e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800215e:	b480      	push	{r7}
 8002160:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002162:	bf00      	nop
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002170:	bf00      	nop
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr

0800217a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800217a:	b480      	push	{r7}
 800217c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800217e:	bf00      	nop
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800218c:	f000 ffe8 	bl	8003160 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002190:	bf00      	nop
 8002192:	bd80      	pop	{r7, pc}

08002194 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8002198:	4802      	ldr	r0, [pc, #8]	; (80021a4 <DMA1_Channel4_IRQHandler+0x10>)
 800219a:	f001 fba0 	bl	80038de <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	200014f0 	.word	0x200014f0

080021a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80021ac:	4802      	ldr	r0, [pc, #8]	; (80021b8 <USART1_IRQHandler+0x10>)
 80021ae:	f004 f8b7 	bl	8006320 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	2000143c 	.word	0x2000143c

080021bc <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80021c0:	4802      	ldr	r0, [pc, #8]	; (80021cc <LPUART1_IRQHandler+0x10>)
 80021c2:	f004 f8ad 	bl	8006320 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	2000134c 	.word	0x2000134c

080021d0 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 80021d4:	f000 fcc0 	bl	8002b58 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 80021d8:	bf00      	nop
 80021da:	bd80      	pop	{r7, pc}

080021dc <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80021e0:	f000 fcf2 	bl	8002bc8 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80021e4:	bf00      	nop
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80021ec:	f001 fff2 	bl	80041d4 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80021f0:	bf00      	nop
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80021f8:	4802      	ldr	r0, [pc, #8]	; (8002204 <DMA2_Channel4_IRQHandler+0x10>)
 80021fa:	f001 fb70 	bl	80038de <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 80021fe:	bf00      	nop
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	200013dc 	.word	0x200013dc

08002208 <EXTI4_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW1_EXTI_IRQHandler(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0

}
 800220c:	bf00      	nop
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <EXTI0_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW2_EXTI_IRQHandler(void)
{
 8002216:	b480      	push	{r7}
 8002218:	af00      	add	r7, sp, #0

}
 800221a:	bf00      	nop
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <RTC_WKUP_IRQHandler>:

void RTC_WKUP_IRQHandler(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  HW_TS_RTC_Wakeup_Handler();
 8002228:	f7fe fee4 	bl	8000ff4 <HW_TS_RTC_Wakeup_Handler>
}
 800222c:	bf00      	nop
 800222e:	bd80      	pop	{r7, pc}

08002230 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800223c:	2300      	movs	r3, #0
 800223e:	617b      	str	r3, [r7, #20]
 8002240:	e00a      	b.n	8002258 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002242:	f3af 8000 	nop.w
 8002246:	4601      	mov	r1, r0
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	1c5a      	adds	r2, r3, #1
 800224c:	60ba      	str	r2, [r7, #8]
 800224e:	b2ca      	uxtb	r2, r1
 8002250:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	3301      	adds	r3, #1
 8002256:	617b      	str	r3, [r7, #20]
 8002258:	697a      	ldr	r2, [r7, #20]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	429a      	cmp	r2, r3
 800225e:	dbf0      	blt.n	8002242 <_read+0x12>
	}

return len;
 8002260:	687b      	ldr	r3, [r7, #4]
}
 8002262:	4618      	mov	r0, r3
 8002264:	3718      	adds	r7, #24
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <_close>:
	}
	return len;
}

int _close(int file)
{
 800226a:	b480      	push	{r7}
 800226c:	b083      	sub	sp, #12
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
	return -1;
 8002272:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002276:	4618      	mov	r0, r3
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr

08002282 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002282:	b480      	push	{r7}
 8002284:	b083      	sub	sp, #12
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
 800228a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002292:	605a      	str	r2, [r3, #4]
	return 0;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr

080022a2 <_isatty>:

int _isatty(int file)
{
 80022a2:	b480      	push	{r7}
 80022a4:	b083      	sub	sp, #12
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
	return 1;
 80022aa:	2301      	movs	r3, #1
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
	return 0;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3714      	adds	r7, #20
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
	...

080022d4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80022dc:	4b11      	ldr	r3, [pc, #68]	; (8002324 <_sbrk+0x50>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d102      	bne.n	80022ea <_sbrk+0x16>
		heap_end = &end;
 80022e4:	4b0f      	ldr	r3, [pc, #60]	; (8002324 <_sbrk+0x50>)
 80022e6:	4a10      	ldr	r2, [pc, #64]	; (8002328 <_sbrk+0x54>)
 80022e8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80022ea:	4b0e      	ldr	r3, [pc, #56]	; (8002324 <_sbrk+0x50>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80022f0:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <_sbrk+0x50>)
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4413      	add	r3, r2
 80022f8:	466a      	mov	r2, sp
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d907      	bls.n	800230e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80022fe:	f007 fa45 	bl	800978c <__errno>
 8002302:	4603      	mov	r3, r0
 8002304:	220c      	movs	r2, #12
 8002306:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002308:	f04f 33ff 	mov.w	r3, #4294967295
 800230c:	e006      	b.n	800231c <_sbrk+0x48>
	}

	heap_end += incr;
 800230e:	4b05      	ldr	r3, [pc, #20]	; (8002324 <_sbrk+0x50>)
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4413      	add	r3, r2
 8002316:	4a03      	ldr	r2, [pc, #12]	; (8002324 <_sbrk+0x50>)
 8002318:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800231a:	68fb      	ldr	r3, [r7, #12]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3710      	adds	r7, #16
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	200001a4 	.word	0x200001a4
 8002328:	20001568 	.word	0x20001568

0800232c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8002330:	f3bf 8f4f 	dsb	sy
}
 8002334:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002336:	4b06      	ldr	r3, [pc, #24]	; (8002350 <__NVIC_SystemReset+0x24>)
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800233e:	4904      	ldr	r1, [pc, #16]	; (8002350 <__NVIC_SystemReset+0x24>)
 8002340:	4b04      	ldr	r3, [pc, #16]	; (8002354 <__NVIC_SystemReset+0x28>)
 8002342:	4313      	orrs	r3, r2
 8002344:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002346:	f3bf 8f4f 	dsb	sy
}
 800234a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800234c:	bf00      	nop
 800234e:	e7fd      	b.n	800234c <__NVIC_SystemReset+0x20>
 8002350:	e000ed00 	.word	0xe000ed00
 8002354:	05fa0004 	.word	0x05fa0004

08002358 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800235c:	4b03      	ldr	r3, [pc, #12]	; (800236c <LL_FLASH_GetUDN+0x14>)
 800235e:	681b      	ldr	r3, [r3, #0]
}
 8002360:	4618      	mov	r0, r3
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	1fff7580 	.word	0x1fff7580

08002370 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8002374:	4b03      	ldr	r3, [pc, #12]	; (8002384 <LL_FLASH_GetDeviceID+0x14>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	b2db      	uxtb	r3, r3
}
 800237a:	4618      	mov	r0, r3
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	1fff7584 	.word	0x1fff7584

08002388 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 800238c:	4b03      	ldr	r3, [pc, #12]	; (800239c <LL_FLASH_GetSTCompanyID+0x14>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	0a1b      	lsrs	r3, r3, #8
}
 8002392:	4618      	mov	r0, r3
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr
 800239c:	1fff7584 	.word	0x1fff7584

080023a0 <APP_BLE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 80023a0:	b5b0      	push	{r4, r5, r7, lr}
 80023a2:	b08c      	sub	sp, #48	; 0x30
 80023a4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 80023a6:	4b18      	ldr	r3, [pc, #96]	; (8002408 <APP_BLE_Init+0x68>)
 80023a8:	463c      	mov	r4, r7
 80023aa:	461d      	mov	r5, r3
 80023ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023b4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80023b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 80023bc:	f000 f860 	bl	8002480 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 80023c0:	2101      	movs	r1, #1
 80023c2:	2002      	movs	r0, #2
 80023c4:	f006 fad6 	bl	8008974 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 80023c8:	4a10      	ldr	r2, [pc, #64]	; (800240c <APP_BLE_Init+0x6c>)
 80023ca:	2100      	movs	r1, #0
 80023cc:	2002      	movs	r0, #2
 80023ce:	f006 fbe5 	bl	8008b9c <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  if (SHCI_C2_BLE_Init( &ble_init_cmd_packet ) != SHCI_Success)
 80023d2:	463b      	mov	r3, r7
 80023d4:	4618      	mov	r0, r3
 80023d6:	f005 fd31 	bl	8007e3c <SHCI_C2_BLE_Init>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <APP_BLE_Init+0x44>
  {
    Error_Handler();
 80023e0:	f7ff fcda 	bl	8001d98 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 80023e4:	f000 f862 	bl	80024ac <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 80023e8:	f005 ff02 	bl	80081f0 <SVCCTL_Init>

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_BEACON_UPDATE_REQ_ID, UTIL_SEQ_RFU, Beacon_Update);
 80023ec:	4a08      	ldr	r2, [pc, #32]	; (8002410 <APP_BLE_Init+0x70>)
 80023ee:	2100      	movs	r1, #0
 80023f0:	2001      	movs	r0, #1
 80023f2:	f006 fbd3 	bl	8008b9c <UTIL_SEQ_RegTask>
    APP_DBG_MSG("Eddystone TLM beacon advertise\n");
    EddystoneTLM_Process();
  }
  else if (CFG_BEACON_TYPE & CFG_IBEACON)
  {
    APP_DBG_MSG("Ibeacon advertise\n");
 80023f6:	4807      	ldr	r0, [pc, #28]	; (8002414 <APP_BLE_Init+0x74>)
 80023f8:	f007 fa76 	bl	80098e8 <puts>
    IBeacon_Process();
 80023fc:	f000 fa7a 	bl	80028f4 <IBeacon_Process>
  }
/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 8002400:	bf00      	nop
}
 8002402:	3730      	adds	r7, #48	; 0x30
 8002404:	46bd      	mov	sp, r7
 8002406:	bdb0      	pop	{r4, r5, r7, pc}
 8002408:	0800a1e0 	.word	0x0800a1e0
 800240c:	08007b09 	.word	0x08007b09
 8002410:	08002599 	.word	0x08002599
 8002414:	0800a1cc 	.word	0x0800a1cc

08002418 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 8002418:	b480      	push	{r7}
 800241a:	b087      	sub	sp, #28
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blecore_aci *blecore_evt;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3301      	adds	r3, #1
 8002424:	617b      	str	r3, [r7, #20]

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  switch (event_pckt->evt)
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	2bff      	cmp	r3, #255	; 0xff
 800242c:	d00e      	beq.n	800244c <SVCCTL_App_Notification+0x34>
 800242e:	2bff      	cmp	r3, #255	; 0xff
 8002430:	dc19      	bgt.n	8002466 <SVCCTL_App_Notification+0x4e>
 8002432:	2b05      	cmp	r3, #5
 8002434:	d019      	beq.n	800246a <SVCCTL_App_Notification+0x52>
 8002436:	2b3e      	cmp	r3, #62	; 0x3e
 8002438:	d000      	beq.n	800243c <SVCCTL_App_Notification+0x24>

      default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800243a:	e014      	b.n	8002466 <SVCCTL_App_Notification+0x4e>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	3302      	adds	r3, #2
 8002440:	60fb      	str	r3, [r7, #12]
      switch (meta_evt->subevent)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	2b01      	cmp	r3, #1
          break;
 8002448:	bf00      	nop
    break; /* HCI_LE_META_EVT_CODE */
 800244a:	e011      	b.n	8002470 <SVCCTL_App_Notification+0x58>
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	3302      	adds	r3, #2
 8002450:	613b      	str	r3, [r7, #16]
      switch (blecore_evt->ecode)
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	881b      	ldrh	r3, [r3, #0]
 8002456:	b29b      	uxth	r3, r3
 8002458:	461a      	mov	r2, r3
 800245a:	f240 4307 	movw	r3, #1031	; 0x407
 800245e:	429a      	cmp	r2, r3
 8002460:	d105      	bne.n	800246e <SVCCTL_App_Notification+0x56>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8002462:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8002464:	e003      	b.n	800246e <SVCCTL_App_Notification+0x56>
      break;
 8002466:	bf00      	nop
 8002468:	e002      	b.n	8002470 <SVCCTL_App_Notification+0x58>
    break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800246a:	bf00      	nop
 800246c:	e000      	b.n	8002470 <SVCCTL_App_Notification+0x58>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800246e:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8002470:	2301      	movs	r3, #1
}
 8002472:	4618      	mov	r0, r3
 8002474:	371c      	adds	r7, #28
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
	...

08002480 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8002486:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <Ble_Tl_Init+0x20>)
 8002488:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800248a:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <Ble_Tl_Init+0x24>)
 800248c:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800248e:	463b      	mov	r3, r7
 8002490:	4619      	mov	r1, r3
 8002492:	4805      	ldr	r0, [pc, #20]	; (80024a8 <Ble_Tl_Init+0x28>)
 8002494:	f005 fb1c 	bl	8007ad0 <hci_init>

  return;
 8002498:	bf00      	nop
}
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	20030028 	.word	0x20030028
 80024a4:	08002701 	.word	0x08002701
 80024a8:	080026c9 	.word	0x080026c9

080024ac <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 80024ac:	b5b0      	push	{r4, r5, r7, lr}
 80024ae:	b08a      	sub	sp, #40	; 0x28
 80024b0:	af02      	add	r7, sp, #8

  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 80024b2:	2300      	movs	r3, #0
 80024b4:	803b      	strh	r3, [r7, #0]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 80024b6:	f005 fa8e 	bl	80079d6 <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 80024ba:	f000 f89f 	bl	80025fc <BleGetBdAddress>
 80024be:	61f8      	str	r0, [r7, #28]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 80024c0:	69fa      	ldr	r2, [r7, #28]
 80024c2:	2106      	movs	r1, #6
 80024c4:	2000      	movs	r0, #0
 80024c6:	f005 f9c6 	bl	8007856 <aci_hal_write_config_data>
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 80024ca:	f64e 536e 	movw	r3, #60782	; 0xed6e
 80024ce:	60bb      	str	r3, [r7, #8]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 80024d0:	f7ff ff42 	bl	8002358 <LL_FLASH_GetUDN>
 80024d4:	4603      	mov	r3, r0
 80024d6:	607b      	str	r3, [r7, #4]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 80024d8:	1d3b      	adds	r3, r7, #4
 80024da:	461a      	mov	r2, r3
 80024dc:	2106      	movs	r1, #6
 80024de:	202e      	movs	r0, #46	; 0x2e
 80024e0:	f005 f9b9 	bl	8007856 <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 80024e4:	4a27      	ldr	r2, [pc, #156]	; (8002584 <Ble_Hci_Gap_Gatt_Init+0xd8>)
 80024e6:	2110      	movs	r1, #16
 80024e8:	2018      	movs	r0, #24
 80024ea:	f005 f9b4 	bl	8007856 <aci_hal_write_config_data>

   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 80024ee:	4a26      	ldr	r2, [pc, #152]	; (8002588 <Ble_Hci_Gap_Gatt_Init+0xdc>)
 80024f0:	2110      	movs	r1, #16
 80024f2:	2008      	movs	r0, #8
 80024f4:	f005 f9af 	bl	8007856 <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 80024f8:	2118      	movs	r1, #24
 80024fa:	2001      	movs	r0, #1
 80024fc:	f005 fa14 	bl	8007928 <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 8002500:	f005 f8fd 	bl	80076fe <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 8002504:	2300      	movs	r3, #0
 8002506:	76fb      	strb	r3, [r7, #27]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8002508:	7efb      	ldrb	r3, [r7, #27]
 800250a:	f043 0301 	orr.w	r3, r3, #1
 800250e:	76fb      	strb	r3, [r7, #27]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 8002510:	7efb      	ldrb	r3, [r7, #27]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d024      	beq.n	8002560 <Ble_Hci_Gap_Gatt_Init+0xb4>
  {
    const char *name = "BEACON";
 8002516:	4b1d      	ldr	r3, [pc, #116]	; (800258c <Ble_Hci_Gap_Gatt_Init+0xe0>)
 8002518:	617b      	str	r3, [r7, #20]
    aci_gap_init(role, 0,
 800251a:	f107 0212 	add.w	r2, r7, #18
 800251e:	7ef8      	ldrb	r0, [r7, #27]
 8002520:	f107 030e 	add.w	r3, r7, #14
 8002524:	9301      	str	r3, [sp, #4]
 8002526:	f107 0310 	add.w	r3, r7, #16
 800252a:	9300      	str	r3, [sp, #0]
 800252c:	4613      	mov	r3, r2
 800252e:	2207      	movs	r2, #7
 8002530:	2100      	movs	r1, #0
 8002532:	f004 ffb3 	bl	800749c <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 8002536:	8a7c      	ldrh	r4, [r7, #18]
 8002538:	8a3d      	ldrh	r5, [r7, #16]
 800253a:	6978      	ldr	r0, [r7, #20]
 800253c:	f7fd fe1e 	bl	800017c <strlen>
 8002540:	4603      	mov	r3, r0
 8002542:	b2da      	uxtb	r2, r3
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	9300      	str	r3, [sp, #0]
 8002548:	4613      	mov	r3, r2
 800254a:	2200      	movs	r2, #0
 800254c:	4629      	mov	r1, r5
 800254e:	4620      	mov	r0, r4
 8002550:	f005 f8fa 	bl	8007748 <aci_gatt_update_char_value>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d002      	beq.n	8002560 <Ble_Hci_Gap_Gatt_Init+0xb4>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
 800255a:	480d      	ldr	r0, [pc, #52]	; (8002590 <Ble_Hci_Gap_Gatt_Init+0xe4>)
 800255c:	f007 f9c4 	bl	80098e8 <puts>
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 8002560:	8a78      	ldrh	r0, [r7, #18]
 8002562:	89f9      	ldrh	r1, [r7, #14]
 8002564:	463b      	mov	r3, r7
 8002566:	9300      	str	r3, [sp, #0]
 8002568:	2302      	movs	r3, #2
 800256a:	2200      	movs	r2, #0
 800256c:	f005 f8ec 	bl	8007748 <aci_gatt_update_char_value>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d002      	beq.n	800257c <Ble_Hci_Gap_Gatt_Init+0xd0>
                                gap_appearance_char_handle,
                                0,
                                2,
                                (uint8_t *)&appearance))
  {
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
 8002576:	4807      	ldr	r0, [pc, #28]	; (8002594 <Ble_Hci_Gap_Gatt_Init+0xe8>)
 8002578:	f007 f9b6 	bl	80098e8 <puts>
  }
}
 800257c:	bf00      	nop
 800257e:	3720      	adds	r7, #32
 8002580:	46bd      	mov	sp, r7
 8002582:	bdb0      	pop	{r4, r5, r7, pc}
 8002584:	0800a3d0 	.word	0x0800a3d0
 8002588:	0800a3e0 	.word	0x0800a3e0
 800258c:	0800a210 	.word	0x0800a210
 8002590:	0800a218 	.word	0x0800a218
 8002594:	0800a248 	.word	0x0800a248

08002598 <Beacon_Update>:
static void Beacon_Update( void )
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
  FLASH_EraseInitTypeDef erase;
  uint32_t pageError = 0;
 800259e:	2300      	movs	r3, #0
 80025a0:	603b      	str	r3, [r7, #0]

  if(sector_type != 0)
 80025a2:	4b13      	ldr	r3, [pc, #76]	; (80025f0 <Beacon_Update+0x58>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d01b      	beq.n	80025e2 <Beacon_Update+0x4a>
  {
    erase.TypeErase = FLASH_TYPEERASE_PAGES;
 80025aa:	2302      	movs	r3, #2
 80025ac:	607b      	str	r3, [r7, #4]
    erase.Page      = sector_type;
 80025ae:	4b10      	ldr	r3, [pc, #64]	; (80025f0 <Beacon_Update+0x58>)
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	60bb      	str	r3, [r7, #8]
    if(sector_type == APP_SECTORS)
 80025b4:	4b0e      	ldr	r3, [pc, #56]	; (80025f0 <Beacon_Update+0x58>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	2b07      	cmp	r3, #7
 80025ba:	d102      	bne.n	80025c2 <Beacon_Update+0x2a>
    {
      erase.NbPages = 2;  /* 2 sectors for beacon application */
 80025bc:	2302      	movs	r3, #2
 80025be:	60fb      	str	r3, [r7, #12]
 80025c0:	e001      	b.n	80025c6 <Beacon_Update+0x2e>
    }
    else
    {
      erase.NbPages = 1; /* 1 sector for beacon user data */
 80025c2:	2301      	movs	r3, #1
 80025c4:	60fb      	str	r3, [r7, #12]
    }

    HAL_FLASH_Unlock();
 80025c6:	f001 fb1b 	bl	8003c00 <HAL_FLASH_Unlock>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_WRPERR | FLASH_FLAG_OPTVERR);
 80025ca:	4b0a      	ldr	r3, [pc, #40]	; (80025f4 <Beacon_Update+0x5c>)
 80025cc:	f248 0211 	movw	r2, #32785	; 0x8011
 80025d0:	611a      	str	r2, [r3, #16]

    HAL_FLASHEx_Erase(&erase, &pageError);
 80025d2:	463a      	mov	r2, r7
 80025d4:	1d3b      	adds	r3, r7, #4
 80025d6:	4611      	mov	r1, r2
 80025d8:	4618      	mov	r0, r3
 80025da:	f001 fbaf 	bl	8003d3c <HAL_FLASHEx_Erase>

    HAL_FLASH_Lock();
 80025de:	f001 fb31 	bl	8003c44 <HAL_FLASH_Lock>
  }

  *(uint32_t*) SRAM1_BASE = BOOT_MODE_AND_SECTOR;
 80025e2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80025e6:	4a04      	ldr	r2, [pc, #16]	; (80025f8 <Beacon_Update+0x60>)
 80025e8:	601a      	str	r2, [r3, #0]
  /**
   * Boot Mode:    1 (OTA)
   * Sector Index: 6
   * Nb Sectors  : 1
   */
  NVIC_SystemReset();
 80025ea:	f7ff fe9f 	bl	800232c <__NVIC_SystemReset>
 80025ee:	bf00      	nop
 80025f0:	200001ae 	.word	0x200001ae
 80025f4:	58004000 	.word	0x58004000
 80025f8:	00010601 	.word	0x00010601

080025fc <BleGetBdAddress>:
}

const uint8_t* BleGetBdAddress( void )
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8002602:	f7ff fea9 	bl	8002358 <LL_FLASH_GetUDN>
 8002606:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800260e:	d023      	beq.n	8002658 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8002610:	f7ff feba 	bl	8002388 <LL_FLASH_GetSTCompanyID>
 8002614:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8002616:	f7ff feab 	bl	8002370 <LL_FLASH_GetDeviceID>
 800261a:	6078      	str	r0, [r7, #4]
 * bit[23:16] : Device ID.
 * bit[15:0] : The last 16bits from the UDN
 * Note: In order to use the Public Address in a final product, a dedicated
 * 24bits company ID (OUI) shall be bought.
 */
    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	b2da      	uxtb	r2, r3
 8002620:	4b16      	ldr	r3, [pc, #88]	; (800267c <BleGetBdAddress+0x80>)
 8002622:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	0a1b      	lsrs	r3, r3, #8
 8002628:	b2da      	uxtb	r2, r3
 800262a:	4b14      	ldr	r3, [pc, #80]	; (800267c <BleGetBdAddress+0x80>)
 800262c:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)device_id;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	b2da      	uxtb	r2, r3
 8002632:	4b12      	ldr	r3, [pc, #72]	; (800267c <BleGetBdAddress+0x80>)
 8002634:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)(company_id & 0x000000FF);
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	b2da      	uxtb	r2, r3
 800263a:	4b10      	ldr	r3, [pc, #64]	; (800267c <BleGetBdAddress+0x80>)
 800263c:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	0a1b      	lsrs	r3, r3, #8
 8002642:	b2da      	uxtb	r2, r3
 8002644:	4b0d      	ldr	r3, [pc, #52]	; (800267c <BleGetBdAddress+0x80>)
 8002646:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x00FF0000) >> 16 );
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	0c1b      	lsrs	r3, r3, #16
 800264c:	b2da      	uxtb	r2, r3
 800264e:	4b0b      	ldr	r3, [pc, #44]	; (800267c <BleGetBdAddress+0x80>)
 8002650:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 8002652:	4b0a      	ldr	r3, [pc, #40]	; (800267c <BleGetBdAddress+0x80>)
 8002654:	617b      	str	r3, [r7, #20]
 8002656:	e00b      	b.n	8002670 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 8002658:	2000      	movs	r0, #0
 800265a:	f006 f951 	bl	8008900 <OTP_Read>
 800265e:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d002      	beq.n	800266c <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	617b      	str	r3, [r7, #20]
 800266a:	e001      	b.n	8002670 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 800266c:	4b04      	ldr	r3, [pc, #16]	; (8002680 <BleGetBdAddress+0x84>)
 800266e:	617b      	str	r3, [r7, #20]
    }
  }

  return bd_addr;
 8002670:	697b      	ldr	r3, [r7, #20]
}
 8002672:	4618      	mov	r0, r3
 8002674:	3718      	adds	r7, #24
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	200001a8 	.word	0x200001a8
 8002680:	0800a3c8 	.word	0x0800a3c8

08002684 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800268c:	2100      	movs	r1, #0
 800268e:	2002      	movs	r0, #2
 8002690:	f006 faa6 	bl	8008be0 <UTIL_SEQ_SetTask>
  return;
 8002694:	bf00      	nop
}
 8002696:	3708      	adds	r7, #8
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80026a4:	2001      	movs	r0, #1
 80026a6:	f006 fb07 	bl	8008cb8 <UTIL_SEQ_SetEvt>
  return;
 80026aa:	bf00      	nop
}
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b082      	sub	sp, #8
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80026ba:	2001      	movs	r0, #1
 80026bc:	f006 fb1c 	bl	8008cf8 <UTIL_SEQ_WaitEvt>
  return;
 80026c0:	bf00      	nop
}
 80026c2:	3708      	adds	r7, #8
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	3308      	adds	r3, #8
 80026da:	4618      	mov	r0, r3
 80026dc:	f005 fdbe 	bl	800825c <SVCCTL_UserEvtRx>
 80026e0:	4603      	mov	r3, r0
 80026e2:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 80026e4:	7afb      	ldrb	r3, [r7, #11]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d003      	beq.n	80026f2 <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2201      	movs	r2, #1
 80026ee:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 80026f0:	e002      	b.n	80026f8 <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2200      	movs	r2, #0
 80026f6:	701a      	strb	r2, [r3, #0]
}
 80026f8:	bf00      	nop
 80026fa:	3710      	adds	r7, #16
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	4603      	mov	r3, r0
 8002708:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 800270a:	79fb      	ldrb	r3, [r7, #7]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d002      	beq.n	8002716 <BLE_StatusNot+0x16>
 8002710:	2b01      	cmp	r3, #1
 8002712:	d006      	beq.n	8002722 <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 8002714:	e00b      	b.n	800272e <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8002716:	2303      	movs	r3, #3
 8002718:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f006 fa8c 	bl	8008c38 <UTIL_SEQ_PauseTask>
      break;
 8002720:	e005      	b.n	800272e <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8002722:	2303      	movs	r3, #3
 8002724:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	f006 faa6 	bl	8008c78 <UTIL_SEQ_ResumeTask>
      break;
 800272c:	bf00      	nop
  }
  return;
 800272e:	bf00      	nop
}
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
	...

08002738 <IBeacon_Init>:
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/

static tBleStatus IBeacon_Init(IBeacon_InitTypeDef *IBeacon_Init)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b094      	sub	sp, #80	; 0x50
 800273c:	af08      	add	r7, sp, #32
 800273e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN IBeacon_Init_1 */

/* USER CODE END IBeacon_Init_1 */
  tBleStatus ret = BLE_STATUS_SUCCESS;
 8002740:	2300      	movs	r3, #0
 8002742:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint16_t AdvertisingInterval = (IBeacon_Init->AdvertisingInterval * ADVERTISING_INTERVAL_INCREMENT / 10);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	881b      	ldrh	r3, [r3, #0]
 800274a:	011b      	lsls	r3, r3, #4
 800274c:	4a67      	ldr	r2, [pc, #412]	; (80028ec <IBeacon_Init+0x1b4>)
 800274e:	fb82 1203 	smull	r1, r2, r2, r3
 8002752:	1092      	asrs	r2, r2, #2
 8002754:	17db      	asrs	r3, r3, #31
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* Disable scan response. */
  hci_le_set_scan_response_data(0, NULL);
 800275a:	2100      	movs	r1, #0
 800275c:	2000      	movs	r0, #0
 800275e:	f005 f95e 	bl	8007a1e <hci_le_set_scan_response_data>

  /* Put the device in a non-connectable mode. */
  ret = aci_gap_set_discoverable(ADV_NONCONN_IND,                          /*< Advertise as non-connectable, undirected. */
 8002762:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002764:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8002766:	2300      	movs	r3, #0
 8002768:	9306      	str	r3, [sp, #24]
 800276a:	2300      	movs	r3, #0
 800276c:	9305      	str	r3, [sp, #20]
 800276e:	2300      	movs	r3, #0
 8002770:	9304      	str	r3, [sp, #16]
 8002772:	2300      	movs	r3, #0
 8002774:	9303      	str	r3, [sp, #12]
 8002776:	2300      	movs	r3, #0
 8002778:	9302      	str	r3, [sp, #8]
 800277a:	2300      	movs	r3, #0
 800277c:	9301      	str	r3, [sp, #4]
 800277e:	2300      	movs	r3, #0
 8002780:	9300      	str	r3, [sp, #0]
 8002782:	2300      	movs	r3, #0
 8002784:	2003      	movs	r0, #3
 8002786:	f004 fdab 	bl	80072e0 <aci_gap_set_discoverable>
 800278a:	4603      	mov	r3, r0
 800278c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                 PUBLIC_ADDR, NO_WHITE_LIST_USE,           /*< Use the public address, with no white list. */
                                 0, NULL,                                  /*< Do not use a local name. */
                                 0, NULL,                                  /*< Do not include the service UUID list. */
                                 0, 0);                                    /*< Do not set a slave connection interval. */

  if (ret != BLE_STATUS_SUCCESS)
 8002790:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002794:	2b00      	cmp	r3, #0
 8002796:	d002      	beq.n	800279e <IBeacon_Init+0x66>
  {
    return ret;
 8002798:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800279c:	e0a1      	b.n	80028e2 <IBeacon_Init+0x1aa>
  }

  /* Remove the TX power level advertisement (this is done to decrease the packet size). */
  ret = aci_gap_delete_ad_type(AD_TYPE_TX_POWER_LEVEL);
 800279e:	200a      	movs	r0, #10
 80027a0:	f004 ff63 	bl	800766a <aci_gap_delete_ad_type>
 80027a4:	4603      	mov	r3, r0
 80027a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (ret != BLE_STATUS_SUCCESS)
 80027aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d002      	beq.n	80027b8 <IBeacon_Init+0x80>
  {
    return ret;
 80027b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80027b6:	e094      	b.n	80028e2 <IBeacon_Init+0x1aa>
  }

  uint8_t service_data[] =
 80027b8:	231a      	movs	r3, #26
 80027ba:	743b      	strb	r3, [r7, #16]
 80027bc:	23ff      	movs	r3, #255	; 0xff
 80027be:	747b      	strb	r3, [r7, #17]
 80027c0:	234c      	movs	r3, #76	; 0x4c
 80027c2:	74bb      	strb	r3, [r7, #18]
 80027c4:	2300      	movs	r3, #0
 80027c6:	74fb      	strb	r3, [r7, #19]
 80027c8:	2302      	movs	r3, #2
 80027ca:	753b      	strb	r3, [r7, #20]
 80027cc:	2315      	movs	r3, #21
 80027ce:	757b      	strb	r3, [r7, #21]
  {
    26,                                                                      /*< Length. */
    AD_TYPE_MANUFACTURER_SPECIFIC_DATA,                                      /*< Manufacturer Specific Data data type value. */
    0x4C, 0x00, 0x02, 0x15,                                                  /*< 32-bit Manufacturer Data. */
    IBeacon_Init->UuID[0],                                                   /*< 16-byte Proximity UUID. */
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	781b      	ldrb	r3, [r3, #0]
  uint8_t service_data[] =
 80027d6:	75bb      	strb	r3, [r7, #22]
    IBeacon_Init->UuID[1],
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 80027dc:	785b      	ldrb	r3, [r3, #1]
 80027de:	75fb      	strb	r3, [r7, #23]
    IBeacon_Init->UuID[2],
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 80027e4:	789b      	ldrb	r3, [r3, #2]
 80027e6:	763b      	strb	r3, [r7, #24]
    IBeacon_Init->UuID[3],
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 80027ec:	78db      	ldrb	r3, [r3, #3]
 80027ee:	767b      	strb	r3, [r7, #25]
    IBeacon_Init->UuID[4],
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 80027f4:	791b      	ldrb	r3, [r3, #4]
 80027f6:	76bb      	strb	r3, [r7, #26]
    IBeacon_Init->UuID[5],
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 80027fc:	795b      	ldrb	r3, [r3, #5]
 80027fe:	76fb      	strb	r3, [r7, #27]
    IBeacon_Init->UuID[6],
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8002804:	799b      	ldrb	r3, [r3, #6]
 8002806:	773b      	strb	r3, [r7, #28]
    IBeacon_Init->UuID[7],
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 800280c:	79db      	ldrb	r3, [r3, #7]
 800280e:	777b      	strb	r3, [r7, #29]
    IBeacon_Init->UuID[8],
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8002814:	7a1b      	ldrb	r3, [r3, #8]
 8002816:	77bb      	strb	r3, [r7, #30]
    IBeacon_Init->UuID[9],
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 800281c:	7a5b      	ldrb	r3, [r3, #9]
 800281e:	77fb      	strb	r3, [r7, #31]
    IBeacon_Init->UuID[10],
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8002824:	7a9b      	ldrb	r3, [r3, #10]
 8002826:	f887 3020 	strb.w	r3, [r7, #32]
    IBeacon_Init->UuID[11],
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 800282e:	7adb      	ldrb	r3, [r3, #11]
 8002830:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    IBeacon_Init->UuID[12],
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8002838:	7b1b      	ldrb	r3, [r3, #12]
 800283a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    IBeacon_Init->UuID[13],
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8002842:	7b5b      	ldrb	r3, [r3, #13]
 8002844:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    IBeacon_Init->UuID[14],
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 800284c:	7b9b      	ldrb	r3, [r3, #14]
 800284e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    IBeacon_Init->UuID[15],
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8002856:	7bdb      	ldrb	r3, [r3, #15]
 8002858:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    IBeacon_Init->MajorID[0],                                                /*< 2-byte Major. */
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	781b      	ldrb	r3, [r3, #0]
  uint8_t service_data[] =
 8002862:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    IBeacon_Init->MajorID[1],
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	689b      	ldr	r3, [r3, #8]
  uint8_t service_data[] =
 800286a:	785b      	ldrb	r3, [r3, #1]
 800286c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    IBeacon_Init->MinorID[0],                                                /*< 2-byte Minor. */
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	781b      	ldrb	r3, [r3, #0]
  uint8_t service_data[] =
 8002876:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    IBeacon_Init->MinorID[1],
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68db      	ldr	r3, [r3, #12]
  uint8_t service_data[] =
 800287e:	785b      	ldrb	r3, [r3, #1]
 8002880:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    IBeacon_Init->CalibratedTxPower,                                         /*< Ranging data. */
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	7c1b      	ldrb	r3, [r3, #16]
  uint8_t service_data[] =
 8002888:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  };

  uint8_t flags[] =
 800288c:	4a18      	ldr	r2, [pc, #96]	; (80028f0 <IBeacon_Init+0x1b8>)
 800288e:	f107 030c 	add.w	r3, r7, #12
 8002892:	6812      	ldr	r2, [r2, #0]
 8002894:	4611      	mov	r1, r2
 8002896:	8019      	strh	r1, [r3, #0]
 8002898:	3302      	adds	r3, #2
 800289a:	0c12      	lsrs	r2, r2, #16
 800289c:	701a      	strb	r2, [r3, #0]
    AD_TYPE_FLAGS,                                                          /*< Flags data type value. */
    (FLAG_BIT_LE_GENERAL_DISCOVERABLE_MODE | FLAG_BIT_BR_EDR_NOT_SUPPORTED) /*< BLE general discoverable, without BR/EDR support. */
  };

  /* Update the service data. */
  ret = aci_gap_update_adv_data(sizeof(service_data), service_data);
 800289e:	f107 0310 	add.w	r3, r7, #16
 80028a2:	4619      	mov	r1, r3
 80028a4:	201b      	movs	r0, #27
 80028a6:	f004 fe84 	bl	80075b2 <aci_gap_update_adv_data>
 80028aa:	4603      	mov	r3, r0
 80028ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (ret != BLE_STATUS_SUCCESS)
 80028b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d002      	beq.n	80028be <IBeacon_Init+0x186>
  {
    return ret;
 80028b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80028bc:	e011      	b.n	80028e2 <IBeacon_Init+0x1aa>
  }

  /* Update the adverstising flags. */
  ret = aci_gap_update_adv_data(sizeof(flags), flags);
 80028be:	f107 030c 	add.w	r3, r7, #12
 80028c2:	4619      	mov	r1, r3
 80028c4:	2003      	movs	r0, #3
 80028c6:	f004 fe74 	bl	80075b2 <aci_gap_update_adv_data>
 80028ca:	4603      	mov	r3, r0
 80028cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (ret != BLE_STATUS_SUCCESS)
 80028d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d002      	beq.n	80028de <IBeacon_Init+0x1a6>
  {
    return ret;
 80028d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80028dc:	e001      	b.n	80028e2 <IBeacon_Init+0x1aa>
  }
/* USER CODE BEGIN IBeacon_Init_2 */

/* USER CODE END IBeacon_Init_2 */
  return ret;
 80028de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3730      	adds	r7, #48	; 0x30
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	66666667 	.word	0x66666667
 80028f0:	0800a278 	.word	0x0800a278

080028f4 <IBeacon_Process>:

void IBeacon_Process(void)
{
 80028f4:	b590      	push	{r4, r7, lr}
 80028f6:	b08d      	sub	sp, #52	; 0x34
 80028f8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN IBeacon_Process_1 */

/* USER CODE END IBeacon_Process_1 */
  /* Default ibeacon */
  uint8_t UuID[]    = { UUID };
 80028fa:	4b11      	ldr	r3, [pc, #68]	; (8002940 <IBeacon_Process+0x4c>)
 80028fc:	f107 0420 	add.w	r4, r7, #32
 8002900:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002902:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint8_t MajorID[] = { MAJOR_ID };
 8002906:	f44f 7380 	mov.w	r3, #256	; 0x100
 800290a:	83bb      	strh	r3, [r7, #28]
  uint8_t MinorID[] = { MINOR_ID };
 800290c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002910:	833b      	strh	r3, [r7, #24]

  IBeacon_InitTypeDef IBeacon_InitStruct =
 8002912:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002916:	80bb      	strh	r3, [r7, #4]
 8002918:	f107 0320 	add.w	r3, r7, #32
 800291c:	60bb      	str	r3, [r7, #8]
 800291e:	f107 031c 	add.w	r3, r7, #28
 8002922:	60fb      	str	r3, [r7, #12]
 8002924:	f107 0318 	add.w	r3, r7, #24
 8002928:	613b      	str	r3, [r7, #16]
 800292a:	23c1      	movs	r3, #193	; 0xc1
 800292c:	753b      	strb	r3, [r7, #20]
    data_address += 2;
    IBeacon_InitStruct.CalibratedTxPower = *(uint8_t *)(data_address);
  }
#endif

  IBeacon_Init(&IBeacon_InitStruct);
 800292e:	1d3b      	adds	r3, r7, #4
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff ff01 	bl	8002738 <IBeacon_Init>
/* USER CODE BEGIN IBeacon_Process_2 */

/* USER CODE END IBeacon_Process_2 */
}
 8002936:	bf00      	nop
 8002938:	3734      	adds	r7, #52	; 0x34
 800293a:	46bd      	mov	sp, r7
 800293c:	bd90      	pop	{r4, r7, pc}
 800293e:	bf00      	nop
 8002940:	0800a27c 	.word	0x0800a27c

08002944 <LL_PWR_EnableBootC2>:
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8002948:	4b05      	ldr	r3, [pc, #20]	; (8002960 <LL_PWR_EnableBootC2+0x1c>)
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	4a04      	ldr	r2, [pc, #16]	; (8002960 <LL_PWR_EnableBootC2+0x1c>)
 800294e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002952:	60d3      	str	r3, [r2, #12]
}
 8002954:	bf00      	nop
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	58000400 	.word	0x58000400

08002964 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800296c:	4b06      	ldr	r3, [pc, #24]	; (8002988 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800296e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8002972:	4905      	ldr	r1, [pc, #20]	; (8002988 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4313      	orrs	r3, r2
 8002978:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr
 8002988:	58000800 	.word	0x58000800

0800298c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8002994:	4b05      	ldr	r3, [pc, #20]	; (80029ac <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002996:	6a1a      	ldr	r2, [r3, #32]
 8002998:	4904      	ldr	r1, [pc, #16]	; (80029ac <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4313      	orrs	r3, r2
 800299e:	620b      	str	r3, [r1, #32]
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr
 80029ac:	58000800 	.word	0x58000800

080029b0 <LL_AHB3_GRP1_EnableClock>:
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80029b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80029c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4013      	ands	r3, r2
 80029d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80029d4:	68fb      	ldr	r3, [r7, #12]
}
 80029d6:	bf00      	nop
 80029d8:	3714      	adds	r7, #20
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr

080029e2 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80029e2:	b480      	push	{r7}
 80029e4:	b085      	sub	sp, #20
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 80029ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ee:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80029f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 80029fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a02:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
}
 8002a0e:	bf00      	nop
 8002a10:	3714      	adds	r7, #20
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr

08002a1a <LL_C1_IPCC_EnableIT_TXF>:
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	b083      	sub	sp, #12
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	601a      	str	r2, [r3, #0]
}
 8002a2e:	bf00      	nop
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr

08002a3a <LL_C1_IPCC_EnableIT_RXO>:
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b083      	sub	sp, #12
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f043 0201 	orr.w	r2, r3, #1
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	601a      	str	r2, [r3, #0]
}
 8002a4e:	bf00      	nop
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr

08002a5a <LL_C1_IPCC_EnableTransmitChannel>:
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b083      	sub	sp, #12
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
 8002a62:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685a      	ldr	r2, [r3, #4]
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	041b      	lsls	r3, r3, #16
 8002a6c:	43db      	mvns	r3, r3
 8002a6e:	401a      	ands	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	605a      	str	r2, [r3, #4]
}
 8002a74:	bf00      	nop
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685a      	ldr	r2, [r3, #4]
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	041b      	lsls	r3, r3, #16
 8002a92:	431a      	orrs	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	605a      	str	r2, [r3, #4]
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <LL_C1_IPCC_EnableReceiveChannel>:
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685a      	ldr	r2, [r3, #4]
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	43db      	mvns	r3, r3
 8002ab6:	401a      	ands	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	605a      	str	r2, [r3, #4]
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	609a      	str	r2, [r3, #8]
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <LL_C1_IPCC_SetFlag_CHx>:
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	041a      	lsls	r2, r3, #16
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	609a      	str	r2, [r3, #8]
}
 8002af6:	bf00      	nop
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr

08002b02 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8002b02:	b480      	push	{r7}
 8002b04:	b083      	sub	sp, #12
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
 8002b0a:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	68da      	ldr	r2, [r3, #12]
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	4013      	ands	r3, r2
 8002b14:	683a      	ldr	r2, [r7, #0]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d101      	bne.n	8002b1e <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e000      	b.n	8002b20 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	69da      	ldr	r2, [r3, #28]
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	683a      	ldr	r2, [r7, #0]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d101      	bne.n	8002b48 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8002b44:	2301      	movs	r3, #1
 8002b46:	e000      	b.n	8002b4a <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
	...

08002b58 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8002b5c:	2102      	movs	r1, #2
 8002b5e:	4819      	ldr	r0, [pc, #100]	; (8002bc4 <HW_IPCC_Rx_Handler+0x6c>)
 8002b60:	f7ff ffe4 	bl	8002b2c <LL_C2_IPCC_IsActiveFlag_CHx>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d009      	beq.n	8002b7e <HW_IPCC_Rx_Handler+0x26>
 8002b6a:	4b16      	ldr	r3, [pc, #88]	; (8002bc4 <HW_IPCC_Rx_Handler+0x6c>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	43db      	mvns	r3, r3
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d002      	beq.n	8002b7e <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8002b78:	f000 f8ea 	bl	8002d50 <HW_IPCC_SYS_EvtHandler>
 8002b7c:	e01f      	b.n	8002bbe <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8002b7e:	2101      	movs	r1, #1
 8002b80:	4810      	ldr	r0, [pc, #64]	; (8002bc4 <HW_IPCC_Rx_Handler+0x6c>)
 8002b82:	f7ff ffd3 	bl	8002b2c <LL_C2_IPCC_IsActiveFlag_CHx>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d008      	beq.n	8002b9e <HW_IPCC_Rx_Handler+0x46>
 8002b8c:	4b0d      	ldr	r3, [pc, #52]	; (8002bc4 <HW_IPCC_Rx_Handler+0x6c>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d102      	bne.n	8002b9e <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 8002b98:	f000 f89e 	bl	8002cd8 <HW_IPCC_BLE_EvtHandler>
 8002b9c:	e00f      	b.n	8002bbe <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8002b9e:	2108      	movs	r1, #8
 8002ba0:	4808      	ldr	r0, [pc, #32]	; (8002bc4 <HW_IPCC_Rx_Handler+0x6c>)
 8002ba2:	f7ff ffc3 	bl	8002b2c <LL_C2_IPCC_IsActiveFlag_CHx>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d009      	beq.n	8002bc0 <HW_IPCC_Rx_Handler+0x68>
 8002bac:	4b05      	ldr	r3, [pc, #20]	; (8002bc4 <HW_IPCC_Rx_Handler+0x6c>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	f003 0308 	and.w	r3, r3, #8
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d002      	beq.n	8002bc0 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 8002bba:	f000 f915 	bl	8002de8 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8002bbe:	bf00      	nop
 8002bc0:	bf00      	nop
}
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	58000c00 	.word	0x58000c00

08002bc8 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8002bcc:	2102      	movs	r1, #2
 8002bce:	4822      	ldr	r0, [pc, #136]	; (8002c58 <HW_IPCC_Tx_Handler+0x90>)
 8002bd0:	f7ff ff97 	bl	8002b02 <LL_C1_IPCC_IsActiveFlag_CHx>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d109      	bne.n	8002bee <HW_IPCC_Tx_Handler+0x26>
 8002bda:	4b1f      	ldr	r3, [pc, #124]	; (8002c58 <HW_IPCC_Tx_Handler+0x90>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	43db      	mvns	r3, r3
 8002be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d002      	beq.n	8002bee <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8002be8:	f000 f8a6 	bl	8002d38 <HW_IPCC_SYS_CmdEvtHandler>
 8002bec:	e031      	b.n	8002c52 <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8002bee:	2102      	movs	r1, #2
 8002bf0:	4819      	ldr	r0, [pc, #100]	; (8002c58 <HW_IPCC_Tx_Handler+0x90>)
 8002bf2:	f7ff ff86 	bl	8002b02 <LL_C1_IPCC_IsActiveFlag_CHx>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d109      	bne.n	8002c10 <HW_IPCC_Tx_Handler+0x48>
 8002bfc:	4b16      	ldr	r3, [pc, #88]	; (8002c58 <HW_IPCC_Tx_Handler+0x90>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	43db      	mvns	r3, r3
 8002c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d002      	beq.n	8002c10 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8002c0a:	f000 f895 	bl	8002d38 <HW_IPCC_SYS_CmdEvtHandler>
 8002c0e:	e020      	b.n	8002c52 <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8002c10:	2108      	movs	r1, #8
 8002c12:	4811      	ldr	r0, [pc, #68]	; (8002c58 <HW_IPCC_Tx_Handler+0x90>)
 8002c14:	f7ff ff75 	bl	8002b02 <LL_C1_IPCC_IsActiveFlag_CHx>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d109      	bne.n	8002c32 <HW_IPCC_Tx_Handler+0x6a>
 8002c1e:	4b0e      	ldr	r3, [pc, #56]	; (8002c58 <HW_IPCC_Tx_Handler+0x90>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	43db      	mvns	r3, r3
 8002c24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d002      	beq.n	8002c32 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 8002c2c:	f000 f8be 	bl	8002dac <HW_IPCC_MM_FreeBufHandler>
 8002c30:	e00f      	b.n	8002c52 <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8002c32:	2120      	movs	r1, #32
 8002c34:	4808      	ldr	r0, [pc, #32]	; (8002c58 <HW_IPCC_Tx_Handler+0x90>)
 8002c36:	f7ff ff64 	bl	8002b02 <LL_C1_IPCC_IsActiveFlag_CHx>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d109      	bne.n	8002c54 <HW_IPCC_Tx_Handler+0x8c>
 8002c40:	4b05      	ldr	r3, [pc, #20]	; (8002c58 <HW_IPCC_Tx_Handler+0x90>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	43db      	mvns	r3, r3
 8002c46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d002      	beq.n	8002c54 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8002c4e:	f000 f84f 	bl	8002cf0 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8002c52:	bf00      	nop
 8002c54:	bf00      	nop
}
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	58000c00 	.word	0x58000c00

08002c5c <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8002c60:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002c64:	f7ff febd 	bl	80029e2 <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8002c68:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002c6c:	f7ff fe7a 	bl	8002964 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8002c70:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002c74:	f7ff fe8a 	bl	800298c <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8002c78:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8002c7a:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8002c7c:	f7ff fe62 	bl	8002944 <LL_PWR_EnableBootC2>

  return;
 8002c80:	bf00      	nop
}
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8002c88:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002c8c:	f7ff fe90 	bl	80029b0 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8002c90:	4806      	ldr	r0, [pc, #24]	; (8002cac <HW_IPCC_Init+0x28>)
 8002c92:	f7ff fed2 	bl	8002a3a <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8002c96:	4805      	ldr	r0, [pc, #20]	; (8002cac <HW_IPCC_Init+0x28>)
 8002c98:	f7ff febf 	bl	8002a1a <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002c9c:	202c      	movs	r0, #44	; 0x2c
 8002c9e:	f000 fbf8 	bl	8003492 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002ca2:	202d      	movs	r0, #45	; 0x2d
 8002ca4:	f000 fbf5 	bl	8003492 <HAL_NVIC_EnableIRQ>

  return;
 8002ca8:	bf00      	nop
}
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	58000c00 	.word	0x58000c00

08002cb0 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8002cb4:	2101      	movs	r1, #1
 8002cb6:	4802      	ldr	r0, [pc, #8]	; (8002cc0 <HW_IPCC_BLE_Init+0x10>)
 8002cb8:	f7ff fef4 	bl	8002aa4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8002cbc:	bf00      	nop
}
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	58000c00 	.word	0x58000c00

08002cc4 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8002cc8:	2101      	movs	r1, #1
 8002cca:	4802      	ldr	r0, [pc, #8]	; (8002cd4 <HW_IPCC_BLE_SendCmd+0x10>)
 8002ccc:	f7ff ff0a 	bl	8002ae4 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8002cd0:	bf00      	nop
}
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	58000c00 	.word	0x58000c00

08002cd8 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8002cdc:	f005 fba2 	bl	8008424 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8002ce0:	2101      	movs	r1, #1
 8002ce2:	4802      	ldr	r0, [pc, #8]	; (8002cec <HW_IPCC_BLE_EvtHandler+0x14>)
 8002ce4:	f7ff fef0 	bl	8002ac8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8002ce8:	bf00      	nop
}
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	58000c00 	.word	0x58000c00

08002cf0 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8002cf4:	2120      	movs	r1, #32
 8002cf6:	4803      	ldr	r0, [pc, #12]	; (8002d04 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8002cf8:	f7ff fec2 	bl	8002a80 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8002cfc:	f005 fbc2 	bl	8008484 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8002d00:	bf00      	nop
}
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	58000c00 	.word	0x58000c00

08002d08 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8002d0c:	2102      	movs	r1, #2
 8002d0e:	4802      	ldr	r0, [pc, #8]	; (8002d18 <HW_IPCC_SYS_Init+0x10>)
 8002d10:	f7ff fec8 	bl	8002aa4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8002d14:	bf00      	nop
}
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	58000c00 	.word	0x58000c00

08002d1c <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8002d20:	2102      	movs	r1, #2
 8002d22:	4804      	ldr	r0, [pc, #16]	; (8002d34 <HW_IPCC_SYS_SendCmd+0x18>)
 8002d24:	f7ff fede 	bl	8002ae4 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8002d28:	2102      	movs	r1, #2
 8002d2a:	4802      	ldr	r0, [pc, #8]	; (8002d34 <HW_IPCC_SYS_SendCmd+0x18>)
 8002d2c:	f7ff fe95 	bl	8002a5a <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8002d30:	bf00      	nop
}
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	58000c00 	.word	0x58000c00

08002d38 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8002d3c:	2102      	movs	r1, #2
 8002d3e:	4803      	ldr	r0, [pc, #12]	; (8002d4c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8002d40:	f7ff fe9e 	bl	8002a80 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8002d44:	f005 fbee 	bl	8008524 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8002d48:	bf00      	nop
}
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	58000c00 	.word	0x58000c00

08002d50 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8002d54:	f005 fbfc 	bl	8008550 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8002d58:	2102      	movs	r1, #2
 8002d5a:	4802      	ldr	r0, [pc, #8]	; (8002d64 <HW_IPCC_SYS_EvtHandler+0x14>)
 8002d5c:	f7ff feb4 	bl	8002ac8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8002d60:	bf00      	nop
}
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	58000c00 	.word	0x58000c00

08002d68 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8002d70:	2108      	movs	r1, #8
 8002d72:	480c      	ldr	r0, [pc, #48]	; (8002da4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8002d74:	f7ff fec5 	bl	8002b02 <LL_C1_IPCC_IsActiveFlag_CHx>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d007      	beq.n	8002d8e <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8002d7e:	4a0a      	ldr	r2, [pc, #40]	; (8002da8 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8002d84:	2108      	movs	r1, #8
 8002d86:	4807      	ldr	r0, [pc, #28]	; (8002da4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8002d88:	f7ff fe67 	bl	8002a5a <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8002d8c:	e006      	b.n	8002d9c <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8002d92:	2108      	movs	r1, #8
 8002d94:	4803      	ldr	r0, [pc, #12]	; (8002da4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8002d96:	f7ff fea5 	bl	8002ae4 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8002d9a:	bf00      	nop
}
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	58000c00 	.word	0x58000c00
 8002da8:	200001b0 	.word	0x200001b0

08002dac <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8002db0:	2108      	movs	r1, #8
 8002db2:	4806      	ldr	r0, [pc, #24]	; (8002dcc <HW_IPCC_MM_FreeBufHandler+0x20>)
 8002db4:	f7ff fe64 	bl	8002a80 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8002db8:	4b05      	ldr	r3, [pc, #20]	; (8002dd0 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8002dbe:	2108      	movs	r1, #8
 8002dc0:	4802      	ldr	r0, [pc, #8]	; (8002dcc <HW_IPCC_MM_FreeBufHandler+0x20>)
 8002dc2:	f7ff fe8f 	bl	8002ae4 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8002dc6:	bf00      	nop
}
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	58000c00 	.word	0x58000c00
 8002dd0:	200001b0 	.word	0x200001b0

08002dd4 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8002dd8:	2108      	movs	r1, #8
 8002dda:	4802      	ldr	r0, [pc, #8]	; (8002de4 <HW_IPCC_TRACES_Init+0x10>)
 8002ddc:	f7ff fe62 	bl	8002aa4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8002de0:	bf00      	nop
}
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	58000c00 	.word	0x58000c00

08002de8 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8002dec:	f005 fc58 	bl	80086a0 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8002df0:	2108      	movs	r1, #8
 8002df2:	4802      	ldr	r0, [pc, #8]	; (8002dfc <HW_IPCC_TRACES_EvtHandler+0x14>)
 8002df4:	f7ff fe68 	bl	8002ac8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8002df8:	bf00      	nop
}
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	58000c00 	.word	0x58000c00

08002e00 <LL_AHB2_GRP1_EnableClock>:
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002e08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002e18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4013      	ands	r3, r2
 8002e22:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002e24:	68fb      	ldr	r3, [r7, #12]
}
 8002e26:	bf00      	nop
 8002e28:	3714      	adds	r7, #20
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
	...

08002e34 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b088      	sub	sp, #32
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8002e3e:	f107 030c 	add.w	r3, r7, #12
 8002e42:	2200      	movs	r2, #0
 8002e44:	601a      	str	r2, [r3, #0]
 8002e46:	605a      	str	r2, [r3, #4]
 8002e48:	609a      	str	r2, [r3, #8]
 8002e4a:	60da      	str	r2, [r3, #12]
 8002e4c:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8002e4e:	2002      	movs	r0, #2
 8002e50:	f7ff ffd6 	bl	8002e00 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8002e54:	79fb      	ldrb	r3, [r7, #7]
 8002e56:	4a12      	ldr	r2, [pc, #72]	; (8002ea0 <BSP_LED_Init+0x6c>)
 8002e58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e5c:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8002e62:	2300      	movs	r3, #0
 8002e64:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e66:	2302      	movs	r3, #2
 8002e68:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8002e6a:	79fb      	ldrb	r3, [r7, #7]
 8002e6c:	4a0d      	ldr	r2, [pc, #52]	; (8002ea4 <BSP_LED_Init+0x70>)
 8002e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e72:	f107 020c 	add.w	r2, r7, #12
 8002e76:	4611      	mov	r1, r2
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f001 f823 	bl	8003ec4 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8002e7e:	79fb      	ldrb	r3, [r7, #7]
 8002e80:	4a08      	ldr	r2, [pc, #32]	; (8002ea4 <BSP_LED_Init+0x70>)
 8002e82:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002e86:	79fb      	ldrb	r3, [r7, #7]
 8002e88:	4a05      	ldr	r2, [pc, #20]	; (8002ea0 <BSP_LED_Init+0x6c>)
 8002e8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	4619      	mov	r1, r3
 8002e92:	f001 f987 	bl	80041a4 <HAL_GPIO_WritePin>
}
 8002e96:	bf00      	nop
 8002e98:	3720      	adds	r7, #32
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	0800a3f0 	.word	0x0800a3f0
 8002ea4:	20000004 	.word	0x20000004

08002ea8 <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	4603      	mov	r3, r0
 8002eb0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8002eb2:	79fb      	ldrb	r3, [r7, #7]
 8002eb4:	4a07      	ldr	r2, [pc, #28]	; (8002ed4 <BSP_LED_On+0x2c>)
 8002eb6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002eba:	79fb      	ldrb	r3, [r7, #7]
 8002ebc:	4a06      	ldr	r2, [pc, #24]	; (8002ed8 <BSP_LED_On+0x30>)
 8002ebe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	f001 f96d 	bl	80041a4 <HAL_GPIO_WritePin>
}
 8002eca:	bf00      	nop
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	20000004 	.word	0x20000004
 8002ed8:	0800a3f0 	.word	0x0800a3f0

08002edc <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b088      	sub	sp, #32
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	460a      	mov	r2, r1
 8002ee6:	71fb      	strb	r3, [r7, #7]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 8002eec:	f107 030c 	add.w	r3, r7, #12
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	605a      	str	r2, [r3, #4]
 8002ef6:	609a      	str	r2, [r3, #8]
 8002ef8:	60da      	str	r2, [r3, #12]
 8002efa:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8002efc:	79fb      	ldrb	r3, [r7, #7]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d103      	bne.n	8002f0a <BSP_PB_Init+0x2e>
 8002f02:	2004      	movs	r0, #4
 8002f04:	f7ff ff7c 	bl	8002e00 <LL_AHB2_GRP1_EnableClock>
 8002f08:	e00c      	b.n	8002f24 <BSP_PB_Init+0x48>
 8002f0a:	79fb      	ldrb	r3, [r7, #7]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d103      	bne.n	8002f18 <BSP_PB_Init+0x3c>
 8002f10:	2008      	movs	r0, #8
 8002f12:	f7ff ff75 	bl	8002e00 <LL_AHB2_GRP1_EnableClock>
 8002f16:	e005      	b.n	8002f24 <BSP_PB_Init+0x48>
 8002f18:	79fb      	ldrb	r3, [r7, #7]
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d102      	bne.n	8002f24 <BSP_PB_Init+0x48>
 8002f1e:	2008      	movs	r0, #8
 8002f20:	f7ff ff6e 	bl	8002e00 <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8002f24:	79bb      	ldrb	r3, [r7, #6]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d117      	bne.n	8002f5a <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8002f2a:	79fb      	ldrb	r3, [r7, #7]
 8002f2c:	4a20      	ldr	r2, [pc, #128]	; (8002fb0 <BSP_PB_Init+0xd4>)
 8002f2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f32:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 8002f34:	2300      	movs	r3, #0
 8002f36:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8002f40:	79fb      	ldrb	r3, [r7, #7]
 8002f42:	4a1c      	ldr	r2, [pc, #112]	; (8002fb4 <BSP_PB_Init+0xd8>)
 8002f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f48:	f107 020c 	add.w	r2, r7, #12
 8002f4c:	4611      	mov	r1, r2
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f000 ffb8 	bl	8003ec4 <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 8002f54:	2001      	movs	r0, #1
 8002f56:	f7fe fefa 	bl	8001d4e <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8002f5a:	79bb      	ldrb	r3, [r7, #6]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d122      	bne.n	8002fa6 <BSP_PB_Init+0xca>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8002f60:	79fb      	ldrb	r3, [r7, #7]
 8002f62:	4a13      	ldr	r2, [pc, #76]	; (8002fb0 <BSP_PB_Init+0xd4>)
 8002f64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f68:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 8002f6e:	4b12      	ldr	r3, [pc, #72]	; (8002fb8 <BSP_PB_Init+0xdc>)
 8002f70:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8002f72:	79fb      	ldrb	r3, [r7, #7]
 8002f74:	4a0f      	ldr	r2, [pc, #60]	; (8002fb4 <BSP_PB_Init+0xd8>)
 8002f76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f7a:	f107 020c 	add.w	r2, r7, #12
 8002f7e:	4611      	mov	r1, r2
 8002f80:	4618      	mov	r0, r3
 8002f82:	f000 ff9f 	bl	8003ec4 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8002f86:	79fb      	ldrb	r3, [r7, #7]
 8002f88:	4a0c      	ldr	r2, [pc, #48]	; (8002fbc <BSP_PB_Init+0xe0>)
 8002f8a:	5cd3      	ldrb	r3, [r2, r3]
 8002f8c:	b25b      	sxtb	r3, r3
 8002f8e:	2200      	movs	r2, #0
 8002f90:	210f      	movs	r1, #15
 8002f92:	4618      	mov	r0, r3
 8002f94:	f000 fa63 	bl	800345e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8002f98:	79fb      	ldrb	r3, [r7, #7]
 8002f9a:	4a08      	ldr	r2, [pc, #32]	; (8002fbc <BSP_PB_Init+0xe0>)
 8002f9c:	5cd3      	ldrb	r3, [r2, r3]
 8002f9e:	b25b      	sxtb	r3, r3
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f000 fa76 	bl	8003492 <HAL_NVIC_EnableIRQ>
  }
}
 8002fa6:	bf00      	nop
 8002fa8:	3720      	adds	r7, #32
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	0800a3f8 	.word	0x0800a3f8
 8002fb4:	20000010 	.word	0x20000010
 8002fb8:	10210000 	.word	0x10210000
 8002fbc:	0800a400 	.word	0x0800a400

08002fc0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8002fc4:	4b26      	ldr	r3, [pc, #152]	; (8003060 <SystemInit+0xa0>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8002fca:	4b25      	ldr	r3, [pc, #148]	; (8003060 <SystemInit+0xa0>)
 8002fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd0:	4a23      	ldr	r2, [pc, #140]	; (8003060 <SystemInit+0xa0>)
 8002fd2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fd6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002fda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fe4:	f043 0301 	orr.w	r3, r3, #1
 8002fe8:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002fea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fee:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002ff2:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002ff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ffe:	4b19      	ldr	r3, [pc, #100]	; (8003064 <SystemInit+0xa4>)
 8003000:	4013      	ands	r3, r2
 8003002:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8003004:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003008:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800300c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003010:	f023 0305 	bic.w	r3, r3, #5
 8003014:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003018:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800301c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003020:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003024:	f023 0301 	bic.w	r3, r3, #1
 8003028:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800302c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003030:	4a0d      	ldr	r2, [pc, #52]	; (8003068 <SystemInit+0xa8>)
 8003032:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8003034:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003038:	4a0b      	ldr	r2, [pc, #44]	; (8003068 <SystemInit+0xa8>)
 800303a:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800303c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003046:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800304a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800304c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003050:	2200      	movs	r2, #0
 8003052:	619a      	str	r2, [r3, #24]
}
 8003054:	bf00      	nop
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	e000ed00 	.word	0xe000ed00
 8003064:	faf6fefb 	.word	0xfaf6fefb
 8003068:	22041000 	.word	0x22041000

0800306c <LL_DBGMCU_EnableDBGSleepMode>:
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003070:	4b05      	ldr	r3, [pc, #20]	; (8003088 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	4a04      	ldr	r2, [pc, #16]	; (8003088 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8003076:	f043 0301 	orr.w	r3, r3, #1
 800307a:	6053      	str	r3, [r2, #4]
}
 800307c:	bf00      	nop
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	e0042000 	.word	0xe0042000

0800308c <LL_DBGMCU_EnableDBGStopMode>:
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003090:	4b05      	ldr	r3, [pc, #20]	; (80030a8 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	4a04      	ldr	r2, [pc, #16]	; (80030a8 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8003096:	f043 0302 	orr.w	r3, r3, #2
 800309a:	6053      	str	r3, [r2, #4]
}
 800309c:	bf00      	nop
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	e0042000 	.word	0xe0042000

080030ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80030b2:	2300      	movs	r3, #0
 80030b4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030b6:	4b0c      	ldr	r3, [pc, #48]	; (80030e8 <HAL_Init+0x3c>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a0b      	ldr	r2, [pc, #44]	; (80030e8 <HAL_Init+0x3c>)
 80030bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030c0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030c2:	2003      	movs	r0, #3
 80030c4:	f000 f9c0 	bl	8003448 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80030c8:	2000      	movs	r0, #0
 80030ca:	f000 f80f 	bl	80030ec <HAL_InitTick>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d002      	beq.n	80030da <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	71fb      	strb	r3, [r7, #7]
 80030d8:	e001      	b.n	80030de <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80030da:	f7fe ff08 	bl	8001eee <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80030de:	79fb      	ldrb	r3, [r7, #7]
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3708      	adds	r7, #8
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	58004000 	.word	0x58004000

080030ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80030f4:	2300      	movs	r3, #0
 80030f6:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80030f8:	4b17      	ldr	r3, [pc, #92]	; (8003158 <HAL_InitTick+0x6c>)
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d024      	beq.n	800314a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003100:	f002 f9de 	bl	80054c0 <HAL_RCC_GetHCLKFreq>
 8003104:	4602      	mov	r2, r0
 8003106:	4b14      	ldr	r3, [pc, #80]	; (8003158 <HAL_InitTick+0x6c>)
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	4619      	mov	r1, r3
 800310c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003110:	fbb3 f3f1 	udiv	r3, r3, r1
 8003114:	fbb2 f3f3 	udiv	r3, r2, r3
 8003118:	4618      	mov	r0, r3
 800311a:	f000 f9d6 	bl	80034ca <HAL_SYSTICK_Config>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d10f      	bne.n	8003144 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b0f      	cmp	r3, #15
 8003128:	d809      	bhi.n	800313e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800312a:	2200      	movs	r2, #0
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	f04f 30ff 	mov.w	r0, #4294967295
 8003132:	f000 f994 	bl	800345e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003136:	4a09      	ldr	r2, [pc, #36]	; (800315c <HAL_InitTick+0x70>)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6013      	str	r3, [r2, #0]
 800313c:	e007      	b.n	800314e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	73fb      	strb	r3, [r7, #15]
 8003142:	e004      	b.n	800314e <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	73fb      	strb	r3, [r7, #15]
 8003148:	e001      	b.n	800314e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800314e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003150:	4618      	mov	r0, r3
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	20000024 	.word	0x20000024
 800315c:	20000020 	.word	0x20000020

08003160 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003164:	4b06      	ldr	r3, [pc, #24]	; (8003180 <HAL_IncTick+0x20>)
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	461a      	mov	r2, r3
 800316a:	4b06      	ldr	r3, [pc, #24]	; (8003184 <HAL_IncTick+0x24>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4413      	add	r3, r2
 8003170:	4a04      	ldr	r2, [pc, #16]	; (8003184 <HAL_IncTick+0x24>)
 8003172:	6013      	str	r3, [r2, #0]
}
 8003174:	bf00      	nop
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	20000024 	.word	0x20000024
 8003184:	20001550 	.word	0x20001550

08003188 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  return uwTick;
 800318c:	4b03      	ldr	r3, [pc, #12]	; (800319c <HAL_GetTick+0x14>)
 800318e:	681b      	ldr	r3, [r3, #0]
}
 8003190:	4618      	mov	r0, r3
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	20001550 	.word	0x20001550

080031a0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80031a0:	b480      	push	{r7}
 80031a2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80031a4:	4b03      	ldr	r3, [pc, #12]	; (80031b4 <HAL_GetTickPrio+0x14>)
 80031a6:	681b      	ldr	r3, [r3, #0]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	20000020 	.word	0x20000020

080031b8 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80031bc:	4b03      	ldr	r3, [pc, #12]	; (80031cc <HAL_GetTickFreq+0x14>)
 80031be:	781b      	ldrb	r3, [r3, #0]
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	20000024 	.word	0x20000024

080031d0 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 80031d4:	f7ff ff4a 	bl	800306c <LL_DBGMCU_EnableDBGSleepMode>
}
 80031d8:	bf00      	nop
 80031da:	bd80      	pop	{r7, pc}

080031dc <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 80031e0:	f7ff ff54 	bl	800308c <LL_DBGMCU_EnableDBGStopMode>
}
 80031e4:	bf00      	nop
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <__NVIC_SetPriorityGrouping>:
{
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f003 0307 	and.w	r3, r3, #7
 80031f6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031f8:	4b0c      	ldr	r3, [pc, #48]	; (800322c <__NVIC_SetPriorityGrouping+0x44>)
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031fe:	68ba      	ldr	r2, [r7, #8]
 8003200:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003204:	4013      	ands	r3, r2
 8003206:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003210:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003214:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003218:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800321a:	4a04      	ldr	r2, [pc, #16]	; (800322c <__NVIC_SetPriorityGrouping+0x44>)
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	60d3      	str	r3, [r2, #12]
}
 8003220:	bf00      	nop
 8003222:	3714      	adds	r7, #20
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr
 800322c:	e000ed00 	.word	0xe000ed00

08003230 <__NVIC_GetPriorityGrouping>:
{
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003234:	4b04      	ldr	r3, [pc, #16]	; (8003248 <__NVIC_GetPriorityGrouping+0x18>)
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	0a1b      	lsrs	r3, r3, #8
 800323a:	f003 0307 	and.w	r3, r3, #7
}
 800323e:	4618      	mov	r0, r3
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr
 8003248:	e000ed00 	.word	0xe000ed00

0800324c <__NVIC_EnableIRQ>:
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	4603      	mov	r3, r0
 8003254:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800325a:	2b00      	cmp	r3, #0
 800325c:	db0b      	blt.n	8003276 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800325e:	79fb      	ldrb	r3, [r7, #7]
 8003260:	f003 021f 	and.w	r2, r3, #31
 8003264:	4907      	ldr	r1, [pc, #28]	; (8003284 <__NVIC_EnableIRQ+0x38>)
 8003266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800326a:	095b      	lsrs	r3, r3, #5
 800326c:	2001      	movs	r0, #1
 800326e:	fa00 f202 	lsl.w	r2, r0, r2
 8003272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003276:	bf00      	nop
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	e000e100 	.word	0xe000e100

08003288 <__NVIC_DisableIRQ>:
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	4603      	mov	r3, r0
 8003290:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003296:	2b00      	cmp	r3, #0
 8003298:	db12      	blt.n	80032c0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800329a:	79fb      	ldrb	r3, [r7, #7]
 800329c:	f003 021f 	and.w	r2, r3, #31
 80032a0:	490a      	ldr	r1, [pc, #40]	; (80032cc <__NVIC_DisableIRQ+0x44>)
 80032a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a6:	095b      	lsrs	r3, r3, #5
 80032a8:	2001      	movs	r0, #1
 80032aa:	fa00 f202 	lsl.w	r2, r0, r2
 80032ae:	3320      	adds	r3, #32
 80032b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80032b4:	f3bf 8f4f 	dsb	sy
}
 80032b8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80032ba:	f3bf 8f6f 	isb	sy
}
 80032be:	bf00      	nop
}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr
 80032cc:	e000e100 	.word	0xe000e100

080032d0 <__NVIC_SetPendingIRQ>:
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	4603      	mov	r3, r0
 80032d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	db0c      	blt.n	80032fc <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032e2:	79fb      	ldrb	r3, [r7, #7]
 80032e4:	f003 021f 	and.w	r2, r3, #31
 80032e8:	4907      	ldr	r1, [pc, #28]	; (8003308 <__NVIC_SetPendingIRQ+0x38>)
 80032ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ee:	095b      	lsrs	r3, r3, #5
 80032f0:	2001      	movs	r0, #1
 80032f2:	fa00 f202 	lsl.w	r2, r0, r2
 80032f6:	3340      	adds	r3, #64	; 0x40
 80032f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr
 8003308:	e000e100 	.word	0xe000e100

0800330c <__NVIC_ClearPendingIRQ>:
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	4603      	mov	r3, r0
 8003314:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800331a:	2b00      	cmp	r3, #0
 800331c:	db0c      	blt.n	8003338 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800331e:	79fb      	ldrb	r3, [r7, #7]
 8003320:	f003 021f 	and.w	r2, r3, #31
 8003324:	4907      	ldr	r1, [pc, #28]	; (8003344 <__NVIC_ClearPendingIRQ+0x38>)
 8003326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800332a:	095b      	lsrs	r3, r3, #5
 800332c:	2001      	movs	r0, #1
 800332e:	fa00 f202 	lsl.w	r2, r0, r2
 8003332:	3360      	adds	r3, #96	; 0x60
 8003334:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr
 8003344:	e000e100 	.word	0xe000e100

08003348 <__NVIC_SetPriority>:
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	4603      	mov	r3, r0
 8003350:	6039      	str	r1, [r7, #0]
 8003352:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003358:	2b00      	cmp	r3, #0
 800335a:	db0a      	blt.n	8003372 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	b2da      	uxtb	r2, r3
 8003360:	490c      	ldr	r1, [pc, #48]	; (8003394 <__NVIC_SetPriority+0x4c>)
 8003362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003366:	0112      	lsls	r2, r2, #4
 8003368:	b2d2      	uxtb	r2, r2
 800336a:	440b      	add	r3, r1
 800336c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003370:	e00a      	b.n	8003388 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	b2da      	uxtb	r2, r3
 8003376:	4908      	ldr	r1, [pc, #32]	; (8003398 <__NVIC_SetPriority+0x50>)
 8003378:	79fb      	ldrb	r3, [r7, #7]
 800337a:	f003 030f 	and.w	r3, r3, #15
 800337e:	3b04      	subs	r3, #4
 8003380:	0112      	lsls	r2, r2, #4
 8003382:	b2d2      	uxtb	r2, r2
 8003384:	440b      	add	r3, r1
 8003386:	761a      	strb	r2, [r3, #24]
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr
 8003394:	e000e100 	.word	0xe000e100
 8003398:	e000ed00 	.word	0xe000ed00

0800339c <NVIC_EncodePriority>:
{
 800339c:	b480      	push	{r7}
 800339e:	b089      	sub	sp, #36	; 0x24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f003 0307 	and.w	r3, r3, #7
 80033ae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	f1c3 0307 	rsb	r3, r3, #7
 80033b6:	2b04      	cmp	r3, #4
 80033b8:	bf28      	it	cs
 80033ba:	2304      	movcs	r3, #4
 80033bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	3304      	adds	r3, #4
 80033c2:	2b06      	cmp	r3, #6
 80033c4:	d902      	bls.n	80033cc <NVIC_EncodePriority+0x30>
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	3b03      	subs	r3, #3
 80033ca:	e000      	b.n	80033ce <NVIC_EncodePriority+0x32>
 80033cc:	2300      	movs	r3, #0
 80033ce:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033d0:	f04f 32ff 	mov.w	r2, #4294967295
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	fa02 f303 	lsl.w	r3, r2, r3
 80033da:	43da      	mvns	r2, r3
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	401a      	ands	r2, r3
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033e4:	f04f 31ff 	mov.w	r1, #4294967295
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	fa01 f303 	lsl.w	r3, r1, r3
 80033ee:	43d9      	mvns	r1, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033f4:	4313      	orrs	r3, r2
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3724      	adds	r7, #36	; 0x24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
	...

08003404 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	3b01      	subs	r3, #1
 8003410:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003414:	d301      	bcc.n	800341a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003416:	2301      	movs	r3, #1
 8003418:	e00f      	b.n	800343a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800341a:	4a0a      	ldr	r2, [pc, #40]	; (8003444 <SysTick_Config+0x40>)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	3b01      	subs	r3, #1
 8003420:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003422:	210f      	movs	r1, #15
 8003424:	f04f 30ff 	mov.w	r0, #4294967295
 8003428:	f7ff ff8e 	bl	8003348 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800342c:	4b05      	ldr	r3, [pc, #20]	; (8003444 <SysTick_Config+0x40>)
 800342e:	2200      	movs	r2, #0
 8003430:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003432:	4b04      	ldr	r3, [pc, #16]	; (8003444 <SysTick_Config+0x40>)
 8003434:	2207      	movs	r2, #7
 8003436:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3708      	adds	r7, #8
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	e000e010 	.word	0xe000e010

08003448 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f7ff fec9 	bl	80031e8 <__NVIC_SetPriorityGrouping>
}
 8003456:	bf00      	nop
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b086      	sub	sp, #24
 8003462:	af00      	add	r7, sp, #0
 8003464:	4603      	mov	r3, r0
 8003466:	60b9      	str	r1, [r7, #8]
 8003468:	607a      	str	r2, [r7, #4]
 800346a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800346c:	f7ff fee0 	bl	8003230 <__NVIC_GetPriorityGrouping>
 8003470:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	68b9      	ldr	r1, [r7, #8]
 8003476:	6978      	ldr	r0, [r7, #20]
 8003478:	f7ff ff90 	bl	800339c <NVIC_EncodePriority>
 800347c:	4602      	mov	r2, r0
 800347e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003482:	4611      	mov	r1, r2
 8003484:	4618      	mov	r0, r3
 8003486:	f7ff ff5f 	bl	8003348 <__NVIC_SetPriority>
}
 800348a:	bf00      	nop
 800348c:	3718      	adds	r7, #24
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003492:	b580      	push	{r7, lr}
 8003494:	b082      	sub	sp, #8
 8003496:	af00      	add	r7, sp, #0
 8003498:	4603      	mov	r3, r0
 800349a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800349c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7ff fed3 	bl	800324c <__NVIC_EnableIRQ>
}
 80034a6:	bf00      	nop
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b082      	sub	sp, #8
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	4603      	mov	r3, r0
 80034b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80034b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034bc:	4618      	mov	r0, r3
 80034be:	f7ff fee3 	bl	8003288 <__NVIC_DisableIRQ>
}
 80034c2:	bf00      	nop
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b082      	sub	sp, #8
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f7ff ff96 	bl	8003404 <SysTick_Config>
 80034d8:	4603      	mov	r3, r0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3708      	adds	r7, #8
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b082      	sub	sp, #8
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	4603      	mov	r3, r0
 80034ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80034ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7ff feed 	bl	80032d0 <__NVIC_SetPendingIRQ>
}
 80034f6:	bf00      	nop
 80034f8:	3708      	adds	r7, #8
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}

080034fe <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b082      	sub	sp, #8
 8003502:	af00      	add	r7, sp, #0
 8003504:	4603      	mov	r3, r0
 8003506:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800350c:	4618      	mov	r0, r3
 800350e:	f7ff fefd 	bl	800330c <__NVIC_ClearPendingIRQ>
}
 8003512:	bf00      	nop
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
	...

0800351c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e08e      	b.n	800364c <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	461a      	mov	r2, r3
 8003534:	4b47      	ldr	r3, [pc, #284]	; (8003654 <HAL_DMA_Init+0x138>)
 8003536:	429a      	cmp	r2, r3
 8003538:	d80f      	bhi.n	800355a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	461a      	mov	r2, r3
 8003540:	4b45      	ldr	r3, [pc, #276]	; (8003658 <HAL_DMA_Init+0x13c>)
 8003542:	4413      	add	r3, r2
 8003544:	4a45      	ldr	r2, [pc, #276]	; (800365c <HAL_DMA_Init+0x140>)
 8003546:	fba2 2303 	umull	r2, r3, r2, r3
 800354a:	091b      	lsrs	r3, r3, #4
 800354c:	009a      	lsls	r2, r3, #2
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a42      	ldr	r2, [pc, #264]	; (8003660 <HAL_DMA_Init+0x144>)
 8003556:	641a      	str	r2, [r3, #64]	; 0x40
 8003558:	e00e      	b.n	8003578 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	461a      	mov	r2, r3
 8003560:	4b40      	ldr	r3, [pc, #256]	; (8003664 <HAL_DMA_Init+0x148>)
 8003562:	4413      	add	r3, r2
 8003564:	4a3d      	ldr	r2, [pc, #244]	; (800365c <HAL_DMA_Init+0x140>)
 8003566:	fba2 2303 	umull	r2, r3, r2, r3
 800356a:	091b      	lsrs	r3, r3, #4
 800356c:	009a      	lsls	r2, r3, #2
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a3c      	ldr	r2, [pc, #240]	; (8003668 <HAL_DMA_Init+0x14c>)
 8003576:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2202      	movs	r2, #2
 800357c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800358e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003592:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800359c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a1b      	ldr	r3, [r3, #32]
 80035ba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	4313      	orrs	r3, r2
 80035c0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 fa74 	bl	8003ab8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035d8:	d102      	bne.n	80035e0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685a      	ldr	r2, [r3, #4]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035e8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80035ec:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80035f6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d010      	beq.n	8003622 <HAL_DMA_Init+0x106>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	2b04      	cmp	r3, #4
 8003606:	d80c      	bhi.n	8003622 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 fa93 	bl	8003b34 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003612:	2200      	movs	r2, #0
 8003614:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800361e:	605a      	str	r2, [r3, #4]
 8003620:	e008      	b.n	8003634 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2201      	movs	r2, #1
 800363e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3710      	adds	r7, #16
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	40020407 	.word	0x40020407
 8003658:	bffdfff8 	.word	0xbffdfff8
 800365c:	cccccccd 	.word	0xcccccccd
 8003660:	40020000 	.word	0x40020000
 8003664:	bffdfbf8 	.word	0xbffdfbf8
 8003668:	40020400 	.word	0x40020400

0800366c <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b086      	sub	sp, #24
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
 8003678:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800367a:	2300      	movs	r3, #0
 800367c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003684:	2b01      	cmp	r3, #1
 8003686:	d101      	bne.n	800368c <HAL_DMA_Start_IT+0x20>
 8003688:	2302      	movs	r3, #2
 800368a:	e066      	b.n	800375a <HAL_DMA_Start_IT+0xee>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b01      	cmp	r3, #1
 800369e:	d155      	bne.n	800374c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2202      	movs	r2, #2
 80036a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f022 0201 	bic.w	r2, r2, #1
 80036bc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	68b9      	ldr	r1, [r7, #8]
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f000 f9b9 	bl	8003a3c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d008      	beq.n	80036e4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f042 020e 	orr.w	r2, r2, #14
 80036e0:	601a      	str	r2, [r3, #0]
 80036e2:	e00f      	b.n	8003704 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f022 0204 	bic.w	r2, r2, #4
 80036f2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f042 020a 	orr.w	r2, r2, #10
 8003702:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d007      	beq.n	8003722 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800371c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003720:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003726:	2b00      	cmp	r3, #0
 8003728:	d007      	beq.n	800373a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003734:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003738:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f042 0201 	orr.w	r2, r2, #1
 8003748:	601a      	str	r2, [r3, #0]
 800374a:	e005      	b.n	8003758 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003754:	2302      	movs	r3, #2
 8003756:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003758:	7dfb      	ldrb	r3, [r7, #23]
}
 800375a:	4618      	mov	r0, r3
 800375c:	3718      	adds	r7, #24
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003762:	b480      	push	{r7}
 8003764:	b083      	sub	sp, #12
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d101      	bne.n	8003774 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e04f      	b.n	8003814 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800377a:	b2db      	uxtb	r3, r3
 800377c:	2b02      	cmp	r3, #2
 800377e:	d008      	beq.n	8003792 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2204      	movs	r2, #4
 8003784:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e040      	b.n	8003814 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f022 020e 	bic.w	r2, r2, #14
 80037a0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037b0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f022 0201 	bic.w	r2, r2, #1
 80037c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c6:	f003 021c 	and.w	r2, r3, #28
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ce:	2101      	movs	r1, #1
 80037d0:	fa01 f202 	lsl.w	r2, r1, r2
 80037d4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80037de:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00c      	beq.n	8003802 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037f6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003800:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2201      	movs	r2, #1
 8003806:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8003812:	2300      	movs	r3, #0
}
 8003814:	4618      	mov	r0, r3
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003828:	2300      	movs	r3, #0
 800382a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003832:	b2db      	uxtb	r3, r3
 8003834:	2b02      	cmp	r3, #2
 8003836:	d005      	beq.n	8003844 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2204      	movs	r2, #4
 800383c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	73fb      	strb	r3, [r7, #15]
 8003842:	e047      	b.n	80038d4 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f022 020e 	bic.w	r2, r2, #14
 8003852:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f022 0201 	bic.w	r2, r2, #1
 8003862:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800386e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003872:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003878:	f003 021c 	and.w	r2, r3, #28
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003880:	2101      	movs	r1, #1
 8003882:	fa01 f202 	lsl.w	r2, r1, r2
 8003886:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003890:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00c      	beq.n	80038b4 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038a8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80038b2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d003      	beq.n	80038d4 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	4798      	blx	r3
    }
  }
  return status;
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	b084      	sub	sp, #16
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fa:	f003 031c 	and.w	r3, r3, #28
 80038fe:	2204      	movs	r2, #4
 8003900:	409a      	lsls	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	4013      	ands	r3, r2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d026      	beq.n	8003958 <HAL_DMA_IRQHandler+0x7a>
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	f003 0304 	and.w	r3, r3, #4
 8003910:	2b00      	cmp	r3, #0
 8003912:	d021      	beq.n	8003958 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0320 	and.w	r3, r3, #32
 800391e:	2b00      	cmp	r3, #0
 8003920:	d107      	bne.n	8003932 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f022 0204 	bic.w	r2, r2, #4
 8003930:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003936:	f003 021c 	and.w	r2, r3, #28
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393e:	2104      	movs	r1, #4
 8003940:	fa01 f202 	lsl.w	r2, r1, r2
 8003944:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394a:	2b00      	cmp	r3, #0
 800394c:	d071      	beq.n	8003a32 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003956:	e06c      	b.n	8003a32 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395c:	f003 031c 	and.w	r3, r3, #28
 8003960:	2202      	movs	r2, #2
 8003962:	409a      	lsls	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	4013      	ands	r3, r2
 8003968:	2b00      	cmp	r3, #0
 800396a:	d02e      	beq.n	80039ca <HAL_DMA_IRQHandler+0xec>
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d029      	beq.n	80039ca <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0320 	and.w	r3, r3, #32
 8003980:	2b00      	cmp	r3, #0
 8003982:	d10b      	bne.n	800399c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f022 020a 	bic.w	r2, r2, #10
 8003992:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a0:	f003 021c 	and.w	r2, r3, #28
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a8:	2102      	movs	r1, #2
 80039aa:	fa01 f202 	lsl.w	r2, r1, r2
 80039ae:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d038      	beq.n	8003a32 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80039c8:	e033      	b.n	8003a32 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ce:	f003 031c 	and.w	r3, r3, #28
 80039d2:	2208      	movs	r2, #8
 80039d4:	409a      	lsls	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	4013      	ands	r3, r2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d02a      	beq.n	8003a34 <HAL_DMA_IRQHandler+0x156>
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	f003 0308 	and.w	r3, r3, #8
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d025      	beq.n	8003a34 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f022 020e 	bic.w	r2, r2, #14
 80039f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fc:	f003 021c 	and.w	r2, r3, #28
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a04:	2101      	movs	r1, #1
 8003a06:	fa01 f202 	lsl.w	r2, r1, r2
 8003a0a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d004      	beq.n	8003a34 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003a32:	bf00      	nop
 8003a34:	bf00      	nop
}
 8003a36:	3710      	adds	r7, #16
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
 8003a48:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003a52:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d004      	beq.n	8003a66 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003a64:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a6a:	f003 021c 	and.w	r2, r3, #28
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a72:	2101      	movs	r1, #1
 8003a74:	fa01 f202 	lsl.w	r2, r1, r2
 8003a78:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	2b10      	cmp	r3, #16
 8003a88:	d108      	bne.n	8003a9c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68ba      	ldr	r2, [r7, #8]
 8003a98:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003a9a:	e007      	b.n	8003aac <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68ba      	ldr	r2, [r7, #8]
 8003aa2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	60da      	str	r2, [r3, #12]
}
 8003aac:	bf00      	nop
 8003aae:	3714      	adds	r7, #20
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	4b17      	ldr	r3, [pc, #92]	; (8003b24 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d80a      	bhi.n	8003ae2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad0:	089b      	lsrs	r3, r3, #2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003ad8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	6493      	str	r3, [r2, #72]	; 0x48
 8003ae0:	e007      	b.n	8003af2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae6:	089b      	lsrs	r3, r3, #2
 8003ae8:	009a      	lsls	r2, r3, #2
 8003aea:	4b0f      	ldr	r3, [pc, #60]	; (8003b28 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003aec:	4413      	add	r3, r2
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	3b08      	subs	r3, #8
 8003afa:	4a0c      	ldr	r2, [pc, #48]	; (8003b2c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003afc:	fba2 2303 	umull	r2, r3, r2, r3
 8003b00:	091b      	lsrs	r3, r3, #4
 8003b02:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a0a      	ldr	r2, [pc, #40]	; (8003b30 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003b08:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f003 031f 	and.w	r3, r3, #31
 8003b10:	2201      	movs	r2, #1
 8003b12:	409a      	lsls	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003b18:	bf00      	nop
 8003b1a:	3714      	adds	r7, #20
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr
 8003b24:	40020407 	.word	0x40020407
 8003b28:	4002081c 	.word	0x4002081c
 8003b2c:	cccccccd 	.word	0xcccccccd
 8003b30:	40020880 	.word	0x40020880

08003b34 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b085      	sub	sp, #20
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b44:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	4b0b      	ldr	r3, [pc, #44]	; (8003b78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003b4a:	4413      	add	r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	461a      	mov	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a09      	ldr	r2, [pc, #36]	; (8003b7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003b58:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	3b01      	subs	r3, #1
 8003b5e:	f003 0303 	and.w	r3, r3, #3
 8003b62:	2201      	movs	r2, #1
 8003b64:	409a      	lsls	r2, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003b6a:	bf00      	nop
 8003b6c:	3714      	adds	r7, #20
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	1000823f 	.word	0x1000823f
 8003b7c:	40020940 	.word	0x40020940

08003b80 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA channel.
  * @param  pSyncConfig Pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d12b      	bne.n	8003bee <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d101      	bne.n	8003ba4 <HAL_DMAEx_ConfigMuxSync+0x24>
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	e025      	b.n	8003bf0 <HAL_DMAEx_ConfigMuxSync+0x70>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	4b12      	ldr	r3, [pc, #72]	; (8003bfc <HAL_DMAEx_ConfigMuxSync+0x7c>)
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	683a      	ldr	r2, [r7, #0]
 8003bb8:	6811      	ldr	r1, [r2, #0]
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	68d2      	ldr	r2, [r2, #12]
 8003bbe:	3a01      	subs	r2, #1
 8003bc0:	04d2      	lsls	r2, r2, #19
 8003bc2:	4311      	orrs	r1, r2
 8003bc4:	683a      	ldr	r2, [r7, #0]
 8003bc6:	6852      	ldr	r2, [r2, #4]
 8003bc8:	4311      	orrs	r1, r2
 8003bca:	683a      	ldr	r2, [r7, #0]
 8003bcc:	7a12      	ldrb	r2, [r2, #8]
 8003bce:	0412      	lsls	r2, r2, #16
 8003bd0:	4311      	orrs	r1, r2
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	7a52      	ldrb	r2, [r2, #9]
 8003bd6:	0252      	lsls	r2, r2, #9
 8003bd8:	4311      	orrs	r1, r2
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003bde:	430b      	orrs	r3, r1
 8003be0:	6013      	str	r3, [r2, #0]
                pSyncConfig->SyncPolarity                                       | \
                ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)                 | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 8003bea:	2300      	movs	r3, #0
 8003bec:	e000      	b.n	8003bf0 <HAL_DMAEx_ConfigMuxSync+0x70>
  }
  else
  {
    /*DMA State not Ready*/
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
  }
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr
 8003bfc:	e000fdff 	.word	0xe000fdff

08003c00 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003c06:	2300      	movs	r3, #0
 8003c08:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003c0a:	4b0b      	ldr	r3, [pc, #44]	; (8003c38 <HAL_FLASH_Unlock+0x38>)
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	da0b      	bge.n	8003c2a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003c12:	4b09      	ldr	r3, [pc, #36]	; (8003c38 <HAL_FLASH_Unlock+0x38>)
 8003c14:	4a09      	ldr	r2, [pc, #36]	; (8003c3c <HAL_FLASH_Unlock+0x3c>)
 8003c16:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003c18:	4b07      	ldr	r3, [pc, #28]	; (8003c38 <HAL_FLASH_Unlock+0x38>)
 8003c1a:	4a09      	ldr	r2, [pc, #36]	; (8003c40 <HAL_FLASH_Unlock+0x40>)
 8003c1c:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003c1e:	4b06      	ldr	r3, [pc, #24]	; (8003c38 <HAL_FLASH_Unlock+0x38>)
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	da01      	bge.n	8003c2a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003c2a:	79fb      	ldrb	r3, [r7, #7]
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr
 8003c38:	58004000 	.word	0x58004000
 8003c3c:	45670123 	.word	0x45670123
 8003c40:	cdef89ab 	.word	0xcdef89ab

08003c44 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003c4e:	4b09      	ldr	r3, [pc, #36]	; (8003c74 <HAL_FLASH_Lock+0x30>)
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	4a08      	ldr	r2, [pc, #32]	; (8003c74 <HAL_FLASH_Lock+0x30>)
 8003c54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c58:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8003c5a:	4b06      	ldr	r3, [pc, #24]	; (8003c74 <HAL_FLASH_Lock+0x30>)
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	db01      	blt.n	8003c66 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8003c66:	79fb      	ldrb	r3, [r7, #7]
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr
 8003c74:	58004000 	.word	0x58004000

08003c78 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8003c80:	f7ff fa82 	bl	8003188 <HAL_GetTick>
 8003c84:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003c86:	e009      	b.n	8003c9c <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8003c88:	f7ff fa7e 	bl	8003188 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d801      	bhi.n	8003c9c <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e047      	b.n	8003d2c <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003c9c:	4b25      	ldr	r3, [pc, #148]	; (8003d34 <FLASH_WaitForLastOperation+0xbc>)
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ca8:	d0ee      	beq.n	8003c88 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = FLASH->SR;
 8003caa:	4b22      	ldr	r3, [pc, #136]	; (8003d34 <FLASH_WaitForLastOperation+0xbc>)
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	60bb      	str	r3, [r7, #8]

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d002      	beq.n	8003cc0 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003cba:	4b1e      	ldr	r3, [pc, #120]	; (8003d34 <FLASH_WaitForLastOperation+0xbc>)
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8003cc0:	68ba      	ldr	r2, [r7, #8]
 8003cc2:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d007      	beq.n	8003ce4 <FLASH_WaitForLastOperation+0x6c>
 8003cd4:	4b17      	ldr	r3, [pc, #92]	; (8003d34 <FLASH_WaitForLastOperation+0xbc>)
 8003cd6:	699a      	ldr	r2, [r3, #24]
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8003cde:	4915      	ldr	r1, [pc, #84]	; (8003d34 <FLASH_WaitForLastOperation+0xbc>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	618b      	str	r3, [r1, #24]
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d004      	beq.n	8003cf8 <FLASH_WaitForLastOperation+0x80>
 8003cee:	4a11      	ldr	r2, [pc, #68]	; (8003d34 <FLASH_WaitForLastOperation+0xbc>)
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003cf6:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00e      	beq.n	8003d1c <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8003cfe:	4a0e      	ldr	r2, [pc, #56]	; (8003d38 <FLASH_WaitForLastOperation+0xc0>)
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e011      	b.n	8003d2c <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8003d08:	f7ff fa3e 	bl	8003188 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d801      	bhi.n	8003d1c <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e007      	b.n	8003d2c <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8003d1c:	4b05      	ldr	r3, [pc, #20]	; (8003d34 <FLASH_WaitForLastOperation+0xbc>)
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d24:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d28:	d0ee      	beq.n	8003d08 <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3710      	adds	r7, #16
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	58004000 	.word	0x58004000
 8003d38:	200001b4 	.word	0x200001b4

08003d3c <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003d46:	4b24      	ldr	r3, [pc, #144]	; (8003dd8 <HAL_FLASHEx_Erase+0x9c>)
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d101      	bne.n	8003d52 <HAL_FLASHEx_Erase+0x16>
 8003d4e:	2302      	movs	r3, #2
 8003d50:	e03d      	b.n	8003dce <HAL_FLASHEx_Erase+0x92>
 8003d52:	4b21      	ldr	r3, [pc, #132]	; (8003dd8 <HAL_FLASHEx_Erase+0x9c>)
 8003d54:	2201      	movs	r2, #1
 8003d56:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003d58:	4b1f      	ldr	r3, [pc, #124]	; (8003dd8 <HAL_FLASHEx_Erase+0x9c>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003d5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d62:	f7ff ff89 	bl	8003c78 <FLASH_WaitForLastOperation>
 8003d66:	4603      	mov	r3, r0
 8003d68:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003d6a:	7bfb      	ldrb	r3, [r7, #15]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d12a      	bne.n	8003dc6 <HAL_FLASHEx_Erase+0x8a>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_PAGES)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d124      	bne.n	8003dc2 <HAL_FLASHEx_Erase+0x86>
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8003d7e:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	60bb      	str	r3, [r7, #8]
 8003d86:	e012      	b.n	8003dae <HAL_FLASHEx_Erase+0x72>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8003d88:	68b8      	ldr	r0, [r7, #8]
 8003d8a:	f000 f827 	bl	8003ddc <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003d8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d92:	f7ff ff71 	bl	8003c78 <FLASH_WaitForLastOperation>
 8003d96:	4603      	mov	r3, r0
 8003d98:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8003d9a:	7bfb      	ldrb	r3, [r7, #15]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d003      	beq.n	8003da8 <HAL_FLASHEx_Erase+0x6c>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	68ba      	ldr	r2, [r7, #8]
 8003da4:	601a      	str	r2, [r3, #0]
          break;
 8003da6:	e00a      	b.n	8003dbe <HAL_FLASHEx_Erase+0x82>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	3301      	adds	r3, #1
 8003dac:	60bb      	str	r3, [r7, #8]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685a      	ldr	r2, [r3, #4]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	4413      	add	r3, r2
 8003db8:	68ba      	ldr	r2, [r7, #8]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d3e4      	bcc.n	8003d88 <HAL_FLASHEx_Erase+0x4c>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8003dbe:	f000 f86f 	bl	8003ea0 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003dc2:	f000 f825 	bl	8003e10 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003dc6:	4b04      	ldr	r3, [pc, #16]	; (8003dd8 <HAL_FLASHEx_Erase+0x9c>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	701a      	strb	r2, [r3, #0]

  return status;
 8003dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3710      	adds	r7, #16
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	200001b4 	.word	0x200001b4

08003ddc <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8003de4:	4b09      	ldr	r3, [pc, #36]	; (8003e0c <FLASH_PageErase+0x30>)
 8003de6:	695b      	ldr	r3, [r3, #20]
 8003de8:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	4313      	orrs	r3, r2
 8003df2:	4a06      	ldr	r2, [pc, #24]	; (8003e0c <FLASH_PageErase+0x30>)
 8003df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003df8:	f043 0302 	orr.w	r3, r3, #2
 8003dfc:	6153      	str	r3, [r2, #20]
}
 8003dfe:	bf00      	nop
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	58004000 	.word	0x58004000

08003e10 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
static void FLASH_FlushCaches(void)
{
 8003e10:	b480      	push	{r7}
 8003e12:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == FLASH_ACR_ICEN)
 8003e14:	4b21      	ldr	r3, [pc, #132]	; (8003e9c <FLASH_FlushCaches+0x8c>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e20:	d117      	bne.n	8003e52 <FLASH_FlushCaches+0x42>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003e22:	4b1e      	ldr	r3, [pc, #120]	; (8003e9c <FLASH_FlushCaches+0x8c>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a1d      	ldr	r2, [pc, #116]	; (8003e9c <FLASH_FlushCaches+0x8c>)
 8003e28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e2c:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003e2e:	4b1b      	ldr	r3, [pc, #108]	; (8003e9c <FLASH_FlushCaches+0x8c>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a1a      	ldr	r2, [pc, #104]	; (8003e9c <FLASH_FlushCaches+0x8c>)
 8003e34:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003e38:	6013      	str	r3, [r2, #0]
 8003e3a:	4b18      	ldr	r3, [pc, #96]	; (8003e9c <FLASH_FlushCaches+0x8c>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a17      	ldr	r2, [pc, #92]	; (8003e9c <FLASH_FlushCaches+0x8c>)
 8003e40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e44:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003e46:	4b15      	ldr	r3, [pc, #84]	; (8003e9c <FLASH_FlushCaches+0x8c>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a14      	ldr	r2, [pc, #80]	; (8003e9c <FLASH_FlushCaches+0x8c>)
 8003e4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e50:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == FLASH_ACR_DCEN)
 8003e52:	4b12      	ldr	r3, [pc, #72]	; (8003e9c <FLASH_FlushCaches+0x8c>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e5e:	d117      	bne.n	8003e90 <FLASH_FlushCaches+0x80>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8003e60:	4b0e      	ldr	r3, [pc, #56]	; (8003e9c <FLASH_FlushCaches+0x8c>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a0d      	ldr	r2, [pc, #52]	; (8003e9c <FLASH_FlushCaches+0x8c>)
 8003e66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e6a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8003e6c:	4b0b      	ldr	r3, [pc, #44]	; (8003e9c <FLASH_FlushCaches+0x8c>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a0a      	ldr	r2, [pc, #40]	; (8003e9c <FLASH_FlushCaches+0x8c>)
 8003e72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e76:	6013      	str	r3, [r2, #0]
 8003e78:	4b08      	ldr	r3, [pc, #32]	; (8003e9c <FLASH_FlushCaches+0x8c>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a07      	ldr	r2, [pc, #28]	; (8003e9c <FLASH_FlushCaches+0x8c>)
 8003e7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e82:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003e84:	4b05      	ldr	r3, [pc, #20]	; (8003e9c <FLASH_FlushCaches+0x8c>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a04      	ldr	r2, [pc, #16]	; (8003e9c <FLASH_FlushCaches+0x8c>)
 8003e8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e8e:	6013      	str	r3, [r2, #0]
  }
}
 8003e90:	bf00      	nop
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	58004000 	.word	0x58004000

08003ea0 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	af00      	add	r7, sp, #0
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8003ea4:	4b06      	ldr	r3, [pc, #24]	; (8003ec0 <FLASH_AcknowledgePageErase+0x20>)
 8003ea6:	695b      	ldr	r3, [r3, #20]
 8003ea8:	4a05      	ldr	r2, [pc, #20]	; (8003ec0 <FLASH_AcknowledgePageErase+0x20>)
 8003eaa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003eae:	f023 0302 	bic.w	r3, r3, #2
 8003eb2:	6153      	str	r3, [r2, #20]
}
 8003eb4:	bf00      	nop
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	58004000 	.word	0x58004000

08003ec4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b087      	sub	sp, #28
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ed2:	e14c      	b.n	800416e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	2101      	movs	r1, #1
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	f000 813e 	beq.w	8004168 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d00b      	beq.n	8003f0c <HAL_GPIO_Init+0x48>
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d007      	beq.n	8003f0c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f00:	2b11      	cmp	r3, #17
 8003f02:	d003      	beq.n	8003f0c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	2b12      	cmp	r3, #18
 8003f0a:	d130      	bne.n	8003f6e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	2203      	movs	r2, #3
 8003f18:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1c:	43db      	mvns	r3, r3
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	4013      	ands	r3, r2
 8003f22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	68da      	ldr	r2, [r3, #12]
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	005b      	lsls	r3, r3, #1
 8003f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	693a      	ldr	r2, [r7, #16]
 8003f3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f42:	2201      	movs	r2, #1
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4a:	43db      	mvns	r3, r3
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	4013      	ands	r3, r2
 8003f50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	091b      	lsrs	r3, r3, #4
 8003f58:	f003 0201 	and.w	r2, r3, #1
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	693a      	ldr	r2, [r7, #16]
 8003f6c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	005b      	lsls	r3, r3, #1
 8003f78:	2203      	movs	r2, #3
 8003f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7e:	43db      	mvns	r3, r3
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	4013      	ands	r3, r2
 8003f84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	689a      	ldr	r2, [r3, #8]
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	005b      	lsls	r3, r3, #1
 8003f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f92:	693a      	ldr	r2, [r7, #16]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d003      	beq.n	8003fae <HAL_GPIO_Init+0xea>
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	2b12      	cmp	r3, #18
 8003fac:	d123      	bne.n	8003ff6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	08da      	lsrs	r2, r3, #3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	3208      	adds	r2, #8
 8003fb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	f003 0307 	and.w	r3, r3, #7
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	220f      	movs	r2, #15
 8003fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fca:	43db      	mvns	r3, r3
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	4013      	ands	r3, r2
 8003fd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	691a      	ldr	r2, [r3, #16]
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	f003 0307 	and.w	r3, r3, #7
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe2:	693a      	ldr	r2, [r7, #16]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	08da      	lsrs	r2, r3, #3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	3208      	adds	r2, #8
 8003ff0:	6939      	ldr	r1, [r7, #16]
 8003ff2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	005b      	lsls	r3, r3, #1
 8004000:	2203      	movs	r2, #3
 8004002:	fa02 f303 	lsl.w	r3, r2, r3
 8004006:	43db      	mvns	r3, r3
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	4013      	ands	r3, r2
 800400c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f003 0203 	and.w	r2, r3, #3
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	005b      	lsls	r3, r3, #1
 800401a:	fa02 f303 	lsl.w	r3, r2, r3
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	4313      	orrs	r3, r2
 8004022:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	693a      	ldr	r2, [r7, #16]
 8004028:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004032:	2b00      	cmp	r3, #0
 8004034:	f000 8098 	beq.w	8004168 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004038:	4a54      	ldr	r2, [pc, #336]	; (800418c <HAL_GPIO_Init+0x2c8>)
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	089b      	lsrs	r3, r3, #2
 800403e:	3302      	adds	r3, #2
 8004040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004044:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	f003 0303 	and.w	r3, r3, #3
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	220f      	movs	r2, #15
 8004050:	fa02 f303 	lsl.w	r3, r2, r3
 8004054:	43db      	mvns	r3, r3
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	4013      	ands	r3, r2
 800405a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004062:	d019      	beq.n	8004098 <HAL_GPIO_Init+0x1d4>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a4a      	ldr	r2, [pc, #296]	; (8004190 <HAL_GPIO_Init+0x2cc>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d013      	beq.n	8004094 <HAL_GPIO_Init+0x1d0>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a49      	ldr	r2, [pc, #292]	; (8004194 <HAL_GPIO_Init+0x2d0>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d00d      	beq.n	8004090 <HAL_GPIO_Init+0x1cc>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a48      	ldr	r2, [pc, #288]	; (8004198 <HAL_GPIO_Init+0x2d4>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d007      	beq.n	800408c <HAL_GPIO_Init+0x1c8>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a47      	ldr	r2, [pc, #284]	; (800419c <HAL_GPIO_Init+0x2d8>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d101      	bne.n	8004088 <HAL_GPIO_Init+0x1c4>
 8004084:	2304      	movs	r3, #4
 8004086:	e008      	b.n	800409a <HAL_GPIO_Init+0x1d6>
 8004088:	2307      	movs	r3, #7
 800408a:	e006      	b.n	800409a <HAL_GPIO_Init+0x1d6>
 800408c:	2303      	movs	r3, #3
 800408e:	e004      	b.n	800409a <HAL_GPIO_Init+0x1d6>
 8004090:	2302      	movs	r3, #2
 8004092:	e002      	b.n	800409a <HAL_GPIO_Init+0x1d6>
 8004094:	2301      	movs	r3, #1
 8004096:	e000      	b.n	800409a <HAL_GPIO_Init+0x1d6>
 8004098:	2300      	movs	r3, #0
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	f002 0203 	and.w	r2, r2, #3
 80040a0:	0092      	lsls	r2, r2, #2
 80040a2:	4093      	lsls	r3, r2
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80040aa:	4938      	ldr	r1, [pc, #224]	; (800418c <HAL_GPIO_Init+0x2c8>)
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	089b      	lsrs	r3, r3, #2
 80040b0:	3302      	adds	r3, #2
 80040b2:	693a      	ldr	r2, [r7, #16]
 80040b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80040b8:	4b39      	ldr	r3, [pc, #228]	; (80041a0 <HAL_GPIO_Init+0x2dc>)
 80040ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	43db      	mvns	r3, r3
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	4013      	ands	r3, r2
 80040c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d003      	beq.n	80040de <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	4313      	orrs	r3, r2
 80040dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80040de:	4a30      	ldr	r2, [pc, #192]	; (80041a0 <HAL_GPIO_Init+0x2dc>)
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80040e6:	4b2e      	ldr	r3, [pc, #184]	; (80041a0 <HAL_GPIO_Init+0x2dc>)
 80040e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	43db      	mvns	r3, r3
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	4013      	ands	r3, r2
 80040f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d003      	beq.n	800410c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	4313      	orrs	r3, r2
 800410a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800410c:	4a24      	ldr	r2, [pc, #144]	; (80041a0 <HAL_GPIO_Init+0x2dc>)
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004114:	4b22      	ldr	r3, [pc, #136]	; (80041a0 <HAL_GPIO_Init+0x2dc>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	43db      	mvns	r3, r3
 800411e:	693a      	ldr	r2, [r7, #16]
 8004120:	4013      	ands	r3, r2
 8004122:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d003      	beq.n	8004138 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	4313      	orrs	r3, r2
 8004136:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004138:	4a19      	ldr	r2, [pc, #100]	; (80041a0 <HAL_GPIO_Init+0x2dc>)
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800413e:	4b18      	ldr	r3, [pc, #96]	; (80041a0 <HAL_GPIO_Init+0x2dc>)
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	43db      	mvns	r3, r3
 8004148:	693a      	ldr	r2, [r7, #16]
 800414a:	4013      	ands	r3, r2
 800414c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d003      	beq.n	8004162 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	4313      	orrs	r3, r2
 8004160:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004162:	4a0f      	ldr	r2, [pc, #60]	; (80041a0 <HAL_GPIO_Init+0x2dc>)
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	3301      	adds	r3, #1
 800416c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	fa22 f303 	lsr.w	r3, r2, r3
 8004178:	2b00      	cmp	r3, #0
 800417a:	f47f aeab 	bne.w	8003ed4 <HAL_GPIO_Init+0x10>
  }
}
 800417e:	bf00      	nop
 8004180:	bf00      	nop
 8004182:	371c      	adds	r7, #28
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr
 800418c:	40010000 	.word	0x40010000
 8004190:	48000400 	.word	0x48000400
 8004194:	48000800 	.word	0x48000800
 8004198:	48000c00 	.word	0x48000c00
 800419c:	48001000 	.word	0x48001000
 80041a0:	58000800 	.word	0x58000800

080041a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	460b      	mov	r3, r1
 80041ae:	807b      	strh	r3, [r7, #2]
 80041b0:	4613      	mov	r3, r2
 80041b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041b4:	787b      	ldrb	r3, [r7, #1]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d003      	beq.n	80041c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80041ba:	887a      	ldrh	r2, [r7, #2]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80041c0:	e002      	b.n	80041c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80041c2:	887a      	ldrh	r2, [r7, #2]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80041da:	4b0a      	ldr	r3, [pc, #40]	; (8004204 <HAL_HSEM_IRQHandler+0x30>)
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80041e0:	4b08      	ldr	r3, [pc, #32]	; (8004204 <HAL_HSEM_IRQHandler+0x30>)
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	43db      	mvns	r3, r3
 80041e8:	4906      	ldr	r1, [pc, #24]	; (8004204 <HAL_HSEM_IRQHandler+0x30>)
 80041ea:	4013      	ands	r3, r2
 80041ec:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80041ee:	4a05      	ldr	r2, [pc, #20]	; (8004204 <HAL_HSEM_IRQHandler+0x30>)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f000 f807 	bl	8004208 <HAL_HSEM_FreeCallback>
}
 80041fa:	bf00      	nop
 80041fc:	3708      	adds	r7, #8
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	58001500 	.word	0x58001500

08004208 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8004224:	2300      	movs	r3, #0
 8004226:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d01e      	beq.n	800426c <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800422e:	4b13      	ldr	r3, [pc, #76]	; (800427c <HAL_IPCC_Init+0x60>)
 8004230:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d102      	bne.n	8004244 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f7fd fe66 	bl	8001f10 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8004244:	68b8      	ldr	r0, [r7, #8]
 8004246:	f000 f85b 	bl	8004300 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f82c 	bl	80042b4 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800426a:	e001      	b.n	8004270 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8004270:	7bfb      	ldrb	r3, [r7, #15]
}
 8004272:	4618      	mov	r0, r3
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	58000c00 	.word	0x58000c00

08004280 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004280:	b480      	push	{r7}
 8004282:	b085      	sub	sp, #20
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	4613      	mov	r3, r2
 800428c:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800428e:	bf00      	nop
 8004290:	3714      	adds	r7, #20
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr

0800429a <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800429a:	b480      	push	{r7}
 800429c:	b085      	sub	sp, #20
 800429e:	af00      	add	r7, sp, #0
 80042a0:	60f8      	str	r0, [r7, #12]
 80042a2:	60b9      	str	r1, [r7, #8]
 80042a4:	4613      	mov	r3, r2
 80042a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80042a8:	bf00      	nop
 80042aa:	3714      	adds	r7, #20
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b085      	sub	sp, #20
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80042bc:	2300      	movs	r3, #0
 80042be:	60fb      	str	r3, [r7, #12]
 80042c0:	e00f      	b.n	80042e2 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	4413      	add	r3, r2
 80042ca:	4a0b      	ldr	r2, [pc, #44]	; (80042f8 <IPCC_SetDefaultCallbacks+0x44>)
 80042cc:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	3306      	adds	r3, #6
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	4413      	add	r3, r2
 80042d8:	4a08      	ldr	r2, [pc, #32]	; (80042fc <IPCC_SetDefaultCallbacks+0x48>)
 80042da:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	3301      	adds	r3, #1
 80042e0:	60fb      	str	r3, [r7, #12]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2b05      	cmp	r3, #5
 80042e6:	d9ec      	bls.n	80042c2 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 80042e8:	bf00      	nop
 80042ea:	bf00      	nop
 80042ec:	3714      	adds	r7, #20
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	08004281 	.word	0x08004281
 80042fc:	0800429b 	.word	0x0800429b

08004300 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8004314:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	223f      	movs	r2, #63	; 0x3f
 800431a:	609a      	str	r2, [r3, #8]
}
 800431c:	bf00      	nop
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004328:	b480      	push	{r7}
 800432a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800432c:	4b05      	ldr	r3, [pc, #20]	; (8004344 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a04      	ldr	r2, [pc, #16]	; (8004344 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004332:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004336:	6013      	str	r3, [r2, #0]
}
 8004338:	bf00      	nop
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	58000400 	.word	0x58000400

08004348 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004348:	b480      	push	{r7}
 800434a:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 800434c:	4b04      	ldr	r3, [pc, #16]	; (8004360 <HAL_PWREx_GetVoltageRange+0x18>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004354:	4618      	mov	r0, r3
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	58000400 	.word	0x58000400

08004364 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004364:	b480      	push	{r7}
 8004366:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004368:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004372:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004376:	d101      	bne.n	800437c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004378:	2301      	movs	r3, #1
 800437a:	e000      	b.n	800437e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <LL_RCC_HSE_Enable>:
{
 8004388:	b480      	push	{r7}
 800438a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800438c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004396:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800439a:	6013      	str	r3, [r2, #0]
}
 800439c:	bf00      	nop
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr

080043a6 <LL_RCC_HSE_Disable>:
{
 80043a6:	b480      	push	{r7}
 80043a8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80043aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043b8:	6013      	str	r3, [r2, #0]
}
 80043ba:	bf00      	nop
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <LL_RCC_HSE_IsReady>:
{
 80043c4:	b480      	push	{r7}
 80043c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80043c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043d6:	d101      	bne.n	80043dc <LL_RCC_HSE_IsReady+0x18>
 80043d8:	2301      	movs	r3, #1
 80043da:	e000      	b.n	80043de <LL_RCC_HSE_IsReady+0x1a>
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <LL_RCC_HSI_Enable>:
{
 80043e8:	b480      	push	{r7}
 80043ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80043ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043fa:	6013      	str	r3, [r2, #0]
}
 80043fc:	bf00      	nop
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr

08004406 <LL_RCC_HSI_Disable>:
{
 8004406:	b480      	push	{r7}
 8004408:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800440a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004414:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004418:	6013      	str	r3, [r2, #0]
}
 800441a:	bf00      	nop
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <LL_RCC_HSI_IsReady>:
{
 8004424:	b480      	push	{r7}
 8004426:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004432:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004436:	d101      	bne.n	800443c <LL_RCC_HSI_IsReady+0x18>
 8004438:	2301      	movs	r3, #1
 800443a:	e000      	b.n	800443e <LL_RCC_HSI_IsReady+0x1a>
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <LL_RCC_HSI_SetCalibTrimming>:
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004450:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	061b      	lsls	r3, r3, #24
 800445e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004462:	4313      	orrs	r3, r2
 8004464:	604b      	str	r3, [r1, #4]
}
 8004466:	bf00      	nop
 8004468:	370c      	adds	r7, #12
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr

08004472 <LL_RCC_HSI48_Enable>:
{
 8004472:	b480      	push	{r7}
 8004474:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004476:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800447a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800447e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004482:	f043 0301 	orr.w	r3, r3, #1
 8004486:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800448a:	bf00      	nop
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <LL_RCC_HSI48_Disable>:
{
 8004494:	b480      	push	{r7}
 8004496:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800449c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044a4:	f023 0301 	bic.w	r3, r3, #1
 80044a8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80044ac:	bf00      	nop
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr

080044b6 <LL_RCC_HSI48_IsReady>:
{
 80044b6:	b480      	push	{r7}
 80044b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80044ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d101      	bne.n	80044ce <LL_RCC_HSI48_IsReady+0x18>
 80044ca:	2301      	movs	r3, #1
 80044cc:	e000      	b.n	80044d0 <LL_RCC_HSI48_IsReady+0x1a>
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr

080044da <LL_RCC_LSE_Enable>:
{
 80044da:	b480      	push	{r7}
 80044dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80044de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044ea:	f043 0301 	orr.w	r3, r3, #1
 80044ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80044f2:	bf00      	nop
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <LL_RCC_LSE_Disable>:
{
 80044fc:	b480      	push	{r7}
 80044fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004500:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004508:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800450c:	f023 0301 	bic.w	r3, r3, #1
 8004510:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004514:	bf00      	nop
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr

0800451e <LL_RCC_LSE_EnableBypass>:
{
 800451e:	b480      	push	{r7}
 8004520:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004522:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800452a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800452e:	f043 0304 	orr.w	r3, r3, #4
 8004532:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004536:	bf00      	nop
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <LL_RCC_LSE_DisableBypass>:
{
 8004540:	b480      	push	{r7}
 8004542:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004544:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800454c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004550:	f023 0304 	bic.w	r3, r3, #4
 8004554:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004558:	bf00      	nop
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr

08004562 <LL_RCC_LSE_IsReady>:
{
 8004562:	b480      	push	{r7}
 8004564:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004566:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800456a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800456e:	f003 0302 	and.w	r3, r3, #2
 8004572:	2b02      	cmp	r3, #2
 8004574:	d101      	bne.n	800457a <LL_RCC_LSE_IsReady+0x18>
 8004576:	2301      	movs	r3, #1
 8004578:	e000      	b.n	800457c <LL_RCC_LSE_IsReady+0x1a>
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr

08004586 <LL_RCC_LSI1_Enable>:
{
 8004586:	b480      	push	{r7}
 8004588:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800458a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800458e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004592:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004596:	f043 0301 	orr.w	r3, r3, #1
 800459a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800459e:	bf00      	nop
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <LL_RCC_LSI1_Disable>:
{
 80045a8:	b480      	push	{r7}
 80045aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80045ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045b8:	f023 0301 	bic.w	r3, r3, #1
 80045bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80045c0:	bf00      	nop
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr

080045ca <LL_RCC_LSI1_IsReady>:
{
 80045ca:	b480      	push	{r7}
 80045cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80045ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d101      	bne.n	80045e2 <LL_RCC_LSI1_IsReady+0x18>
 80045de:	2301      	movs	r3, #1
 80045e0:	e000      	b.n	80045e4 <LL_RCC_LSI1_IsReady+0x1a>
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr

080045ee <LL_RCC_LSI2_Enable>:
{
 80045ee:	b480      	push	{r7}
 80045f0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80045f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045fe:	f043 0304 	orr.w	r3, r3, #4
 8004602:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004606:	bf00      	nop
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <LL_RCC_LSI2_Disable>:
{
 8004610:	b480      	push	{r7}
 8004612:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004614:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004618:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800461c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004620:	f023 0304 	bic.w	r3, r3, #4
 8004624:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004628:	bf00      	nop
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr

08004632 <LL_RCC_LSI2_IsReady>:
{
 8004632:	b480      	push	{r7}
 8004634:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004636:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800463a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800463e:	f003 0308 	and.w	r3, r3, #8
 8004642:	2b08      	cmp	r3, #8
 8004644:	d101      	bne.n	800464a <LL_RCC_LSI2_IsReady+0x18>
 8004646:	2301      	movs	r3, #1
 8004648:	e000      	b.n	800464c <LL_RCC_LSI2_IsReady+0x1a>
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr

08004656 <LL_RCC_LSI2_SetTrimming>:
{
 8004656:	b480      	push	{r7}
 8004658:	b083      	sub	sp, #12
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800465e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004662:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004666:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	021b      	lsls	r3, r3, #8
 800466e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004672:	4313      	orrs	r3, r2
 8004674:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004678:	bf00      	nop
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <LL_RCC_MSI_Enable>:
{
 8004684:	b480      	push	{r7}
 8004686:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004688:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004692:	f043 0301 	orr.w	r3, r3, #1
 8004696:	6013      	str	r3, [r2, #0]
}
 8004698:	bf00      	nop
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr

080046a2 <LL_RCC_MSI_Disable>:
{
 80046a2:	b480      	push	{r7}
 80046a4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80046a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046b0:	f023 0301 	bic.w	r3, r3, #1
 80046b4:	6013      	str	r3, [r2, #0]
}
 80046b6:	bf00      	nop
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <LL_RCC_MSI_IsReady>:
{
 80046c0:	b480      	push	{r7}
 80046c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80046c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0302 	and.w	r3, r3, #2
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d101      	bne.n	80046d6 <LL_RCC_MSI_IsReady+0x16>
 80046d2:	2301      	movs	r3, #1
 80046d4:	e000      	b.n	80046d8 <LL_RCC_MSI_IsReady+0x18>
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr

080046e2 <LL_RCC_MSI_SetRange>:
{
 80046e2:	b480      	push	{r7}
 80046e4:	b083      	sub	sp, #12
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80046ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	600b      	str	r3, [r1, #0]
}
 80046fe:	bf00      	nop
 8004700:	370c      	adds	r7, #12
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr

0800470a <LL_RCC_MSI_GetRange>:
{
 800470a:	b480      	push	{r7}
 800470c:	b083      	sub	sp, #12
 800470e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004710:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800471a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2bb0      	cmp	r3, #176	; 0xb0
 8004720:	d901      	bls.n	8004726 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8004722:	23b0      	movs	r3, #176	; 0xb0
 8004724:	607b      	str	r3, [r7, #4]
  return msiRange;
 8004726:	687b      	ldr	r3, [r7, #4]
}
 8004728:	4618      	mov	r0, r3
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <LL_RCC_MSI_SetCalibTrimming>:
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800473c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	021b      	lsls	r3, r3, #8
 800474a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800474e:	4313      	orrs	r3, r2
 8004750:	604b      	str	r3, [r1, #4]
}
 8004752:	bf00      	nop
 8004754:	370c      	adds	r7, #12
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr

0800475e <LL_RCC_SetSysClkSource>:
{
 800475e:	b480      	push	{r7}
 8004760:	b083      	sub	sp, #12
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004766:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f023 0203 	bic.w	r2, r3, #3
 8004770:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4313      	orrs	r3, r2
 8004778:	608b      	str	r3, [r1, #8]
}
 800477a:	bf00      	nop
 800477c:	370c      	adds	r7, #12
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr

08004786 <LL_RCC_GetSysClkSource>:
{
 8004786:	b480      	push	{r7}
 8004788:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800478a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f003 030c 	and.w	r3, r3, #12
}
 8004794:	4618      	mov	r0, r3
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr

0800479e <LL_RCC_SetAHBPrescaler>:
{
 800479e:	b480      	push	{r7}
 80047a0:	b083      	sub	sp, #12
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80047a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	608b      	str	r3, [r1, #8]
}
 80047ba:	bf00      	nop
 80047bc:	370c      	adds	r7, #12
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr

080047c6 <LL_C2_RCC_SetAHBPrescaler>:
{
 80047c6:	b480      	push	{r7}
 80047c8:	b083      	sub	sp, #12
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80047ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047d2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80047d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80047e6:	bf00      	nop
 80047e8:	370c      	adds	r7, #12
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr

080047f2 <LL_RCC_SetAHB4Prescaler>:
{
 80047f2:	b480      	push	{r7}
 80047f4:	b083      	sub	sp, #12
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80047fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047fe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004802:	f023 020f 	bic.w	r2, r3, #15
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	091b      	lsrs	r3, r3, #4
 800480a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800480e:	4313      	orrs	r3, r2
 8004810:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004814:	bf00      	nop
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <LL_RCC_SetAPB1Prescaler>:
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004828:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004832:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4313      	orrs	r3, r2
 800483a:	608b      	str	r3, [r1, #8]
}
 800483c:	bf00      	nop
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <LL_RCC_SetAPB2Prescaler>:
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004850:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800485a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4313      	orrs	r3, r2
 8004862:	608b      	str	r3, [r1, #8]
}
 8004864:	bf00      	nop
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <LL_RCC_GetAHBPrescaler>:
{
 8004870:	b480      	push	{r7}
 8004872:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004874:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800487e:	4618      	mov	r0, r3
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <LL_RCC_GetAHB4Prescaler>:
{
 8004888:	b480      	push	{r7}
 800488a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800488c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004890:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004894:	011b      	lsls	r3, r3, #4
 8004896:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800489a:	4618      	mov	r0, r3
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <LL_RCC_GetAPB1Prescaler>:
{
 80048a4:	b480      	push	{r7}
 80048a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80048a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <LL_RCC_GetAPB2Prescaler>:
{
 80048bc:	b480      	push	{r7}
 80048be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80048c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <LL_RCC_PLL_Enable>:
{
 80048d4:	b480      	push	{r7}
 80048d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80048d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048e6:	6013      	str	r3, [r2, #0]
}
 80048e8:	bf00      	nop
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr

080048f2 <LL_RCC_PLL_Disable>:
{
 80048f2:	b480      	push	{r7}
 80048f4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80048f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004900:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004904:	6013      	str	r3, [r2, #0]
}
 8004906:	bf00      	nop
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <LL_RCC_PLL_IsReady>:
{
 8004910:	b480      	push	{r7}
 8004912:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004914:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800491e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004922:	d101      	bne.n	8004928 <LL_RCC_PLL_IsReady+0x18>
 8004924:	2301      	movs	r3, #1
 8004926:	e000      	b.n	800492a <LL_RCC_PLL_IsReady+0x1a>
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <LL_RCC_PLL_GetN>:
{
 8004934:	b480      	push	{r7}
 8004936:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004938:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	0a1b      	lsrs	r3, r3, #8
 8004940:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004944:	4618      	mov	r0, r3
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr

0800494e <LL_RCC_PLL_GetR>:
{
 800494e:	b480      	push	{r7}
 8004950:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004952:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800495c:	4618      	mov	r0, r3
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr

08004966 <LL_RCC_PLL_GetDivider>:
{
 8004966:	b480      	push	{r7}
 8004968:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800496a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004974:	4618      	mov	r0, r3
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr

0800497e <LL_RCC_PLL_GetMainSource>:
{
 800497e:	b480      	push	{r7}
 8004980:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004982:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	f003 0303 	and.w	r3, r3, #3
}
 800498c:	4618      	mov	r0, r3
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <LL_RCC_IsActiveFlag_HPRE>:
{
 8004996:	b480      	push	{r7}
 8004998:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800499a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049a8:	d101      	bne.n	80049ae <LL_RCC_IsActiveFlag_HPRE+0x18>
 80049aa:	2301      	movs	r3, #1
 80049ac:	e000      	b.n	80049b0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr

080049ba <LL_RCC_IsActiveFlag_C2HPRE>:
{
 80049ba:	b480      	push	{r7}
 80049bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80049be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049c2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80049c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049ce:	d101      	bne.n	80049d4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80049d0:	2301      	movs	r3, #1
 80049d2:	e000      	b.n	80049d6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 80049e0:	b480      	push	{r7}
 80049e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80049e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049e8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80049ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049f4:	d101      	bne.n	80049fa <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80049f6:	2301      	movs	r3, #1
 80049f8:	e000      	b.n	80049fc <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr

08004a06 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8004a06:	b480      	push	{r7}
 8004a08:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004a0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a18:	d101      	bne.n	8004a1e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e000      	b.n	8004a20 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004a1e:	2300      	movs	r3, #0
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr

08004a2a <LL_RCC_IsActiveFlag_PPRE2>:
{
 8004a2a:	b480      	push	{r7}
 8004a2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004a2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a38:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a3c:	d101      	bne.n	8004a42 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e000      	b.n	8004a44 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004a42:	2300      	movs	r3, #0
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
	...

08004a50 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a50:	b590      	push	{r4, r7, lr}
 8004a52:	b08d      	sub	sp, #52	; 0x34
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d101      	bne.n	8004a62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e37e      	b.n	8005160 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0320 	and.w	r3, r3, #32
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	f000 8092 	beq.w	8004b94 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a70:	f7ff fe89 	bl	8004786 <LL_RCC_GetSysClkSource>
 8004a74:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a76:	f7ff ff82 	bl	800497e <LL_RCC_PLL_GetMainSource>
 8004a7a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d005      	beq.n	8004a8e <HAL_RCC_OscConfig+0x3e>
 8004a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a84:	2b0c      	cmp	r3, #12
 8004a86:	d14c      	bne.n	8004b22 <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d149      	bne.n	8004b22 <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a8e:	f7ff fe17 	bl	80046c0 <LL_RCC_MSI_IsReady>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d005      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x54>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	69db      	ldr	r3, [r3, #28]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d101      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e35d      	b.n	8005160 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004aa8:	f7ff fe2f 	bl	800470a <LL_RCC_MSI_GetRange>
 8004aac:	4603      	mov	r3, r0
 8004aae:	429c      	cmp	r4, r3
 8004ab0:	d914      	bls.n	8004adc <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f000 fd42 	bl	8005540 <RCC_SetFlashLatencyFromMSIRange>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d001      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e34c      	b.n	8005160 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7ff fe09 	bl	80046e2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a1b      	ldr	r3, [r3, #32]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7ff fe2d 	bl	8004734 <LL_RCC_MSI_SetCalibTrimming>
 8004ada:	e013      	b.n	8004b04 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f7ff fdfe 	bl	80046e2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a1b      	ldr	r3, [r3, #32]
 8004aea:	4618      	mov	r0, r3
 8004aec:	f7ff fe22 	bl	8004734 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af4:	4618      	mov	r0, r3
 8004af6:	f000 fd23 	bl	8005540 <RCC_SetFlashLatencyFromMSIRange>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d001      	beq.n	8004b04 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e32d      	b.n	8005160 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004b04:	f000 fcdc 	bl	80054c0 <HAL_RCC_GetHCLKFreq>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	4ab3      	ldr	r2, [pc, #716]	; (8004dd8 <HAL_RCC_OscConfig+0x388>)
 8004b0c:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004b0e:	4bb3      	ldr	r3, [pc, #716]	; (8004ddc <HAL_RCC_OscConfig+0x38c>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7fe faea 	bl	80030ec <HAL_InitTick>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d039      	beq.n	8004b92 <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e31e      	b.n	8005160 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	69db      	ldr	r3, [r3, #28]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d01e      	beq.n	8004b68 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004b2a:	f7ff fdab 	bl	8004684 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b2e:	f7fe fb2b 	bl	8003188 <HAL_GetTick>
 8004b32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004b34:	e008      	b.n	8004b48 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b36:	f7fe fb27 	bl	8003188 <HAL_GetTick>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d901      	bls.n	8004b48 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e30b      	b.n	8005160 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004b48:	f7ff fdba 	bl	80046c0 <LL_RCC_MSI_IsReady>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d0f1      	beq.n	8004b36 <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7ff fdc3 	bl	80046e2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a1b      	ldr	r3, [r3, #32]
 8004b60:	4618      	mov	r0, r3
 8004b62:	f7ff fde7 	bl	8004734 <LL_RCC_MSI_SetCalibTrimming>
 8004b66:	e015      	b.n	8004b94 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004b68:	f7ff fd9b 	bl	80046a2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b6c:	f7fe fb0c 	bl	8003188 <HAL_GetTick>
 8004b70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004b72:	e008      	b.n	8004b86 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b74:	f7fe fb08 	bl	8003188 <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d901      	bls.n	8004b86 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e2ec      	b.n	8005160 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004b86:	f7ff fd9b 	bl	80046c0 <LL_RCC_MSI_IsReady>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d1f1      	bne.n	8004b74 <HAL_RCC_OscConfig+0x124>
 8004b90:	e000      	b.n	8004b94 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b92:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0301 	and.w	r3, r3, #1
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d04e      	beq.n	8004c3e <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ba0:	f7ff fdf1 	bl	8004786 <LL_RCC_GetSysClkSource>
 8004ba4:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ba6:	f7ff feea 	bl	800497e <LL_RCC_PLL_GetMainSource>
 8004baa:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004bac:	6a3b      	ldr	r3, [r7, #32]
 8004bae:	2b08      	cmp	r3, #8
 8004bb0:	d005      	beq.n	8004bbe <HAL_RCC_OscConfig+0x16e>
 8004bb2:	6a3b      	ldr	r3, [r7, #32]
 8004bb4:	2b0c      	cmp	r3, #12
 8004bb6:	d10d      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	2b03      	cmp	r3, #3
 8004bbc:	d10a      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bbe:	f7ff fc01 	bl	80043c4 <LL_RCC_HSE_IsReady>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d039      	beq.n	8004c3c <HAL_RCC_OscConfig+0x1ec>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d135      	bne.n	8004c3c <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e2c5      	b.n	8005160 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bdc:	d102      	bne.n	8004be4 <HAL_RCC_OscConfig+0x194>
 8004bde:	f7ff fbd3 	bl	8004388 <LL_RCC_HSE_Enable>
 8004be2:	e001      	b.n	8004be8 <HAL_RCC_OscConfig+0x198>
 8004be4:	f7ff fbdf 	bl	80043a6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d012      	beq.n	8004c16 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf0:	f7fe faca 	bl	8003188 <HAL_GetTick>
 8004bf4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004bf6:	e008      	b.n	8004c0a <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bf8:	f7fe fac6 	bl	8003188 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	2b64      	cmp	r3, #100	; 0x64
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e2aa      	b.n	8005160 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004c0a:	f7ff fbdb 	bl	80043c4 <LL_RCC_HSE_IsReady>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d0f1      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x1a8>
 8004c14:	e013      	b.n	8004c3e <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c16:	f7fe fab7 	bl	8003188 <HAL_GetTick>
 8004c1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004c1c:	e008      	b.n	8004c30 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c1e:	f7fe fab3 	bl	8003188 <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	2b64      	cmp	r3, #100	; 0x64
 8004c2a:	d901      	bls.n	8004c30 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e297      	b.n	8005160 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004c30:	f7ff fbc8 	bl	80043c4 <LL_RCC_HSE_IsReady>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d1f1      	bne.n	8004c1e <HAL_RCC_OscConfig+0x1ce>
 8004c3a:	e000      	b.n	8004c3e <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0302 	and.w	r3, r3, #2
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d051      	beq.n	8004cee <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c4a:	f7ff fd9c 	bl	8004786 <LL_RCC_GetSysClkSource>
 8004c4e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c50:	f7ff fe95 	bl	800497e <LL_RCC_PLL_GetMainSource>
 8004c54:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	2b04      	cmp	r3, #4
 8004c5a:	d005      	beq.n	8004c68 <HAL_RCC_OscConfig+0x218>
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	2b0c      	cmp	r3, #12
 8004c60:	d113      	bne.n	8004c8a <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d110      	bne.n	8004c8a <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c68:	f7ff fbdc 	bl	8004424 <LL_RCC_HSI_IsReady>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d005      	beq.n	8004c7e <HAL_RCC_OscConfig+0x22e>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d101      	bne.n	8004c7e <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e270      	b.n	8005160 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	4618      	mov	r0, r3
 8004c84:	f7ff fbe0 	bl	8004448 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c88:	e031      	b.n	8004cee <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d019      	beq.n	8004cc6 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c92:	f7ff fba9 	bl	80043e8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c96:	f7fe fa77 	bl	8003188 <HAL_GetTick>
 8004c9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004c9c:	e008      	b.n	8004cb0 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c9e:	f7fe fa73 	bl	8003188 <HAL_GetTick>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d901      	bls.n	8004cb0 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e257      	b.n	8005160 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004cb0:	f7ff fbb8 	bl	8004424 <LL_RCC_HSI_IsReady>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d0f1      	beq.n	8004c9e <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7ff fbc2 	bl	8004448 <LL_RCC_HSI_SetCalibTrimming>
 8004cc4:	e013      	b.n	8004cee <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cc6:	f7ff fb9e 	bl	8004406 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cca:	f7fe fa5d 	bl	8003188 <HAL_GetTick>
 8004cce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004cd0:	e008      	b.n	8004ce4 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cd2:	f7fe fa59 	bl	8003188 <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d901      	bls.n	8004ce4 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	e23d      	b.n	8005160 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004ce4:	f7ff fb9e 	bl	8004424 <LL_RCC_HSI_IsReady>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1f1      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0308 	and.w	r3, r3, #8
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d106      	bne.n	8004d08 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	f000 80a3 	beq.w	8004e4e <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	695b      	ldr	r3, [r3, #20]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d076      	beq.n	8004dfe <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0310 	and.w	r3, r3, #16
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d046      	beq.n	8004daa <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004d1c:	f7ff fc55 	bl	80045ca <LL_RCC_LSI1_IsReady>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d113      	bne.n	8004d4e <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004d26:	f7ff fc2e 	bl	8004586 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d2a:	f7fe fa2d 	bl	8003188 <HAL_GetTick>
 8004d2e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004d30:	e008      	b.n	8004d44 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004d32:	f7fe fa29 	bl	8003188 <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d901      	bls.n	8004d44 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e20d      	b.n	8005160 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004d44:	f7ff fc41 	bl	80045ca <LL_RCC_LSI1_IsReady>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d0f1      	beq.n	8004d32 <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004d4e:	f7ff fc4e 	bl	80045ee <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d52:	f7fe fa19 	bl	8003188 <HAL_GetTick>
 8004d56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004d58:	e008      	b.n	8004d6c <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004d5a:	f7fe fa15 	bl	8003188 <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	2b03      	cmp	r3, #3
 8004d66:	d901      	bls.n	8004d6c <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e1f9      	b.n	8005160 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004d6c:	f7ff fc61 	bl	8004632 <LL_RCC_LSI2_IsReady>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d0f1      	beq.n	8004d5a <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	699b      	ldr	r3, [r3, #24]
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7ff fc6b 	bl	8004656 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004d80:	f7ff fc12 	bl	80045a8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d84:	f7fe fa00 	bl	8003188 <HAL_GetTick>
 8004d88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004d8a:	e008      	b.n	8004d9e <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004d8c:	f7fe f9fc 	bl	8003188 <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d901      	bls.n	8004d9e <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e1e0      	b.n	8005160 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004d9e:	f7ff fc14 	bl	80045ca <LL_RCC_LSI1_IsReady>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d1f1      	bne.n	8004d8c <HAL_RCC_OscConfig+0x33c>
 8004da8:	e051      	b.n	8004e4e <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004daa:	f7ff fbec 	bl	8004586 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dae:	f7fe f9eb 	bl	8003188 <HAL_GetTick>
 8004db2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004db4:	e008      	b.n	8004dc8 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004db6:	f7fe f9e7 	bl	8003188 <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d901      	bls.n	8004dc8 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e1cb      	b.n	8005160 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004dc8:	f7ff fbff 	bl	80045ca <LL_RCC_LSI1_IsReady>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d0f1      	beq.n	8004db6 <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004dd2:	f7ff fc1d 	bl	8004610 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004dd6:	e00c      	b.n	8004df2 <HAL_RCC_OscConfig+0x3a2>
 8004dd8:	2000001c 	.word	0x2000001c
 8004ddc:	20000020 	.word	0x20000020
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004de0:	f7fe f9d2 	bl	8003188 <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	2b03      	cmp	r3, #3
 8004dec:	d901      	bls.n	8004df2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e1b6      	b.n	8005160 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004df2:	f7ff fc1e 	bl	8004632 <LL_RCC_LSI2_IsReady>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1f1      	bne.n	8004de0 <HAL_RCC_OscConfig+0x390>
 8004dfc:	e027      	b.n	8004e4e <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004dfe:	f7ff fc07 	bl	8004610 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e02:	f7fe f9c1 	bl	8003188 <HAL_GetTick>
 8004e06:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004e08:	e008      	b.n	8004e1c <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004e0a:	f7fe f9bd 	bl	8003188 <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	2b03      	cmp	r3, #3
 8004e16:	d901      	bls.n	8004e1c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	e1a1      	b.n	8005160 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004e1c:	f7ff fc09 	bl	8004632 <LL_RCC_LSI2_IsReady>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d1f1      	bne.n	8004e0a <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004e26:	f7ff fbbf 	bl	80045a8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e2a:	f7fe f9ad 	bl	8003188 <HAL_GetTick>
 8004e2e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004e30:	e008      	b.n	8004e44 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004e32:	f7fe f9a9 	bl	8003188 <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d901      	bls.n	8004e44 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e18d      	b.n	8005160 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004e44:	f7ff fbc1 	bl	80045ca <LL_RCC_LSI1_IsReady>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1f1      	bne.n	8004e32 <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0304 	and.w	r3, r3, #4
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d05b      	beq.n	8004f12 <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e5a:	4bb5      	ldr	r3, [pc, #724]	; (8005130 <HAL_RCC_OscConfig+0x6e0>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d114      	bne.n	8004e90 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004e66:	f7ff fa5f 	bl	8004328 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e6a:	f7fe f98d 	bl	8003188 <HAL_GetTick>
 8004e6e:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e70:	e008      	b.n	8004e84 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e72:	f7fe f989 	bl	8003188 <HAL_GetTick>
 8004e76:	4602      	mov	r2, r0
 8004e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d901      	bls.n	8004e84 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8004e80:	2303      	movs	r3, #3
 8004e82:	e16d      	b.n	8005160 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e84:	4baa      	ldr	r3, [pc, #680]	; (8005130 <HAL_RCC_OscConfig+0x6e0>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d0f0      	beq.n	8004e72 <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d102      	bne.n	8004e9e <HAL_RCC_OscConfig+0x44e>
 8004e98:	f7ff fb1f 	bl	80044da <LL_RCC_LSE_Enable>
 8004e9c:	e00c      	b.n	8004eb8 <HAL_RCC_OscConfig+0x468>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	2b05      	cmp	r3, #5
 8004ea4:	d104      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x460>
 8004ea6:	f7ff fb3a 	bl	800451e <LL_RCC_LSE_EnableBypass>
 8004eaa:	f7ff fb16 	bl	80044da <LL_RCC_LSE_Enable>
 8004eae:	e003      	b.n	8004eb8 <HAL_RCC_OscConfig+0x468>
 8004eb0:	f7ff fb24 	bl	80044fc <LL_RCC_LSE_Disable>
 8004eb4:	f7ff fb44 	bl	8004540 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d014      	beq.n	8004eea <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ec0:	f7fe f962 	bl	8003188 <HAL_GetTick>
 8004ec4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004ec6:	e00a      	b.n	8004ede <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ec8:	f7fe f95e 	bl	8003188 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d901      	bls.n	8004ede <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e140      	b.n	8005160 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004ede:	f7ff fb40 	bl	8004562 <LL_RCC_LSE_IsReady>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d0ef      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x478>
 8004ee8:	e013      	b.n	8004f12 <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eea:	f7fe f94d 	bl	8003188 <HAL_GetTick>
 8004eee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004ef0:	e00a      	b.n	8004f08 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ef2:	f7fe f949 	bl	8003188 <HAL_GetTick>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d901      	bls.n	8004f08 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e12b      	b.n	8005160 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004f08:	f7ff fb2b 	bl	8004562 <LL_RCC_LSE_IsReady>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d1ef      	bne.n	8004ef2 <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d02c      	beq.n	8004f78 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d014      	beq.n	8004f50 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f26:	f7ff faa4 	bl	8004472 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f2a:	f7fe f92d 	bl	8003188 <HAL_GetTick>
 8004f2e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004f30:	e008      	b.n	8004f44 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f32:	f7fe f929 	bl	8003188 <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d901      	bls.n	8004f44 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e10d      	b.n	8005160 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004f44:	f7ff fab7 	bl	80044b6 <LL_RCC_HSI48_IsReady>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d0f1      	beq.n	8004f32 <HAL_RCC_OscConfig+0x4e2>
 8004f4e:	e013      	b.n	8004f78 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004f50:	f7ff faa0 	bl	8004494 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f54:	f7fe f918 	bl	8003188 <HAL_GetTick>
 8004f58:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004f5a:	e008      	b.n	8004f6e <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f5c:	f7fe f914 	bl	8003188 <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d901      	bls.n	8004f6e <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e0f8      	b.n	8005160 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004f6e:	f7ff faa2 	bl	80044b6 <LL_RCC_HSI48_IsReady>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d1f1      	bne.n	8004f5c <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f000 80ee 	beq.w	800515e <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f82:	f7ff fc00 	bl	8004786 <LL_RCC_GetSysClkSource>
 8004f86:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004f88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	f040 80af 	bne.w	80050f8 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f003 0203 	and.w	r2, r3, #3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d123      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d11c      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	0a1b      	lsrs	r3, r3, #8
 8004fba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d114      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d10d      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d106      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d05d      	beq.n	80050ac <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	2b0c      	cmp	r3, #12
 8004ff4:	d058      	beq.n	80050a8 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004ff6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d001      	beq.n	8005008 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e0ab      	b.n	8005160 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005008:	f7ff fc73 	bl	80048f2 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800500c:	f7fe f8bc 	bl	8003188 <HAL_GetTick>
 8005010:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005012:	e008      	b.n	8005026 <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005014:	f7fe f8b8 	bl	8003188 <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	2b02      	cmp	r3, #2
 8005020:	d901      	bls.n	8005026 <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e09c      	b.n	8005160 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005026:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d1ef      	bne.n	8005014 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005034:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005038:	68da      	ldr	r2, [r3, #12]
 800503a:	4b3e      	ldr	r3, [pc, #248]	; (8005134 <HAL_RCC_OscConfig+0x6e4>)
 800503c:	4013      	ands	r3, r2
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005046:	4311      	orrs	r1, r2
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800504c:	0212      	lsls	r2, r2, #8
 800504e:	4311      	orrs	r1, r2
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005054:	4311      	orrs	r1, r2
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800505a:	4311      	orrs	r1, r2
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005060:	430a      	orrs	r2, r1
 8005062:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005066:	4313      	orrs	r3, r2
 8005068:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800506a:	f7ff fc33 	bl	80048d4 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800506e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800507c:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800507e:	f7fe f883 	bl	8003188 <HAL_GetTick>
 8005082:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005084:	e008      	b.n	8005098 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005086:	f7fe f87f 	bl	8003188 <HAL_GetTick>
 800508a:	4602      	mov	r2, r0
 800508c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	2b02      	cmp	r3, #2
 8005092:	d901      	bls.n	8005098 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e063      	b.n	8005160 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005098:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d0ef      	beq.n	8005086 <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050a6:	e05a      	b.n	800515e <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e059      	b.n	8005160 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d151      	bne.n	800515e <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80050ba:	f7ff fc0b 	bl	80048d4 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80050be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050cc:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80050ce:	f7fe f85b 	bl	8003188 <HAL_GetTick>
 80050d2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050d4:	e008      	b.n	80050e8 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050d6:	f7fe f857 	bl	8003188 <HAL_GetTick>
 80050da:	4602      	mov	r2, r0
 80050dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d901      	bls.n	80050e8 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e03b      	b.n	8005160 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d0ef      	beq.n	80050d6 <HAL_RCC_OscConfig+0x686>
 80050f6:	e032      	b.n	800515e <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	2b0c      	cmp	r3, #12
 80050fc:	d02d      	beq.n	800515a <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050fe:	f7ff fbf8 	bl	80048f2 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8005102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800510c:	f023 0303 	bic.w	r3, r3, #3
 8005110:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8005112:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800511c:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8005120:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005124:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005126:	f7fe f82f 	bl	8003188 <HAL_GetTick>
 800512a:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800512c:	e00d      	b.n	800514a <HAL_RCC_OscConfig+0x6fa>
 800512e:	bf00      	nop
 8005130:	58000400 	.word	0x58000400
 8005134:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005138:	f7fe f826 	bl	8003188 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	2b02      	cmp	r3, #2
 8005144:	d901      	bls.n	800514a <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e00a      	b.n	8005160 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800514a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1ef      	bne.n	8005138 <HAL_RCC_OscConfig+0x6e8>
 8005158:	e001      	b.n	800515e <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e000      	b.n	8005160 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 800515e:	2300      	movs	r3, #0
}
 8005160:	4618      	mov	r0, r3
 8005162:	3734      	adds	r7, #52	; 0x34
 8005164:	46bd      	mov	sp, r7
 8005166:	bd90      	pop	{r4, r7, pc}

08005168 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d101      	bne.n	800517c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e12d      	b.n	80053d8 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800517c:	4b98      	ldr	r3, [pc, #608]	; (80053e0 <HAL_RCC_ClockConfig+0x278>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0307 	and.w	r3, r3, #7
 8005184:	683a      	ldr	r2, [r7, #0]
 8005186:	429a      	cmp	r2, r3
 8005188:	d91b      	bls.n	80051c2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800518a:	4b95      	ldr	r3, [pc, #596]	; (80053e0 <HAL_RCC_ClockConfig+0x278>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f023 0207 	bic.w	r2, r3, #7
 8005192:	4993      	ldr	r1, [pc, #588]	; (80053e0 <HAL_RCC_ClockConfig+0x278>)
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	4313      	orrs	r3, r2
 8005198:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800519a:	f7fd fff5 	bl	8003188 <HAL_GetTick>
 800519e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051a0:	e008      	b.n	80051b4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80051a2:	f7fd fff1 	bl	8003188 <HAL_GetTick>
 80051a6:	4602      	mov	r2, r0
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	d901      	bls.n	80051b4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e111      	b.n	80053d8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051b4:	4b8a      	ldr	r3, [pc, #552]	; (80053e0 <HAL_RCC_ClockConfig+0x278>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0307 	and.w	r3, r3, #7
 80051bc:	683a      	ldr	r2, [r7, #0]
 80051be:	429a      	cmp	r2, r3
 80051c0:	d1ef      	bne.n	80051a2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0302 	and.w	r3, r3, #2
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d016      	beq.n	80051fc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	4618      	mov	r0, r3
 80051d4:	f7ff fae3 	bl	800479e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80051d8:	f7fd ffd6 	bl	8003188 <HAL_GetTick>
 80051dc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80051de:	e008      	b.n	80051f2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80051e0:	f7fd ffd2 	bl	8003188 <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d901      	bls.n	80051f2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e0f2      	b.n	80053d8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80051f2:	f7ff fbd0 	bl	8004996 <LL_RCC_IsActiveFlag_HPRE>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d0f1      	beq.n	80051e0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0320 	and.w	r3, r3, #32
 8005204:	2b00      	cmp	r3, #0
 8005206:	d016      	beq.n	8005236 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	695b      	ldr	r3, [r3, #20]
 800520c:	4618      	mov	r0, r3
 800520e:	f7ff fada 	bl	80047c6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005212:	f7fd ffb9 	bl	8003188 <HAL_GetTick>
 8005216:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005218:	e008      	b.n	800522c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800521a:	f7fd ffb5 	bl	8003188 <HAL_GetTick>
 800521e:	4602      	mov	r2, r0
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	2b02      	cmp	r3, #2
 8005226:	d901      	bls.n	800522c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005228:	2303      	movs	r3, #3
 800522a:	e0d5      	b.n	80053d8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800522c:	f7ff fbc5 	bl	80049ba <LL_RCC_IsActiveFlag_C2HPRE>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d0f1      	beq.n	800521a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800523e:	2b00      	cmp	r3, #0
 8005240:	d016      	beq.n	8005270 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	699b      	ldr	r3, [r3, #24]
 8005246:	4618      	mov	r0, r3
 8005248:	f7ff fad3 	bl	80047f2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800524c:	f7fd ff9c 	bl	8003188 <HAL_GetTick>
 8005250:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005252:	e008      	b.n	8005266 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005254:	f7fd ff98 	bl	8003188 <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	2b02      	cmp	r3, #2
 8005260:	d901      	bls.n	8005266 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e0b8      	b.n	80053d8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005266:	f7ff fbbb 	bl	80049e0 <LL_RCC_IsActiveFlag_SHDHPRE>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d0f1      	beq.n	8005254 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0304 	and.w	r3, r3, #4
 8005278:	2b00      	cmp	r3, #0
 800527a:	d016      	beq.n	80052aa <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	4618      	mov	r0, r3
 8005282:	f7ff facd 	bl	8004820 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005286:	f7fd ff7f 	bl	8003188 <HAL_GetTick>
 800528a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800528c:	e008      	b.n	80052a0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800528e:	f7fd ff7b 	bl	8003188 <HAL_GetTick>
 8005292:	4602      	mov	r2, r0
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	2b02      	cmp	r3, #2
 800529a:	d901      	bls.n	80052a0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	e09b      	b.n	80053d8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80052a0:	f7ff fbb1 	bl	8004a06 <LL_RCC_IsActiveFlag_PPRE1>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d0f1      	beq.n	800528e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 0308 	and.w	r3, r3, #8
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d017      	beq.n	80052e6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	00db      	lsls	r3, r3, #3
 80052bc:	4618      	mov	r0, r3
 80052be:	f7ff fac3 	bl	8004848 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80052c2:	f7fd ff61 	bl	8003188 <HAL_GetTick>
 80052c6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80052c8:	e008      	b.n	80052dc <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80052ca:	f7fd ff5d 	bl	8003188 <HAL_GetTick>
 80052ce:	4602      	mov	r2, r0
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	2b02      	cmp	r3, #2
 80052d6:	d901      	bls.n	80052dc <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80052d8:	2303      	movs	r3, #3
 80052da:	e07d      	b.n	80053d8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80052dc:	f7ff fba5 	bl	8004a2a <LL_RCC_IsActiveFlag_PPRE2>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d0f1      	beq.n	80052ca <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0301 	and.w	r3, r3, #1
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d043      	beq.n	800537a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d106      	bne.n	8005308 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80052fa:	f7ff f863 	bl	80043c4 <LL_RCC_HSE_IsReady>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d11e      	bne.n	8005342 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e067      	b.n	80053d8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	2b03      	cmp	r3, #3
 800530e:	d106      	bne.n	800531e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005310:	f7ff fafe 	bl	8004910 <LL_RCC_PLL_IsReady>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d113      	bne.n	8005342 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e05c      	b.n	80053d8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d106      	bne.n	8005334 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005326:	f7ff f9cb 	bl	80046c0 <LL_RCC_MSI_IsReady>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d108      	bne.n	8005342 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e051      	b.n	80053d8 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005334:	f7ff f876 	bl	8004424 <LL_RCC_HSI_IsReady>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d101      	bne.n	8005342 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e04a      	b.n	80053d8 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	4618      	mov	r0, r3
 8005348:	f7ff fa09 	bl	800475e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800534c:	f7fd ff1c 	bl	8003188 <HAL_GetTick>
 8005350:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005352:	e00a      	b.n	800536a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005354:	f7fd ff18 	bl	8003188 <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005362:	4293      	cmp	r3, r2
 8005364:	d901      	bls.n	800536a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e036      	b.n	80053d8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800536a:	f7ff fa0c 	bl	8004786 <LL_RCC_GetSysClkSource>
 800536e:	4602      	mov	r2, r0
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	429a      	cmp	r2, r3
 8005378:	d1ec      	bne.n	8005354 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800537a:	4b19      	ldr	r3, [pc, #100]	; (80053e0 <HAL_RCC_ClockConfig+0x278>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0307 	and.w	r3, r3, #7
 8005382:	683a      	ldr	r2, [r7, #0]
 8005384:	429a      	cmp	r2, r3
 8005386:	d21b      	bcs.n	80053c0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005388:	4b15      	ldr	r3, [pc, #84]	; (80053e0 <HAL_RCC_ClockConfig+0x278>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f023 0207 	bic.w	r2, r3, #7
 8005390:	4913      	ldr	r1, [pc, #76]	; (80053e0 <HAL_RCC_ClockConfig+0x278>)
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	4313      	orrs	r3, r2
 8005396:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005398:	f7fd fef6 	bl	8003188 <HAL_GetTick>
 800539c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800539e:	e008      	b.n	80053b2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80053a0:	f7fd fef2 	bl	8003188 <HAL_GetTick>
 80053a4:	4602      	mov	r2, r0
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d901      	bls.n	80053b2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e012      	b.n	80053d8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053b2:	4b0b      	ldr	r3, [pc, #44]	; (80053e0 <HAL_RCC_ClockConfig+0x278>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0307 	and.w	r3, r3, #7
 80053ba:	683a      	ldr	r2, [r7, #0]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d1ef      	bne.n	80053a0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80053c0:	f000 f87e 	bl	80054c0 <HAL_RCC_GetHCLKFreq>
 80053c4:	4603      	mov	r3, r0
 80053c6:	4a07      	ldr	r2, [pc, #28]	; (80053e4 <HAL_RCC_ClockConfig+0x27c>)
 80053c8:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80053ca:	f7fd fee9 	bl	80031a0 <HAL_GetTickPrio>
 80053ce:	4603      	mov	r3, r0
 80053d0:	4618      	mov	r0, r3
 80053d2:	f7fd fe8b 	bl	80030ec <HAL_InitTick>
 80053d6:	4603      	mov	r3, r0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3710      	adds	r7, #16
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	58004000 	.word	0x58004000
 80053e4:	2000001c 	.word	0x2000001c

080053e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053e8:	b590      	push	{r4, r7, lr}
 80053ea:	b085      	sub	sp, #20
 80053ec:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053ee:	f7ff f9ca 	bl	8004786 <LL_RCC_GetSysClkSource>
 80053f2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d10a      	bne.n	8005410 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80053fa:	f7ff f986 	bl	800470a <LL_RCC_MSI_GetRange>
 80053fe:	4603      	mov	r3, r0
 8005400:	091b      	lsrs	r3, r3, #4
 8005402:	f003 030f 	and.w	r3, r3, #15
 8005406:	4a2b      	ldr	r2, [pc, #172]	; (80054b4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800540c:	60fb      	str	r3, [r7, #12]
 800540e:	e04b      	b.n	80054a8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2b04      	cmp	r3, #4
 8005414:	d102      	bne.n	800541c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005416:	4b28      	ldr	r3, [pc, #160]	; (80054b8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005418:	60fb      	str	r3, [r7, #12]
 800541a:	e045      	b.n	80054a8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2b08      	cmp	r3, #8
 8005420:	d10a      	bne.n	8005438 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005422:	f7fe ff9f 	bl	8004364 <LL_RCC_HSE_IsEnabledDiv2>
 8005426:	4603      	mov	r3, r0
 8005428:	2b01      	cmp	r3, #1
 800542a:	d102      	bne.n	8005432 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800542c:	4b22      	ldr	r3, [pc, #136]	; (80054b8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800542e:	60fb      	str	r3, [r7, #12]
 8005430:	e03a      	b.n	80054a8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005432:	4b22      	ldr	r3, [pc, #136]	; (80054bc <HAL_RCC_GetSysClockFreq+0xd4>)
 8005434:	60fb      	str	r3, [r7, #12]
 8005436:	e037      	b.n	80054a8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005438:	f7ff faa1 	bl	800497e <LL_RCC_PLL_GetMainSource>
 800543c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	2b02      	cmp	r3, #2
 8005442:	d003      	beq.n	800544c <HAL_RCC_GetSysClockFreq+0x64>
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	2b03      	cmp	r3, #3
 8005448:	d003      	beq.n	8005452 <HAL_RCC_GetSysClockFreq+0x6a>
 800544a:	e00d      	b.n	8005468 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800544c:	4b1a      	ldr	r3, [pc, #104]	; (80054b8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800544e:	60bb      	str	r3, [r7, #8]
        break;
 8005450:	e015      	b.n	800547e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005452:	f7fe ff87 	bl	8004364 <LL_RCC_HSE_IsEnabledDiv2>
 8005456:	4603      	mov	r3, r0
 8005458:	2b01      	cmp	r3, #1
 800545a:	d102      	bne.n	8005462 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800545c:	4b16      	ldr	r3, [pc, #88]	; (80054b8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800545e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005460:	e00d      	b.n	800547e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8005462:	4b16      	ldr	r3, [pc, #88]	; (80054bc <HAL_RCC_GetSysClockFreq+0xd4>)
 8005464:	60bb      	str	r3, [r7, #8]
        break;
 8005466:	e00a      	b.n	800547e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005468:	f7ff f94f 	bl	800470a <LL_RCC_MSI_GetRange>
 800546c:	4603      	mov	r3, r0
 800546e:	091b      	lsrs	r3, r3, #4
 8005470:	f003 030f 	and.w	r3, r3, #15
 8005474:	4a0f      	ldr	r2, [pc, #60]	; (80054b4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800547a:	60bb      	str	r3, [r7, #8]
        break;
 800547c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 800547e:	f7ff fa59 	bl	8004934 <LL_RCC_PLL_GetN>
 8005482:	4602      	mov	r2, r0
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	fb03 f402 	mul.w	r4, r3, r2
 800548a:	f7ff fa6c 	bl	8004966 <LL_RCC_PLL_GetDivider>
 800548e:	4603      	mov	r3, r0
 8005490:	091b      	lsrs	r3, r3, #4
 8005492:	3301      	adds	r3, #1
 8005494:	fbb4 f4f3 	udiv	r4, r4, r3
 8005498:	f7ff fa59 	bl	800494e <LL_RCC_PLL_GetR>
 800549c:	4603      	mov	r3, r0
 800549e:	0f5b      	lsrs	r3, r3, #29
 80054a0:	3301      	adds	r3, #1
 80054a2:	fbb4 f3f3 	udiv	r3, r4, r3
 80054a6:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 80054a8:	68fb      	ldr	r3, [r7, #12]
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3714      	adds	r7, #20
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd90      	pop	{r4, r7, pc}
 80054b2:	bf00      	nop
 80054b4:	0800a464 	.word	0x0800a464
 80054b8:	00f42400 	.word	0x00f42400
 80054bc:	01e84800 	.word	0x01e84800

080054c0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054c0:	b598      	push	{r3, r4, r7, lr}
 80054c2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80054c4:	f7ff ff90 	bl	80053e8 <HAL_RCC_GetSysClockFreq>
 80054c8:	4604      	mov	r4, r0
 80054ca:	f7ff f9d1 	bl	8004870 <LL_RCC_GetAHBPrescaler>
 80054ce:	4603      	mov	r3, r0
 80054d0:	091b      	lsrs	r3, r3, #4
 80054d2:	f003 030f 	and.w	r3, r3, #15
 80054d6:	4a03      	ldr	r2, [pc, #12]	; (80054e4 <HAL_RCC_GetHCLKFreq+0x24>)
 80054d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054dc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	bd98      	pop	{r3, r4, r7, pc}
 80054e4:	0800a404 	.word	0x0800a404

080054e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054e8:	b598      	push	{r3, r4, r7, lr}
 80054ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80054ec:	f7ff ffe8 	bl	80054c0 <HAL_RCC_GetHCLKFreq>
 80054f0:	4604      	mov	r4, r0
 80054f2:	f7ff f9d7 	bl	80048a4 <LL_RCC_GetAPB1Prescaler>
 80054f6:	4603      	mov	r3, r0
 80054f8:	0a1b      	lsrs	r3, r3, #8
 80054fa:	f003 0307 	and.w	r3, r3, #7
 80054fe:	4a04      	ldr	r2, [pc, #16]	; (8005510 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005504:	f003 031f 	and.w	r3, r3, #31
 8005508:	fa24 f303 	lsr.w	r3, r4, r3
}
 800550c:	4618      	mov	r0, r3
 800550e:	bd98      	pop	{r3, r4, r7, pc}
 8005510:	0800a444 	.word	0x0800a444

08005514 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005514:	b598      	push	{r3, r4, r7, lr}
 8005516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005518:	f7ff ffd2 	bl	80054c0 <HAL_RCC_GetHCLKFreq>
 800551c:	4604      	mov	r4, r0
 800551e:	f7ff f9cd 	bl	80048bc <LL_RCC_GetAPB2Prescaler>
 8005522:	4603      	mov	r3, r0
 8005524:	0adb      	lsrs	r3, r3, #11
 8005526:	f003 0307 	and.w	r3, r3, #7
 800552a:	4a04      	ldr	r2, [pc, #16]	; (800553c <HAL_RCC_GetPCLK2Freq+0x28>)
 800552c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005530:	f003 031f 	and.w	r3, r3, #31
 8005534:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005538:	4618      	mov	r0, r3
 800553a:	bd98      	pop	{r3, r4, r7, pc}
 800553c:	0800a444 	.word	0x0800a444

08005540 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005540:	b590      	push	{r4, r7, lr}
 8005542:	b085      	sub	sp, #20
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2bb0      	cmp	r3, #176	; 0xb0
 800554c:	d903      	bls.n	8005556 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800554e:	4b15      	ldr	r3, [pc, #84]	; (80055a4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005552:	60fb      	str	r3, [r7, #12]
 8005554:	e007      	b.n	8005566 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	091b      	lsrs	r3, r3, #4
 800555a:	f003 030f 	and.w	r3, r3, #15
 800555e:	4a11      	ldr	r2, [pc, #68]	; (80055a4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005564:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005566:	f7ff f98f 	bl	8004888 <LL_RCC_GetAHB4Prescaler>
 800556a:	4603      	mov	r3, r0
 800556c:	091b      	lsrs	r3, r3, #4
 800556e:	f003 030f 	and.w	r3, r3, #15
 8005572:	4a0d      	ldr	r2, [pc, #52]	; (80055a8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	fbb2 f3f3 	udiv	r3, r2, r3
 800557e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	4a0a      	ldr	r2, [pc, #40]	; (80055ac <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005584:	fba2 2303 	umull	r2, r3, r2, r3
 8005588:	0c9c      	lsrs	r4, r3, #18
 800558a:	f7fe fedd 	bl	8004348 <HAL_PWREx_GetVoltageRange>
 800558e:	4603      	mov	r3, r0
 8005590:	4619      	mov	r1, r3
 8005592:	4620      	mov	r0, r4
 8005594:	f000 f80c 	bl	80055b0 <RCC_SetFlashLatency>
 8005598:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 800559a:	4618      	mov	r0, r3
 800559c:	3714      	adds	r7, #20
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd90      	pop	{r4, r7, pc}
 80055a2:	bf00      	nop
 80055a4:	0800a464 	.word	0x0800a464
 80055a8:	0800a404 	.word	0x0800a404
 80055ac:	431bde83 	.word	0x431bde83

080055b0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80055b0:	b590      	push	{r4, r7, lr}
 80055b2:	b093      	sub	sp, #76	; 0x4c
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80055ba:	4b39      	ldr	r3, [pc, #228]	; (80056a0 <RCC_SetFlashLatency+0xf0>)
 80055bc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80055c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80055c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80055c6:	4a37      	ldr	r2, [pc, #220]	; (80056a4 <RCC_SetFlashLatency+0xf4>)
 80055c8:	f107 031c 	add.w	r3, r7, #28
 80055cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80055ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80055d2:	4b35      	ldr	r3, [pc, #212]	; (80056a8 <RCC_SetFlashLatency+0xf8>)
 80055d4:	f107 040c 	add.w	r4, r7, #12
 80055d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80055da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80055de:	2300      	movs	r3, #0
 80055e0:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055e8:	d11c      	bne.n	8005624 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80055ea:	2300      	movs	r3, #0
 80055ec:	643b      	str	r3, [r7, #64]	; 0x40
 80055ee:	e015      	b.n	800561c <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80055f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80055f8:	4413      	add	r3, r2
 80055fa:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	429a      	cmp	r2, r3
 8005602:	d808      	bhi.n	8005616 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005604:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800560c:	4413      	add	r3, r2
 800560e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005612:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005614:	e022      	b.n	800565c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005616:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005618:	3301      	adds	r3, #1
 800561a:	643b      	str	r3, [r7, #64]	; 0x40
 800561c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800561e:	2b03      	cmp	r3, #3
 8005620:	d9e6      	bls.n	80055f0 <RCC_SetFlashLatency+0x40>
 8005622:	e01b      	b.n	800565c <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005624:	2300      	movs	r3, #0
 8005626:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005628:	e015      	b.n	8005656 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800562a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005632:	4413      	add	r3, r2
 8005634:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	429a      	cmp	r2, r3
 800563c:	d808      	bhi.n	8005650 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800563e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005646:	4413      	add	r3, r2
 8005648:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800564c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800564e:	e005      	b.n	800565c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005652:	3301      	adds	r3, #1
 8005654:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005658:	2b02      	cmp	r3, #2
 800565a:	d9e6      	bls.n	800562a <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 800565c:	4b13      	ldr	r3, [pc, #76]	; (80056ac <RCC_SetFlashLatency+0xfc>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f023 0207 	bic.w	r2, r3, #7
 8005664:	4911      	ldr	r1, [pc, #68]	; (80056ac <RCC_SetFlashLatency+0xfc>)
 8005666:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005668:	4313      	orrs	r3, r2
 800566a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800566c:	f7fd fd8c 	bl	8003188 <HAL_GetTick>
 8005670:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005672:	e008      	b.n	8005686 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005674:	f7fd fd88 	bl	8003188 <HAL_GetTick>
 8005678:	4602      	mov	r2, r0
 800567a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	2b02      	cmp	r3, #2
 8005680:	d901      	bls.n	8005686 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e007      	b.n	8005696 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005686:	4b09      	ldr	r3, [pc, #36]	; (80056ac <RCC_SetFlashLatency+0xfc>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 0307 	and.w	r3, r3, #7
 800568e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005690:	429a      	cmp	r2, r3
 8005692:	d1ef      	bne.n	8005674 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8005694:	2300      	movs	r3, #0
}
 8005696:	4618      	mov	r0, r3
 8005698:	374c      	adds	r7, #76	; 0x4c
 800569a:	46bd      	mov	sp, r7
 800569c:	bd90      	pop	{r4, r7, pc}
 800569e:	bf00      	nop
 80056a0:	0800a28c 	.word	0x0800a28c
 80056a4:	0800a29c 	.word	0x0800a29c
 80056a8:	0800a2a8 	.word	0x0800a2a8
 80056ac:	58004000 	.word	0x58004000

080056b0 <LL_RCC_LSE_IsEnabled>:
{
 80056b0:	b480      	push	{r7}
 80056b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80056b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056bc:	f003 0301 	and.w	r3, r3, #1
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d101      	bne.n	80056c8 <LL_RCC_LSE_IsEnabled+0x18>
 80056c4:	2301      	movs	r3, #1
 80056c6:	e000      	b.n	80056ca <LL_RCC_LSE_IsEnabled+0x1a>
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <LL_RCC_LSE_IsReady>:
{
 80056d4:	b480      	push	{r7}
 80056d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80056d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056e0:	f003 0302 	and.w	r3, r3, #2
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	d101      	bne.n	80056ec <LL_RCC_LSE_IsReady+0x18>
 80056e8:	2301      	movs	r3, #1
 80056ea:	e000      	b.n	80056ee <LL_RCC_LSE_IsReady+0x1a>
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <LL_RCC_SetRFWKPClockSource>:
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005700:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005704:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005708:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800570c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4313      	orrs	r3, r2
 8005714:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005718:	bf00      	nop
 800571a:	370c      	adds	r7, #12
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <LL_RCC_SetSMPSClockSource>:
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800572c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005732:	f023 0203 	bic.w	r2, r3, #3
 8005736:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4313      	orrs	r3, r2
 800573e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005740:	bf00      	nop
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <LL_RCC_SetSMPSPrescaler>:
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005754:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800575e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4313      	orrs	r3, r2
 8005766:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005768:	bf00      	nop
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <LL_RCC_SetUSARTClockSource>:
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800577c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005784:	f023 0203 	bic.w	r2, r3, #3
 8005788:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4313      	orrs	r3, r2
 8005790:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005794:	bf00      	nop
 8005796:	370c      	adds	r7, #12
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <LL_RCC_SetLPUARTClockSource>:
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80057a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057b0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80057b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80057c0:	bf00      	nop
 80057c2:	370c      	adds	r7, #12
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <LL_RCC_SetI2CClockSource>:
{
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80057d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057d8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	091b      	lsrs	r3, r3, #4
 80057e0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80057e4:	43db      	mvns	r3, r3
 80057e6:	401a      	ands	r2, r3
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	011b      	lsls	r3, r3, #4
 80057ec:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80057f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057f4:	4313      	orrs	r3, r2
 80057f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80057fa:	bf00      	nop
 80057fc:	370c      	adds	r7, #12
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr

08005806 <LL_RCC_SetLPTIMClockSource>:
{
 8005806:	b480      	push	{r7}
 8005808:	b083      	sub	sp, #12
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800580e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005812:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	0c1b      	lsrs	r3, r3, #16
 800581a:	041b      	lsls	r3, r3, #16
 800581c:	43db      	mvns	r3, r3
 800581e:	401a      	ands	r2, r3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	041b      	lsls	r3, r3, #16
 8005824:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005828:	4313      	orrs	r3, r2
 800582a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800582e:	bf00      	nop
 8005830:	370c      	adds	r7, #12
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr

0800583a <LL_RCC_SetSAIClockSource>:
{
 800583a:	b480      	push	{r7}
 800583c:	b083      	sub	sp, #12
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8005842:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800584a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800584e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4313      	orrs	r3, r2
 8005856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800585a:	bf00      	nop
 800585c:	370c      	adds	r7, #12
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr

08005866 <LL_RCC_SetRNGClockSource>:
{
 8005866:	b480      	push	{r7}
 8005868:	b083      	sub	sp, #12
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800586e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005876:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800587a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4313      	orrs	r3, r2
 8005882:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005886:	bf00      	nop
 8005888:	370c      	adds	r7, #12
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr

08005892 <LL_RCC_SetCLK48ClockSource>:
{
 8005892:	b480      	push	{r7}
 8005894:	b083      	sub	sp, #12
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800589a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800589e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80058a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80058b2:	bf00      	nop
 80058b4:	370c      	adds	r7, #12
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr

080058be <LL_RCC_SetUSBClockSource>:
{
 80058be:	b580      	push	{r7, lr}
 80058c0:	b082      	sub	sp, #8
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f7ff ffe3 	bl	8005892 <LL_RCC_SetCLK48ClockSource>
}
 80058cc:	bf00      	nop
 80058ce:	3708      	adds	r7, #8
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <LL_RCC_SetADCClockSource>:
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80058dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058e4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80058e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80058f4:	bf00      	nop
 80058f6:	370c      	adds	r7, #12
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr

08005900 <LL_RCC_SetRTCClockSource>:
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005908:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800590c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005910:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005914:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4313      	orrs	r3, r2
 800591c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005920:	bf00      	nop
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <LL_RCC_GetRTCClockSource>:
{
 800592c:	b480      	push	{r7}
 800592e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005930:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005938:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800593c:	4618      	mov	r0, r3
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr

08005946 <LL_RCC_ForceBackupDomainReset>:
{
 8005946:	b480      	push	{r7}
 8005948:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800594a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800594e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005952:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005956:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800595a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800595e:	bf00      	nop
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005968:	b480      	push	{r7}
 800596a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800596c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005974:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005978:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800597c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005980:	bf00      	nop
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr

0800598a <LL_RCC_PLLSAI1_Enable>:
{
 800598a:	b480      	push	{r7}
 800598c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800598e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005998:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800599c:	6013      	str	r3, [r2, #0]
}
 800599e:	bf00      	nop
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <LL_RCC_PLLSAI1_Disable>:
{
 80059a8:	b480      	push	{r7}
 80059aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80059ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80059ba:	6013      	str	r3, [r2, #0]
}
 80059bc:	bf00      	nop
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr

080059c6 <LL_RCC_PLLSAI1_IsReady>:
{
 80059c6:	b480      	push	{r7}
 80059c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80059ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059d8:	d101      	bne.n	80059de <LL_RCC_PLLSAI1_IsReady+0x18>
 80059da:	2301      	movs	r3, #1
 80059dc:	e000      	b.n	80059e0 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80059de:	2300      	movs	r3, #0
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr

080059ea <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059ea:	b580      	push	{r7, lr}
 80059ec:	b088      	sub	sp, #32
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80059f2:	2300      	movs	r3, #0
 80059f4:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80059f6:	2300      	movs	r3, #0
 80059f8:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d034      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a0a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005a0e:	d021      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8005a10:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005a14:	d81b      	bhi.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005a16:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a1a:	d01d      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005a1c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a20:	d815      	bhi.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00b      	beq.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005a26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a2a:	d110      	bne.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005a2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a3a:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005a3c:	e00d      	b.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	3304      	adds	r3, #4
 8005a42:	4618      	mov	r0, r3
 8005a44:	f000 f947 	bl	8005cd6 <RCCEx_PLLSAI1_ConfigNP>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005a4c:	e005      	b.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	77fb      	strb	r3, [r7, #31]
        break;
 8005a52:	e002      	b.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005a54:	bf00      	nop
 8005a56:	e000      	b.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005a58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a5a:	7ffb      	ldrb	r3, [r7, #31]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d105      	bne.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a64:	4618      	mov	r0, r3
 8005a66:	f7ff fee8 	bl	800583a <LL_RCC_SetSAIClockSource>
 8005a6a:	e001      	b.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a6c:	7ffb      	ldrb	r3, [r7, #31]
 8005a6e:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d046      	beq.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005a7c:	f7ff ff56 	bl	800592c <LL_RCC_GetRTCClockSource>
 8005a80:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a86:	69ba      	ldr	r2, [r7, #24]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d03c      	beq.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005a8c:	f7fe fc4c 	bl	8004328 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d105      	bne.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7ff ff30 	bl	8005900 <LL_RCC_SetRTCClockSource>
 8005aa0:	e02e      	b.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005aa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aaa:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005aac:	f7ff ff4b 	bl	8005946 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005ab0:	f7ff ff5a 	bl	8005968 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005ac2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005acc:	f7ff fdf0 	bl	80056b0 <LL_RCC_LSE_IsEnabled>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d114      	bne.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005ad6:	f7fd fb57 	bl	8003188 <HAL_GetTick>
 8005ada:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005adc:	e00b      	b.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ade:	f7fd fb53 	bl	8003188 <HAL_GetTick>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d902      	bls.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8005af0:	2303      	movs	r3, #3
 8005af2:	77fb      	strb	r3, [r7, #31]
              break;
 8005af4:	e004      	b.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005af6:	f7ff fded 	bl	80056d4 <LL_RCC_LSE_IsReady>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d1ee      	bne.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005b00:	7ffb      	ldrb	r3, [r7, #31]
 8005b02:	77bb      	strb	r3, [r7, #30]
 8005b04:	e001      	b.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b06:	7ffb      	ldrb	r3, [r7, #31]
 8005b08:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 0301 	and.w	r3, r3, #1
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d004      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	699b      	ldr	r3, [r3, #24]
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f7ff fe2a 	bl	8005774 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 0302 	and.w	r3, r3, #2
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d004      	beq.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	69db      	ldr	r3, [r3, #28]
 8005b30:	4618      	mov	r0, r3
 8005b32:	f7ff fe35 	bl	80057a0 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 0310 	and.w	r3, r3, #16
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d004      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b46:	4618      	mov	r0, r3
 8005b48:	f7ff fe5d 	bl	8005806 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 0320 	and.w	r3, r3, #32
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d004      	beq.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f7ff fe52 	bl	8005806 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 0304 	and.w	r3, r3, #4
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d004      	beq.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a1b      	ldr	r3, [r3, #32]
 8005b72:	4618      	mov	r0, r3
 8005b74:	f7ff fe2a 	bl	80057cc <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 0308 	and.w	r3, r3, #8
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d004      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f7ff fe1f 	bl	80057cc <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d022      	beq.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f7ff fe8d 	bl	80058be <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ba8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bac:	d107      	bne.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005bae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bb8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005bbc:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bc2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005bc6:	d10b      	bne.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	3304      	adds	r3, #4
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f000 f8dd 	bl	8005d8c <RCCEx_PLLSAI1_ConfigNQ>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8005bd6:	7ffb      	ldrb	r3, [r7, #31]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d001      	beq.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 8005bdc:	7ffb      	ldrb	r3, [r7, #31]
 8005bde:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d02b      	beq.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bf4:	d008      	beq.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bfe:	d003      	beq.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d105      	bne.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f7ff fe2a 	bl	8005866 <LL_RCC_SetRNGClockSource>
 8005c12:	e00a      	b.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x240>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c1c:	60fb      	str	r3, [r7, #12]
 8005c1e:	2000      	movs	r0, #0
 8005c20:	f7ff fe21 	bl	8005866 <LL_RCC_SetRNGClockSource>
 8005c24:	68f8      	ldr	r0, [r7, #12]
 8005c26:	f7ff fe34 	bl	8005892 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c2e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005c32:	d107      	bne.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005c34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c42:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d022      	beq.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c54:	4618      	mov	r0, r3
 8005c56:	f7ff fe3d 	bl	80058d4 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c62:	d107      	bne.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005c64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c72:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c7c:	d10b      	bne.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	3304      	adds	r3, #4
 8005c82:	4618      	mov	r0, r3
 8005c84:	f000 f8dd 	bl	8005e42 <RCCEx_PLLSAI1_ConfigNR>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8005c8c:	7ffb      	ldrb	r3, [r7, #31]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d001      	beq.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 8005c92:	7ffb      	ldrb	r3, [r7, #31]
 8005c94:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d004      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f7ff fd26 	bl	80056f8 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d009      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f7ff fd45 	bl	800574c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f7ff fd2c 	bl	8005724 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8005ccc:	7fbb      	ldrb	r3, [r7, #30]
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3720      	adds	r7, #32
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}

08005cd6 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005cd6:	b580      	push	{r7, lr}
 8005cd8:	b084      	sub	sp, #16
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005ce2:	f7ff fe61 	bl	80059a8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005ce6:	f7fd fa4f 	bl	8003188 <HAL_GetTick>
 8005cea:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005cec:	e009      	b.n	8005d02 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005cee:	f7fd fa4b 	bl	8003188 <HAL_GetTick>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	1ad3      	subs	r3, r2, r3
 8005cf8:	2b02      	cmp	r3, #2
 8005cfa:	d902      	bls.n	8005d02 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005cfc:	2303      	movs	r3, #3
 8005cfe:	73fb      	strb	r3, [r7, #15]
      break;
 8005d00:	e004      	b.n	8005d0c <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005d02:	f7ff fe60 	bl	80059c6 <LL_RCC_PLLSAI1_IsReady>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d1f0      	bne.n	8005cee <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005d0c:	7bfb      	ldrb	r3, [r7, #15]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d137      	bne.n	8005d82 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005d12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	021b      	lsls	r3, r3, #8
 8005d22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d26:	4313      	orrs	r3, r2
 8005d28:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005d2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005d40:	f7ff fe23 	bl	800598a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d44:	f7fd fa20 	bl	8003188 <HAL_GetTick>
 8005d48:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005d4a:	e009      	b.n	8005d60 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005d4c:	f7fd fa1c 	bl	8003188 <HAL_GetTick>
 8005d50:	4602      	mov	r2, r0
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	1ad3      	subs	r3, r2, r3
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d902      	bls.n	8005d60 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	73fb      	strb	r3, [r7, #15]
        break;
 8005d5e:	e004      	b.n	8005d6a <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005d60:	f7ff fe31 	bl	80059c6 <LL_RCC_PLLSAI1_IsReady>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d1f0      	bne.n	8005d4c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8005d6a:	7bfb      	ldrb	r3, [r7, #15]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d108      	bne.n	8005d82 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005d70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d74:	691a      	ldr	r2, [r3, #16]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3710      	adds	r7, #16
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d94:	2300      	movs	r3, #0
 8005d96:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005d98:	f7ff fe06 	bl	80059a8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005d9c:	f7fd f9f4 	bl	8003188 <HAL_GetTick>
 8005da0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005da2:	e009      	b.n	8005db8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005da4:	f7fd f9f0 	bl	8003188 <HAL_GetTick>
 8005da8:	4602      	mov	r2, r0
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	1ad3      	subs	r3, r2, r3
 8005dae:	2b02      	cmp	r3, #2
 8005db0:	d902      	bls.n	8005db8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005db2:	2303      	movs	r3, #3
 8005db4:	73fb      	strb	r3, [r7, #15]
      break;
 8005db6:	e004      	b.n	8005dc2 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005db8:	f7ff fe05 	bl	80059c6 <LL_RCC_PLLSAI1_IsReady>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d1f0      	bne.n	8005da4 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005dc2:	7bfb      	ldrb	r3, [r7, #15]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d137      	bne.n	8005e38 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005dc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	021b      	lsls	r3, r3, #8
 8005dd8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005de0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005df2:	4313      	orrs	r3, r2
 8005df4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005df6:	f7ff fdc8 	bl	800598a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dfa:	f7fd f9c5 	bl	8003188 <HAL_GetTick>
 8005dfe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005e00:	e009      	b.n	8005e16 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e02:	f7fd f9c1 	bl	8003188 <HAL_GetTick>
 8005e06:	4602      	mov	r2, r0
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d902      	bls.n	8005e16 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005e10:	2303      	movs	r3, #3
 8005e12:	73fb      	strb	r3, [r7, #15]
        break;
 8005e14:	e004      	b.n	8005e20 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005e16:	f7ff fdd6 	bl	80059c6 <LL_RCC_PLLSAI1_IsReady>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d1f0      	bne.n	8005e02 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005e20:	7bfb      	ldrb	r3, [r7, #15]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d108      	bne.n	8005e38 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005e26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e2a:	691a      	ldr	r2, [r3, #16]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e34:	4313      	orrs	r3, r2
 8005e36:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3710      	adds	r7, #16
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}

08005e42 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005e42:	b580      	push	{r7, lr}
 8005e44:	b084      	sub	sp, #16
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005e4e:	f7ff fdab 	bl	80059a8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005e52:	f7fd f999 	bl	8003188 <HAL_GetTick>
 8005e56:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005e58:	e009      	b.n	8005e6e <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e5a:	f7fd f995 	bl	8003188 <HAL_GetTick>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	1ad3      	subs	r3, r2, r3
 8005e64:	2b02      	cmp	r3, #2
 8005e66:	d902      	bls.n	8005e6e <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005e68:	2303      	movs	r3, #3
 8005e6a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e6c:	e004      	b.n	8005e78 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005e6e:	f7ff fdaa 	bl	80059c6 <LL_RCC_PLLSAI1_IsReady>
 8005e72:	4603      	mov	r3, r0
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d1f0      	bne.n	8005e5a <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005e78:	7bfb      	ldrb	r3, [r7, #15]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d137      	bne.n	8005eee <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005e7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	021b      	lsls	r3, r3, #8
 8005e8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e92:	4313      	orrs	r3, r2
 8005e94:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8005e96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005eac:	f7ff fd6d 	bl	800598a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005eb0:	f7fd f96a 	bl	8003188 <HAL_GetTick>
 8005eb4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005eb6:	e009      	b.n	8005ecc <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005eb8:	f7fd f966 	bl	8003188 <HAL_GetTick>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	2b02      	cmp	r3, #2
 8005ec4:	d902      	bls.n	8005ecc <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005ec6:	2303      	movs	r3, #3
 8005ec8:	73fb      	strb	r3, [r7, #15]
        break;
 8005eca:	e004      	b.n	8005ed6 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005ecc:	f7ff fd7b 	bl	80059c6 <LL_RCC_PLLSAI1_IsReady>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d1f0      	bne.n	8005eb8 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8005ed6:	7bfb      	ldrb	r3, [r7, #15]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d108      	bne.n	8005eee <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005edc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ee0:	691a      	ldr	r2, [r3, #16]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005eea:	4313      	orrs	r3, r2
 8005eec:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3710      	adds	r7, #16
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}

08005ef8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b082      	sub	sp, #8
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d101      	bne.n	8005f0a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e090      	b.n	800602c <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d106      	bne.n	8005f24 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f7fc f8ea 	bl	80020f8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2202      	movs	r2, #2
 8005f28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	22ca      	movs	r2, #202	; 0xca
 8005f32:	625a      	str	r2, [r3, #36]	; 0x24
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2253      	movs	r2, #83	; 0x53
 8005f3a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 f89f 	bl	8006080 <RTC_EnterInitMode>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d009      	beq.n	8005f5c <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	22ff      	movs	r2, #255	; 0xff
 8005f4e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2204      	movs	r2, #4
 8005f54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e067      	b.n	800602c <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	6812      	ldr	r2, [r2, #0]
 8005f66:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005f6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f6e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	6899      	ldr	r1, [r3, #8]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	685a      	ldr	r2, [r3, #4]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	431a      	orrs	r2, r3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	699b      	ldr	r3, [r3, #24]
 8005f84:	431a      	orrs	r2, r3
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	430a      	orrs	r2, r1
 8005f8c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	68d2      	ldr	r2, [r2, #12]
 8005f96:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	6919      	ldr	r1, [r3, #16]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	041a      	lsls	r2, r3, #16
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	430a      	orrs	r2, r1
 8005faa:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68da      	ldr	r2, [r3, #12]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005fba:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f022 0203 	bic.w	r2, r2, #3
 8005fca:	64da      	str	r2, [r3, #76]	; 0x4c
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	69da      	ldr	r2, [r3, #28]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	695b      	ldr	r3, [r3, #20]
 8005fda:	431a      	orrs	r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	430a      	orrs	r2, r1
 8005fe2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	f003 0320 	and.w	r3, r3, #32
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d113      	bne.n	800601a <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 f81e 	bl	8006034 <HAL_RTC_WaitForSynchro>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d00d      	beq.n	800601a <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	22ff      	movs	r2, #255	; 0xff
 8006004:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2204      	movs	r2, #4
 800600a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e008      	b.n	800602c <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	22ff      	movs	r2, #255	; 0xff
 8006020:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2201      	movs	r2, #1
 8006026:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 800602a:	2300      	movs	r3, #0
  }
}
 800602c:	4618      	mov	r0, r3
 800602e:	3708      	adds	r7, #8
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68da      	ldr	r2, [r3, #12]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800604a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800604c:	f7fd f89c 	bl	8003188 <HAL_GetTick>
 8006050:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006052:	e009      	b.n	8006068 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006054:	f7fd f898 	bl	8003188 <HAL_GetTick>
 8006058:	4602      	mov	r2, r0
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	1ad3      	subs	r3, r2, r3
 800605e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006062:	d901      	bls.n	8006068 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006064:	2303      	movs	r3, #3
 8006066:	e007      	b.n	8006078 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	f003 0320 	and.w	r3, r3, #32
 8006072:	2b00      	cmp	r3, #0
 8006074:	d0ee      	beq.n	8006054 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006076:	2300      	movs	r3, #0
}
 8006078:	4618      	mov	r0, r3
 800607a:	3710      	adds	r7, #16
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006092:	2b00      	cmp	r3, #0
 8006094:	d119      	bne.n	80060ca <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f04f 32ff 	mov.w	r2, #4294967295
 800609e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80060a0:	f7fd f872 	bl	8003188 <HAL_GetTick>
 80060a4:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80060a6:	e009      	b.n	80060bc <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80060a8:	f7fd f86e 	bl	8003188 <HAL_GetTick>
 80060ac:	4602      	mov	r2, r0
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060b6:	d901      	bls.n	80060bc <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80060b8:	2303      	movs	r3, #3
 80060ba:	e007      	b.n	80060cc <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d0ee      	beq.n	80060a8 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3710      	adds	r7, #16
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d101      	bne.n	80060ea <HAL_RTCEx_EnableBypassShadow+0x16>
 80060e6:	2302      	movs	r3, #2
 80060e8:	e024      	b.n	8006134 <HAL_RTCEx_EnableBypassShadow+0x60>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2201      	movs	r2, #1
 80060ee:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2202      	movs	r2, #2
 80060f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	22ca      	movs	r2, #202	; 0xca
 8006100:	625a      	str	r2, [r3, #36]	; 0x24
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	2253      	movs	r2, #83	; 0x53
 8006108:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	689a      	ldr	r2, [r3, #8]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f042 0220 	orr.w	r2, r2, #32
 8006118:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	22ff      	movs	r2, #255	; 0xff
 8006120:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2201      	movs	r2, #1
 8006126:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	370c      	adds	r7, #12
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <LL_RCC_GetUSARTClockSource>:
{
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8006148:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800614c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4013      	ands	r3, r2
}
 8006154:	4618      	mov	r0, r3
 8006156:	370c      	adds	r7, #12
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <LL_RCC_GetLPUARTClockSource>:
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8006168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800616c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4013      	ands	r3, r2
}
 8006174:	4618      	mov	r0, r3
 8006176:	370c      	adds	r7, #12
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d101      	bne.n	8006192 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e042      	b.n	8006218 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006198:	2b00      	cmp	r3, #0
 800619a:	d106      	bne.n	80061aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f7fb fed7 	bl	8001f58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2224      	movs	r2, #36	; 0x24
 80061ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f022 0201 	bic.w	r2, r2, #1
 80061c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 fb00 	bl	80067c8 <UART_SetConfig>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d101      	bne.n	80061d2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e022      	b.n	8006218 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d002      	beq.n	80061e0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 fcfa 	bl	8006bd4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	685a      	ldr	r2, [r3, #4]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	689a      	ldr	r2, [r3, #8]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f042 0201 	orr.w	r2, r2, #1
 800620e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f000 fd81 	bl	8006d18 <UART_CheckIdleState>
 8006216:	4603      	mov	r3, r0
}
 8006218:	4618      	mov	r0, r3
 800621a:	3708      	adds	r7, #8
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	60b9      	str	r1, [r7, #8]
 800622a:	4613      	mov	r3, r2
 800622c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006234:	2b20      	cmp	r3, #32
 8006236:	d168      	bne.n	800630a <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d002      	beq.n	8006244 <HAL_UART_Transmit_DMA+0x24>
 800623e:	88fb      	ldrh	r3, [r7, #6]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d101      	bne.n	8006248 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e061      	b.n	800630c <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800624e:	2b01      	cmp	r3, #1
 8006250:	d101      	bne.n	8006256 <HAL_UART_Transmit_DMA+0x36>
 8006252:	2302      	movs	r3, #2
 8006254:	e05a      	b.n	800630c <HAL_UART_Transmit_DMA+0xec>
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2201      	movs	r2, #1
 800625a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	68ba      	ldr	r2, [r7, #8]
 8006262:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	88fa      	ldrh	r2, [r7, #6]
 8006268:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	88fa      	ldrh	r2, [r7, #6]
 8006270:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2200      	movs	r2, #0
 8006278:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2221      	movs	r2, #33	; 0x21
 8006280:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006288:	2b00      	cmp	r3, #0
 800628a:	d02c      	beq.n	80062e6 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006290:	4a20      	ldr	r2, [pc, #128]	; (8006314 <HAL_UART_Transmit_DMA+0xf4>)
 8006292:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006298:	4a1f      	ldr	r2, [pc, #124]	; (8006318 <HAL_UART_Transmit_DMA+0xf8>)
 800629a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062a0:	4a1e      	ldr	r2, [pc, #120]	; (800631c <HAL_UART_Transmit_DMA+0xfc>)
 80062a2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062a8:	2200      	movs	r2, #0
 80062aa:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062b4:	4619      	mov	r1, r3
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	3328      	adds	r3, #40	; 0x28
 80062bc:	461a      	mov	r2, r3
 80062be:	88fb      	ldrh	r3, [r7, #6]
 80062c0:	f7fd f9d4 	bl	800366c <HAL_DMA_Start_IT>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d00d      	beq.n	80062e6 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2210      	movs	r2, #16
 80062ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2220      	movs	r2, #32
 80062de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	e012      	b.n	800630c <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	2240      	movs	r2, #64	; 0x40
 80062ec:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2200      	movs	r2, #0
 80062f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	689a      	ldr	r2, [r3, #8]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006304:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8006306:	2300      	movs	r3, #0
 8006308:	e000      	b.n	800630c <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 800630a:	2302      	movs	r3, #2
  }
}
 800630c:	4618      	mov	r0, r3
 800630e:	3710      	adds	r7, #16
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}
 8006314:	08006f4f 	.word	0x08006f4f
 8006318:	08006fa3 	.word	0x08006fa3
 800631c:	08006fbf 	.word	0x08006fbf

08006320 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b088      	sub	sp, #32
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	69db      	ldr	r3, [r3, #28]
 800632e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006340:	69fa      	ldr	r2, [r7, #28]
 8006342:	f640 030f 	movw	r3, #2063	; 0x80f
 8006346:	4013      	ands	r3, r2
 8006348:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d118      	bne.n	8006382 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	f003 0320 	and.w	r3, r3, #32
 8006356:	2b00      	cmp	r3, #0
 8006358:	d013      	beq.n	8006382 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800635a:	69bb      	ldr	r3, [r7, #24]
 800635c:	f003 0320 	and.w	r3, r3, #32
 8006360:	2b00      	cmp	r3, #0
 8006362:	d104      	bne.n	800636e <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800636a:	2b00      	cmp	r3, #0
 800636c:	d009      	beq.n	8006382 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006372:	2b00      	cmp	r3, #0
 8006374:	f000 81fb 	beq.w	800676e <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	4798      	blx	r3
      }
      return;
 8006380:	e1f5      	b.n	800676e <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	2b00      	cmp	r3, #0
 8006386:	f000 80ef 	beq.w	8006568 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800638a:	697a      	ldr	r2, [r7, #20]
 800638c:	4b73      	ldr	r3, [pc, #460]	; (800655c <HAL_UART_IRQHandler+0x23c>)
 800638e:	4013      	ands	r3, r2
 8006390:	2b00      	cmp	r3, #0
 8006392:	d105      	bne.n	80063a0 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006394:	69ba      	ldr	r2, [r7, #24]
 8006396:	4b72      	ldr	r3, [pc, #456]	; (8006560 <HAL_UART_IRQHandler+0x240>)
 8006398:	4013      	ands	r3, r2
 800639a:	2b00      	cmp	r3, #0
 800639c:	f000 80e4 	beq.w	8006568 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	f003 0301 	and.w	r3, r3, #1
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d010      	beq.n	80063cc <HAL_UART_IRQHandler+0xac>
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d00b      	beq.n	80063cc <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	2201      	movs	r2, #1
 80063ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063c2:	f043 0201 	orr.w	r2, r3, #1
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	f003 0302 	and.w	r3, r3, #2
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d010      	beq.n	80063f8 <HAL_UART_IRQHandler+0xd8>
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	f003 0301 	and.w	r3, r3, #1
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d00b      	beq.n	80063f8 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	2202      	movs	r2, #2
 80063e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063ee:	f043 0204 	orr.w	r2, r3, #4
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	f003 0304 	and.w	r3, r3, #4
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d010      	beq.n	8006424 <HAL_UART_IRQHandler+0x104>
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	f003 0301 	and.w	r3, r3, #1
 8006408:	2b00      	cmp	r3, #0
 800640a:	d00b      	beq.n	8006424 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2204      	movs	r2, #4
 8006412:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800641a:	f043 0202 	orr.w	r2, r3, #2
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	f003 0308 	and.w	r3, r3, #8
 800642a:	2b00      	cmp	r3, #0
 800642c:	d015      	beq.n	800645a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	f003 0320 	and.w	r3, r3, #32
 8006434:	2b00      	cmp	r3, #0
 8006436:	d104      	bne.n	8006442 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006438:	697a      	ldr	r2, [r7, #20]
 800643a:	4b48      	ldr	r3, [pc, #288]	; (800655c <HAL_UART_IRQHandler+0x23c>)
 800643c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800643e:	2b00      	cmp	r3, #0
 8006440:	d00b      	beq.n	800645a <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	2208      	movs	r2, #8
 8006448:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006450:	f043 0208 	orr.w	r2, r3, #8
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800645a:	69fb      	ldr	r3, [r7, #28]
 800645c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006460:	2b00      	cmp	r3, #0
 8006462:	d011      	beq.n	8006488 <HAL_UART_IRQHandler+0x168>
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800646a:	2b00      	cmp	r3, #0
 800646c:	d00c      	beq.n	8006488 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006476:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800647e:	f043 0220 	orr.w	r2, r3, #32
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800648e:	2b00      	cmp	r3, #0
 8006490:	f000 816f 	beq.w	8006772 <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006494:	69fb      	ldr	r3, [r7, #28]
 8006496:	f003 0320 	and.w	r3, r3, #32
 800649a:	2b00      	cmp	r3, #0
 800649c:	d011      	beq.n	80064c2 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	f003 0320 	and.w	r3, r3, #32
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d104      	bne.n	80064b2 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d007      	beq.n	80064c2 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d003      	beq.n	80064c2 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80064c8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064d4:	2b40      	cmp	r3, #64	; 0x40
 80064d6:	d004      	beq.n	80064e2 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d031      	beq.n	8006546 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 fd01 	bl	8006eea <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f2:	2b40      	cmp	r3, #64	; 0x40
 80064f4:	d123      	bne.n	800653e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	689a      	ldr	r2, [r3, #8]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006504:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800650a:	2b00      	cmp	r3, #0
 800650c:	d013      	beq.n	8006536 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006512:	4a14      	ldr	r2, [pc, #80]	; (8006564 <HAL_UART_IRQHandler+0x244>)
 8006514:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800651a:	4618      	mov	r0, r3
 800651c:	f7fd f980 	bl	8003820 <HAL_DMA_Abort_IT>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d017      	beq.n	8006556 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800652a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8006530:	4610      	mov	r0, r2
 8006532:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006534:	e00f      	b.n	8006556 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 f930 	bl	800679c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800653c:	e00b      	b.n	8006556 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 f92c 	bl	800679c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006544:	e007      	b.n	8006556 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 f928 	bl	800679c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006554:	e10d      	b.n	8006772 <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006556:	bf00      	nop
    return;
 8006558:	e10b      	b.n	8006772 <HAL_UART_IRQHandler+0x452>
 800655a:	bf00      	nop
 800655c:	10000001 	.word	0x10000001
 8006560:	04000120 	.word	0x04000120
 8006564:	0800703f 	.word	0x0800703f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800656c:	2b01      	cmp	r3, #1
 800656e:	f040 80ab 	bne.w	80066c8 <HAL_UART_IRQHandler+0x3a8>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	f003 0310 	and.w	r3, r3, #16
 8006578:	2b00      	cmp	r3, #0
 800657a:	f000 80a5 	beq.w	80066c8 <HAL_UART_IRQHandler+0x3a8>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	f003 0310 	and.w	r3, r3, #16
 8006584:	2b00      	cmp	r3, #0
 8006586:	f000 809f 	beq.w	80066c8 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	2210      	movs	r2, #16
 8006590:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800659c:	2b40      	cmp	r3, #64	; 0x40
 800659e:	d155      	bne.n	800664c <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 80065aa:	893b      	ldrh	r3, [r7, #8]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	f000 80e2 	beq.w	8006776 <HAL_UART_IRQHandler+0x456>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80065b8:	893a      	ldrh	r2, [r7, #8]
 80065ba:	429a      	cmp	r2, r3
 80065bc:	f080 80db 	bcs.w	8006776 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	893a      	ldrh	r2, [r7, #8]
 80065c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 0320 	and.w	r3, r3, #32
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d12b      	bne.n	8006630 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065e6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	689a      	ldr	r2, [r3, #8]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f022 0201 	bic.w	r2, r2, #1
 80065f6:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	689a      	ldr	r2, [r3, #8]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006606:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2220      	movs	r2, #32
 800660c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f022 0210 	bic.w	r2, r2, #16
 8006624:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800662a:	4618      	mov	r0, r3
 800662c:	f7fd f899 	bl	8003762 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800663c:	b29b      	uxth	r3, r3
 800663e:	1ad3      	subs	r3, r2, r3
 8006640:	b29b      	uxth	r3, r3
 8006642:	4619      	mov	r1, r3
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 f8b3 	bl	80067b0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800664a:	e094      	b.n	8006776 <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006658:	b29b      	uxth	r3, r3
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006664:	b29b      	uxth	r3, r3
 8006666:	2b00      	cmp	r3, #0
 8006668:	f000 8087 	beq.w	800677a <HAL_UART_IRQHandler+0x45a>
          &&(nb_rx_data > 0U) )
 800666c:	897b      	ldrh	r3, [r7, #10]
 800666e:	2b00      	cmp	r3, #0
 8006670:	f000 8083 	beq.w	800677a <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006682:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	6812      	ldr	r2, [r2, #0]
 800668e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006692:	f023 0301 	bic.w	r3, r3, #1
 8006696:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2220      	movs	r2, #32
 800669c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f022 0210 	bic.w	r2, r2, #16
 80066ba:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80066bc:	897b      	ldrh	r3, [r7, #10]
 80066be:	4619      	mov	r1, r3
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 f875 	bl	80067b0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80066c6:	e058      	b.n	800677a <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00d      	beq.n	80066ee <HAL_UART_IRQHandler+0x3ce>
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d008      	beq.n	80066ee <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80066e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 fcd9 	bl	800709e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80066ec:	e048      	b.n	8006780 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80066ee:	69fb      	ldr	r3, [r7, #28]
 80066f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d012      	beq.n	800671e <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80066f8:	69bb      	ldr	r3, [r7, #24]
 80066fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d104      	bne.n	800670c <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006708:	2b00      	cmp	r3, #0
 800670a:	d008      	beq.n	800671e <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006710:	2b00      	cmp	r3, #0
 8006712:	d034      	beq.n	800677e <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	4798      	blx	r3
    }
    return;
 800671c:	e02f      	b.n	800677e <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800671e:	69fb      	ldr	r3, [r7, #28]
 8006720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006724:	2b00      	cmp	r3, #0
 8006726:	d008      	beq.n	800673a <HAL_UART_IRQHandler+0x41a>
 8006728:	69bb      	ldr	r3, [r7, #24]
 800672a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800672e:	2b00      	cmp	r3, #0
 8006730:	d003      	beq.n	800673a <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 fc99 	bl	800706a <UART_EndTransmit_IT>
    return;
 8006738:	e022      	b.n	8006780 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006740:	2b00      	cmp	r3, #0
 8006742:	d008      	beq.n	8006756 <HAL_UART_IRQHandler+0x436>
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800674a:	2b00      	cmp	r3, #0
 800674c:	d003      	beq.n	8006756 <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 fcb9 	bl	80070c6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006754:	e014      	b.n	8006780 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800675c:	2b00      	cmp	r3, #0
 800675e:	d00f      	beq.n	8006780 <HAL_UART_IRQHandler+0x460>
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	2b00      	cmp	r3, #0
 8006764:	da0c      	bge.n	8006780 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 fca3 	bl	80070b2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800676c:	e008      	b.n	8006780 <HAL_UART_IRQHandler+0x460>
      return;
 800676e:	bf00      	nop
 8006770:	e006      	b.n	8006780 <HAL_UART_IRQHandler+0x460>
    return;
 8006772:	bf00      	nop
 8006774:	e004      	b.n	8006780 <HAL_UART_IRQHandler+0x460>
      return;
 8006776:	bf00      	nop
 8006778:	e002      	b.n	8006780 <HAL_UART_IRQHandler+0x460>
      return;
 800677a:	bf00      	nop
 800677c:	e000      	b.n	8006780 <HAL_UART_IRQHandler+0x460>
    return;
 800677e:	bf00      	nop
  }
}
 8006780:	3720      	adds	r7, #32
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop

08006788 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006790:	bf00      	nop
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80067a4:	bf00      	nop
 80067a6:	370c      	adds	r7, #12
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b083      	sub	sp, #12
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	460b      	mov	r3, r1
 80067ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80067bc:	bf00      	nop
 80067be:	370c      	adds	r7, #12
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067c8:	b5b0      	push	{r4, r5, r7, lr}
 80067ca:	b088      	sub	sp, #32
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80067d0:	2300      	movs	r3, #0
 80067d2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	689a      	ldr	r2, [r3, #8]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	691b      	ldr	r3, [r3, #16]
 80067dc:	431a      	orrs	r2, r3
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	695b      	ldr	r3, [r3, #20]
 80067e2:	431a      	orrs	r2, r3
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	69db      	ldr	r3, [r3, #28]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	4ba3      	ldr	r3, [pc, #652]	; (8006a80 <UART_SetConfig+0x2b8>)
 80067f4:	4013      	ands	r3, r2
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	6812      	ldr	r2, [r2, #0]
 80067fa:	69f9      	ldr	r1, [r7, #28]
 80067fc:	430b      	orrs	r3, r1
 80067fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	68da      	ldr	r2, [r3, #12]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	430a      	orrs	r2, r1
 8006814:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	699b      	ldr	r3, [r3, #24]
 800681a:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a98      	ldr	r2, [pc, #608]	; (8006a84 <UART_SetConfig+0x2bc>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d004      	beq.n	8006830 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a1b      	ldr	r3, [r3, #32]
 800682a:	69fa      	ldr	r2, [r7, #28]
 800682c:	4313      	orrs	r3, r2
 800682e:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800683a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	6812      	ldr	r2, [r2, #0]
 8006842:	69f9      	ldr	r1, [r7, #28]
 8006844:	430b      	orrs	r3, r1
 8006846:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800684e:	f023 010f 	bic.w	r1, r3, #15
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	430a      	orrs	r2, r1
 800685c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a89      	ldr	r2, [pc, #548]	; (8006a88 <UART_SetConfig+0x2c0>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d120      	bne.n	80068aa <UART_SetConfig+0xe2>
 8006868:	2003      	movs	r0, #3
 800686a:	f7ff fc69 	bl	8006140 <LL_RCC_GetUSARTClockSource>
 800686e:	4603      	mov	r3, r0
 8006870:	2b03      	cmp	r3, #3
 8006872:	d817      	bhi.n	80068a4 <UART_SetConfig+0xdc>
 8006874:	a201      	add	r2, pc, #4	; (adr r2, 800687c <UART_SetConfig+0xb4>)
 8006876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800687a:	bf00      	nop
 800687c:	0800688d 	.word	0x0800688d
 8006880:	08006899 	.word	0x08006899
 8006884:	08006893 	.word	0x08006893
 8006888:	0800689f 	.word	0x0800689f
 800688c:	2301      	movs	r3, #1
 800688e:	76fb      	strb	r3, [r7, #27]
 8006890:	e038      	b.n	8006904 <UART_SetConfig+0x13c>
 8006892:	2302      	movs	r3, #2
 8006894:	76fb      	strb	r3, [r7, #27]
 8006896:	e035      	b.n	8006904 <UART_SetConfig+0x13c>
 8006898:	2304      	movs	r3, #4
 800689a:	76fb      	strb	r3, [r7, #27]
 800689c:	e032      	b.n	8006904 <UART_SetConfig+0x13c>
 800689e:	2308      	movs	r3, #8
 80068a0:	76fb      	strb	r3, [r7, #27]
 80068a2:	e02f      	b.n	8006904 <UART_SetConfig+0x13c>
 80068a4:	2310      	movs	r3, #16
 80068a6:	76fb      	strb	r3, [r7, #27]
 80068a8:	e02c      	b.n	8006904 <UART_SetConfig+0x13c>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a75      	ldr	r2, [pc, #468]	; (8006a84 <UART_SetConfig+0x2bc>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d125      	bne.n	8006900 <UART_SetConfig+0x138>
 80068b4:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80068b8:	f7ff fc52 	bl	8006160 <LL_RCC_GetLPUARTClockSource>
 80068bc:	4603      	mov	r3, r0
 80068be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068c2:	d017      	beq.n	80068f4 <UART_SetConfig+0x12c>
 80068c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068c8:	d817      	bhi.n	80068fa <UART_SetConfig+0x132>
 80068ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068ce:	d00b      	beq.n	80068e8 <UART_SetConfig+0x120>
 80068d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068d4:	d811      	bhi.n	80068fa <UART_SetConfig+0x132>
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d003      	beq.n	80068e2 <UART_SetConfig+0x11a>
 80068da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068de:	d006      	beq.n	80068ee <UART_SetConfig+0x126>
 80068e0:	e00b      	b.n	80068fa <UART_SetConfig+0x132>
 80068e2:	2300      	movs	r3, #0
 80068e4:	76fb      	strb	r3, [r7, #27]
 80068e6:	e00d      	b.n	8006904 <UART_SetConfig+0x13c>
 80068e8:	2302      	movs	r3, #2
 80068ea:	76fb      	strb	r3, [r7, #27]
 80068ec:	e00a      	b.n	8006904 <UART_SetConfig+0x13c>
 80068ee:	2304      	movs	r3, #4
 80068f0:	76fb      	strb	r3, [r7, #27]
 80068f2:	e007      	b.n	8006904 <UART_SetConfig+0x13c>
 80068f4:	2308      	movs	r3, #8
 80068f6:	76fb      	strb	r3, [r7, #27]
 80068f8:	e004      	b.n	8006904 <UART_SetConfig+0x13c>
 80068fa:	2310      	movs	r3, #16
 80068fc:	76fb      	strb	r3, [r7, #27]
 80068fe:	e001      	b.n	8006904 <UART_SetConfig+0x13c>
 8006900:	2310      	movs	r3, #16
 8006902:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a5e      	ldr	r2, [pc, #376]	; (8006a84 <UART_SetConfig+0x2bc>)
 800690a:	4293      	cmp	r3, r2
 800690c:	f040 808b 	bne.w	8006a26 <UART_SetConfig+0x25e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006910:	7efb      	ldrb	r3, [r7, #27]
 8006912:	2b08      	cmp	r3, #8
 8006914:	d823      	bhi.n	800695e <UART_SetConfig+0x196>
 8006916:	a201      	add	r2, pc, #4	; (adr r2, 800691c <UART_SetConfig+0x154>)
 8006918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800691c:	08006941 	.word	0x08006941
 8006920:	0800695f 	.word	0x0800695f
 8006924:	08006949 	.word	0x08006949
 8006928:	0800695f 	.word	0x0800695f
 800692c:	0800694f 	.word	0x0800694f
 8006930:	0800695f 	.word	0x0800695f
 8006934:	0800695f 	.word	0x0800695f
 8006938:	0800695f 	.word	0x0800695f
 800693c:	08006957 	.word	0x08006957
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006940:	f7fe fdd2 	bl	80054e8 <HAL_RCC_GetPCLK1Freq>
 8006944:	6178      	str	r0, [r7, #20]
        break;
 8006946:	e00f      	b.n	8006968 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006948:	4b50      	ldr	r3, [pc, #320]	; (8006a8c <UART_SetConfig+0x2c4>)
 800694a:	617b      	str	r3, [r7, #20]
        break;
 800694c:	e00c      	b.n	8006968 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800694e:	f7fe fd4b 	bl	80053e8 <HAL_RCC_GetSysClockFreq>
 8006952:	6178      	str	r0, [r7, #20]
        break;
 8006954:	e008      	b.n	8006968 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006956:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800695a:	617b      	str	r3, [r7, #20]
        break;
 800695c:	e004      	b.n	8006968 <UART_SetConfig+0x1a0>
      default:
        pclk = 0U;
 800695e:	2300      	movs	r3, #0
 8006960:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	76bb      	strb	r3, [r7, #26]
        break;
 8006966:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	2b00      	cmp	r3, #0
 800696c:	f000 811a 	beq.w	8006ba4 <UART_SetConfig+0x3dc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006974:	4a46      	ldr	r2, [pc, #280]	; (8006a90 <UART_SetConfig+0x2c8>)
 8006976:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800697a:	461a      	mov	r2, r3
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006982:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	685a      	ldr	r2, [r3, #4]
 8006988:	4613      	mov	r3, r2
 800698a:	005b      	lsls	r3, r3, #1
 800698c:	4413      	add	r3, r2
 800698e:	68ba      	ldr	r2, [r7, #8]
 8006990:	429a      	cmp	r2, r3
 8006992:	d305      	bcc.n	80069a0 <UART_SetConfig+0x1d8>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800699a:	68ba      	ldr	r2, [r7, #8]
 800699c:	429a      	cmp	r2, r3
 800699e:	d902      	bls.n	80069a6 <UART_SetConfig+0x1de>
      {
        ret = HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	76bb      	strb	r3, [r7, #26]
 80069a4:	e0fe      	b.n	8006ba4 <UART_SetConfig+0x3dc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	4618      	mov	r0, r3
 80069aa:	f04f 0100 	mov.w	r1, #0
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b2:	4a37      	ldr	r2, [pc, #220]	; (8006a90 <UART_SetConfig+0x2c8>)
 80069b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069b8:	b29a      	uxth	r2, r3
 80069ba:	f04f 0300 	mov.w	r3, #0
 80069be:	f7f9 fbe5 	bl	800018c <__aeabi_uldivmod>
 80069c2:	4602      	mov	r2, r0
 80069c4:	460b      	mov	r3, r1
 80069c6:	4610      	mov	r0, r2
 80069c8:	4619      	mov	r1, r3
 80069ca:	f04f 0200 	mov.w	r2, #0
 80069ce:	f04f 0300 	mov.w	r3, #0
 80069d2:	020b      	lsls	r3, r1, #8
 80069d4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80069d8:	0202      	lsls	r2, r0, #8
 80069da:	6879      	ldr	r1, [r7, #4]
 80069dc:	6849      	ldr	r1, [r1, #4]
 80069de:	0849      	lsrs	r1, r1, #1
 80069e0:	4608      	mov	r0, r1
 80069e2:	f04f 0100 	mov.w	r1, #0
 80069e6:	1814      	adds	r4, r2, r0
 80069e8:	eb43 0501 	adc.w	r5, r3, r1
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	461a      	mov	r2, r3
 80069f2:	f04f 0300 	mov.w	r3, #0
 80069f6:	4620      	mov	r0, r4
 80069f8:	4629      	mov	r1, r5
 80069fa:	f7f9 fbc7 	bl	800018c <__aeabi_uldivmod>
 80069fe:	4602      	mov	r2, r0
 8006a00:	460b      	mov	r3, r1
 8006a02:	4613      	mov	r3, r2
 8006a04:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a0c:	d308      	bcc.n	8006a20 <UART_SetConfig+0x258>
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a14:	d204      	bcs.n	8006a20 <UART_SetConfig+0x258>
        {
          huart->Instance->BRR = usartdiv;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	693a      	ldr	r2, [r7, #16]
 8006a1c:	60da      	str	r2, [r3, #12]
 8006a1e:	e0c1      	b.n	8006ba4 <UART_SetConfig+0x3dc>
        }
        else
        {
          ret = HAL_ERROR;
 8006a20:	2301      	movs	r3, #1
 8006a22:	76bb      	strb	r3, [r7, #26]
 8006a24:	e0be      	b.n	8006ba4 <UART_SetConfig+0x3dc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	69db      	ldr	r3, [r3, #28]
 8006a2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a2e:	d16a      	bne.n	8006b06 <UART_SetConfig+0x33e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8006a30:	7efb      	ldrb	r3, [r7, #27]
 8006a32:	3b01      	subs	r3, #1
 8006a34:	2b07      	cmp	r3, #7
 8006a36:	d82d      	bhi.n	8006a94 <UART_SetConfig+0x2cc>
 8006a38:	a201      	add	r2, pc, #4	; (adr r2, 8006a40 <UART_SetConfig+0x278>)
 8006a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a3e:	bf00      	nop
 8006a40:	08006a61 	.word	0x08006a61
 8006a44:	08006a69 	.word	0x08006a69
 8006a48:	08006a95 	.word	0x08006a95
 8006a4c:	08006a6f 	.word	0x08006a6f
 8006a50:	08006a95 	.word	0x08006a95
 8006a54:	08006a95 	.word	0x08006a95
 8006a58:	08006a95 	.word	0x08006a95
 8006a5c:	08006a77 	.word	0x08006a77
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a60:	f7fe fd58 	bl	8005514 <HAL_RCC_GetPCLK2Freq>
 8006a64:	6178      	str	r0, [r7, #20]
        break;
 8006a66:	e01a      	b.n	8006a9e <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a68:	4b08      	ldr	r3, [pc, #32]	; (8006a8c <UART_SetConfig+0x2c4>)
 8006a6a:	617b      	str	r3, [r7, #20]
        break;
 8006a6c:	e017      	b.n	8006a9e <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a6e:	f7fe fcbb 	bl	80053e8 <HAL_RCC_GetSysClockFreq>
 8006a72:	6178      	str	r0, [r7, #20]
        break;
 8006a74:	e013      	b.n	8006a9e <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a7a:	617b      	str	r3, [r7, #20]
        break;
 8006a7c:	e00f      	b.n	8006a9e <UART_SetConfig+0x2d6>
 8006a7e:	bf00      	nop
 8006a80:	cfff69f3 	.word	0xcfff69f3
 8006a84:	40008000 	.word	0x40008000
 8006a88:	40013800 	.word	0x40013800
 8006a8c:	00f42400 	.word	0x00f42400
 8006a90:	0800a4a4 	.word	0x0800a4a4
      default:
        pclk = 0U;
 8006a94:	2300      	movs	r3, #0
 8006a96:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	76bb      	strb	r3, [r7, #26]
        break;
 8006a9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d07f      	beq.n	8006ba4 <UART_SetConfig+0x3dc>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa8:	4a48      	ldr	r2, [pc, #288]	; (8006bcc <UART_SetConfig+0x404>)
 8006aaa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006aae:	461a      	mov	r2, r3
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ab6:	005a      	lsls	r2, r3, #1
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	085b      	lsrs	r3, r3, #1
 8006abe:	441a      	add	r2, r3
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	2b0f      	cmp	r3, #15
 8006ad0:	d916      	bls.n	8006b00 <UART_SetConfig+0x338>
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ad8:	d212      	bcs.n	8006b00 <UART_SetConfig+0x338>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	f023 030f 	bic.w	r3, r3, #15
 8006ae2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	085b      	lsrs	r3, r3, #1
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	f003 0307 	and.w	r3, r3, #7
 8006aee:	b29a      	uxth	r2, r3
 8006af0:	89fb      	ldrh	r3, [r7, #14]
 8006af2:	4313      	orrs	r3, r2
 8006af4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	89fa      	ldrh	r2, [r7, #14]
 8006afc:	60da      	str	r2, [r3, #12]
 8006afe:	e051      	b.n	8006ba4 <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	76bb      	strb	r3, [r7, #26]
 8006b04:	e04e      	b.n	8006ba4 <UART_SetConfig+0x3dc>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b06:	7efb      	ldrb	r3, [r7, #27]
 8006b08:	3b01      	subs	r3, #1
 8006b0a:	2b07      	cmp	r3, #7
 8006b0c:	d821      	bhi.n	8006b52 <UART_SetConfig+0x38a>
 8006b0e:	a201      	add	r2, pc, #4	; (adr r2, 8006b14 <UART_SetConfig+0x34c>)
 8006b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b14:	08006b35 	.word	0x08006b35
 8006b18:	08006b3d 	.word	0x08006b3d
 8006b1c:	08006b53 	.word	0x08006b53
 8006b20:	08006b43 	.word	0x08006b43
 8006b24:	08006b53 	.word	0x08006b53
 8006b28:	08006b53 	.word	0x08006b53
 8006b2c:	08006b53 	.word	0x08006b53
 8006b30:	08006b4b 	.word	0x08006b4b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b34:	f7fe fcee 	bl	8005514 <HAL_RCC_GetPCLK2Freq>
 8006b38:	6178      	str	r0, [r7, #20]
        break;
 8006b3a:	e00f      	b.n	8006b5c <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b3c:	4b24      	ldr	r3, [pc, #144]	; (8006bd0 <UART_SetConfig+0x408>)
 8006b3e:	617b      	str	r3, [r7, #20]
        break;
 8006b40:	e00c      	b.n	8006b5c <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b42:	f7fe fc51 	bl	80053e8 <HAL_RCC_GetSysClockFreq>
 8006b46:	6178      	str	r0, [r7, #20]
        break;
 8006b48:	e008      	b.n	8006b5c <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b4e:	617b      	str	r3, [r7, #20]
        break;
 8006b50:	e004      	b.n	8006b5c <UART_SetConfig+0x394>
      default:
        pclk = 0U;
 8006b52:	2300      	movs	r3, #0
 8006b54:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	76bb      	strb	r3, [r7, #26]
        break;
 8006b5a:	bf00      	nop
    }

    if (pclk != 0U)
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d020      	beq.n	8006ba4 <UART_SetConfig+0x3dc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b66:	4a19      	ldr	r2, [pc, #100]	; (8006bcc <UART_SetConfig+0x404>)
 8006b68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	fbb3 f2f2 	udiv	r2, r3, r2
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	085b      	lsrs	r3, r3, #1
 8006b7a:	441a      	add	r2, r3
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	2b0f      	cmp	r3, #15
 8006b8c:	d908      	bls.n	8006ba0 <UART_SetConfig+0x3d8>
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b94:	d204      	bcs.n	8006ba0 <UART_SetConfig+0x3d8>
      {
        huart->Instance->BRR = usartdiv;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	693a      	ldr	r2, [r7, #16]
 8006b9c:	60da      	str	r2, [r3, #12]
 8006b9e:	e001      	b.n	8006ba4 <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006bc0:	7ebb      	ldrb	r3, [r7, #26]
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3720      	adds	r7, #32
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bdb0      	pop	{r4, r5, r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	0800a4a4 	.word	0x0800a4a4
 8006bd0:	00f42400 	.word	0x00f42400

08006bd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006be0:	f003 0301 	and.w	r3, r3, #1
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d00a      	beq.n	8006bfe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	430a      	orrs	r2, r1
 8006bfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c02:	f003 0302 	and.w	r3, r3, #2
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d00a      	beq.n	8006c20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	430a      	orrs	r2, r1
 8006c1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c24:	f003 0304 	and.w	r3, r3, #4
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d00a      	beq.n	8006c42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	430a      	orrs	r2, r1
 8006c40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c46:	f003 0308 	and.w	r3, r3, #8
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d00a      	beq.n	8006c64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	430a      	orrs	r2, r1
 8006c62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c68:	f003 0310 	and.w	r3, r3, #16
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d00a      	beq.n	8006c86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	430a      	orrs	r2, r1
 8006c84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c8a:	f003 0320 	and.w	r3, r3, #32
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d00a      	beq.n	8006ca8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	430a      	orrs	r2, r1
 8006ca6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d01a      	beq.n	8006cea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	430a      	orrs	r2, r1
 8006cc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cd2:	d10a      	bne.n	8006cea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	430a      	orrs	r2, r1
 8006ce8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d00a      	beq.n	8006d0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	430a      	orrs	r2, r1
 8006d0a:	605a      	str	r2, [r3, #4]
  }
}
 8006d0c:	bf00      	nop
 8006d0e:	370c      	adds	r7, #12
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b086      	sub	sp, #24
 8006d1c:	af02      	add	r7, sp, #8
 8006d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d28:	f7fc fa2e 	bl	8003188 <HAL_GetTick>
 8006d2c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 0308 	and.w	r3, r3, #8
 8006d38:	2b08      	cmp	r3, #8
 8006d3a:	d10e      	bne.n	8006d5a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d40:	9300      	str	r3, [sp, #0]
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 f82f 	bl	8006dae <UART_WaitOnFlagUntilTimeout>
 8006d50:	4603      	mov	r3, r0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d001      	beq.n	8006d5a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d56:	2303      	movs	r3, #3
 8006d58:	e025      	b.n	8006da6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 0304 	and.w	r3, r3, #4
 8006d64:	2b04      	cmp	r3, #4
 8006d66:	d10e      	bne.n	8006d86 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d6c:	9300      	str	r3, [sp, #0]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2200      	movs	r2, #0
 8006d72:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 f819 	bl	8006dae <UART_WaitOnFlagUntilTimeout>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d001      	beq.n	8006d86 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d82:	2303      	movs	r3, #3
 8006d84:	e00f      	b.n	8006da6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2220      	movs	r2, #32
 8006d8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2220      	movs	r2, #32
 8006d92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006da4:	2300      	movs	r3, #0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3710      	adds	r7, #16
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}

08006dae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006dae:	b580      	push	{r7, lr}
 8006db0:	b084      	sub	sp, #16
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	60f8      	str	r0, [r7, #12]
 8006db6:	60b9      	str	r1, [r7, #8]
 8006db8:	603b      	str	r3, [r7, #0]
 8006dba:	4613      	mov	r3, r2
 8006dbc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dbe:	e062      	b.n	8006e86 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dc0:	69bb      	ldr	r3, [r7, #24]
 8006dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dc6:	d05e      	beq.n	8006e86 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dc8:	f7fc f9de 	bl	8003188 <HAL_GetTick>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	1ad3      	subs	r3, r2, r3
 8006dd2:	69ba      	ldr	r2, [r7, #24]
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d302      	bcc.n	8006dde <UART_WaitOnFlagUntilTimeout+0x30>
 8006dd8:	69bb      	ldr	r3, [r7, #24]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d11d      	bne.n	8006e1a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006dec:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	689a      	ldr	r2, [r3, #8]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f022 0201 	bic.w	r2, r2, #1
 8006dfc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2220      	movs	r2, #32
 8006e02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2220      	movs	r2, #32
 8006e0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2200      	movs	r2, #0
 8006e12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006e16:	2303      	movs	r3, #3
 8006e18:	e045      	b.n	8006ea6 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f003 0304 	and.w	r3, r3, #4
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d02e      	beq.n	8006e86 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	69db      	ldr	r3, [r3, #28]
 8006e2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e36:	d126      	bne.n	8006e86 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e40:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006e50:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	689a      	ldr	r2, [r3, #8]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f022 0201 	bic.w	r2, r2, #1
 8006e60:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2220      	movs	r2, #32
 8006e66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2220      	movs	r2, #32
 8006e6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2220      	movs	r2, #32
 8006e76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006e82:	2303      	movs	r3, #3
 8006e84:	e00f      	b.n	8006ea6 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	69da      	ldr	r2, [r3, #28]
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	4013      	ands	r3, r2
 8006e90:	68ba      	ldr	r2, [r7, #8]
 8006e92:	429a      	cmp	r2, r3
 8006e94:	bf0c      	ite	eq
 8006e96:	2301      	moveq	r3, #1
 8006e98:	2300      	movne	r3, #0
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	79fb      	ldrb	r3, [r7, #7]
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d08d      	beq.n	8006dc0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ea4:	2300      	movs	r3, #0
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3710      	adds	r7, #16
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}

08006eae <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006eae:	b480      	push	{r7}
 8006eb0:	b083      	sub	sp, #12
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006ec4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	689a      	ldr	r2, [r3, #8]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8006ed4:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2220      	movs	r2, #32
 8006eda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8006ede:	bf00      	nop
 8006ee0:	370c      	adds	r7, #12
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr

08006eea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006eea:	b480      	push	{r7}
 8006eec:	b083      	sub	sp, #12
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006f00:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	6812      	ldr	r2, [r2, #0]
 8006f0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f10:	f023 0301 	bic.w	r3, r3, #1
 8006f14:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d107      	bne.n	8006f2e <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f022 0210 	bic.w	r2, r2, #16
 8006f2c:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2220      	movs	r2, #32
 8006f32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006f42:	bf00      	nop
 8006f44:	370c      	adds	r7, #12
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr

08006f4e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006f4e:	b580      	push	{r7, lr}
 8006f50:	b084      	sub	sp, #16
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f5a:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f003 0320 	and.w	r3, r3, #32
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d114      	bne.n	8006f94 <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	689a      	ldr	r2, [r3, #8]
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f80:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f90:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006f92:	e002      	b.n	8006f9a <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 8006f94:	68f8      	ldr	r0, [r7, #12]
 8006f96:	f7fa fb4f 	bl	8001638 <HAL_UART_TxCpltCallback>
}
 8006f9a:	bf00      	nop
 8006f9c:	3710      	adds	r7, #16
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}

08006fa2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006fa2:	b580      	push	{r7, lr}
 8006fa4:	b084      	sub	sp, #16
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fae:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006fb0:	68f8      	ldr	r0, [r7, #12]
 8006fb2:	f7ff fbe9 	bl	8006788 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fb6:	bf00      	nop
 8006fb8:	3710      	adds	r7, #16
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}

08006fbe <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006fbe:	b580      	push	{r7, lr}
 8006fc0:	b086      	sub	sp, #24
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fca:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fd2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fda:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fe6:	2b80      	cmp	r3, #128	; 0x80
 8006fe8:	d109      	bne.n	8006ffe <UART_DMAError+0x40>
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	2b21      	cmp	r3, #33	; 0x21
 8006fee:	d106      	bne.n	8006ffe <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8006ff8:	6978      	ldr	r0, [r7, #20]
 8006ffa:	f7ff ff58 	bl	8006eae <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007008:	2b40      	cmp	r3, #64	; 0x40
 800700a:	d109      	bne.n	8007020 <UART_DMAError+0x62>
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2b22      	cmp	r3, #34	; 0x22
 8007010:	d106      	bne.n	8007020 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	2200      	movs	r2, #0
 8007016:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800701a:	6978      	ldr	r0, [r7, #20]
 800701c:	f7ff ff65 	bl	8006eea <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007026:	f043 0210 	orr.w	r2, r3, #16
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007030:	6978      	ldr	r0, [r7, #20]
 8007032:	f7ff fbb3 	bl	800679c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007036:	bf00      	nop
 8007038:	3718      	adds	r7, #24
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}

0800703e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800703e:	b580      	push	{r7, lr}
 8007040:	b084      	sub	sp, #16
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800704a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2200      	movs	r2, #0
 8007050:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2200      	movs	r2, #0
 8007058:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800705c:	68f8      	ldr	r0, [r7, #12]
 800705e:	f7ff fb9d 	bl	800679c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007062:	bf00      	nop
 8007064:	3710      	adds	r7, #16
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}

0800706a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800706a:	b580      	push	{r7, lr}
 800706c:	b082      	sub	sp, #8
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007080:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2220      	movs	r2, #32
 8007086:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f7fa fad1 	bl	8001638 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007096:	bf00      	nop
 8007098:	3708      	adds	r7, #8
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}

0800709e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800709e:	b480      	push	{r7}
 80070a0:	b083      	sub	sp, #12
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80070a6:	bf00      	nop
 80070a8:	370c      	adds	r7, #12
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr

080070b2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80070b2:	b480      	push	{r7}
 80070b4:	b083      	sub	sp, #12
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80070ba:	bf00      	nop
 80070bc:	370c      	adds	r7, #12
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr

080070c6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80070c6:	b480      	push	{r7}
 80070c8:	b083      	sub	sp, #12
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80070ce:	bf00      	nop
 80070d0:	370c      	adds	r7, #12
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr

080070da <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80070da:	b480      	push	{r7}
 80070dc:	b085      	sub	sp, #20
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d101      	bne.n	80070f0 <HAL_UARTEx_DisableFifoMode+0x16>
 80070ec:	2302      	movs	r3, #2
 80070ee:	e027      	b.n	8007140 <HAL_UARTEx_DisableFifoMode+0x66>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2224      	movs	r2, #36	; 0x24
 80070fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f022 0201 	bic.w	r2, r2, #1
 8007116:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800711e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	68fa      	ldr	r2, [r7, #12]
 800712c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2220      	movs	r2, #32
 8007132:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800713e:	2300      	movs	r3, #0
}
 8007140:	4618      	mov	r0, r3
 8007142:	3714      	adds	r7, #20
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800715c:	2b01      	cmp	r3, #1
 800715e:	d101      	bne.n	8007164 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007160:	2302      	movs	r3, #2
 8007162:	e02d      	b.n	80071c0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2224      	movs	r2, #36	; 0x24
 8007170:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f022 0201 	bic.w	r2, r2, #1
 800718a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	683a      	ldr	r2, [r7, #0]
 800719c:	430a      	orrs	r2, r1
 800719e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f000 f84f 	bl	8007244 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	68fa      	ldr	r2, [r7, #12]
 80071ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2220      	movs	r2, #32
 80071b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2200      	movs	r2, #0
 80071ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80071be:	2300      	movs	r3, #0
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3710      	adds	r7, #16
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d101      	bne.n	80071e0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80071dc:	2302      	movs	r3, #2
 80071de:	e02d      	b.n	800723c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2201      	movs	r2, #1
 80071e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2224      	movs	r2, #36	; 0x24
 80071ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f022 0201 	bic.w	r2, r2, #1
 8007206:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	683a      	ldr	r2, [r7, #0]
 8007218:	430a      	orrs	r2, r1
 800721a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 f811 	bl	8007244 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	68fa      	ldr	r2, [r7, #12]
 8007228:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2220      	movs	r2, #32
 800722e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2200      	movs	r2, #0
 8007236:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800723a:	2300      	movs	r3, #0
}
 800723c:	4618      	mov	r0, r3
 800723e:	3710      	adds	r7, #16
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007244:	b480      	push	{r7}
 8007246:	b085      	sub	sp, #20
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007250:	2b00      	cmp	r3, #0
 8007252:	d108      	bne.n	8007266 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2201      	movs	r2, #1
 8007258:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2201      	movs	r2, #1
 8007260:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007264:	e031      	b.n	80072ca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007266:	2308      	movs	r3, #8
 8007268:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800726a:	2308      	movs	r3, #8
 800726c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	0e5b      	lsrs	r3, r3, #25
 8007276:	b2db      	uxtb	r3, r3
 8007278:	f003 0307 	and.w	r3, r3, #7
 800727c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	0f5b      	lsrs	r3, r3, #29
 8007286:	b2db      	uxtb	r3, r3
 8007288:	f003 0307 	and.w	r3, r3, #7
 800728c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800728e:	7bbb      	ldrb	r3, [r7, #14]
 8007290:	7b3a      	ldrb	r2, [r7, #12]
 8007292:	4911      	ldr	r1, [pc, #68]	; (80072d8 <UARTEx_SetNbDataToProcess+0x94>)
 8007294:	5c8a      	ldrb	r2, [r1, r2]
 8007296:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800729a:	7b3a      	ldrb	r2, [r7, #12]
 800729c:	490f      	ldr	r1, [pc, #60]	; (80072dc <UARTEx_SetNbDataToProcess+0x98>)
 800729e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80072a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80072a4:	b29a      	uxth	r2, r3
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80072ac:	7bfb      	ldrb	r3, [r7, #15]
 80072ae:	7b7a      	ldrb	r2, [r7, #13]
 80072b0:	4909      	ldr	r1, [pc, #36]	; (80072d8 <UARTEx_SetNbDataToProcess+0x94>)
 80072b2:	5c8a      	ldrb	r2, [r1, r2]
 80072b4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80072b8:	7b7a      	ldrb	r2, [r7, #13]
 80072ba:	4908      	ldr	r1, [pc, #32]	; (80072dc <UARTEx_SetNbDataToProcess+0x98>)
 80072bc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80072be:	fb93 f3f2 	sdiv	r3, r3, r2
 80072c2:	b29a      	uxth	r2, r3
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80072ca:	bf00      	nop
 80072cc:	3714      	adds	r7, #20
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr
 80072d6:	bf00      	nop
 80072d8:	0800a4bc 	.word	0x0800a4bc
 80072dc:	0800a4c4 	.word	0x0800a4c4

080072e0 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 80072e0:	b5b0      	push	{r4, r5, r7, lr}
 80072e2:	b0ce      	sub	sp, #312	; 0x138
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	4605      	mov	r5, r0
 80072e8:	460c      	mov	r4, r1
 80072ea:	4610      	mov	r0, r2
 80072ec:	4619      	mov	r1, r3
 80072ee:	1dfb      	adds	r3, r7, #7
 80072f0:	462a      	mov	r2, r5
 80072f2:	701a      	strb	r2, [r3, #0]
 80072f4:	1d3b      	adds	r3, r7, #4
 80072f6:	4622      	mov	r2, r4
 80072f8:	801a      	strh	r2, [r3, #0]
 80072fa:	1cbb      	adds	r3, r7, #2
 80072fc:	4602      	mov	r2, r0
 80072fe:	801a      	strh	r2, [r3, #0]
 8007300:	1dbb      	adds	r3, r7, #6
 8007302:	460a      	mov	r2, r1
 8007304:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8007306:	f107 0310 	add.w	r3, r7, #16
 800730a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800730e:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8007312:	3308      	adds	r3, #8
 8007314:	f107 0210 	add.w	r2, r7, #16
 8007318:	4413      	add	r3, r2
 800731a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800731e:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8007322:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8007326:	4413      	add	r3, r2
 8007328:	3309      	adds	r3, #9
 800732a:	f107 0210 	add.w	r2, r7, #16
 800732e:	4413      	add	r3, r2
 8007330:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007334:	f107 030f 	add.w	r3, r7, #15
 8007338:	2200      	movs	r2, #0
 800733a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800733c:	2300      	movs	r3, #0
 800733e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8007342:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007346:	1dfa      	adds	r2, r7, #7
 8007348:	7812      	ldrb	r2, [r2, #0]
 800734a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800734c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007350:	3301      	adds	r3, #1
 8007352:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8007356:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800735a:	1d3a      	adds	r2, r7, #4
 800735c:	8812      	ldrh	r2, [r2, #0]
 800735e:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8007362:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007366:	3302      	adds	r3, #2
 8007368:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800736c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007370:	1cba      	adds	r2, r7, #2
 8007372:	8812      	ldrh	r2, [r2, #0]
 8007374:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8007378:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800737c:	3302      	adds	r3, #2
 800737e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8007382:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007386:	1dba      	adds	r2, r7, #6
 8007388:	7812      	ldrb	r2, [r2, #0]
 800738a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800738c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007390:	3301      	adds	r3, #1
 8007392:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8007396:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800739a:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800739e:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80073a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80073a4:	3301      	adds	r3, #1
 80073a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 80073aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80073ae:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80073b2:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 80073b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80073b8:	3301      	adds	r3, #1
 80073ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 80073be:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80073c2:	3308      	adds	r3, #8
 80073c4:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80073c8:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 80073cc:	4618      	mov	r0, r3
 80073ce:	f000 fd15 	bl	8007dfc <Osal_MemCpy>
    index_input += Local_Name_Length;
 80073d2:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80073d6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80073da:	4413      	add	r3, r2
 80073dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 80073e0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80073e4:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80073e8:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80073ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80073ee:	3301      	adds	r3, #1
 80073f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 80073f4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80073f8:	3301      	adds	r3, #1
 80073fa:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80073fe:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8007402:	4618      	mov	r0, r3
 8007404:	f000 fcfa 	bl	8007dfc <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8007408:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800740c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007410:	4413      	add	r3, r2
 8007412:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8007416:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800741a:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800741e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8007420:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007424:	3302      	adds	r3, #2
 8007426:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 800742a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800742e:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8007432:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8007434:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007438:	3302      	adds	r3, #2
 800743a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800743e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007442:	2218      	movs	r2, #24
 8007444:	2100      	movs	r1, #0
 8007446:	4618      	mov	r0, r3
 8007448:	f000 fce8 	bl	8007e1c <Osal_MemSet>
  rq.ogf = 0x3f;
 800744c:	233f      	movs	r3, #63	; 0x3f
 800744e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8007452:	2383      	movs	r3, #131	; 0x83
 8007454:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007458:	f107 0310 	add.w	r3, r7, #16
 800745c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007460:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007464:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007468:	f107 030f 	add.w	r3, r7, #15
 800746c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007470:	2301      	movs	r3, #1
 8007472:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007476:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800747a:	2100      	movs	r1, #0
 800747c:	4618      	mov	r0, r3
 800747e:	f000 fb91 	bl	8007ba4 <hci_send_req>
 8007482:	4603      	mov	r3, r0
 8007484:	2b00      	cmp	r3, #0
 8007486:	da01      	bge.n	800748c <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 8007488:	23ff      	movs	r3, #255	; 0xff
 800748a:	e002      	b.n	8007492 <aci_gap_set_discoverable+0x1b2>
  return status;
 800748c:	f107 030f 	add.w	r3, r7, #15
 8007490:	781b      	ldrb	r3, [r3, #0]
}
 8007492:	4618      	mov	r0, r3
 8007494:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8007498:	46bd      	mov	sp, r7
 800749a:	bdb0      	pop	{r4, r5, r7, pc}

0800749c <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800749c:	b590      	push	{r4, r7, lr}
 800749e:	b0cd      	sub	sp, #308	; 0x134
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	4604      	mov	r4, r0
 80074a4:	4608      	mov	r0, r1
 80074a6:	4611      	mov	r1, r2
 80074a8:	463a      	mov	r2, r7
 80074aa:	6013      	str	r3, [r2, #0]
 80074ac:	1dfb      	adds	r3, r7, #7
 80074ae:	4622      	mov	r2, r4
 80074b0:	701a      	strb	r2, [r3, #0]
 80074b2:	1dbb      	adds	r3, r7, #6
 80074b4:	4602      	mov	r2, r0
 80074b6:	701a      	strb	r2, [r3, #0]
 80074b8:	1d7b      	adds	r3, r7, #5
 80074ba:	460a      	mov	r2, r1
 80074bc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 80074be:	f107 0310 	add.w	r3, r7, #16
 80074c2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80074c6:	f107 0308 	add.w	r3, r7, #8
 80074ca:	2207      	movs	r2, #7
 80074cc:	2100      	movs	r1, #0
 80074ce:	4618      	mov	r0, r3
 80074d0:	f000 fca4 	bl	8007e1c <Osal_MemSet>
  int index_input = 0;
 80074d4:	2300      	movs	r3, #0
 80074d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 80074da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074de:	1dfa      	adds	r2, r7, #7
 80074e0:	7812      	ldrb	r2, [r2, #0]
 80074e2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80074e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80074e8:	3301      	adds	r3, #1
 80074ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 80074ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074f2:	1dba      	adds	r2, r7, #6
 80074f4:	7812      	ldrb	r2, [r2, #0]
 80074f6:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80074f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80074fc:	3301      	adds	r3, #1
 80074fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8007502:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007506:	1d7a      	adds	r2, r7, #5
 8007508:	7812      	ldrb	r2, [r2, #0]
 800750a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800750c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007510:	3301      	adds	r3, #1
 8007512:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007516:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800751a:	2218      	movs	r2, #24
 800751c:	2100      	movs	r1, #0
 800751e:	4618      	mov	r0, r3
 8007520:	f000 fc7c 	bl	8007e1c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007524:	233f      	movs	r3, #63	; 0x3f
 8007526:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800752a:	238a      	movs	r3, #138	; 0x8a
 800752c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007530:	f107 0310 	add.w	r3, r7, #16
 8007534:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007538:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800753c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8007540:	f107 0308 	add.w	r3, r7, #8
 8007544:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8007548:	2307      	movs	r3, #7
 800754a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800754e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007552:	2100      	movs	r1, #0
 8007554:	4618      	mov	r0, r3
 8007556:	f000 fb25 	bl	8007ba4 <hci_send_req>
 800755a:	4603      	mov	r3, r0
 800755c:	2b00      	cmp	r3, #0
 800755e:	da01      	bge.n	8007564 <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 8007560:	23ff      	movs	r3, #255	; 0xff
 8007562:	e021      	b.n	80075a8 <aci_gap_init+0x10c>
  if ( resp.Status )
 8007564:	f107 0308 	add.w	r3, r7, #8
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d003      	beq.n	8007576 <aci_gap_init+0xda>
    return resp.Status;
 800756e:	f107 0308 	add.w	r3, r7, #8
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	e018      	b.n	80075a8 <aci_gap_init+0x10c>
  *Service_Handle = resp.Service_Handle;
 8007576:	f107 0308 	add.w	r3, r7, #8
 800757a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800757e:	b29a      	uxth	r2, r3
 8007580:	463b      	mov	r3, r7
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8007586:	f107 0308 	add.w	r3, r7, #8
 800758a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800758e:	b29a      	uxth	r2, r3
 8007590:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8007594:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8007596:	f107 0308 	add.w	r3, r7, #8
 800759a:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800759e:	b29a      	uxth	r2, r3
 80075a0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80075a4:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80075a6:	2300      	movs	r3, #0
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd90      	pop	{r4, r7, pc}

080075b2 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 80075b2:	b580      	push	{r7, lr}
 80075b4:	b0cc      	sub	sp, #304	; 0x130
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	4602      	mov	r2, r0
 80075ba:	463b      	mov	r3, r7
 80075bc:	6019      	str	r1, [r3, #0]
 80075be:	1dfb      	adds	r3, r7, #7
 80075c0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 80075c2:	f107 0310 	add.w	r3, r7, #16
 80075c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80075ca:	f107 030f 	add.w	r3, r7, #15
 80075ce:	2200      	movs	r2, #0
 80075d0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80075d2:	2300      	movs	r3, #0
 80075d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 80075d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075dc:	1dfa      	adds	r2, r7, #7
 80075de:	7812      	ldrb	r2, [r2, #0]
 80075e0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80075e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80075e6:	3301      	adds	r3, #1
 80075e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 80075ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075f0:	1c58      	adds	r0, r3, #1
 80075f2:	1dfb      	adds	r3, r7, #7
 80075f4:	781a      	ldrb	r2, [r3, #0]
 80075f6:	463b      	mov	r3, r7
 80075f8:	6819      	ldr	r1, [r3, #0]
 80075fa:	f000 fbff 	bl	8007dfc <Osal_MemCpy>
  index_input += AdvDataLen;
 80075fe:	1dfb      	adds	r3, r7, #7
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007606:	4413      	add	r3, r2
 8007608:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800760c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007610:	2218      	movs	r2, #24
 8007612:	2100      	movs	r1, #0
 8007614:	4618      	mov	r0, r3
 8007616:	f000 fc01 	bl	8007e1c <Osal_MemSet>
  rq.ogf = 0x3f;
 800761a:	233f      	movs	r3, #63	; 0x3f
 800761c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8007620:	238e      	movs	r3, #142	; 0x8e
 8007622:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007626:	f107 0310 	add.w	r3, r7, #16
 800762a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800762e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007632:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007636:	f107 030f 	add.w	r3, r7, #15
 800763a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800763e:	2301      	movs	r3, #1
 8007640:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007644:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007648:	2100      	movs	r1, #0
 800764a:	4618      	mov	r0, r3
 800764c:	f000 faaa 	bl	8007ba4 <hci_send_req>
 8007650:	4603      	mov	r3, r0
 8007652:	2b00      	cmp	r3, #0
 8007654:	da01      	bge.n	800765a <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 8007656:	23ff      	movs	r3, #255	; 0xff
 8007658:	e002      	b.n	8007660 <aci_gap_update_adv_data+0xae>
  return status;
 800765a:	f107 030f 	add.w	r3, r7, #15
 800765e:	781b      	ldrb	r3, [r3, #0]
}
 8007660:	4618      	mov	r0, r3
 8007662:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}

0800766a <aci_gap_delete_ad_type>:

tBleStatus aci_gap_delete_ad_type( uint8_t ADType )
{
 800766a:	b580      	push	{r7, lr}
 800766c:	b0cc      	sub	sp, #304	; 0x130
 800766e:	af00      	add	r7, sp, #0
 8007670:	4602      	mov	r2, r0
 8007672:	1dfb      	adds	r3, r7, #7
 8007674:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_delete_ad_type_cp0 *cp0 = (aci_gap_delete_ad_type_cp0*)(cmd_buffer);
 8007676:	f107 0310 	add.w	r3, r7, #16
 800767a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800767e:	f107 030f 	add.w	r3, r7, #15
 8007682:	2200      	movs	r2, #0
 8007684:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007686:	2300      	movs	r3, #0
 8007688:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ADType = ADType;
 800768c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007690:	1dfa      	adds	r2, r7, #7
 8007692:	7812      	ldrb	r2, [r2, #0]
 8007694:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007696:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800769a:	3301      	adds	r3, #1
 800769c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80076a0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80076a4:	2218      	movs	r2, #24
 80076a6:	2100      	movs	r1, #0
 80076a8:	4618      	mov	r0, r3
 80076aa:	f000 fbb7 	bl	8007e1c <Osal_MemSet>
  rq.ogf = 0x3f;
 80076ae:	233f      	movs	r3, #63	; 0x3f
 80076b0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08f;
 80076b4:	238f      	movs	r3, #143	; 0x8f
 80076b6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80076ba:	f107 0310 	add.w	r3, r7, #16
 80076be:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80076c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80076c6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80076ca:	f107 030f 	add.w	r3, r7, #15
 80076ce:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80076d2:	2301      	movs	r3, #1
 80076d4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80076d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80076dc:	2100      	movs	r1, #0
 80076de:	4618      	mov	r0, r3
 80076e0:	f000 fa60 	bl	8007ba4 <hci_send_req>
 80076e4:	4603      	mov	r3, r0
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	da01      	bge.n	80076ee <aci_gap_delete_ad_type+0x84>
    return BLE_STATUS_TIMEOUT;
 80076ea:	23ff      	movs	r3, #255	; 0xff
 80076ec:	e002      	b.n	80076f4 <aci_gap_delete_ad_type+0x8a>
  return status;
 80076ee:	f107 030f 	add.w	r3, r7, #15
 80076f2:	781b      	ldrb	r3, [r3, #0]
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}

080076fe <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 80076fe:	b580      	push	{r7, lr}
 8007700:	b088      	sub	sp, #32
 8007702:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007704:	2300      	movs	r3, #0
 8007706:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007708:	f107 0308 	add.w	r3, r7, #8
 800770c:	2218      	movs	r2, #24
 800770e:	2100      	movs	r1, #0
 8007710:	4618      	mov	r0, r3
 8007712:	f000 fb83 	bl	8007e1c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007716:	233f      	movs	r3, #63	; 0x3f
 8007718:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800771a:	f240 1301 	movw	r3, #257	; 0x101
 800771e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007720:	1dfb      	adds	r3, r7, #7
 8007722:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007724:	2301      	movs	r3, #1
 8007726:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007728:	f107 0308 	add.w	r3, r7, #8
 800772c:	2100      	movs	r1, #0
 800772e:	4618      	mov	r0, r3
 8007730:	f000 fa38 	bl	8007ba4 <hci_send_req>
 8007734:	4603      	mov	r3, r0
 8007736:	2b00      	cmp	r3, #0
 8007738:	da01      	bge.n	800773e <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800773a:	23ff      	movs	r3, #255	; 0xff
 800773c:	e000      	b.n	8007740 <aci_gatt_init+0x42>
  return status;
 800773e:	79fb      	ldrb	r3, [r7, #7]
}
 8007740:	4618      	mov	r0, r3
 8007742:	3720      	adds	r7, #32
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8007748:	b5b0      	push	{r4, r5, r7, lr}
 800774a:	b0cc      	sub	sp, #304	; 0x130
 800774c:	af00      	add	r7, sp, #0
 800774e:	4605      	mov	r5, r0
 8007750:	460c      	mov	r4, r1
 8007752:	4610      	mov	r0, r2
 8007754:	4619      	mov	r1, r3
 8007756:	1dbb      	adds	r3, r7, #6
 8007758:	462a      	mov	r2, r5
 800775a:	801a      	strh	r2, [r3, #0]
 800775c:	1d3b      	adds	r3, r7, #4
 800775e:	4622      	mov	r2, r4
 8007760:	801a      	strh	r2, [r3, #0]
 8007762:	1cfb      	adds	r3, r7, #3
 8007764:	4602      	mov	r2, r0
 8007766:	701a      	strb	r2, [r3, #0]
 8007768:	1cbb      	adds	r3, r7, #2
 800776a:	460a      	mov	r2, r1
 800776c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800776e:	f107 0310 	add.w	r3, r7, #16
 8007772:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007776:	f107 030f 	add.w	r3, r7, #15
 800777a:	2200      	movs	r2, #0
 800777c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800777e:	2300      	movs	r3, #0
 8007780:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8007784:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007788:	1dba      	adds	r2, r7, #6
 800778a:	8812      	ldrh	r2, [r2, #0]
 800778c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800778e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007792:	3302      	adds	r3, #2
 8007794:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8007798:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800779c:	1d3a      	adds	r2, r7, #4
 800779e:	8812      	ldrh	r2, [r2, #0]
 80077a0:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80077a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80077a6:	3302      	adds	r3, #2
 80077a8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 80077ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077b0:	1cfa      	adds	r2, r7, #3
 80077b2:	7812      	ldrb	r2, [r2, #0]
 80077b4:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80077b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80077ba:	3301      	adds	r3, #1
 80077bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 80077c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077c4:	1cba      	adds	r2, r7, #2
 80077c6:	7812      	ldrb	r2, [r2, #0]
 80077c8:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80077ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80077ce:	3301      	adds	r3, #1
 80077d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 80077d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077d8:	1d98      	adds	r0, r3, #6
 80077da:	1cbb      	adds	r3, r7, #2
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	461a      	mov	r2, r3
 80077e0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80077e4:	f000 fb0a 	bl	8007dfc <Osal_MemCpy>
  index_input += Char_Value_Length;
 80077e8:	1cbb      	adds	r3, r7, #2
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80077f0:	4413      	add	r3, r2
 80077f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80077f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80077fa:	2218      	movs	r2, #24
 80077fc:	2100      	movs	r1, #0
 80077fe:	4618      	mov	r0, r3
 8007800:	f000 fb0c 	bl	8007e1c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007804:	233f      	movs	r3, #63	; 0x3f
 8007806:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800780a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800780e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007812:	f107 0310 	add.w	r3, r7, #16
 8007816:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800781a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800781e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007822:	f107 030f 	add.w	r3, r7, #15
 8007826:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800782a:	2301      	movs	r3, #1
 800782c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007830:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007834:	2100      	movs	r1, #0
 8007836:	4618      	mov	r0, r3
 8007838:	f000 f9b4 	bl	8007ba4 <hci_send_req>
 800783c:	4603      	mov	r3, r0
 800783e:	2b00      	cmp	r3, #0
 8007840:	da01      	bge.n	8007846 <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 8007842:	23ff      	movs	r3, #255	; 0xff
 8007844:	e002      	b.n	800784c <aci_gatt_update_char_value+0x104>
  return status;
 8007846:	f107 030f 	add.w	r3, r7, #15
 800784a:	781b      	ldrb	r3, [r3, #0]
}
 800784c:	4618      	mov	r0, r3
 800784e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007852:	46bd      	mov	sp, r7
 8007854:	bdb0      	pop	{r4, r5, r7, pc}

08007856 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8007856:	b580      	push	{r7, lr}
 8007858:	b0cc      	sub	sp, #304	; 0x130
 800785a:	af00      	add	r7, sp, #0
 800785c:	463b      	mov	r3, r7
 800785e:	601a      	str	r2, [r3, #0]
 8007860:	1dfb      	adds	r3, r7, #7
 8007862:	4602      	mov	r2, r0
 8007864:	701a      	strb	r2, [r3, #0]
 8007866:	1dbb      	adds	r3, r7, #6
 8007868:	460a      	mov	r2, r1
 800786a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800786c:	f107 0310 	add.w	r3, r7, #16
 8007870:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007874:	f107 030f 	add.w	r3, r7, #15
 8007878:	2200      	movs	r2, #0
 800787a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800787c:	2300      	movs	r3, #0
 800787e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8007882:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007886:	1dfa      	adds	r2, r7, #7
 8007888:	7812      	ldrb	r2, [r2, #0]
 800788a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800788c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007890:	3301      	adds	r3, #1
 8007892:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8007896:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800789a:	1dba      	adds	r2, r7, #6
 800789c:	7812      	ldrb	r2, [r2, #0]
 800789e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80078a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80078a4:	3301      	adds	r3, #1
 80078a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 80078aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078ae:	1c98      	adds	r0, r3, #2
 80078b0:	1dbb      	adds	r3, r7, #6
 80078b2:	781a      	ldrb	r2, [r3, #0]
 80078b4:	463b      	mov	r3, r7
 80078b6:	6819      	ldr	r1, [r3, #0]
 80078b8:	f000 faa0 	bl	8007dfc <Osal_MemCpy>
  index_input += Length;
 80078bc:	1dbb      	adds	r3, r7, #6
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80078c4:	4413      	add	r3, r2
 80078c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80078ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80078ce:	2218      	movs	r2, #24
 80078d0:	2100      	movs	r1, #0
 80078d2:	4618      	mov	r0, r3
 80078d4:	f000 faa2 	bl	8007e1c <Osal_MemSet>
  rq.ogf = 0x3f;
 80078d8:	233f      	movs	r3, #63	; 0x3f
 80078da:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 80078de:	230c      	movs	r3, #12
 80078e0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80078e4:	f107 0310 	add.w	r3, r7, #16
 80078e8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80078ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80078f0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80078f4:	f107 030f 	add.w	r3, r7, #15
 80078f8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80078fc:	2301      	movs	r3, #1
 80078fe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007902:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007906:	2100      	movs	r1, #0
 8007908:	4618      	mov	r0, r3
 800790a:	f000 f94b 	bl	8007ba4 <hci_send_req>
 800790e:	4603      	mov	r3, r0
 8007910:	2b00      	cmp	r3, #0
 8007912:	da01      	bge.n	8007918 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 8007914:	23ff      	movs	r3, #255	; 0xff
 8007916:	e002      	b.n	800791e <aci_hal_write_config_data+0xc8>
  return status;
 8007918:	f107 030f 	add.w	r3, r7, #15
 800791c:	781b      	ldrb	r3, [r3, #0]
}
 800791e:	4618      	mov	r0, r3
 8007920:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}

08007928 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b0cc      	sub	sp, #304	; 0x130
 800792c:	af00      	add	r7, sp, #0
 800792e:	4602      	mov	r2, r0
 8007930:	1dfb      	adds	r3, r7, #7
 8007932:	701a      	strb	r2, [r3, #0]
 8007934:	1dbb      	adds	r3, r7, #6
 8007936:	460a      	mov	r2, r1
 8007938:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800793a:	f107 0310 	add.w	r3, r7, #16
 800793e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007942:	f107 030f 	add.w	r3, r7, #15
 8007946:	2200      	movs	r2, #0
 8007948:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800794a:	2300      	movs	r3, #0
 800794c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8007950:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007954:	1dfa      	adds	r2, r7, #7
 8007956:	7812      	ldrb	r2, [r2, #0]
 8007958:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800795a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800795e:	3301      	adds	r3, #1
 8007960:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8007964:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007968:	1dba      	adds	r2, r7, #6
 800796a:	7812      	ldrb	r2, [r2, #0]
 800796c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800796e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007972:	3301      	adds	r3, #1
 8007974:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007978:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800797c:	2218      	movs	r2, #24
 800797e:	2100      	movs	r1, #0
 8007980:	4618      	mov	r0, r3
 8007982:	f000 fa4b 	bl	8007e1c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007986:	233f      	movs	r3, #63	; 0x3f
 8007988:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800798c:	230f      	movs	r3, #15
 800798e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007992:	f107 0310 	add.w	r3, r7, #16
 8007996:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800799a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800799e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80079a2:	f107 030f 	add.w	r3, r7, #15
 80079a6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80079aa:	2301      	movs	r3, #1
 80079ac:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80079b0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80079b4:	2100      	movs	r1, #0
 80079b6:	4618      	mov	r0, r3
 80079b8:	f000 f8f4 	bl	8007ba4 <hci_send_req>
 80079bc:	4603      	mov	r3, r0
 80079be:	2b00      	cmp	r3, #0
 80079c0:	da01      	bge.n	80079c6 <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 80079c2:	23ff      	movs	r3, #255	; 0xff
 80079c4:	e002      	b.n	80079cc <aci_hal_set_tx_power_level+0xa4>
  return status;
 80079c6:	f107 030f 	add.w	r3, r7, #15
 80079ca:	781b      	ldrb	r3, [r3, #0]
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}

080079d6 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 80079d6:	b580      	push	{r7, lr}
 80079d8:	b088      	sub	sp, #32
 80079da:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80079dc:	2300      	movs	r3, #0
 80079de:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80079e0:	f107 0308 	add.w	r3, r7, #8
 80079e4:	2218      	movs	r2, #24
 80079e6:	2100      	movs	r1, #0
 80079e8:	4618      	mov	r0, r3
 80079ea:	f000 fa17 	bl	8007e1c <Osal_MemSet>
  rq.ogf = 0x03;
 80079ee:	2303      	movs	r3, #3
 80079f0:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 80079f2:	2303      	movs	r3, #3
 80079f4:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80079f6:	1dfb      	adds	r3, r7, #7
 80079f8:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80079fa:	2301      	movs	r3, #1
 80079fc:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80079fe:	f107 0308 	add.w	r3, r7, #8
 8007a02:	2100      	movs	r1, #0
 8007a04:	4618      	mov	r0, r3
 8007a06:	f000 f8cd 	bl	8007ba4 <hci_send_req>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	da01      	bge.n	8007a14 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007a10:	23ff      	movs	r3, #255	; 0xff
 8007a12:	e000      	b.n	8007a16 <hci_reset+0x40>
  return status;
 8007a14:	79fb      	ldrb	r3, [r7, #7]
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3720      	adds	r7, #32
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}

08007a1e <hci_le_set_scan_response_data>:
  return status;
}

tBleStatus hci_le_set_scan_response_data( uint8_t Scan_Response_Data_Length,
                                          const uint8_t* Scan_Response_Data )
{
 8007a1e:	b580      	push	{r7, lr}
 8007a20:	b0cc      	sub	sp, #304	; 0x130
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	4602      	mov	r2, r0
 8007a26:	463b      	mov	r3, r7
 8007a28:	6019      	str	r1, [r3, #0]
 8007a2a:	1dfb      	adds	r3, r7, #7
 8007a2c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_scan_response_data_cp0 *cp0 = (hci_le_set_scan_response_data_cp0*)(cmd_buffer);
 8007a2e:	f107 0310 	add.w	r3, r7, #16
 8007a32:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007a36:	f107 030f 	add.w	r3, r7, #15
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Scan_Response_Data_Length = Scan_Response_Data_Length;
 8007a44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a48:	1dfa      	adds	r2, r7, #7
 8007a4a:	7812      	ldrb	r2, [r2, #0]
 8007a4c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007a4e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a52:	3301      	adds	r3, #1
 8007a54:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Scan_Response_Data, (const void*)Scan_Response_Data, 31 );
 8007a58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a5c:	1c58      	adds	r0, r3, #1
 8007a5e:	463b      	mov	r3, r7
 8007a60:	221f      	movs	r2, #31
 8007a62:	6819      	ldr	r1, [r3, #0]
 8007a64:	f000 f9ca 	bl	8007dfc <Osal_MemCpy>
  index_input += 31;
 8007a68:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a6c:	331f      	adds	r3, #31
 8007a6e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007a72:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007a76:	2218      	movs	r2, #24
 8007a78:	2100      	movs	r1, #0
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f000 f9ce 	bl	8007e1c <Osal_MemSet>
  rq.ogf = 0x08;
 8007a80:	2308      	movs	r3, #8
 8007a82:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x009;
 8007a86:	2309      	movs	r3, #9
 8007a88:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007a8c:	f107 0310 	add.w	r3, r7, #16
 8007a90:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007a94:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a98:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007a9c:	f107 030f 	add.w	r3, r7, #15
 8007aa0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007aaa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007aae:	2100      	movs	r1, #0
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f000 f877 	bl	8007ba4 <hci_send_req>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	da01      	bge.n	8007ac0 <hci_le_set_scan_response_data+0xa2>
    return BLE_STATUS_TIMEOUT;
 8007abc:	23ff      	movs	r3, #255	; 0xff
 8007abe:	e002      	b.n	8007ac6 <hci_le_set_scan_response_data+0xa8>
  return status;
 8007ac0:	f107 030f 	add.w	r3, r7, #15
 8007ac4:	781b      	ldrb	r3, [r3, #0]
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b082      	sub	sp, #8
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	4a08      	ldr	r2, [pc, #32]	; (8007b00 <hci_init+0x30>)
 8007ae0:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8007ae2:	4a08      	ldr	r2, [pc, #32]	; (8007b04 <hci_init+0x34>)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8007ae8:	4806      	ldr	r0, [pc, #24]	; (8007b04 <hci_init+0x34>)
 8007aea:	f000 f973 	bl	8007dd4 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4618      	mov	r0, r3
 8007af4:	f000 f8d4 	bl	8007ca0 <TlInit>

  return;
 8007af8:	bf00      	nop
}
 8007afa:	3708      	adds	r7, #8
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}
 8007b00:	200001f4 	.word	0x200001f4
 8007b04:	200001cc 	.word	0x200001cc

08007b08 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b084      	sub	sp, #16
 8007b0c:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8007b0e:	4822      	ldr	r0, [pc, #136]	; (8007b98 <hci_user_evt_proc+0x90>)
 8007b10:	f001 f98c 	bl	8008e2c <LST_is_empty>
 8007b14:	4603      	mov	r3, r0
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d12b      	bne.n	8007b72 <hci_user_evt_proc+0x6a>
 8007b1a:	4b20      	ldr	r3, [pc, #128]	; (8007b9c <hci_user_evt_proc+0x94>)
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d027      	beq.n	8007b72 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8007b22:	f107 030c 	add.w	r3, r7, #12
 8007b26:	4619      	mov	r1, r3
 8007b28:	481b      	ldr	r0, [pc, #108]	; (8007b98 <hci_user_evt_proc+0x90>)
 8007b2a:	f001 fa0e 	bl	8008f4a <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8007b2e:	4b1c      	ldr	r3, [pc, #112]	; (8007ba0 <hci_user_evt_proc+0x98>)
 8007b30:	69db      	ldr	r3, [r3, #28]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d00c      	beq.n	8007b50 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8007b3e:	4b18      	ldr	r3, [pc, #96]	; (8007ba0 <hci_user_evt_proc+0x98>)
 8007b40:	69db      	ldr	r3, [r3, #28]
 8007b42:	1d3a      	adds	r2, r7, #4
 8007b44:	4610      	mov	r0, r2
 8007b46:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8007b48:	793a      	ldrb	r2, [r7, #4]
 8007b4a:	4b14      	ldr	r3, [pc, #80]	; (8007b9c <hci_user_evt_proc+0x94>)
 8007b4c:	701a      	strb	r2, [r3, #0]
 8007b4e:	e002      	b.n	8007b56 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8007b50:	4b12      	ldr	r3, [pc, #72]	; (8007b9c <hci_user_evt_proc+0x94>)
 8007b52:	2201      	movs	r2, #1
 8007b54:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8007b56:	4b11      	ldr	r3, [pc, #68]	; (8007b9c <hci_user_evt_proc+0x94>)
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d004      	beq.n	8007b68 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	4618      	mov	r0, r3
 8007b62:	f000 fd53 	bl	800860c <TL_MM_EvtDone>
 8007b66:	e004      	b.n	8007b72 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	4619      	mov	r1, r3
 8007b6c:	480a      	ldr	r0, [pc, #40]	; (8007b98 <hci_user_evt_proc+0x90>)
 8007b6e:	f001 f97f 	bl	8008e70 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8007b72:	4809      	ldr	r0, [pc, #36]	; (8007b98 <hci_user_evt_proc+0x90>)
 8007b74:	f001 f95a 	bl	8008e2c <LST_is_empty>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d107      	bne.n	8007b8e <hci_user_evt_proc+0x86>
 8007b7e:	4b07      	ldr	r3, [pc, #28]	; (8007b9c <hci_user_evt_proc+0x94>)
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d003      	beq.n	8007b8e <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8007b86:	4804      	ldr	r0, [pc, #16]	; (8007b98 <hci_user_evt_proc+0x90>)
 8007b88:	f7fa fd7c 	bl	8002684 <hci_notify_asynch_evt>
  }


  return;
 8007b8c:	bf00      	nop
 8007b8e:	bf00      	nop
}
 8007b90:	3710      	adds	r7, #16
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
 8007b96:	bf00      	nop
 8007b98:	20000134 	.word	0x20000134
 8007b9c:	20000140 	.word	0x20000140
 8007ba0:	200001cc 	.word	0x200001cc

08007ba4 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b088      	sub	sp, #32
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	460b      	mov	r3, r1
 8007bae:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8007bb0:	2000      	movs	r0, #0
 8007bb2:	f000 f8cb 	bl	8007d4c <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	885b      	ldrh	r3, [r3, #2]
 8007bbe:	b21b      	sxth	r3, r3
 8007bc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007bc4:	b21a      	sxth	r2, r3
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	881b      	ldrh	r3, [r3, #0]
 8007bca:	029b      	lsls	r3, r3, #10
 8007bcc:	b21b      	sxth	r3, r3
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	b21b      	sxth	r3, r3
 8007bd2:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	68db      	ldr	r3, [r3, #12]
 8007bd8:	b2d9      	uxtb	r1, r3
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	689a      	ldr	r2, [r3, #8]
 8007bde:	8bbb      	ldrh	r3, [r7, #28]
 8007be0:	4618      	mov	r0, r3
 8007be2:	f000 f88d 	bl	8007d00 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8007be6:	e04e      	b.n	8007c86 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8007be8:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8007bec:	f7fa fd61 	bl	80026b2 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8007bf0:	e043      	b.n	8007c7a <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8007bf2:	f107 030c 	add.w	r3, r7, #12
 8007bf6:	4619      	mov	r1, r3
 8007bf8:	4828      	ldr	r0, [pc, #160]	; (8007c9c <hci_send_req+0xf8>)
 8007bfa:	f001 f9a6 	bl	8008f4a <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	7a5b      	ldrb	r3, [r3, #9]
 8007c02:	2b0f      	cmp	r3, #15
 8007c04:	d114      	bne.n	8007c30 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	330b      	adds	r3, #11
 8007c0a:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	885b      	ldrh	r3, [r3, #2]
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	8bba      	ldrh	r2, [r7, #28]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d104      	bne.n	8007c22 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	691b      	ldr	r3, [r3, #16]
 8007c1c:	693a      	ldr	r2, [r7, #16]
 8007c1e:	7812      	ldrb	r2, [r2, #0]
 8007c20:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	785b      	ldrb	r3, [r3, #1]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d027      	beq.n	8007c7a <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	77fb      	strb	r3, [r7, #31]
 8007c2e:	e024      	b.n	8007c7a <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	330b      	adds	r3, #11
 8007c34:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8007c36:	69bb      	ldr	r3, [r7, #24]
 8007c38:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	8bba      	ldrh	r2, [r7, #28]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d114      	bne.n	8007c6e <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	7a9b      	ldrb	r3, [r3, #10]
 8007c48:	3b03      	subs	r3, #3
 8007c4a:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	695a      	ldr	r2, [r3, #20]
 8007c50:	7dfb      	ldrb	r3, [r7, #23]
 8007c52:	429a      	cmp	r2, r3
 8007c54:	bfa8      	it	ge
 8007c56:	461a      	movge	r2, r3
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6918      	ldr	r0, [r3, #16]
 8007c60:	69bb      	ldr	r3, [r7, #24]
 8007c62:	1cd9      	adds	r1, r3, #3
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	695b      	ldr	r3, [r3, #20]
 8007c68:	461a      	mov	r2, r3
 8007c6a:	f001 fdb9 	bl	80097e0 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8007c6e:	69bb      	ldr	r3, [r7, #24]
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d001      	beq.n	8007c7a <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8007c76:	2301      	movs	r3, #1
 8007c78:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8007c7a:	4808      	ldr	r0, [pc, #32]	; (8007c9c <hci_send_req+0xf8>)
 8007c7c:	f001 f8d6 	bl	8008e2c <LST_is_empty>
 8007c80:	4603      	mov	r3, r0
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d0b5      	beq.n	8007bf2 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8007c86:	7ffb      	ldrb	r3, [r7, #31]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d0ad      	beq.n	8007be8 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8007c8c:	2001      	movs	r0, #1
 8007c8e:	f000 f85d 	bl	8007d4c <NotifyCmdStatus>

  return 0;
 8007c92:	2300      	movs	r3, #0
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	3720      	adds	r7, #32
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}
 8007c9c:	200001ec 	.word	0x200001ec

08007ca0 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b086      	sub	sp, #24
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8007ca8:	480f      	ldr	r0, [pc, #60]	; (8007ce8 <TlInit+0x48>)
 8007caa:	f001 f8af 	bl	8008e0c <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8007cae:	4a0f      	ldr	r2, [pc, #60]	; (8007cec <TlInit+0x4c>)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8007cb4:	480e      	ldr	r0, [pc, #56]	; (8007cf0 <TlInit+0x50>)
 8007cb6:	f001 f8a9 	bl	8008e0c <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8007cba:	4b0e      	ldr	r3, [pc, #56]	; (8007cf4 <TlInit+0x54>)
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8007cc0:	4b0d      	ldr	r3, [pc, #52]	; (8007cf8 <TlInit+0x58>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d00a      	beq.n	8007cde <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8007ccc:	4b0b      	ldr	r3, [pc, #44]	; (8007cfc <TlInit+0x5c>)
 8007cce:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8007cd0:	4b09      	ldr	r3, [pc, #36]	; (8007cf8 <TlInit+0x58>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f107 0208 	add.w	r2, r7, #8
 8007cd8:	4610      	mov	r0, r2
 8007cda:	4798      	blx	r3
  }

  return;
 8007cdc:	bf00      	nop
 8007cde:	bf00      	nop
}
 8007ce0:	3718      	adds	r7, #24
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	200001ec 	.word	0x200001ec
 8007cec:	2000013c 	.word	0x2000013c
 8007cf0:	20000134 	.word	0x20000134
 8007cf4:	20000140 	.word	0x20000140
 8007cf8:	200001cc 	.word	0x200001cc
 8007cfc:	08007d8d 	.word	0x08007d8d

08007d00 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b082      	sub	sp, #8
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	4603      	mov	r3, r0
 8007d08:	603a      	str	r2, [r7, #0]
 8007d0a:	80fb      	strh	r3, [r7, #6]
 8007d0c:	460b      	mov	r3, r1
 8007d0e:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8007d10:	4b0c      	ldr	r3, [pc, #48]	; (8007d44 <SendCmd+0x44>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	88fa      	ldrh	r2, [r7, #6]
 8007d16:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8007d1a:	4b0a      	ldr	r3, [pc, #40]	; (8007d44 <SendCmd+0x44>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	797a      	ldrb	r2, [r7, #5]
 8007d20:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8007d22:	4b08      	ldr	r3, [pc, #32]	; (8007d44 <SendCmd+0x44>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	330c      	adds	r3, #12
 8007d28:	797a      	ldrb	r2, [r7, #5]
 8007d2a:	6839      	ldr	r1, [r7, #0]
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f001 fd57 	bl	80097e0 <memcpy>

  hciContext.io.Send(0,0);
 8007d32:	4b05      	ldr	r3, [pc, #20]	; (8007d48 <SendCmd+0x48>)
 8007d34:	691b      	ldr	r3, [r3, #16]
 8007d36:	2100      	movs	r1, #0
 8007d38:	2000      	movs	r0, #0
 8007d3a:	4798      	blx	r3

  return;
 8007d3c:	bf00      	nop
}
 8007d3e:	3708      	adds	r7, #8
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}
 8007d44:	2000013c 	.word	0x2000013c
 8007d48:	200001cc 	.word	0x200001cc

08007d4c <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b082      	sub	sp, #8
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	4603      	mov	r3, r0
 8007d54:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8007d56:	79fb      	ldrb	r3, [r7, #7]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d108      	bne.n	8007d6e <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8007d5c:	4b0a      	ldr	r3, [pc, #40]	; (8007d88 <NotifyCmdStatus+0x3c>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d00d      	beq.n	8007d80 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8007d64:	4b08      	ldr	r3, [pc, #32]	; (8007d88 <NotifyCmdStatus+0x3c>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	2000      	movs	r0, #0
 8007d6a:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8007d6c:	e008      	b.n	8007d80 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8007d6e:	4b06      	ldr	r3, [pc, #24]	; (8007d88 <NotifyCmdStatus+0x3c>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d004      	beq.n	8007d80 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8007d76:	4b04      	ldr	r3, [pc, #16]	; (8007d88 <NotifyCmdStatus+0x3c>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	2001      	movs	r0, #1
 8007d7c:	4798      	blx	r3
  return;
 8007d7e:	bf00      	nop
 8007d80:	bf00      	nop
}
 8007d82:	3708      	adds	r7, #8
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}
 8007d88:	200001f4 	.word	0x200001f4

08007d8c <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b082      	sub	sp, #8
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	7a5b      	ldrb	r3, [r3, #9]
 8007d98:	2b0f      	cmp	r3, #15
 8007d9a:	d003      	beq.n	8007da4 <TlEvtReceived+0x18>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	7a5b      	ldrb	r3, [r3, #9]
 8007da0:	2b0e      	cmp	r3, #14
 8007da2:	d107      	bne.n	8007db4 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8007da4:	6879      	ldr	r1, [r7, #4]
 8007da6:	4809      	ldr	r0, [pc, #36]	; (8007dcc <TlEvtReceived+0x40>)
 8007da8:	f001 f888 	bl	8008ebc <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8007dac:	2000      	movs	r0, #0
 8007dae:	f7fa fc75 	bl	800269c <hci_cmd_resp_release>
 8007db2:	e006      	b.n	8007dc2 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8007db4:	6879      	ldr	r1, [r7, #4]
 8007db6:	4806      	ldr	r0, [pc, #24]	; (8007dd0 <TlEvtReceived+0x44>)
 8007db8:	f001 f880 	bl	8008ebc <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8007dbc:	4804      	ldr	r0, [pc, #16]	; (8007dd0 <TlEvtReceived+0x44>)
 8007dbe:	f7fa fc61 	bl	8002684 <hci_notify_asynch_evt>
  }

  return;
 8007dc2:	bf00      	nop
}
 8007dc4:	3708      	adds	r7, #8
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}
 8007dca:	bf00      	nop
 8007dcc:	200001ec 	.word	0x200001ec
 8007dd0:	20000134 	.word	0x20000134

08007dd4 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b083      	sub	sp, #12
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	4a05      	ldr	r2, [pc, #20]	; (8007df4 <hci_register_io_bus+0x20>)
 8007de0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	4a04      	ldr	r2, [pc, #16]	; (8007df8 <hci_register_io_bus+0x24>)
 8007de6:	611a      	str	r2, [r3, #16]

  return;
 8007de8:	bf00      	nop
}
 8007dea:	370c      	adds	r7, #12
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr
 8007df4:	08008385 	.word	0x08008385
 8007df8:	080083ed 	.word	0x080083ed

08007dfc <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b084      	sub	sp, #16
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	60f8      	str	r0, [r7, #12]
 8007e04:	60b9      	str	r1, [r7, #8]
 8007e06:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8007e08:	687a      	ldr	r2, [r7, #4]
 8007e0a:	68b9      	ldr	r1, [r7, #8]
 8007e0c:	68f8      	ldr	r0, [r7, #12]
 8007e0e:	f001 fce7 	bl	80097e0 <memcpy>
 8007e12:	4603      	mov	r3, r0
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3710      	adds	r7, #16
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b084      	sub	sp, #16
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	60f8      	str	r0, [r7, #12]
 8007e24:	60b9      	str	r1, [r7, #8]
 8007e26:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	68b9      	ldr	r1, [r7, #8]
 8007e2c:	68f8      	ldr	r0, [r7, #12]
 8007e2e:	f001 fce5 	bl	80097fc <memset>
 8007e32:	4603      	mov	r3, r0
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3710      	adds	r7, #16
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b088      	sub	sp, #32
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8007e44:	f107 030c 	add.w	r3, r7, #12
 8007e48:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8007e50:	69fb      	ldr	r3, [r7, #28]
 8007e52:	2124      	movs	r1, #36	; 0x24
 8007e54:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8007e58:	f000 f888 	bl	8007f6c <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8007e5c:	69fb      	ldr	r3, [r7, #28]
 8007e5e:	330b      	adds	r3, #11
 8007e60:	78db      	ldrb	r3, [r3, #3]
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3720      	adds	r7, #32
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}

08007e6a <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8007e6a:	b580      	push	{r7, lr}
 8007e6c:	b088      	sub	sp, #32
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8007e72:	f107 030c 	add.w	r3, r7, #12
 8007e76:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8007e7e:	69fb      	ldr	r3, [r7, #28]
 8007e80:	210f      	movs	r1, #15
 8007e82:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8007e86:	f000 f871 	bl	8007f6c <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8007e8a:	69fb      	ldr	r3, [r7, #28]
 8007e8c:	330b      	adds	r3, #11
 8007e8e:	78db      	ldrb	r3, [r3, #3]
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3720      	adds	r7, #32
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}

08007e98 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b082      	sub	sp, #8
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	4a08      	ldr	r2, [pc, #32]	; (8007ec8 <shci_init+0x30>)
 8007ea8:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8007eaa:	4a08      	ldr	r2, [pc, #32]	; (8007ecc <shci_init+0x34>)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8007eb0:	4806      	ldr	r0, [pc, #24]	; (8007ecc <shci_init+0x34>)
 8007eb2:	f000 f911 	bl	80080d8 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f000 f894 	bl	8007fe8 <TlInit>

  return;
 8007ec0:	bf00      	nop
}
 8007ec2:	3708      	adds	r7, #8
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}
 8007ec8:	20000218 	.word	0x20000218
 8007ecc:	200001f8 	.word	0x200001f8

08007ed0 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b084      	sub	sp, #16
 8007ed4:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8007ed6:	4822      	ldr	r0, [pc, #136]	; (8007f60 <shci_user_evt_proc+0x90>)
 8007ed8:	f000 ffa8 	bl	8008e2c <LST_is_empty>
 8007edc:	4603      	mov	r3, r0
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d12b      	bne.n	8007f3a <shci_user_evt_proc+0x6a>
 8007ee2:	4b20      	ldr	r3, [pc, #128]	; (8007f64 <shci_user_evt_proc+0x94>)
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d027      	beq.n	8007f3a <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8007eea:	f107 030c 	add.w	r3, r7, #12
 8007eee:	4619      	mov	r1, r3
 8007ef0:	481b      	ldr	r0, [pc, #108]	; (8007f60 <shci_user_evt_proc+0x90>)
 8007ef2:	f001 f82a 	bl	8008f4a <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8007ef6:	4b1c      	ldr	r3, [pc, #112]	; (8007f68 <shci_user_evt_proc+0x98>)
 8007ef8:	69db      	ldr	r3, [r3, #28]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d00c      	beq.n	8007f18 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8007f02:	2301      	movs	r3, #1
 8007f04:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8007f06:	4b18      	ldr	r3, [pc, #96]	; (8007f68 <shci_user_evt_proc+0x98>)
 8007f08:	69db      	ldr	r3, [r3, #28]
 8007f0a:	1d3a      	adds	r2, r7, #4
 8007f0c:	4610      	mov	r0, r2
 8007f0e:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8007f10:	793a      	ldrb	r2, [r7, #4]
 8007f12:	4b14      	ldr	r3, [pc, #80]	; (8007f64 <shci_user_evt_proc+0x94>)
 8007f14:	701a      	strb	r2, [r3, #0]
 8007f16:	e002      	b.n	8007f1e <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8007f18:	4b12      	ldr	r3, [pc, #72]	; (8007f64 <shci_user_evt_proc+0x94>)
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8007f1e:	4b11      	ldr	r3, [pc, #68]	; (8007f64 <shci_user_evt_proc+0x94>)
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d004      	beq.n	8007f30 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f000 fb6f 	bl	800860c <TL_MM_EvtDone>
 8007f2e:	e004      	b.n	8007f3a <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	4619      	mov	r1, r3
 8007f34:	480a      	ldr	r0, [pc, #40]	; (8007f60 <shci_user_evt_proc+0x90>)
 8007f36:	f000 ff9b 	bl	8008e70 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8007f3a:	4809      	ldr	r0, [pc, #36]	; (8007f60 <shci_user_evt_proc+0x90>)
 8007f3c:	f000 ff76 	bl	8008e2c <LST_is_empty>
 8007f40:	4603      	mov	r3, r0
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d107      	bne.n	8007f56 <shci_user_evt_proc+0x86>
 8007f46:	4b07      	ldr	r3, [pc, #28]	; (8007f64 <shci_user_evt_proc+0x94>)
 8007f48:	781b      	ldrb	r3, [r3, #0]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d003      	beq.n	8007f56 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8007f4e:	4804      	ldr	r0, [pc, #16]	; (8007f60 <shci_user_evt_proc+0x90>)
 8007f50:	f7f8 fcd7 	bl	8000902 <shci_notify_asynch_evt>
  }


  return;
 8007f54:	bf00      	nop
 8007f56:	bf00      	nop
}
 8007f58:	3710      	adds	r7, #16
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}
 8007f5e:	bf00      	nop
 8007f60:	20000168 	.word	0x20000168
 8007f64:	20000178 	.word	0x20000178
 8007f68:	200001f8 	.word	0x200001f8

08007f6c <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	60ba      	str	r2, [r7, #8]
 8007f74:	607b      	str	r3, [r7, #4]
 8007f76:	4603      	mov	r3, r0
 8007f78:	81fb      	strh	r3, [r7, #14]
 8007f7a:	460b      	mov	r3, r1
 8007f7c:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8007f7e:	2000      	movs	r0, #0
 8007f80:	f000 f864 	bl	800804c <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8007f84:	4b16      	ldr	r3, [pc, #88]	; (8007fe0 <shci_send+0x74>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	89fa      	ldrh	r2, [r7, #14]
 8007f8a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8007f8e:	4b14      	ldr	r3, [pc, #80]	; (8007fe0 <shci_send+0x74>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	7b7a      	ldrb	r2, [r7, #13]
 8007f94:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8007f96:	4b12      	ldr	r3, [pc, #72]	; (8007fe0 <shci_send+0x74>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	330c      	adds	r3, #12
 8007f9c:	7b7a      	ldrb	r2, [r7, #13]
 8007f9e:	68b9      	ldr	r1, [r7, #8]
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f001 fc1d 	bl	80097e0 <memcpy>

  shciContext.io.Send(0,0);
 8007fa6:	4b0f      	ldr	r3, [pc, #60]	; (8007fe4 <shci_send+0x78>)
 8007fa8:	691b      	ldr	r3, [r3, #16]
 8007faa:	2100      	movs	r1, #0
 8007fac:	2000      	movs	r0, #0
 8007fae:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8007fb0:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8007fb4:	f7f8 fcbc 	bl	8000930 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f103 0008 	add.w	r0, r3, #8
 8007fbe:	4b08      	ldr	r3, [pc, #32]	; (8007fe0 <shci_send+0x74>)
 8007fc0:	6819      	ldr	r1, [r3, #0]
 8007fc2:	4b07      	ldr	r3, [pc, #28]	; (8007fe0 <shci_send+0x74>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	789b      	ldrb	r3, [r3, #2]
 8007fc8:	3303      	adds	r3, #3
 8007fca:	461a      	mov	r2, r3
 8007fcc:	f001 fc08 	bl	80097e0 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8007fd0:	2001      	movs	r0, #1
 8007fd2:	f000 f83b 	bl	800804c <Cmd_SetStatus>

  return;
 8007fd6:	bf00      	nop
}
 8007fd8:	3710      	adds	r7, #16
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	bf00      	nop
 8007fe0:	20000174 	.word	0x20000174
 8007fe4:	200001f8 	.word	0x200001f8

08007fe8 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b086      	sub	sp, #24
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8007ff0:	4a10      	ldr	r2, [pc, #64]	; (8008034 <TlInit+0x4c>)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8007ff6:	4810      	ldr	r0, [pc, #64]	; (8008038 <TlInit+0x50>)
 8007ff8:	f000 ff08 	bl	8008e0c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8007ffc:	2001      	movs	r0, #1
 8007ffe:	f000 f825 	bl	800804c <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8008002:	4b0e      	ldr	r3, [pc, #56]	; (800803c <TlInit+0x54>)
 8008004:	2201      	movs	r2, #1
 8008006:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8008008:	4b0d      	ldr	r3, [pc, #52]	; (8008040 <TlInit+0x58>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d00c      	beq.n	800802a <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8008014:	4b0b      	ldr	r3, [pc, #44]	; (8008044 <TlInit+0x5c>)
 8008016:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8008018:	4b0b      	ldr	r3, [pc, #44]	; (8008048 <TlInit+0x60>)
 800801a:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800801c:	4b08      	ldr	r3, [pc, #32]	; (8008040 <TlInit+0x58>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f107 020c 	add.w	r2, r7, #12
 8008024:	4610      	mov	r0, r2
 8008026:	4798      	blx	r3
  }

  return;
 8008028:	bf00      	nop
 800802a:	bf00      	nop
}
 800802c:	3718      	adds	r7, #24
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
 8008032:	bf00      	nop
 8008034:	20000174 	.word	0x20000174
 8008038:	20000168 	.word	0x20000168
 800803c:	20000178 	.word	0x20000178
 8008040:	200001f8 	.word	0x200001f8
 8008044:	0800809d 	.word	0x0800809d
 8008048:	080080b5 	.word	0x080080b5

0800804c <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b082      	sub	sp, #8
 8008050:	af00      	add	r7, sp, #0
 8008052:	4603      	mov	r3, r0
 8008054:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8008056:	79fb      	ldrb	r3, [r7, #7]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d10b      	bne.n	8008074 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800805c:	4b0d      	ldr	r3, [pc, #52]	; (8008094 <Cmd_SetStatus+0x48>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d003      	beq.n	800806c <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8008064:	4b0b      	ldr	r3, [pc, #44]	; (8008094 <Cmd_SetStatus+0x48>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	2000      	movs	r0, #0
 800806a:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800806c:	4b0a      	ldr	r3, [pc, #40]	; (8008098 <Cmd_SetStatus+0x4c>)
 800806e:	2200      	movs	r2, #0
 8008070:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8008072:	e00b      	b.n	800808c <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8008074:	4b08      	ldr	r3, [pc, #32]	; (8008098 <Cmd_SetStatus+0x4c>)
 8008076:	2201      	movs	r2, #1
 8008078:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800807a:	4b06      	ldr	r3, [pc, #24]	; (8008094 <Cmd_SetStatus+0x48>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d004      	beq.n	800808c <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8008082:	4b04      	ldr	r3, [pc, #16]	; (8008094 <Cmd_SetStatus+0x48>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	2001      	movs	r0, #1
 8008088:	4798      	blx	r3
  return;
 800808a:	bf00      	nop
 800808c:	bf00      	nop
}
 800808e:	3708      	adds	r7, #8
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}
 8008094:	20000218 	.word	0x20000218
 8008098:	20000170 	.word	0x20000170

0800809c <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b082      	sub	sp, #8
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 80080a4:	2000      	movs	r0, #0
 80080a6:	f7f8 fc38 	bl	800091a <shci_cmd_resp_release>

  return;
 80080aa:	bf00      	nop
}
 80080ac:	3708      	adds	r7, #8
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
	...

080080b4 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b082      	sub	sp, #8
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 80080bc:	6879      	ldr	r1, [r7, #4]
 80080be:	4805      	ldr	r0, [pc, #20]	; (80080d4 <TlUserEvtReceived+0x20>)
 80080c0:	f000 fefc 	bl	8008ebc <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80080c4:	4803      	ldr	r0, [pc, #12]	; (80080d4 <TlUserEvtReceived+0x20>)
 80080c6:	f7f8 fc1c 	bl	8000902 <shci_notify_asynch_evt>

  return;
 80080ca:	bf00      	nop
}
 80080cc:	3708      	adds	r7, #8
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	20000168 	.word	0x20000168

080080d8 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 80080d8:	b480      	push	{r7}
 80080da:	b083      	sub	sp, #12
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	4a05      	ldr	r2, [pc, #20]	; (80080f8 <shci_register_io_bus+0x20>)
 80080e4:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	4a04      	ldr	r2, [pc, #16]	; (80080fc <shci_register_io_bus+0x24>)
 80080ea:	611a      	str	r2, [r3, #16]

  return;
 80080ec:	bf00      	nop
}
 80080ee:	370c      	adds	r7, #12
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr
 80080f8:	08008499 	.word	0x08008499
 80080fc:	080084ed 	.word	0x080084ed

08008100 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BAS_Init( void )
{
 8008100:	b480      	push	{r7}
 8008102:	af00      	add	r7, sp, #0
  return;
 8008104:	bf00      	nop
}
 8008106:	46bd      	mov	sp, r7
 8008108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810c:	4770      	bx	lr

0800810e <BLS_Init>:

__weak void BLS_Init( void )
{
 800810e:	b480      	push	{r7}
 8008110:	af00      	add	r7, sp, #0
  return;
 8008112:	bf00      	nop
}
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr

0800811c <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 800811c:	b480      	push	{r7}
 800811e:	af00      	add	r7, sp, #0
  return;
 8008120:	bf00      	nop
}
 8008122:	46bd      	mov	sp, r7
 8008124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008128:	4770      	bx	lr

0800812a <DIS_Init>:
__weak void DIS_Init( void )
{
 800812a:	b480      	push	{r7}
 800812c:	af00      	add	r7, sp, #0
  return;
 800812e:	bf00      	nop
}
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr

08008138 <EDS_STM_Init>:
__weak void EDS_STM_Init( void )
{
 8008138:	b480      	push	{r7}
 800813a:	af00      	add	r7, sp, #0
  return;
 800813c:	bf00      	nop
}
 800813e:	46bd      	mov	sp, r7
 8008140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008144:	4770      	bx	lr

08008146 <HIDS_Init>:
__weak void HIDS_Init( void )
{
 8008146:	b480      	push	{r7}
 8008148:	af00      	add	r7, sp, #0
  return;
 800814a:	bf00      	nop
}
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr

08008154 <HRS_Init>:
__weak void HRS_Init( void )
{
 8008154:	b480      	push	{r7}
 8008156:	af00      	add	r7, sp, #0
  return;
 8008158:	bf00      	nop
}
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr

08008162 <HTS_Init>:
__weak void HTS_Init( void )
{
 8008162:	b480      	push	{r7}
 8008164:	af00      	add	r7, sp, #0
  return;
 8008166:	bf00      	nop
}
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr

08008170 <IAS_Init>:
__weak void IAS_Init( void )
{
 8008170:	b480      	push	{r7}
 8008172:	af00      	add	r7, sp, #0
  return;
 8008174:	bf00      	nop
}
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr

0800817e <LLS_Init>:
__weak void LLS_Init( void )
{
 800817e:	b480      	push	{r7}
 8008180:	af00      	add	r7, sp, #0
  return;
 8008182:	bf00      	nop
}
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr

0800818c <TPS_Init>:
__weak void TPS_Init( void )
{
 800818c:	b480      	push	{r7}
 800818e:	af00      	add	r7, sp, #0
  return;
 8008190:	bf00      	nop
}
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr

0800819a <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 800819a:	b480      	push	{r7}
 800819c:	af00      	add	r7, sp, #0
  return;
 800819e:	bf00      	nop
}
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr

080081a8 <P2PS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
 80081a8:	b480      	push	{r7}
 80081aa:	af00      	add	r7, sp, #0
  return;
 80081ac:	bf00      	nop
}
 80081ae:	46bd      	mov	sp, r7
 80081b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b4:	4770      	bx	lr

080081b6 <OTAS_STM_Init>:
__weak void OTAS_STM_Init( void )
{
 80081b6:	b480      	push	{r7}
 80081b8:	af00      	add	r7, sp, #0
  return;
 80081ba:	bf00      	nop
}
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr

080081c4 <MESH_Init>:
__weak void MESH_Init( void )
{
 80081c4:	b480      	push	{r7}
 80081c6:	af00      	add	r7, sp, #0
  return;
 80081c8:	bf00      	nop
}
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr

080081d2 <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 80081d2:	b480      	push	{r7}
 80081d4:	af00      	add	r7, sp, #0
  return;
 80081d6:	bf00      	nop
}
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr

080081e0 <SVCCTL_InitCustomSvc>:
__weak void SVCCTL_InitCustomSvc( void )
{
 80081e0:	b480      	push	{r7}
 80081e2:	af00      	add	r7, sp, #0
  return;
 80081e4:	bf00      	nop
}
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr
	...

080081f0 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 80081f4:	4b04      	ldr	r3, [pc, #16]	; (8008208 <SVCCTL_Init+0x18>)
 80081f6:	2200      	movs	r2, #0
 80081f8:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 80081fa:	4b04      	ldr	r3, [pc, #16]	; (800820c <SVCCTL_Init+0x1c>)
 80081fc:	2200      	movs	r2, #0
 80081fe:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8008200:	f000 f806 	bl	8008210 <SVCCTL_SvcInit>

  return;
 8008204:	bf00      	nop
}
 8008206:	bd80      	pop	{r7, pc}
 8008208:	20000144 	.word	0x20000144
 800820c:	20000164 	.word	0x20000164

08008210 <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	af00      	add	r7, sp, #0
  BAS_Init();
 8008214:	f7ff ff74 	bl	8008100 <BAS_Init>

  BLS_Init();
 8008218:	f7ff ff79 	bl	800810e <BLS_Init>

  CRS_STM_Init();
 800821c:	f7ff ff7e 	bl	800811c <CRS_STM_Init>

  DIS_Init();
 8008220:	f7ff ff83 	bl	800812a <DIS_Init>

  EDS_STM_Init();
 8008224:	f7ff ff88 	bl	8008138 <EDS_STM_Init>

  HIDS_Init();
 8008228:	f7ff ff8d 	bl	8008146 <HIDS_Init>

  HRS_Init();
 800822c:	f7ff ff92 	bl	8008154 <HRS_Init>

  HTS_Init();
 8008230:	f7ff ff97 	bl	8008162 <HTS_Init>

  IAS_Init();
 8008234:	f7ff ff9c 	bl	8008170 <IAS_Init>

  LLS_Init();
 8008238:	f7ff ffa1 	bl	800817e <LLS_Init>

  TPS_Init();
 800823c:	f7ff ffa6 	bl	800818c <TPS_Init>

  MOTENV_STM_Init();
 8008240:	f7ff ffab 	bl	800819a <MOTENV_STM_Init>

  P2PS_STM_Init();
 8008244:	f7ff ffb0 	bl	80081a8 <P2PS_STM_Init>

  OTAS_STM_Init();
 8008248:	f7ff ffb5 	bl	80081b6 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800824c:	f7ff ffc1 	bl	80081d2 <BVOPUS_STM_Init>

  MESH_Init();
 8008250:	f7ff ffb8 	bl	80081c4 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8008254:	f7ff ffc4 	bl	80081e0 <SVCCTL_InitCustomSvc>
  
  return;
 8008258:	bf00      	nop
}
 800825a:	bd80      	pop	{r7, pc}

0800825c <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b086      	sub	sp, #24
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	3301      	adds	r3, #1
 8008268:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800826a:	2300      	movs	r3, #0
 800826c:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	781b      	ldrb	r3, [r3, #0]
 8008272:	2bff      	cmp	r3, #255	; 0xff
 8008274:	d125      	bne.n	80082c2 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	3302      	adds	r3, #2
 800827a:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	881b      	ldrh	r3, [r3, #0]
 8008280:	b29b      	uxth	r3, r3
 8008282:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008286:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800828a:	d118      	bne.n	80082be <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800828c:	2300      	movs	r3, #0
 800828e:	757b      	strb	r3, [r7, #21]
 8008290:	e00d      	b.n	80082ae <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8008292:	7d7b      	ldrb	r3, [r7, #21]
 8008294:	4a1a      	ldr	r2, [pc, #104]	; (8008300 <SVCCTL_UserEvtRx+0xa4>)
 8008296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	4798      	blx	r3
 800829e:	4603      	mov	r3, r0
 80082a0:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 80082a2:	7dfb      	ldrb	r3, [r7, #23]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d108      	bne.n	80082ba <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80082a8:	7d7b      	ldrb	r3, [r7, #21]
 80082aa:	3301      	adds	r3, #1
 80082ac:	757b      	strb	r3, [r7, #21]
 80082ae:	4b14      	ldr	r3, [pc, #80]	; (8008300 <SVCCTL_UserEvtRx+0xa4>)
 80082b0:	7f1b      	ldrb	r3, [r3, #28]
 80082b2:	7d7a      	ldrb	r2, [r7, #21]
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d3ec      	bcc.n	8008292 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 80082b8:	e002      	b.n	80082c0 <SVCCTL_UserEvtRx+0x64>
              break;
 80082ba:	bf00      	nop
          break;
 80082bc:	e000      	b.n	80082c0 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 80082be:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 80082c0:	e000      	b.n	80082c4 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 80082c2:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 80082c4:	7dfb      	ldrb	r3, [r7, #23]
 80082c6:	2b02      	cmp	r3, #2
 80082c8:	d00f      	beq.n	80082ea <SVCCTL_UserEvtRx+0x8e>
 80082ca:	2b02      	cmp	r3, #2
 80082cc:	dc10      	bgt.n	80082f0 <SVCCTL_UserEvtRx+0x94>
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d002      	beq.n	80082d8 <SVCCTL_UserEvtRx+0x7c>
 80082d2:	2b01      	cmp	r3, #1
 80082d4:	d006      	beq.n	80082e4 <SVCCTL_UserEvtRx+0x88>
 80082d6:	e00b      	b.n	80082f0 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f7fa f89d 	bl	8002418 <SVCCTL_App_Notification>
 80082de:	4603      	mov	r3, r0
 80082e0:	75bb      	strb	r3, [r7, #22]
      break;
 80082e2:	e008      	b.n	80082f6 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 80082e4:	2301      	movs	r3, #1
 80082e6:	75bb      	strb	r3, [r7, #22]
      break;
 80082e8:	e005      	b.n	80082f6 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 80082ea:	2300      	movs	r3, #0
 80082ec:	75bb      	strb	r3, [r7, #22]
      break;
 80082ee:	e002      	b.n	80082f6 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 80082f0:	2301      	movs	r3, #1
 80082f2:	75bb      	strb	r3, [r7, #22]
      break;
 80082f4:	bf00      	nop
  }

  return (return_status);
 80082f6:	7dbb      	ldrb	r3, [r7, #22]
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3718      	adds	r7, #24
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}
 8008300:	20000144 	.word	0x20000144

08008304 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 8008304:	b580      	push	{r7, lr}
 8008306:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8008308:	f7fa fca8 	bl	8002c5c <HW_IPCC_Enable>

  return;
 800830c:	bf00      	nop
}
 800830e:	bd80      	pop	{r7, pc}

08008310 <TL_Init>:


void TL_Init( void )
{
 8008310:	b580      	push	{r7, lr}
 8008312:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8008314:	4b10      	ldr	r3, [pc, #64]	; (8008358 <TL_Init+0x48>)
 8008316:	4a11      	ldr	r2, [pc, #68]	; (800835c <TL_Init+0x4c>)
 8008318:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800831a:	4b0f      	ldr	r3, [pc, #60]	; (8008358 <TL_Init+0x48>)
 800831c:	4a10      	ldr	r2, [pc, #64]	; (8008360 <TL_Init+0x50>)
 800831e:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8008320:	4b0d      	ldr	r3, [pc, #52]	; (8008358 <TL_Init+0x48>)
 8008322:	4a10      	ldr	r2, [pc, #64]	; (8008364 <TL_Init+0x54>)
 8008324:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8008326:	4b0c      	ldr	r3, [pc, #48]	; (8008358 <TL_Init+0x48>)
 8008328:	4a0f      	ldr	r2, [pc, #60]	; (8008368 <TL_Init+0x58>)
 800832a:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800832c:	4b0a      	ldr	r3, [pc, #40]	; (8008358 <TL_Init+0x48>)
 800832e:	4a0f      	ldr	r2, [pc, #60]	; (800836c <TL_Init+0x5c>)
 8008330:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8008332:	4b09      	ldr	r3, [pc, #36]	; (8008358 <TL_Init+0x48>)
 8008334:	4a0e      	ldr	r2, [pc, #56]	; (8008370 <TL_Init+0x60>)
 8008336:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8008338:	4b07      	ldr	r3, [pc, #28]	; (8008358 <TL_Init+0x48>)
 800833a:	4a0e      	ldr	r2, [pc, #56]	; (8008374 <TL_Init+0x64>)
 800833c:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800833e:	4b06      	ldr	r3, [pc, #24]	; (8008358 <TL_Init+0x48>)
 8008340:	4a0d      	ldr	r2, [pc, #52]	; (8008378 <TL_Init+0x68>)
 8008342:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8008344:	4b04      	ldr	r3, [pc, #16]	; (8008358 <TL_Init+0x48>)
 8008346:	4a0d      	ldr	r2, [pc, #52]	; (800837c <TL_Init+0x6c>)
 8008348:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800834a:	4b03      	ldr	r3, [pc, #12]	; (8008358 <TL_Init+0x48>)
 800834c:	4a0c      	ldr	r2, [pc, #48]	; (8008380 <TL_Init+0x70>)
 800834e:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8008350:	f7fa fc98 	bl	8002c84 <HW_IPCC_Init>

  return;
 8008354:	bf00      	nop
}
 8008356:	bd80      	pop	{r7, pc}
 8008358:	20030000 	.word	0x20030000
 800835c:	20030134 	.word	0x20030134
 8008360:	20030154 	.word	0x20030154
 8008364:	20030164 	.word	0x20030164
 8008368:	20030170 	.word	0x20030170
 800836c:	20030178 	.word	0x20030178
 8008370:	20030180 	.word	0x20030180
 8008374:	20030188 	.word	0x20030188
 8008378:	200301a4 	.word	0x200301a4
 800837c:	200301a8 	.word	0x200301a8
 8008380:	200301b4 	.word	0x200301b4

08008384 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b084      	sub	sp, #16
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8008390:	4811      	ldr	r0, [pc, #68]	; (80083d8 <TL_BLE_Init+0x54>)
 8008392:	f000 fd3b 	bl	8008e0c <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8008396:	4b11      	ldr	r3, [pc, #68]	; (80083dc <TL_BLE_Init+0x58>)
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	689a      	ldr	r2, [r3, #8]
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	68da      	ldr	r2, [r3, #12]
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	4a0c      	ldr	r2, [pc, #48]	; (80083e0 <TL_BLE_Init+0x5c>)
 80083b0:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	4a08      	ldr	r2, [pc, #32]	; (80083d8 <TL_BLE_Init+0x54>)
 80083b6:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 80083b8:	f7fa fc7a 	bl	8002cb0 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a08      	ldr	r2, [pc, #32]	; (80083e4 <TL_BLE_Init+0x60>)
 80083c2:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	4a07      	ldr	r2, [pc, #28]	; (80083e8 <TL_BLE_Init+0x64>)
 80083ca:	6013      	str	r3, [r2, #0]

  return 0;
 80083cc:	2300      	movs	r3, #0
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3710      	adds	r7, #16
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
 80083d6:	bf00      	nop
 80083d8:	200301d0 	.word	0x200301d0
 80083dc:	20030000 	.word	0x20030000
 80083e0:	20030a48 	.word	0x20030a48
 80083e4:	20000224 	.word	0x20000224
 80083e8:	20000228 	.word	0x20000228

080083ec <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b082      	sub	sp, #8
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	460b      	mov	r3, r1
 80083f6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 80083f8:	4b09      	ldr	r3, [pc, #36]	; (8008420 <TL_BLE_SendCmd+0x34>)
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	2201      	movs	r2, #1
 8008400:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8008402:	4b07      	ldr	r3, [pc, #28]	; (8008420 <TL_BLE_SendCmd+0x34>)
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4619      	mov	r1, r3
 800840a:	2001      	movs	r0, #1
 800840c:	f000 f96c 	bl	80086e8 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8008410:	f7fa fc58 	bl	8002cc4 <HW_IPCC_BLE_SendCmd>

  return 0;
 8008414:	2300      	movs	r3, #0
}
 8008416:	4618      	mov	r0, r3
 8008418:	3708      	adds	r7, #8
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop
 8008420:	20030000 	.word	0x20030000

08008424 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b082      	sub	sp, #8
 8008428:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800842a:	e01c      	b.n	8008466 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800842c:	1d3b      	adds	r3, r7, #4
 800842e:	4619      	mov	r1, r3
 8008430:	4812      	ldr	r0, [pc, #72]	; (800847c <HW_IPCC_BLE_RxEvtNot+0x58>)
 8008432:	f000 fd8a 	bl	8008f4a <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	7a5b      	ldrb	r3, [r3, #9]
 800843a:	2b0f      	cmp	r3, #15
 800843c:	d003      	beq.n	8008446 <HW_IPCC_BLE_RxEvtNot+0x22>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	7a5b      	ldrb	r3, [r3, #9]
 8008442:	2b0e      	cmp	r3, #14
 8008444:	d105      	bne.n	8008452 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	4619      	mov	r1, r3
 800844a:	2002      	movs	r0, #2
 800844c:	f000 f94c 	bl	80086e8 <OutputDbgTrace>
 8008450:	e004      	b.n	800845c <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	4619      	mov	r1, r3
 8008456:	2003      	movs	r0, #3
 8008458:	f000 f946 	bl	80086e8 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800845c:	4b08      	ldr	r3, [pc, #32]	; (8008480 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	687a      	ldr	r2, [r7, #4]
 8008462:	4610      	mov	r0, r2
 8008464:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8008466:	4805      	ldr	r0, [pc, #20]	; (800847c <HW_IPCC_BLE_RxEvtNot+0x58>)
 8008468:	f000 fce0 	bl	8008e2c <LST_is_empty>
 800846c:	4603      	mov	r3, r0
 800846e:	2b00      	cmp	r3, #0
 8008470:	d0dc      	beq.n	800842c <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8008472:	bf00      	nop
}
 8008474:	3708      	adds	r7, #8
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}
 800847a:	bf00      	nop
 800847c:	200301d0 	.word	0x200301d0
 8008480:	20000224 	.word	0x20000224

08008484 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8008488:	4b02      	ldr	r3, [pc, #8]	; (8008494 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4798      	blx	r3

  return;
 800848e:	bf00      	nop
}
 8008490:	bd80      	pop	{r7, pc}
 8008492:	bf00      	nop
 8008494:	20000228 	.word	0x20000228

08008498 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 80084a4:	480d      	ldr	r0, [pc, #52]	; (80084dc <TL_SYS_Init+0x44>)
 80084a6:	f000 fcb1 	bl	8008e0c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 80084aa:	4b0d      	ldr	r3, [pc, #52]	; (80084e0 <TL_SYS_Init+0x48>)
 80084ac:	68db      	ldr	r3, [r3, #12]
 80084ae:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	689a      	ldr	r2, [r3, #8]
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	4a08      	ldr	r2, [pc, #32]	; (80084dc <TL_SYS_Init+0x44>)
 80084bc:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 80084be:	f7fa fc23 	bl	8002d08 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a07      	ldr	r2, [pc, #28]	; (80084e4 <TL_SYS_Init+0x4c>)
 80084c8:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	4a06      	ldr	r2, [pc, #24]	; (80084e8 <TL_SYS_Init+0x50>)
 80084d0:	6013      	str	r3, [r2, #0]

  return 0;
 80084d2:	2300      	movs	r3, #0
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3710      	adds	r7, #16
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}
 80084dc:	200301d8 	.word	0x200301d8
 80084e0:	20030000 	.word	0x20030000
 80084e4:	2000022c 	.word	0x2000022c
 80084e8:	20000230 	.word	0x20000230

080084ec <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b082      	sub	sp, #8
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	460b      	mov	r3, r1
 80084f6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 80084f8:	4b09      	ldr	r3, [pc, #36]	; (8008520 <TL_SYS_SendCmd+0x34>)
 80084fa:	68db      	ldr	r3, [r3, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	2210      	movs	r2, #16
 8008500:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8008502:	4b07      	ldr	r3, [pc, #28]	; (8008520 <TL_SYS_SendCmd+0x34>)
 8008504:	68db      	ldr	r3, [r3, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4619      	mov	r1, r3
 800850a:	2004      	movs	r0, #4
 800850c:	f000 f8ec 	bl	80086e8 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8008510:	f7fa fc04 	bl	8002d1c <HW_IPCC_SYS_SendCmd>

  return 0;
 8008514:	2300      	movs	r3, #0
}
 8008516:	4618      	mov	r0, r3
 8008518:	3708      	adds	r7, #8
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
 800851e:	bf00      	nop
 8008520:	20030000 	.word	0x20030000

08008524 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8008528:	4b07      	ldr	r3, [pc, #28]	; (8008548 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800852a:	68db      	ldr	r3, [r3, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4619      	mov	r1, r3
 8008530:	2005      	movs	r0, #5
 8008532:	f000 f8d9 	bl	80086e8 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8008536:	4b05      	ldr	r3, [pc, #20]	; (800854c <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4a03      	ldr	r2, [pc, #12]	; (8008548 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800853c:	68d2      	ldr	r2, [r2, #12]
 800853e:	6812      	ldr	r2, [r2, #0]
 8008540:	4610      	mov	r0, r2
 8008542:	4798      	blx	r3

  return;
 8008544:	bf00      	nop
}
 8008546:	bd80      	pop	{r7, pc}
 8008548:	20030000 	.word	0x20030000
 800854c:	2000022c 	.word	0x2000022c

08008550 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b082      	sub	sp, #8
 8008554:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8008556:	e00e      	b.n	8008576 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8008558:	1d3b      	adds	r3, r7, #4
 800855a:	4619      	mov	r1, r3
 800855c:	480b      	ldr	r0, [pc, #44]	; (800858c <HW_IPCC_SYS_EvtNot+0x3c>)
 800855e:	f000 fcf4 	bl	8008f4a <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	4619      	mov	r1, r3
 8008566:	2006      	movs	r0, #6
 8008568:	f000 f8be 	bl	80086e8 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800856c:	4b08      	ldr	r3, [pc, #32]	; (8008590 <HW_IPCC_SYS_EvtNot+0x40>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	4610      	mov	r0, r2
 8008574:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8008576:	4805      	ldr	r0, [pc, #20]	; (800858c <HW_IPCC_SYS_EvtNot+0x3c>)
 8008578:	f000 fc58 	bl	8008e2c <LST_is_empty>
 800857c:	4603      	mov	r3, r0
 800857e:	2b00      	cmp	r3, #0
 8008580:	d0ea      	beq.n	8008558 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8008582:	bf00      	nop
}
 8008584:	3708      	adds	r7, #8
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}
 800858a:	bf00      	nop
 800858c:	200301d8 	.word	0x200301d8
 8008590:	20000230 	.word	0x20000230

08008594 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b082      	sub	sp, #8
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800859c:	4817      	ldr	r0, [pc, #92]	; (80085fc <TL_MM_Init+0x68>)
 800859e:	f000 fc35 	bl	8008e0c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 80085a2:	4817      	ldr	r0, [pc, #92]	; (8008600 <TL_MM_Init+0x6c>)
 80085a4:	f000 fc32 	bl	8008e0c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 80085a8:	4b16      	ldr	r3, [pc, #88]	; (8008604 <TL_MM_Init+0x70>)
 80085aa:	691b      	ldr	r3, [r3, #16]
 80085ac:	4a16      	ldr	r2, [pc, #88]	; (8008608 <TL_MM_Init+0x74>)
 80085ae:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 80085b0:	4b15      	ldr	r3, [pc, #84]	; (8008608 <TL_MM_Init+0x74>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	687a      	ldr	r2, [r7, #4]
 80085b6:	6892      	ldr	r2, [r2, #8]
 80085b8:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 80085ba:	4b13      	ldr	r3, [pc, #76]	; (8008608 <TL_MM_Init+0x74>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	687a      	ldr	r2, [r7, #4]
 80085c0:	68d2      	ldr	r2, [r2, #12]
 80085c2:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 80085c4:	4b10      	ldr	r3, [pc, #64]	; (8008608 <TL_MM_Init+0x74>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a0c      	ldr	r2, [pc, #48]	; (80085fc <TL_MM_Init+0x68>)
 80085ca:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 80085cc:	4b0e      	ldr	r3, [pc, #56]	; (8008608 <TL_MM_Init+0x74>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	687a      	ldr	r2, [r7, #4]
 80085d2:	6812      	ldr	r2, [r2, #0]
 80085d4:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 80085d6:	4b0c      	ldr	r3, [pc, #48]	; (8008608 <TL_MM_Init+0x74>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	687a      	ldr	r2, [r7, #4]
 80085dc:	6852      	ldr	r2, [r2, #4]
 80085de:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 80085e0:	4b09      	ldr	r3, [pc, #36]	; (8008608 <TL_MM_Init+0x74>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	687a      	ldr	r2, [r7, #4]
 80085e6:	6912      	ldr	r2, [r2, #16]
 80085e8:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 80085ea:	4b07      	ldr	r3, [pc, #28]	; (8008608 <TL_MM_Init+0x74>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	687a      	ldr	r2, [r7, #4]
 80085f0:	6952      	ldr	r2, [r2, #20]
 80085f2:	619a      	str	r2, [r3, #24]

  return;
 80085f4:	bf00      	nop
}
 80085f6:	3708      	adds	r7, #8
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}
 80085fc:	200301c0 	.word	0x200301c0
 8008600:	2000021c 	.word	0x2000021c
 8008604:	20030000 	.word	0x20030000
 8008608:	20000234 	.word	0x20000234

0800860c <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b082      	sub	sp, #8
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8008614:	6879      	ldr	r1, [r7, #4]
 8008616:	4807      	ldr	r0, [pc, #28]	; (8008634 <TL_MM_EvtDone+0x28>)
 8008618:	f000 fc50 	bl	8008ebc <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800861c:	6879      	ldr	r1, [r7, #4]
 800861e:	2000      	movs	r0, #0
 8008620:	f000 f862 	bl	80086e8 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8008624:	4804      	ldr	r0, [pc, #16]	; (8008638 <TL_MM_EvtDone+0x2c>)
 8008626:	f7fa fb9f 	bl	8002d68 <HW_IPCC_MM_SendFreeBuf>

  return;
 800862a:	bf00      	nop
}
 800862c:	3708      	adds	r7, #8
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}
 8008632:	bf00      	nop
 8008634:	2000021c 	.word	0x2000021c
 8008638:	0800863d 	.word	0x0800863d

0800863c <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b082      	sub	sp, #8
 8008640:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8008642:	e00c      	b.n	800865e <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8008644:	1d3b      	adds	r3, r7, #4
 8008646:	4619      	mov	r1, r3
 8008648:	480a      	ldr	r0, [pc, #40]	; (8008674 <SendFreeBuf+0x38>)
 800864a:	f000 fc7e 	bl	8008f4a <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800864e:	4b0a      	ldr	r3, [pc, #40]	; (8008678 <SendFreeBuf+0x3c>)
 8008650:	691b      	ldr	r3, [r3, #16]
 8008652:	691b      	ldr	r3, [r3, #16]
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	4611      	mov	r1, r2
 8008658:	4618      	mov	r0, r3
 800865a:	f000 fc2f 	bl	8008ebc <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800865e:	4805      	ldr	r0, [pc, #20]	; (8008674 <SendFreeBuf+0x38>)
 8008660:	f000 fbe4 	bl	8008e2c <LST_is_empty>
 8008664:	4603      	mov	r3, r0
 8008666:	2b00      	cmp	r3, #0
 8008668:	d0ec      	beq.n	8008644 <SendFreeBuf+0x8>
  }

  return;
 800866a:	bf00      	nop
}
 800866c:	3708      	adds	r7, #8
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}
 8008672:	bf00      	nop
 8008674:	2000021c 	.word	0x2000021c
 8008678:	20030000 	.word	0x20030000

0800867c <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800867c:	b580      	push	{r7, lr}
 800867e:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8008680:	4805      	ldr	r0, [pc, #20]	; (8008698 <TL_TRACES_Init+0x1c>)
 8008682:	f000 fbc3 	bl	8008e0c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8008686:	4b05      	ldr	r3, [pc, #20]	; (800869c <TL_TRACES_Init+0x20>)
 8008688:	695b      	ldr	r3, [r3, #20]
 800868a:	4a03      	ldr	r2, [pc, #12]	; (8008698 <TL_TRACES_Init+0x1c>)
 800868c:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800868e:	f7fa fba1 	bl	8002dd4 <HW_IPCC_TRACES_Init>

  return;
 8008692:	bf00      	nop
}
 8008694:	bd80      	pop	{r7, pc}
 8008696:	bf00      	nop
 8008698:	200301c8 	.word	0x200301c8
 800869c:	20030000 	.word	0x20030000

080086a0 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b082      	sub	sp, #8
 80086a4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80086a6:	e008      	b.n	80086ba <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 80086a8:	1d3b      	adds	r3, r7, #4
 80086aa:	4619      	mov	r1, r3
 80086ac:	4808      	ldr	r0, [pc, #32]	; (80086d0 <HW_IPCC_TRACES_EvtNot+0x30>)
 80086ae:	f000 fc4c 	bl	8008f4a <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	4618      	mov	r0, r3
 80086b6:	f000 f80d 	bl	80086d4 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80086ba:	4805      	ldr	r0, [pc, #20]	; (80086d0 <HW_IPCC_TRACES_EvtNot+0x30>)
 80086bc:	f000 fbb6 	bl	8008e2c <LST_is_empty>
 80086c0:	4603      	mov	r3, r0
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d0f0      	beq.n	80086a8 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 80086c6:	bf00      	nop
}
 80086c8:	3708      	adds	r7, #8
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
 80086ce:	bf00      	nop
 80086d0:	200301c8 	.word	0x200301c8

080086d4 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 80086d4:	b480      	push	{r7}
 80086d6:	b083      	sub	sp, #12
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 80086dc:	bf00      	nop
 80086de:	370c      	adds	r7, #12
 80086e0:	46bd      	mov	sp, r7
 80086e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e6:	4770      	bx	lr

080086e8 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b085      	sub	sp, #20
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	4603      	mov	r3, r0
 80086f0:	6039      	str	r1, [r7, #0]
 80086f2:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 80086f4:	79fb      	ldrb	r3, [r7, #7]
 80086f6:	2b06      	cmp	r3, #6
 80086f8:	d845      	bhi.n	8008786 <OutputDbgTrace+0x9e>
 80086fa:	a201      	add	r2, pc, #4	; (adr r2, 8008700 <OutputDbgTrace+0x18>)
 80086fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008700:	0800871d 	.word	0x0800871d
 8008704:	08008741 	.word	0x08008741
 8008708:	08008747 	.word	0x08008747
 800870c:	0800875b 	.word	0x0800875b
 8008710:	08008767 	.word	0x08008767
 8008714:	0800876d 	.word	0x0800876d
 8008718:	0800877b 	.word	0x0800877b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	7a5b      	ldrb	r3, [r3, #9]
 8008724:	2bff      	cmp	r3, #255	; 0xff
 8008726:	d005      	beq.n	8008734 <OutputDbgTrace+0x4c>
 8008728:	2bff      	cmp	r3, #255	; 0xff
 800872a:	dc05      	bgt.n	8008738 <OutputDbgTrace+0x50>
 800872c:	2b0e      	cmp	r3, #14
 800872e:	d005      	beq.n	800873c <OutputDbgTrace+0x54>
 8008730:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8008732:	e001      	b.n	8008738 <OutputDbgTrace+0x50>
          break;
 8008734:	bf00      	nop
 8008736:	e027      	b.n	8008788 <OutputDbgTrace+0xa0>
          break;
 8008738:	bf00      	nop
 800873a:	e025      	b.n	8008788 <OutputDbgTrace+0xa0>
          break;
 800873c:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800873e:	e023      	b.n	8008788 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8008744:	e020      	b.n	8008788 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	7a5b      	ldrb	r3, [r3, #9]
 800874e:	2b0e      	cmp	r3, #14
 8008750:	d001      	beq.n	8008756 <OutputDbgTrace+0x6e>
 8008752:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8008754:	e000      	b.n	8008758 <OutputDbgTrace+0x70>
          break;
 8008756:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008758:	e016      	b.n	8008788 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	7a5b      	ldrb	r3, [r3, #9]
 8008762:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008764:	e010      	b.n	8008788 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800876a:	e00d      	b.n	8008788 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	7a5b      	ldrb	r3, [r3, #9]
 8008774:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8008776:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008778:	e006      	b.n	8008788 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	7a5b      	ldrb	r3, [r3, #9]
 8008782:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008784:	e000      	b.n	8008788 <OutputDbgTrace+0xa0>

    default:
      break;
 8008786:	bf00      	nop
  }

  return;
 8008788:	bf00      	nop
}
 800878a:	3714      	adds	r7, #20
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr

08008794 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b086      	sub	sp, #24
 8008798:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800879a:	f3ef 8310 	mrs	r3, PRIMASK
 800879e:	60fb      	str	r3, [r7, #12]
  return(result);
 80087a0:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 80087a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80087a4:	b672      	cpsid	i
}
 80087a6:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 80087a8:	1cbb      	adds	r3, r7, #2
 80087aa:	4619      	mov	r1, r3
 80087ac:	4812      	ldr	r0, [pc, #72]	; (80087f8 <DbgTrace_TxCpltCallback+0x64>)
 80087ae:	f000 fe44 	bl	800943a <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 80087b2:	1cbb      	adds	r3, r7, #2
 80087b4:	4619      	mov	r1, r3
 80087b6:	4810      	ldr	r0, [pc, #64]	; (80087f8 <DbgTrace_TxCpltCallback+0x64>)
 80087b8:	f000 ff33 	bl	8009622 <CircularQueue_Sense>
 80087bc:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d00c      	beq.n	80087de <DbgTrace_TxCpltCallback+0x4a>
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	f383 8810 	msr	PRIMASK, r3
}
 80087ce:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 80087d0:	887b      	ldrh	r3, [r7, #2]
 80087d2:	4a0a      	ldr	r2, [pc, #40]	; (80087fc <DbgTrace_TxCpltCallback+0x68>)
 80087d4:	4619      	mov	r1, r3
 80087d6:	6938      	ldr	r0, [r7, #16]
 80087d8:	f7f7 ffb5 	bl	8000746 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 80087dc:	e008      	b.n	80087f0 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 80087de:	4b08      	ldr	r3, [pc, #32]	; (8008800 <DbgTrace_TxCpltCallback+0x6c>)
 80087e0:	2201      	movs	r2, #1
 80087e2:	701a      	strb	r2, [r3, #0]
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f383 8810 	msr	PRIMASK, r3
}
 80087ee:	bf00      	nop
}
 80087f0:	bf00      	nop
 80087f2:	3718      	adds	r7, #24
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}
 80087f8:	20000238 	.word	0x20000238
 80087fc:	08008795 	.word	0x08008795
 8008800:	20000025 	.word	0x20000025

08008804 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b082      	sub	sp, #8
 8008808:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800880a:	f7f7 ff96 	bl	800073a <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 800880e:	2302      	movs	r3, #2
 8008810:	9300      	str	r3, [sp, #0]
 8008812:	2300      	movs	r3, #0
 8008814:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008818:	4903      	ldr	r1, [pc, #12]	; (8008828 <DbgTraceInit+0x24>)
 800881a:	4804      	ldr	r0, [pc, #16]	; (800882c <DbgTraceInit+0x28>)
 800881c:	f000 fbb4 	bl	8008f88 <CircularQueue_Init>
#endif 
#endif
  return;
 8008820:	bf00      	nop
}
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
 8008826:	bf00      	nop
 8008828:	20000258 	.word	0x20000258
 800882c:	20000238 	.word	0x20000238

08008830 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b084      	sub	sp, #16
 8008834:	af00      	add	r7, sp, #0
 8008836:	60f8      	str	r0, [r7, #12]
 8008838:	60b9      	str	r1, [r7, #8]
 800883a:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	68b9      	ldr	r1, [r7, #8]
 8008840:	68f8      	ldr	r0, [r7, #12]
 8008842:	f000 f805 	bl	8008850 <DbgTraceWrite>
 8008846:	4603      	mov	r3, r0
}
 8008848:	4618      	mov	r0, r3
 800884a:	3710      	adds	r7, #16
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b08a      	sub	sp, #40	; 0x28
 8008854:	af00      	add	r7, sp, #0
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	60b9      	str	r1, [r7, #8]
 800885a:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800885c:	2300      	movs	r3, #0
 800885e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008860:	f3ef 8310 	mrs	r3, PRIMASK
 8008864:	61bb      	str	r3, [r7, #24]
  return(result);
 8008866:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 8008868:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008870:	d102      	bne.n	8008878 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 8008872:	2300      	movs	r3, #0
 8008874:	627b      	str	r3, [r7, #36]	; 0x24
 8008876:	e037      	b.n	80088e8 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2b01      	cmp	r3, #1
 800887c:	d006      	beq.n	800888c <DbgTraceWrite+0x3c>
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2b02      	cmp	r3, #2
 8008882:	d003      	beq.n	800888c <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 8008884:	f04f 33ff 	mov.w	r3, #4294967295
 8008888:	627b      	str	r3, [r7, #36]	; 0x24
 800888a:	e02d      	b.n	80088e8 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d02a      	beq.n	80088e8 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8008896:	b672      	cpsid	i
}
 8008898:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	b29a      	uxth	r2, r3
 800889e:	2301      	movs	r3, #1
 80088a0:	68b9      	ldr	r1, [r7, #8]
 80088a2:	4814      	ldr	r0, [pc, #80]	; (80088f4 <DbgTraceWrite+0xa4>)
 80088a4:	f000 fba2 	bl	8008fec <CircularQueue_Add>
 80088a8:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 80088aa:	69fb      	ldr	r3, [r7, #28]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d015      	beq.n	80088dc <DbgTraceWrite+0x8c>
 80088b0:	4b11      	ldr	r3, [pc, #68]	; (80088f8 <DbgTraceWrite+0xa8>)
 80088b2:	781b      	ldrb	r3, [r3, #0]
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d010      	beq.n	80088dc <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 80088ba:	4b0f      	ldr	r3, [pc, #60]	; (80088f8 <DbgTraceWrite+0xa8>)
 80088bc:	2200      	movs	r2, #0
 80088be:	701a      	strb	r2, [r3, #0]
 80088c0:	6a3b      	ldr	r3, [r7, #32]
 80088c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	f383 8810 	msr	PRIMASK, r3
}
 80088ca:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	b29b      	uxth	r3, r3
 80088d0:	4a0a      	ldr	r2, [pc, #40]	; (80088fc <DbgTraceWrite+0xac>)
 80088d2:	4619      	mov	r1, r3
 80088d4:	69f8      	ldr	r0, [r7, #28]
 80088d6:	f7f7 ff36 	bl	8000746 <DbgOutputTraces>
 80088da:	e005      	b.n	80088e8 <DbgTraceWrite+0x98>
 80088dc:	6a3b      	ldr	r3, [r7, #32]
 80088de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	f383 8810 	msr	PRIMASK, r3
}
 80088e6:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 80088e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3728      	adds	r7, #40	; 0x28
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}
 80088f2:	bf00      	nop
 80088f4:	20000238 	.word	0x20000238
 80088f8:	20000025 	.word	0x20000025
 80088fc:	08008795 	.word	0x08008795

08008900 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8008900:	b480      	push	{r7}
 8008902:	b085      	sub	sp, #20
 8008904:	af00      	add	r7, sp, #0
 8008906:	4603      	mov	r3, r0
 8008908:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800890a:	4b0f      	ldr	r3, [pc, #60]	; (8008948 <OTP_Read+0x48>)
 800890c:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800890e:	e002      	b.n	8008916 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	3b08      	subs	r3, #8
 8008914:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	3307      	adds	r3, #7
 800891a:	781b      	ldrb	r3, [r3, #0]
 800891c:	79fa      	ldrb	r2, [r7, #7]
 800891e:	429a      	cmp	r2, r3
 8008920:	d003      	beq.n	800892a <OTP_Read+0x2a>
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	4a09      	ldr	r2, [pc, #36]	; (800894c <OTP_Read+0x4c>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d1f2      	bne.n	8008910 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	3307      	adds	r3, #7
 800892e:	781b      	ldrb	r3, [r3, #0]
 8008930:	79fa      	ldrb	r2, [r7, #7]
 8008932:	429a      	cmp	r2, r3
 8008934:	d001      	beq.n	800893a <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8008936:	2300      	movs	r3, #0
 8008938:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800893a:	68fb      	ldr	r3, [r7, #12]
}
 800893c:	4618      	mov	r0, r3
 800893e:	3714      	adds	r7, #20
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr
 8008948:	1fff73f8 	.word	0x1fff73f8
 800894c:	1fff7000 	.word	0x1fff7000

08008950 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8008950:	b480      	push	{r7}
 8008952:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8008954:	4b05      	ldr	r3, [pc, #20]	; (800896c <UTIL_LPM_Init+0x1c>)
 8008956:	2200      	movs	r2, #0
 8008958:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800895a:	4b05      	ldr	r3, [pc, #20]	; (8008970 <UTIL_LPM_Init+0x20>)
 800895c:	2200      	movs	r2, #0
 800895e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8008960:	bf00      	nop
 8008962:	46bd      	mov	sp, r7
 8008964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008968:	4770      	bx	lr
 800896a:	bf00      	nop
 800896c:	20001258 	.word	0x20001258
 8008970:	2000125c 	.word	0x2000125c

08008974 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8008974:	b480      	push	{r7}
 8008976:	b087      	sub	sp, #28
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
 800897c:	460b      	mov	r3, r1
 800897e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008980:	f3ef 8310 	mrs	r3, PRIMASK
 8008984:	613b      	str	r3, [r7, #16]
  return(result);
 8008986:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8008988:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800898a:	b672      	cpsid	i
}
 800898c:	bf00      	nop
  
  switch(state)
 800898e:	78fb      	ldrb	r3, [r7, #3]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d008      	beq.n	80089a6 <UTIL_LPM_SetOffMode+0x32>
 8008994:	2b01      	cmp	r3, #1
 8008996:	d10e      	bne.n	80089b6 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8008998:	4b0d      	ldr	r3, [pc, #52]	; (80089d0 <UTIL_LPM_SetOffMode+0x5c>)
 800899a:	681a      	ldr	r2, [r3, #0]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	4313      	orrs	r3, r2
 80089a0:	4a0b      	ldr	r2, [pc, #44]	; (80089d0 <UTIL_LPM_SetOffMode+0x5c>)
 80089a2:	6013      	str	r3, [r2, #0]
      break;
 80089a4:	e008      	b.n	80089b8 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	43da      	mvns	r2, r3
 80089aa:	4b09      	ldr	r3, [pc, #36]	; (80089d0 <UTIL_LPM_SetOffMode+0x5c>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4013      	ands	r3, r2
 80089b0:	4a07      	ldr	r2, [pc, #28]	; (80089d0 <UTIL_LPM_SetOffMode+0x5c>)
 80089b2:	6013      	str	r3, [r2, #0]
      break;
 80089b4:	e000      	b.n	80089b8 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 80089b6:	bf00      	nop
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	f383 8810 	msr	PRIMASK, r3
}
 80089c2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80089c4:	bf00      	nop
 80089c6:	371c      	adds	r7, #28
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr
 80089d0:	2000125c 	.word	0x2000125c

080089d4 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b08c      	sub	sp, #48	; 0x30
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 80089dc:	4b67      	ldr	r3, [pc, #412]	; (8008b7c <UTIL_SEQ_Run+0x1a8>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 80089e2:	4b66      	ldr	r3, [pc, #408]	; (8008b7c <UTIL_SEQ_Run+0x1a8>)
 80089e4:	681a      	ldr	r2, [r3, #0]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	4013      	ands	r3, r2
 80089ea:	4a64      	ldr	r2, [pc, #400]	; (8008b7c <UTIL_SEQ_Run+0x1a8>)
 80089ec:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 80089ee:	e083      	b.n	8008af8 <UTIL_SEQ_Run+0x124>
  {
    counter = 0U;
 80089f0:	2300      	movs	r3, #0
 80089f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 80089f4:	e002      	b.n	80089fc <UTIL_SEQ_Run+0x28>
    {
      counter++;
 80089f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089f8:	3301      	adds	r3, #1
 80089fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 80089fc:	4a60      	ldr	r2, [pc, #384]	; (8008b80 <UTIL_SEQ_Run+0x1ac>)
 80089fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a00:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008a04:	4b5f      	ldr	r3, [pc, #380]	; (8008b84 <UTIL_SEQ_Run+0x1b0>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	401a      	ands	r2, r3
 8008a0a:	4b5c      	ldr	r3, [pc, #368]	; (8008b7c <UTIL_SEQ_Run+0x1a8>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	4013      	ands	r3, r2
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d0f0      	beq.n	80089f6 <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 8008a14:	4a5a      	ldr	r2, [pc, #360]	; (8008b80 <UTIL_SEQ_Run+0x1ac>)
 8008a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a18:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008a1c:	4b59      	ldr	r3, [pc, #356]	; (8008b84 <UTIL_SEQ_Run+0x1b0>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	401a      	ands	r2, r3
 8008a22:	4b56      	ldr	r3, [pc, #344]	; (8008b7c <UTIL_SEQ_Run+0x1a8>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4013      	ands	r3, r2
 8008a28:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8008a2a:	4a55      	ldr	r2, [pc, #340]	; (8008b80 <UTIL_SEQ_Run+0x1ac>)
 8008a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a2e:	00db      	lsls	r3, r3, #3
 8008a30:	4413      	add	r3, r2
 8008a32:	685a      	ldr	r2, [r3, #4]
 8008a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a36:	4013      	ands	r3, r2
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d106      	bne.n	8008a4a <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8008a3c:	4a50      	ldr	r2, [pc, #320]	; (8008b80 <UTIL_SEQ_Run+0x1ac>)
 8008a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a40:	00db      	lsls	r3, r3, #3
 8008a42:	4413      	add	r3, r2
 8008a44:	f04f 32ff 	mov.w	r2, #4294967295
 8008a48:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8008a4a:	4a4d      	ldr	r2, [pc, #308]	; (8008b80 <UTIL_SEQ_Run+0x1ac>)
 8008a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a4e:	00db      	lsls	r3, r3, #3
 8008a50:	4413      	add	r3, r2
 8008a52:	685a      	ldr	r2, [r3, #4]
 8008a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a56:	4013      	ands	r3, r2
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f000 f99d 	bl	8008d98 <SEQ_BitPosition>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	461a      	mov	r2, r3
 8008a62:	4b49      	ldr	r3, [pc, #292]	; (8008b88 <UTIL_SEQ_Run+0x1b4>)
 8008a64:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8008a66:	4a46      	ldr	r2, [pc, #280]	; (8008b80 <UTIL_SEQ_Run+0x1ac>)
 8008a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a6a:	00db      	lsls	r3, r3, #3
 8008a6c:	4413      	add	r3, r2
 8008a6e:	685a      	ldr	r2, [r3, #4]
 8008a70:	4b45      	ldr	r3, [pc, #276]	; (8008b88 <UTIL_SEQ_Run+0x1b4>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	2101      	movs	r1, #1
 8008a76:	fa01 f303 	lsl.w	r3, r1, r3
 8008a7a:	43db      	mvns	r3, r3
 8008a7c:	401a      	ands	r2, r3
 8008a7e:	4940      	ldr	r1, [pc, #256]	; (8008b80 <UTIL_SEQ_Run+0x1ac>)
 8008a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a82:	00db      	lsls	r3, r3, #3
 8008a84:	440b      	add	r3, r1
 8008a86:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a88:	f3ef 8310 	mrs	r3, PRIMASK
 8008a8c:	61bb      	str	r3, [r7, #24]
  return(result);
 8008a8e:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008a90:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8008a92:	b672      	cpsid	i
}
 8008a94:	bf00      	nop
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8008a96:	4b3c      	ldr	r3, [pc, #240]	; (8008b88 <UTIL_SEQ_Run+0x1b4>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8008aa0:	43da      	mvns	r2, r3
 8008aa2:	4b3a      	ldr	r3, [pc, #232]	; (8008b8c <UTIL_SEQ_Run+0x1b8>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4013      	ands	r3, r2
 8008aa8:	4a38      	ldr	r2, [pc, #224]	; (8008b8c <UTIL_SEQ_Run+0x1b8>)
 8008aaa:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8008aac:	2302      	movs	r3, #2
 8008aae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ab0:	e013      	b.n	8008ada <UTIL_SEQ_Run+0x106>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8008ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ab4:	3b01      	subs	r3, #1
 8008ab6:	4a32      	ldr	r2, [pc, #200]	; (8008b80 <UTIL_SEQ_Run+0x1ac>)
 8008ab8:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8008abc:	4b32      	ldr	r3, [pc, #200]	; (8008b88 <UTIL_SEQ_Run+0x1b4>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ac6:	43da      	mvns	r2, r3
 8008ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aca:	3b01      	subs	r3, #1
 8008acc:	400a      	ands	r2, r1
 8008ace:	492c      	ldr	r1, [pc, #176]	; (8008b80 <UTIL_SEQ_Run+0x1ac>)
 8008ad0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8008ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad6:	3b01      	subs	r3, #1
 8008ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d1e8      	bne.n	8008ab2 <UTIL_SEQ_Run+0xde>
 8008ae0:	6a3b      	ldr	r3, [r7, #32]
 8008ae2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	f383 8810 	msr	PRIMASK, r3
}
 8008aea:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8008aec:	4b26      	ldr	r3, [pc, #152]	; (8008b88 <UTIL_SEQ_Run+0x1b4>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a27      	ldr	r2, [pc, #156]	; (8008b90 <UTIL_SEQ_Run+0x1bc>)
 8008af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008af6:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 8008af8:	4b24      	ldr	r3, [pc, #144]	; (8008b8c <UTIL_SEQ_Run+0x1b8>)
 8008afa:	681a      	ldr	r2, [r3, #0]
 8008afc:	4b21      	ldr	r3, [pc, #132]	; (8008b84 <UTIL_SEQ_Run+0x1b0>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	401a      	ands	r2, r3
 8008b02:	4b1e      	ldr	r3, [pc, #120]	; (8008b7c <UTIL_SEQ_Run+0x1a8>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4013      	ands	r3, r2
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d007      	beq.n	8008b1c <UTIL_SEQ_Run+0x148>
 8008b0c:	4b21      	ldr	r3, [pc, #132]	; (8008b94 <UTIL_SEQ_Run+0x1c0>)
 8008b0e:	681a      	ldr	r2, [r3, #0]
 8008b10:	4b21      	ldr	r3, [pc, #132]	; (8008b98 <UTIL_SEQ_Run+0x1c4>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4013      	ands	r3, r2
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	f43f af6a 	beq.w	80089f0 <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8008b1c:	4b1a      	ldr	r3, [pc, #104]	; (8008b88 <UTIL_SEQ_Run+0x1b4>)
 8008b1e:	f04f 32ff 	mov.w	r2, #4294967295
 8008b22:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8008b24:	f000 f92a 	bl	8008d7c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b28:	f3ef 8310 	mrs	r3, PRIMASK
 8008b2c:	613b      	str	r3, [r7, #16]
  return(result);
 8008b2e:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8008b30:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8008b32:	b672      	cpsid	i
}
 8008b34:	bf00      	nop
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 8008b36:	4b15      	ldr	r3, [pc, #84]	; (8008b8c <UTIL_SEQ_Run+0x1b8>)
 8008b38:	681a      	ldr	r2, [r3, #0]
 8008b3a:	4b12      	ldr	r3, [pc, #72]	; (8008b84 <UTIL_SEQ_Run+0x1b0>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	401a      	ands	r2, r3
 8008b40:	4b0e      	ldr	r3, [pc, #56]	; (8008b7c <UTIL_SEQ_Run+0x1a8>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4013      	ands	r3, r2
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d108      	bne.n	8008b5c <UTIL_SEQ_Run+0x188>
 8008b4a:	4b12      	ldr	r3, [pc, #72]	; (8008b94 <UTIL_SEQ_Run+0x1c0>)
 8008b4c:	681a      	ldr	r2, [r3, #0]
 8008b4e:	4b12      	ldr	r3, [pc, #72]	; (8008b98 <UTIL_SEQ_Run+0x1c4>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	4013      	ands	r3, r2
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d101      	bne.n	8008b5c <UTIL_SEQ_Run+0x188>
  {
	UTIL_SEQ_Idle( );
 8008b58:	f7f7 febf 	bl	80008da <UTIL_SEQ_Idle>
 8008b5c:	69fb      	ldr	r3, [r7, #28]
 8008b5e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f383 8810 	msr	PRIMASK, r3
}
 8008b66:	bf00      	nop
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 8008b68:	f000 f90f 	bl	8008d8a <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8008b6c:	4a03      	ldr	r2, [pc, #12]	; (8008b7c <UTIL_SEQ_Run+0x1a8>)
 8008b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b70:	6013      	str	r3, [r2, #0]

  return;
 8008b72:	bf00      	nop
}
 8008b74:	3730      	adds	r7, #48	; 0x30
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}
 8008b7a:	bf00      	nop
 8008b7c:	2000002c 	.word	0x2000002c
 8008b80:	200012f0 	.word	0x200012f0
 8008b84:	20000028 	.word	0x20000028
 8008b88:	2000126c 	.word	0x2000126c
 8008b8c:	20001260 	.word	0x20001260
 8008b90:	20001270 	.word	0x20001270
 8008b94:	20001264 	.word	0x20001264
 8008b98:	20001268 	.word	0x20001268

08008b9c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b088      	sub	sp, #32
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	60f8      	str	r0, [r7, #12]
 8008ba4:	60b9      	str	r1, [r7, #8]
 8008ba6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ba8:	f3ef 8310 	mrs	r3, PRIMASK
 8008bac:	617b      	str	r3, [r7, #20]
  return(result);
 8008bae:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8008bb0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8008bb2:	b672      	cpsid	i
}
 8008bb4:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8008bb6:	68f8      	ldr	r0, [r7, #12]
 8008bb8:	f000 f8ee 	bl	8008d98 <SEQ_BitPosition>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	4619      	mov	r1, r3
 8008bc0:	4a06      	ldr	r2, [pc, #24]	; (8008bdc <UTIL_SEQ_RegTask+0x40>)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8008bc8:	69fb      	ldr	r3, [r7, #28]
 8008bca:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bcc:	69bb      	ldr	r3, [r7, #24]
 8008bce:	f383 8810 	msr	PRIMASK, r3
}
 8008bd2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8008bd4:	bf00      	nop
}
 8008bd6:	3720      	adds	r7, #32
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}
 8008bdc:	20001270 	.word	0x20001270

08008be0 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8008be0:	b480      	push	{r7}
 8008be2:	b087      	sub	sp, #28
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bea:	f3ef 8310 	mrs	r3, PRIMASK
 8008bee:	60fb      	str	r3, [r7, #12]
  return(result);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008bf2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008bf4:	b672      	cpsid	i
}
 8008bf6:	bf00      	nop

  TaskSet |= TaskId_bm;
 8008bf8:	4b0d      	ldr	r3, [pc, #52]	; (8008c30 <UTIL_SEQ_SetTask+0x50>)
 8008bfa:	681a      	ldr	r2, [r3, #0]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	4313      	orrs	r3, r2
 8008c00:	4a0b      	ldr	r2, [pc, #44]	; (8008c30 <UTIL_SEQ_SetTask+0x50>)
 8008c02:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8008c04:	4a0b      	ldr	r2, [pc, #44]	; (8008c34 <UTIL_SEQ_SetTask+0x54>)
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	431a      	orrs	r2, r3
 8008c10:	4908      	ldr	r1, [pc, #32]	; (8008c34 <UTIL_SEQ_SetTask+0x54>)
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	f383 8810 	msr	PRIMASK, r3
}
 8008c22:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008c24:	bf00      	nop
}
 8008c26:	371c      	adds	r7, #28
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	4770      	bx	lr
 8008c30:	20001260 	.word	0x20001260
 8008c34:	200012f0 	.word	0x200012f0

08008c38 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b087      	sub	sp, #28
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c40:	f3ef 8310 	mrs	r3, PRIMASK
 8008c44:	60fb      	str	r3, [r7, #12]
  return(result);
 8008c46:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008c48:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008c4a:	b672      	cpsid	i
}
 8008c4c:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	43da      	mvns	r2, r3
 8008c52:	4b08      	ldr	r3, [pc, #32]	; (8008c74 <UTIL_SEQ_PauseTask+0x3c>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4013      	ands	r3, r2
 8008c58:	4a06      	ldr	r2, [pc, #24]	; (8008c74 <UTIL_SEQ_PauseTask+0x3c>)
 8008c5a:	6013      	str	r3, [r2, #0]
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	f383 8810 	msr	PRIMASK, r3
}
 8008c66:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008c68:	bf00      	nop
}
 8008c6a:	371c      	adds	r7, #28
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr
 8008c74:	20000028 	.word	0x20000028

08008c78 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b087      	sub	sp, #28
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c80:	f3ef 8310 	mrs	r3, PRIMASK
 8008c84:	60fb      	str	r3, [r7, #12]
  return(result);
 8008c86:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008c88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008c8a:	b672      	cpsid	i
}
 8008c8c:	bf00      	nop

  TaskMask |= TaskId_bm;
 8008c8e:	4b09      	ldr	r3, [pc, #36]	; (8008cb4 <UTIL_SEQ_ResumeTask+0x3c>)
 8008c90:	681a      	ldr	r2, [r3, #0]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	4313      	orrs	r3, r2
 8008c96:	4a07      	ldr	r2, [pc, #28]	; (8008cb4 <UTIL_SEQ_ResumeTask+0x3c>)
 8008c98:	6013      	str	r3, [r2, #0]
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	f383 8810 	msr	PRIMASK, r3
}
 8008ca4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008ca6:	bf00      	nop
}
 8008ca8:	371c      	adds	r7, #28
 8008caa:	46bd      	mov	sp, r7
 8008cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb0:	4770      	bx	lr
 8008cb2:	bf00      	nop
 8008cb4:	20000028 	.word	0x20000028

08008cb8 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b087      	sub	sp, #28
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008cc0:	f3ef 8310 	mrs	r3, PRIMASK
 8008cc4:	60fb      	str	r3, [r7, #12]
  return(result);
 8008cc6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008cc8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008cca:	b672      	cpsid	i
}
 8008ccc:	bf00      	nop

  EvtSet |= EvtId_bm;
 8008cce:	4b09      	ldr	r3, [pc, #36]	; (8008cf4 <UTIL_SEQ_SetEvt+0x3c>)
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	4a07      	ldr	r2, [pc, #28]	; (8008cf4 <UTIL_SEQ_SetEvt+0x3c>)
 8008cd8:	6013      	str	r3, [r2, #0]
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	f383 8810 	msr	PRIMASK, r3
}
 8008ce4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008ce6:	bf00      	nop
}
 8008ce8:	371c      	adds	r7, #28
 8008cea:	46bd      	mov	sp, r7
 8008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf0:	4770      	bx	lr
 8008cf2:	bf00      	nop
 8008cf4:	20001264 	.word	0x20001264

08008cf8 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b086      	sub	sp, #24
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_idx;
  UTIL_SEQ_bm_t wait_task_idx;
  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8008d00:	4b1b      	ldr	r3, [pc, #108]	; (8008d70 <UTIL_SEQ_WaitEvt+0x78>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	613b      	str	r3, [r7, #16]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8008d06:	4b1a      	ldr	r3, [pc, #104]	; (8008d70 <UTIL_SEQ_WaitEvt+0x78>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d0e:	d102      	bne.n	8008d16 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0;
 8008d10:	2300      	movs	r3, #0
 8008d12:	617b      	str	r3, [r7, #20]
 8008d14:	e005      	b.n	8008d22 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = 1 << CurrentTaskIdx;
 8008d16:	4b16      	ldr	r3, [pc, #88]	; (8008d70 <UTIL_SEQ_WaitEvt+0x78>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d20:	617b      	str	r3, [r7, #20]
  }

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8008d22:	4b14      	ldr	r3, [pc, #80]	; (8008d74 <UTIL_SEQ_WaitEvt+0x7c>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	60fb      	str	r3, [r7, #12]
  EvtWaited = EvtId_bm;
 8008d28:	4a12      	ldr	r2, [pc, #72]	; (8008d74 <UTIL_SEQ_WaitEvt+0x7c>)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again from the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while ((EvtSet & EvtWaited) == 0U)
 8008d2e:	e005      	b.n	8008d3c <UTIL_SEQ_WaitEvt+0x44>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 8008d30:	4b10      	ldr	r3, [pc, #64]	; (8008d74 <UTIL_SEQ_WaitEvt+0x7c>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4619      	mov	r1, r3
 8008d36:	6978      	ldr	r0, [r7, #20]
 8008d38:	f7f7 fdd6 	bl	80008e8 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtWaited) == 0U)
 8008d3c:	4b0e      	ldr	r3, [pc, #56]	; (8008d78 <UTIL_SEQ_WaitEvt+0x80>)
 8008d3e:	681a      	ldr	r2, [r3, #0]
 8008d40:	4b0c      	ldr	r3, [pc, #48]	; (8008d74 <UTIL_SEQ_WaitEvt+0x7c>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4013      	ands	r3, r2
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d0f2      	beq.n	8008d30 <UTIL_SEQ_WaitEvt+0x38>
  /**
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8008d4a:	4a09      	ldr	r2, [pc, #36]	; (8008d70 <UTIL_SEQ_WaitEvt+0x78>)
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	6013      	str	r3, [r2, #0]

  EvtSet &= (~EvtWaited);
 8008d50:	4b08      	ldr	r3, [pc, #32]	; (8008d74 <UTIL_SEQ_WaitEvt+0x7c>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	43da      	mvns	r2, r3
 8008d56:	4b08      	ldr	r3, [pc, #32]	; (8008d78 <UTIL_SEQ_WaitEvt+0x80>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4013      	ands	r3, r2
 8008d5c:	4a06      	ldr	r2, [pc, #24]	; (8008d78 <UTIL_SEQ_WaitEvt+0x80>)
 8008d5e:	6013      	str	r3, [r2, #0]
  EvtWaited = event_waited_id_backup;
 8008d60:	4a04      	ldr	r2, [pc, #16]	; (8008d74 <UTIL_SEQ_WaitEvt+0x7c>)
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	6013      	str	r3, [r2, #0]

  return;
 8008d66:	bf00      	nop
}
 8008d68:	3718      	adds	r7, #24
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
 8008d6e:	bf00      	nop
 8008d70:	2000126c 	.word	0x2000126c
 8008d74:	20001268 	.word	0x20001268
 8008d78:	20001264 	.word	0x20001264

08008d7c <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8008d80:	bf00      	nop
}
 8008d82:	46bd      	mov	sp, r7
 8008d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d88:	4770      	bx	lr

08008d8a <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8008d8a:	b480      	push	{r7}
 8008d8c:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8008d8e:	bf00      	nop
}
 8008d90:	46bd      	mov	sp, r7
 8008d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d96:	4770      	bx	lr

08008d98 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b085      	sub	sp, #20
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 8008da0:	2300      	movs	r3, #0
 8008da2:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	0c1b      	lsrs	r3, r3, #16
 8008da8:	041b      	lsls	r3, r3, #16
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d104      	bne.n	8008db8 <SEQ_BitPosition+0x20>
 8008dae:	2310      	movs	r3, #16
 8008db0:	73fb      	strb	r3, [r7, #15]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	041b      	lsls	r3, r3, #16
 8008db6:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d105      	bne.n	8008dce <SEQ_BitPosition+0x36>
 8008dc2:	7bfb      	ldrb	r3, [r7, #15]
 8008dc4:	3308      	adds	r3, #8
 8008dc6:	73fb      	strb	r3, [r7, #15]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	021b      	lsls	r3, r3, #8
 8008dcc:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d105      	bne.n	8008de4 <SEQ_BitPosition+0x4c>
 8008dd8:	7bfb      	ldrb	r3, [r7, #15]
 8008dda:	3304      	adds	r3, #4
 8008ddc:	73fb      	strb	r3, [r7, #15]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	011b      	lsls	r3, r3, #4
 8008de2:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	0f1b      	lsrs	r3, r3, #28
 8008de8:	4a07      	ldr	r2, [pc, #28]	; (8008e08 <SEQ_BitPosition+0x70>)
 8008dea:	5cd2      	ldrb	r2, [r2, r3]
 8008dec:	7bfb      	ldrb	r3, [r7, #15]
 8008dee:	4413      	add	r3, r2
 8008df0:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8008df2:	7bfb      	ldrb	r3, [r7, #15]
 8008df4:	f1c3 031f 	rsb	r3, r3, #31
 8008df8:	b2db      	uxtb	r3, r3
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3714      	adds	r7, #20
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e04:	4770      	bx	lr
 8008e06:	bf00      	nop
 8008e08:	0800a4cc 	.word	0x0800a4cc

08008e0c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b083      	sub	sp, #12
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	605a      	str	r2, [r3, #4]
}
 8008e20:	bf00      	nop
 8008e22:	370c      	adds	r7, #12
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr

08008e2c <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b087      	sub	sp, #28
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e34:	f3ef 8310 	mrs	r3, PRIMASK
 8008e38:	60fb      	str	r3, [r7, #12]
  return(result);
 8008e3a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008e3c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8008e3e:	b672      	cpsid	i
}
 8008e40:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	687a      	ldr	r2, [r7, #4]
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	d102      	bne.n	8008e52 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	75fb      	strb	r3, [r7, #23]
 8008e50:	e001      	b.n	8008e56 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8008e52:	2300      	movs	r3, #0
 8008e54:	75fb      	strb	r3, [r7, #23]
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	f383 8810 	msr	PRIMASK, r3
}
 8008e60:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8008e62:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	371c      	adds	r7, #28
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr

08008e70 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b087      	sub	sp, #28
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
 8008e78:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e7a:	f3ef 8310 	mrs	r3, PRIMASK
 8008e7e:	60fb      	str	r3, [r7, #12]
  return(result);
 8008e80:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008e82:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008e84:	b672      	cpsid	i
}
 8008e86:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681a      	ldr	r2, [r3, #0]
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	687a      	ldr	r2, [r7, #4]
 8008e94:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	683a      	ldr	r2, [r7, #0]
 8008e9a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	683a      	ldr	r2, [r7, #0]
 8008ea2:	605a      	str	r2, [r3, #4]
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	f383 8810 	msr	PRIMASK, r3
}
 8008eae:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008eb0:	bf00      	nop
 8008eb2:	371c      	adds	r7, #28
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eba:	4770      	bx	lr

08008ebc <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b087      	sub	sp, #28
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ec6:	f3ef 8310 	mrs	r3, PRIMASK
 8008eca:	60fb      	str	r3, [r7, #12]
  return(result);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008ece:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008ed0:	b672      	cpsid	i
}
 8008ed2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	687a      	ldr	r2, [r7, #4]
 8008ed8:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	685a      	ldr	r2, [r3, #4]
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	683a      	ldr	r2, [r7, #0]
 8008ee6:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	685b      	ldr	r3, [r3, #4]
 8008eec:	683a      	ldr	r2, [r7, #0]
 8008eee:	601a      	str	r2, [r3, #0]
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	f383 8810 	msr	PRIMASK, r3
}
 8008efa:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008efc:	bf00      	nop
 8008efe:	371c      	adds	r7, #28
 8008f00:	46bd      	mov	sp, r7
 8008f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f06:	4770      	bx	lr

08008f08 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b087      	sub	sp, #28
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f10:	f3ef 8310 	mrs	r3, PRIMASK
 8008f14:	60fb      	str	r3, [r7, #12]
  return(result);
 8008f16:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008f18:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008f1a:	b672      	cpsid	i
}
 8008f1c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	687a      	ldr	r2, [r7, #4]
 8008f24:	6812      	ldr	r2, [r2, #0]
 8008f26:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	687a      	ldr	r2, [r7, #4]
 8008f2e:	6852      	ldr	r2, [r2, #4]
 8008f30:	605a      	str	r2, [r3, #4]
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	f383 8810 	msr	PRIMASK, r3
}
 8008f3c:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008f3e:	bf00      	nop
 8008f40:	371c      	adds	r7, #28
 8008f42:	46bd      	mov	sp, r7
 8008f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f48:	4770      	bx	lr

08008f4a <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8008f4a:	b580      	push	{r7, lr}
 8008f4c:	b086      	sub	sp, #24
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	6078      	str	r0, [r7, #4]
 8008f52:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f54:	f3ef 8310 	mrs	r3, PRIMASK
 8008f58:	60fb      	str	r3, [r7, #12]
  return(result);
 8008f5a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008f5c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008f5e:	b672      	cpsid	i
}
 8008f60:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681a      	ldr	r2, [r3, #0]
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f7ff ffca 	bl	8008f08 <LST_remove_node>
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f78:	693b      	ldr	r3, [r7, #16]
 8008f7a:	f383 8810 	msr	PRIMASK, r3
}
 8008f7e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008f80:	bf00      	nop
 8008f82:	3718      	adds	r7, #24
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}

08008f88 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b085      	sub	sp, #20
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	60f8      	str	r0, [r7, #12]
 8008f90:	60b9      	str	r1, [r7, #8]
 8008f92:	607a      	str	r2, [r7, #4]
 8008f94:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	68ba      	ldr	r2, [r7, #8]
 8008f9a:	601a      	str	r2, [r3, #0]
  q->first = 0;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	2200      	movs	r2, #0
 8008fac:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	687a      	ldr	r2, [r7, #4]
 8008fb8:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	887a      	ldrh	r2, [r7, #2]
 8008fbe:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	7e3a      	ldrb	r2, [r7, #24]
 8008fc4:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 8008fc6:	7e3b      	ldrb	r3, [r7, #24]
 8008fc8:	f003 0302 	and.w	r3, r3, #2
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d006      	beq.n	8008fde <CircularQueue_Init+0x56>
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	891b      	ldrh	r3, [r3, #8]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d002      	beq.n	8008fde <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 8008fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8008fdc:	e000      	b.n	8008fe0 <CircularQueue_Init+0x58>
  }
  return 0;
 8008fde:	2300      	movs	r3, #0
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3714      	adds	r7, #20
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fea:	4770      	bx	lr

08008fec <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b08e      	sub	sp, #56	; 0x38
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	60f8      	str	r0, [r7, #12]
 8008ff4:	60b9      	str	r1, [r7, #8]
 8008ff6:	603b      	str	r3, [r7, #0]
 8008ff8:	4613      	mov	r3, r2
 8008ffa:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 8009000:	2300      	movs	r3, #0
 8009002:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size elemenet (q->elementsize == 0) */
 8009004:	2300      	movs	r3, #0
 8009006:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 8009008:	2300      	movs	r3, #0
 800900a:	62bb      	str	r3, [r7, #40]	; 0x28
 800900c:	2300      	movs	r3, #0
 800900e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 8009010:	2300      	movs	r3, #0
 8009012:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 8009014:	2300      	movs	r3, #0
 8009016:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	891b      	ldrh	r3, [r3, #8]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d101      	bne.n	8009024 <CircularQueue_Add+0x38>
 8009020:	2302      	movs	r3, #2
 8009022:	e000      	b.n	8009026 <CircularQueue_Add+0x3a>
 8009024:	2300      	movs	r3, #0
 8009026:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	695b      	ldr	r3, [r3, #20]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d02a      	beq.n	8009086 <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	891b      	ldrh	r3, [r3, #8]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d123      	bne.n	8009080 <CircularQueue_Add+0x94>
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681a      	ldr	r2, [r3, #0]
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	691b      	ldr	r3, [r3, #16]
 8009040:	4413      	add	r3, r2
 8009042:	781b      	ldrb	r3, [r3, #0]
 8009044:	b29a      	uxth	r2, r3
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	6819      	ldr	r1, [r3, #0]
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	691b      	ldr	r3, [r3, #16]
 800904e:	1c58      	adds	r0, r3, #1
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	685b      	ldr	r3, [r3, #4]
 8009054:	4298      	cmp	r0, r3
 8009056:	d306      	bcc.n	8009066 <CircularQueue_Add+0x7a>
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	6918      	ldr	r0, [r3, #16]
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	1ac3      	subs	r3, r0, r3
 8009062:	3301      	adds	r3, #1
 8009064:	e002      	b.n	800906c <CircularQueue_Add+0x80>
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	691b      	ldr	r3, [r3, #16]
 800906a:	3301      	adds	r3, #1
 800906c:	440b      	add	r3, r1
 800906e:	781b      	ldrb	r3, [r3, #0]
 8009070:	b29b      	uxth	r3, r3
 8009072:	021b      	lsls	r3, r3, #8
 8009074:	b29b      	uxth	r3, r3
 8009076:	4413      	add	r3, r2
 8009078:	b29b      	uxth	r3, r3
 800907a:	3302      	adds	r3, #2
 800907c:	b29b      	uxth	r3, r3
 800907e:	e001      	b.n	8009084 <CircularQueue_Add+0x98>
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	891b      	ldrh	r3, [r3, #8]
 8009084:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	891b      	ldrh	r3, [r3, #8]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d002      	beq.n	8009094 <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	891b      	ldrh	r3, [r3, #8]
 8009092:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	691a      	ldr	r2, [r3, #16]
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	68db      	ldr	r3, [r3, #12]
 800909c:	429a      	cmp	r2, r3
 800909e:	d307      	bcc.n	80090b0 <CircularQueue_Add+0xc4>
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	685a      	ldr	r2, [r3, #4]
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	6919      	ldr	r1, [r3, #16]
 80090a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80090aa:	440b      	add	r3, r1
 80090ac:	1ad3      	subs	r3, r2, r3
 80090ae:	e000      	b.n	80090b2 <CircularQueue_Add+0xc6>
 80090b0:	2300      	movs	r3, #0
 80090b2:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 80090b4:	88fa      	ldrh	r2, [r7, #6]
 80090b6:	7ffb      	ldrb	r3, [r7, #31]
 80090b8:	4413      	add	r3, r2
 80090ba:	461a      	mov	r2, r3
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	fb03 f302 	mul.w	r3, r3, r2
 80090c2:	69ba      	ldr	r2, [r7, #24]
 80090c4:	429a      	cmp	r2, r3
 80090c6:	d80b      	bhi.n	80090e0 <CircularQueue_Add+0xf4>
 80090c8:	88fa      	ldrh	r2, [r7, #6]
 80090ca:	7ffb      	ldrb	r3, [r7, #31]
 80090cc:	4413      	add	r3, r2
 80090ce:	461a      	mov	r2, r3
 80090d0:	69bb      	ldr	r3, [r7, #24]
 80090d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80090d6:	fb02 f201 	mul.w	r2, r2, r1
 80090da:	1a9b      	subs	r3, r3, r2
 80090dc:	b2db      	uxtb	r3, r3
 80090de:	e000      	b.n	80090e2 <CircularQueue_Add+0xf6>
 80090e0:	2300      	movs	r3, #0
 80090e2:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 80090e4:	7dfa      	ldrb	r2, [r7, #23]
 80090e6:	7ffb      	ldrb	r3, [r7, #31]
 80090e8:	429a      	cmp	r2, r3
 80090ea:	bf8c      	ite	hi
 80090ec:	2301      	movhi	r3, #1
 80090ee:	2300      	movls	r3, #0
 80090f0:	b2db      	uxtb	r3, r3
 80090f2:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 80090f4:	7fbb      	ldrb	r3, [r7, #30]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d008      	beq.n	800910c <CircularQueue_Add+0x120>
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	7f1b      	ldrb	r3, [r3, #28]
 80090fe:	f003 0301 	and.w	r3, r3, #1
 8009102:	2b00      	cmp	r3, #0
 8009104:	d002      	beq.n	800910c <CircularQueue_Add+0x120>
 8009106:	7dfb      	ldrb	r3, [r7, #23]
 8009108:	b29b      	uxth	r3, r3
 800910a:	e000      	b.n	800910e <CircularQueue_Add+0x122>
 800910c:	8bbb      	ldrh	r3, [r7, #28]
 800910e:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 8009110:	7fbb      	ldrb	r3, [r7, #30]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d008      	beq.n	8009128 <CircularQueue_Add+0x13c>
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	7f1b      	ldrb	r3, [r3, #28]
 800911a:	f003 0302 	and.w	r3, r3, #2
 800911e:	2b00      	cmp	r3, #0
 8009120:	d002      	beq.n	8009128 <CircularQueue_Add+0x13c>
 8009122:	7ffb      	ldrb	r3, [r7, #31]
 8009124:	b29b      	uxth	r3, r3
 8009126:	e000      	b.n	800912a <CircularQueue_Add+0x13e>
 8009128:	8bbb      	ldrh	r3, [r7, #28]
 800912a:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800912c:	88fb      	ldrh	r3, [r7, #6]
 800912e:	2b00      	cmp	r3, #0
 8009130:	f000 817e 	beq.w	8009430 <CircularQueue_Add+0x444>
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	695a      	ldr	r2, [r3, #20]
 8009138:	88f9      	ldrh	r1, [r7, #6]
 800913a:	7ffb      	ldrb	r3, [r7, #31]
 800913c:	440b      	add	r3, r1
 800913e:	4619      	mov	r1, r3
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	fb03 f301 	mul.w	r3, r3, r1
 8009146:	441a      	add	r2, r3
 8009148:	8bbb      	ldrh	r3, [r7, #28]
 800914a:	441a      	add	r2, r3
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	685b      	ldr	r3, [r3, #4]
 8009150:	429a      	cmp	r2, r3
 8009152:	f200 816d 	bhi.w	8009430 <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 8009156:	2300      	movs	r3, #0
 8009158:	62fb      	str	r3, [r7, #44]	; 0x2c
 800915a:	e14a      	b.n	80093f2 <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	691a      	ldr	r2, [r3, #16]
 8009160:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009162:	441a      	add	r2, r3
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	429a      	cmp	r2, r3
 800916a:	d307      	bcc.n	800917c <CircularQueue_Add+0x190>
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	691a      	ldr	r2, [r3, #16]
 8009170:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009172:	441a      	add	r2, r3
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	1ad3      	subs	r3, r2, r3
 800917a:	e003      	b.n	8009184 <CircularQueue_Add+0x198>
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	691a      	ldr	r2, [r3, #16]
 8009180:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009182:	4413      	add	r3, r2
 8009184:	68fa      	ldr	r2, [r7, #12]
 8009186:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	691b      	ldr	r3, [r3, #16]
 800918c:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store fisrt the element size if element size is varaible */
      if (q->elementSize == 0) 
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	891b      	ldrh	r3, [r3, #8]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d130      	bne.n	80091f8 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681a      	ldr	r2, [r3, #0]
 800919a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800919c:	1c59      	adds	r1, r3, #1
 800919e:	6339      	str	r1, [r7, #48]	; 0x30
 80091a0:	4413      	add	r3, r2
 80091a2:	88fa      	ldrh	r2, [r7, #6]
 80091a4:	b2d2      	uxtb	r2, r2
 80091a6:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	685b      	ldr	r3, [r3, #4]
 80091ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091ae:	429a      	cmp	r2, r3
 80091b0:	d304      	bcc.n	80091bc <CircularQueue_Add+0x1d0>
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	685b      	ldr	r3, [r3, #4]
 80091b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091b8:	1ad3      	subs	r3, r2, r3
 80091ba:	e000      	b.n	80091be <CircularQueue_Add+0x1d2>
 80091bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091be:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 80091c0:	88fb      	ldrh	r3, [r7, #6]
 80091c2:	0a1b      	lsrs	r3, r3, #8
 80091c4:	b298      	uxth	r0, r3
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681a      	ldr	r2, [r3, #0]
 80091ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091cc:	1c59      	adds	r1, r3, #1
 80091ce:	6339      	str	r1, [r7, #48]	; 0x30
 80091d0:	4413      	add	r3, r2
 80091d2:	b2c2      	uxtb	r2, r0
 80091d4:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	685b      	ldr	r3, [r3, #4]
 80091da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091dc:	429a      	cmp	r2, r3
 80091de:	d304      	bcc.n	80091ea <CircularQueue_Add+0x1fe>
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091e6:	1ad3      	subs	r3, r2, r3
 80091e8:	e000      	b.n	80091ec <CircularQueue_Add+0x200>
 80091ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ec:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	695b      	ldr	r3, [r3, #20]
 80091f2:	1c9a      	adds	r2, r3, #2
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 80091f8:	88fa      	ldrh	r2, [r7, #6]
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	6859      	ldr	r1, [r3, #4]
 80091fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009200:	1acb      	subs	r3, r1, r3
 8009202:	4293      	cmp	r3, r2
 8009204:	bf28      	it	cs
 8009206:	4613      	movcs	r3, r2
 8009208:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In thi case part of data will copied at the end of the buffer and the rest a the beggining */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800920a:	88fb      	ldrh	r3, [r7, #6]
 800920c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800920e:	429a      	cmp	r2, r3
 8009210:	d007      	beq.n	8009222 <CircularQueue_Add+0x236>
 8009212:	88fb      	ldrh	r3, [r7, #6]
 8009214:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009216:	429a      	cmp	r2, r3
 8009218:	d225      	bcs.n	8009266 <CircularQueue_Add+0x27a>
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	7f1b      	ldrb	r3, [r3, #28]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d121      	bne.n	8009266 <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681a      	ldr	r2, [r3, #0]
 8009226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009228:	18d0      	adds	r0, r2, r3
 800922a:	88fb      	ldrh	r3, [r7, #6]
 800922c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800922e:	fb02 f303 	mul.w	r3, r2, r3
 8009232:	68ba      	ldr	r2, [r7, #8]
 8009234:	4413      	add	r3, r2
 8009236:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009238:	4619      	mov	r1, r3
 800923a:	f000 fad1 	bl	80097e0 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	695a      	ldr	r2, [r3, #20]
 8009242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009244:	441a      	add	r2, r3
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800924a:	2300      	movs	r3, #0
 800924c:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800924e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009250:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 8009252:	88fa      	ldrh	r2, [r7, #6]
 8009254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009256:	1ad3      	subs	r3, r2, r3
 8009258:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beggining of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800925a:	7ffb      	ldrb	r3, [r7, #31]
 800925c:	b29a      	uxth	r2, r3
 800925e:	88fb      	ldrh	r3, [r7, #6]
 8009260:	4413      	add	r3, r2
 8009262:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009264:	e0a4      	b.n	80093b0 <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 8009266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009268:	2b00      	cmp	r3, #0
 800926a:	f000 80a1 	beq.w	80093b0 <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	7f1b      	ldrb	r3, [r3, #28]
 8009272:	f003 0301 	and.w	r3, r3, #1
 8009276:	2b00      	cmp	r3, #0
 8009278:	d03a      	beq.n	80092f0 <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	891b      	ldrh	r3, [r3, #8]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d10d      	bne.n	800929e <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681a      	ldr	r2, [r3, #0]
 8009286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009288:	3b02      	subs	r3, #2
 800928a:	4413      	add	r3, r2
 800928c:	22ff      	movs	r2, #255	; 0xff
 800928e:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681a      	ldr	r2, [r3, #0]
 8009294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009296:	3b01      	subs	r3, #1
 8009298:	4413      	add	r3, r2
 800929a:	22ff      	movs	r2, #255	; 0xff
 800929c:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	695a      	ldr	r2, [r3, #20]
 80092a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092a4:	441a      	add	r2, r3
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 80092aa:	2300      	movs	r3, #0
 80092ac:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 80092ae:	88fb      	ldrh	r3, [r7, #6]
 80092b0:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 80092b2:	2300      	movs	r3, #0
 80092b4:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	891b      	ldrh	r3, [r3, #8]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d16f      	bne.n	800939e <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681a      	ldr	r2, [r3, #0]
 80092c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c4:	1c59      	adds	r1, r3, #1
 80092c6:	6339      	str	r1, [r7, #48]	; 0x30
 80092c8:	4413      	add	r3, r2
 80092ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80092cc:	b2d2      	uxtb	r2, r2
 80092ce:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 80092d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092d2:	0a18      	lsrs	r0, r3, #8
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681a      	ldr	r2, [r3, #0]
 80092d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092da:	1c59      	adds	r1, r3, #1
 80092dc:	6339      	str	r1, [r7, #48]	; 0x30
 80092de:	4413      	add	r3, r2
 80092e0:	b2c2      	uxtb	r2, r0
 80092e2:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	695b      	ldr	r3, [r3, #20]
 80092e8:	1c9a      	adds	r2, r3, #2
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	615a      	str	r2, [r3, #20]
 80092ee:	e056      	b.n	800939e <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	7f1b      	ldrb	r3, [r3, #28]
 80092f4:	f003 0302 	and.w	r3, r3, #2
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d050      	beq.n	800939e <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	891b      	ldrh	r3, [r3, #8]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d14a      	bne.n	800939a <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681a      	ldr	r2, [r3, #0]
 8009308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800930a:	3b02      	subs	r3, #2
 800930c:	4413      	add	r3, r2
 800930e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009310:	b2d2      	uxtb	r2, r2
 8009312:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8009314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009316:	0a19      	lsrs	r1, r3, #8
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681a      	ldr	r2, [r3, #0]
 800931c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800931e:	3b01      	subs	r3, #1
 8009320:	4413      	add	r3, r2
 8009322:	b2ca      	uxtb	r2, r1
 8009324:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681a      	ldr	r2, [r3, #0]
 800932a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800932c:	18d0      	adds	r0, r2, r3
 800932e:	88fb      	ldrh	r3, [r7, #6]
 8009330:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009332:	fb02 f303 	mul.w	r3, r2, r3
 8009336:	68ba      	ldr	r2, [r7, #8]
 8009338:	4413      	add	r3, r2
 800933a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800933c:	4619      	mov	r1, r3
 800933e:	f000 fa4f 	bl	80097e0 <memcpy>
             q->byteCount += NbBytesToCopy; 
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	695a      	ldr	r2, [r3, #20]
 8009346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009348:	441a      	add	r2, r3
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800934e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009350:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 8009352:	88fa      	ldrh	r2, [r7, #6]
 8009354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009356:	1ad3      	subs	r3, r2, r3
 8009358:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	699b      	ldr	r3, [r3, #24]
 800935e:	1c5a      	adds	r2, r3, #1
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 8009364:	2300      	movs	r3, #0
 8009366:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681a      	ldr	r2, [r3, #0]
 800936c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800936e:	1c59      	adds	r1, r3, #1
 8009370:	6339      	str	r1, [r7, #48]	; 0x30
 8009372:	4413      	add	r3, r2
 8009374:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009376:	b2d2      	uxtb	r2, r2
 8009378:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800937a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800937c:	0a18      	lsrs	r0, r3, #8
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681a      	ldr	r2, [r3, #0]
 8009382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009384:	1c59      	adds	r1, r3, #1
 8009386:	6339      	str	r1, [r7, #48]	; 0x30
 8009388:	4413      	add	r3, r2
 800938a:	b2c2      	uxtb	r2, r0
 800938c:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	695b      	ldr	r3, [r3, #20]
 8009392:	1c9a      	adds	r2, r3, #2
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	615a      	str	r2, [r3, #20]
 8009398:	e001      	b.n	800939e <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800939a:	2300      	movs	r3, #0
 800939c:	e049      	b.n	8009432 <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800939e:	7ffb      	ldrb	r3, [r7, #31]
 80093a0:	b29a      	uxth	r2, r3
 80093a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093a4:	b29b      	uxth	r3, r3
 80093a6:	4413      	add	r3, r2
 80093a8:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	2200      	movs	r2, #0
 80093ae:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaning byte to copy */
      if (NbBytesToCopy)      
 80093b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d015      	beq.n	80093e2 <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093bc:	18d0      	adds	r0, r2, r3
 80093be:	88fb      	ldrh	r3, [r7, #6]
 80093c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093c2:	fb02 f203 	mul.w	r2, r2, r3
 80093c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c8:	4413      	add	r3, r2
 80093ca:	68ba      	ldr	r2, [r7, #8]
 80093cc:	4413      	add	r3, r2
 80093ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093d0:	4619      	mov	r1, r3
 80093d2:	f000 fa05 	bl	80097e0 <memcpy>
        q->byteCount += NbBytesToCopy;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	695a      	ldr	r2, [r3, #20]
 80093da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093dc:	441a      	add	r2, r3
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	699b      	ldr	r3, [r3, #24]
 80093e6:	1c5a      	adds	r2, r3, #1
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 80093ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ee:	3301      	adds	r3, #1
 80093f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80093f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	429a      	cmp	r2, r3
 80093f8:	f4ff aeb0 	bcc.w	800915c <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681a      	ldr	r2, [r3, #0]
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	6919      	ldr	r1, [r3, #16]
 8009404:	7ffb      	ldrb	r3, [r7, #31]
 8009406:	4419      	add	r1, r3
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	685b      	ldr	r3, [r3, #4]
 800940c:	4299      	cmp	r1, r3
 800940e:	d307      	bcc.n	8009420 <CircularQueue_Add+0x434>
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	6919      	ldr	r1, [r3, #16]
 8009414:	7ffb      	ldrb	r3, [r7, #31]
 8009416:	4419      	add	r1, r3
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	1acb      	subs	r3, r1, r3
 800941e:	e003      	b.n	8009428 <CircularQueue_Add+0x43c>
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	6919      	ldr	r1, [r3, #16]
 8009424:	7ffb      	ldrb	r3, [r7, #31]
 8009426:	440b      	add	r3, r1
 8009428:	4413      	add	r3, r2
 800942a:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800942c:	6a3b      	ldr	r3, [r7, #32]
 800942e:	e000      	b.n	8009432 <CircularQueue_Add+0x446>
    return NULL;
 8009430:	2300      	movs	r3, #0
}
 8009432:	4618      	mov	r0, r3
 8009434:	3738      	adds	r7, #56	; 0x38
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}

0800943a <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed  
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800943a:	b480      	push	{r7}
 800943c:	b085      	sub	sp, #20
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
 8009442:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 8009444:	2300      	movs	r3, #0
 8009446:	72fb      	strb	r3, [r7, #11]
  uint8_t* ptr= NULL;
 8009448:	2300      	movs	r3, #0
 800944a:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	891b      	ldrh	r3, [r3, #8]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d101      	bne.n	8009458 <CircularQueue_Remove+0x1e>
 8009454:	2302      	movs	r3, #2
 8009456:	e000      	b.n	800945a <CircularQueue_Remove+0x20>
 8009458:	2300      	movs	r3, #0
 800945a:	72fb      	strb	r3, [r7, #11]
  *elementSize = 0;
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	2200      	movs	r2, #0
 8009460:	801a      	strh	r2, [r3, #0]
  if (q->byteCount > 0) 
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	695b      	ldr	r3, [r3, #20]
 8009466:	2b00      	cmp	r3, #0
 8009468:	f000 80d4 	beq.w	8009614 <CircularQueue_Remove+0x1da>
  {
    /* retreive element Size */
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	891b      	ldrh	r3, [r3, #8]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d121      	bne.n	80094b8 <CircularQueue_Remove+0x7e>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681a      	ldr	r2, [r3, #0]
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	68db      	ldr	r3, [r3, #12]
 800947c:	4413      	add	r3, r2
 800947e:	781b      	ldrb	r3, [r3, #0]
 8009480:	b29a      	uxth	r2, r3
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6819      	ldr	r1, [r3, #0]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	68db      	ldr	r3, [r3, #12]
 800948a:	1c58      	adds	r0, r3, #1
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	4298      	cmp	r0, r3
 8009492:	d306      	bcc.n	80094a2 <CircularQueue_Remove+0x68>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	68d8      	ldr	r0, [r3, #12]
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	685b      	ldr	r3, [r3, #4]
 800949c:	1ac3      	subs	r3, r0, r3
 800949e:	3301      	adds	r3, #1
 80094a0:	e002      	b.n	80094a8 <CircularQueue_Remove+0x6e>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	68db      	ldr	r3, [r3, #12]
 80094a6:	3301      	adds	r3, #1
 80094a8:	440b      	add	r3, r1
 80094aa:	781b      	ldrb	r3, [r3, #0]
 80094ac:	b29b      	uxth	r3, r3
 80094ae:	021b      	lsls	r3, r3, #8
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	4413      	add	r3, r2
 80094b4:	b29b      	uxth	r3, r3
 80094b6:	e001      	b.n	80094bc <CircularQueue_Remove+0x82>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	891b      	ldrh	r3, [r3, #8]
 80094bc:	683a      	ldr	r2, [r7, #0]
 80094be:	8013      	strh	r3, [r2, #0]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	7f1b      	ldrb	r3, [r3, #28]
 80094c4:	f003 0301 	and.w	r3, r3, #1
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d059      	beq.n	8009580 <CircularQueue_Remove+0x146>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	7f1b      	ldrb	r3, [r3, #28]
 80094d0:	f003 0302 	and.w	r3, r3, #2
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d153      	bne.n	8009580 <CircularQueue_Remove+0x146>
     {
       if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	881b      	ldrh	r3, [r3, #0]
 80094dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d103      	bne.n	80094ec <CircularQueue_Remove+0xb2>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	891b      	ldrh	r3, [r3, #8]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d012      	beq.n	8009512 <CircularQueue_Remove+0xd8>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	68da      	ldr	r2, [r3, #12]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	691b      	ldr	r3, [r3, #16]
       if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 80094f4:	429a      	cmp	r2, r3
 80094f6:	d943      	bls.n	8009580 <CircularQueue_Remove+0x146>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	891b      	ldrh	r3, [r3, #8]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d03f      	beq.n	8009580 <CircularQueue_Remove+0x146>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	685a      	ldr	r2, [r3, #4]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	68db      	ldr	r3, [r3, #12]
 8009508:	1ad3      	subs	r3, r2, r3
 800950a:	687a      	ldr	r2, [r7, #4]
 800950c:	8912      	ldrh	r2, [r2, #8]
 800950e:	4293      	cmp	r3, r2
 8009510:	d236      	bcs.n	8009580 <CircularQueue_Remove+0x146>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	695a      	ldr	r2, [r3, #20]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	68d9      	ldr	r1, [r3, #12]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	685b      	ldr	r3, [r3, #4]
 800951e:	1acb      	subs	r3, r1, r3
 8009520:	441a      	add	r2, r3
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2200      	movs	r2, #0
 800952a:	60da      	str	r2, [r3, #12]
          /* retrieve the rigth size after the wrap [if varaible size element] */
          *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	891b      	ldrh	r3, [r3, #8]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d121      	bne.n	8009578 <CircularQueue_Remove+0x13e>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681a      	ldr	r2, [r3, #0]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	68db      	ldr	r3, [r3, #12]
 800953c:	4413      	add	r3, r2
 800953e:	781b      	ldrb	r3, [r3, #0]
 8009540:	b29a      	uxth	r2, r3
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6819      	ldr	r1, [r3, #0]
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	68db      	ldr	r3, [r3, #12]
 800954a:	1c58      	adds	r0, r3, #1
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	685b      	ldr	r3, [r3, #4]
 8009550:	4298      	cmp	r0, r3
 8009552:	d306      	bcc.n	8009562 <CircularQueue_Remove+0x128>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	68d8      	ldr	r0, [r3, #12]
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	1ac3      	subs	r3, r0, r3
 800955e:	3301      	adds	r3, #1
 8009560:	e002      	b.n	8009568 <CircularQueue_Remove+0x12e>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	68db      	ldr	r3, [r3, #12]
 8009566:	3301      	adds	r3, #1
 8009568:	440b      	add	r3, r1
 800956a:	781b      	ldrb	r3, [r3, #0]
 800956c:	b29b      	uxth	r3, r3
 800956e:	021b      	lsls	r3, r3, #8
 8009570:	b29b      	uxth	r3, r3
 8009572:	4413      	add	r3, r2
 8009574:	b29b      	uxth	r3, r3
 8009576:	e001      	b.n	800957c <CircularQueue_Remove+0x142>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	891b      	ldrh	r3, [r3, #8]
 800957c:	683a      	ldr	r2, [r7, #0]
 800957e:	8013      	strh	r3, [r2, #0]
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681a      	ldr	r2, [r3, #0]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	68d9      	ldr	r1, [r3, #12]
 8009588:	7afb      	ldrb	r3, [r7, #11]
 800958a:	4419      	add	r1, r3
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	4299      	cmp	r1, r3
 8009592:	d307      	bcc.n	80095a4 <CircularQueue_Remove+0x16a>
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	68d9      	ldr	r1, [r3, #12]
 8009598:	7afb      	ldrb	r3, [r7, #11]
 800959a:	4419      	add	r1, r3
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	685b      	ldr	r3, [r3, #4]
 80095a0:	1acb      	subs	r3, r1, r3
 80095a2:	e003      	b.n	80095ac <CircularQueue_Remove+0x172>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	68d9      	ldr	r1, [r3, #12]
 80095a8:	7afb      	ldrb	r3, [r7, #11]
 80095aa:	440b      	add	r3, r1
 80095ac:	4413      	add	r3, r2
 80095ae:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (*elementSize + elemSizeStorageRoom) ;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	695b      	ldr	r3, [r3, #20]
 80095b4:	683a      	ldr	r2, [r7, #0]
 80095b6:	8812      	ldrh	r2, [r2, #0]
 80095b8:	4611      	mov	r1, r2
 80095ba:	7afa      	ldrb	r2, [r7, #11]
 80095bc:	440a      	add	r2, r1
 80095be:	1a9a      	subs	r2, r3, r2
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	695b      	ldr	r3, [r3, #20]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d01e      	beq.n	800960a <CircularQueue_Remove+0x1d0>
    {
      q->first = MOD((q->first+ *elementSize + elemSizeStorageRoom ), q->queueMaxSize);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	68db      	ldr	r3, [r3, #12]
 80095d0:	683a      	ldr	r2, [r7, #0]
 80095d2:	8812      	ldrh	r2, [r2, #0]
 80095d4:	441a      	add	r2, r3
 80095d6:	7afb      	ldrb	r3, [r7, #11]
 80095d8:	441a      	add	r2, r3
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	685b      	ldr	r3, [r3, #4]
 80095de:	429a      	cmp	r2, r3
 80095e0:	d30a      	bcc.n	80095f8 <CircularQueue_Remove+0x1be>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	68db      	ldr	r3, [r3, #12]
 80095e6:	683a      	ldr	r2, [r7, #0]
 80095e8:	8812      	ldrh	r2, [r2, #0]
 80095ea:	441a      	add	r2, r3
 80095ec:	7afb      	ldrb	r3, [r7, #11]
 80095ee:	441a      	add	r2, r3
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	685b      	ldr	r3, [r3, #4]
 80095f4:	1ad3      	subs	r3, r2, r3
 80095f6:	e006      	b.n	8009606 <CircularQueue_Remove+0x1cc>
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	68db      	ldr	r3, [r3, #12]
 80095fc:	683a      	ldr	r2, [r7, #0]
 80095fe:	8812      	ldrh	r2, [r2, #0]
 8009600:	441a      	add	r2, r3
 8009602:	7afb      	ldrb	r3, [r7, #11]
 8009604:	4413      	add	r3, r2
 8009606:	687a      	ldr	r2, [r7, #4]
 8009608:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	699b      	ldr	r3, [r3, #24]
 800960e:	1e5a      	subs	r2, r3, #1
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	619a      	str	r2, [r3, #24]
  }
  return ptr;
 8009614:	68fb      	ldr	r3, [r7, #12]
}
 8009616:	4618      	mov	r0, r3
 8009618:	3714      	adds	r7, #20
 800961a:	46bd      	mov	sp, r7
 800961c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009620:	4770      	bx	lr

08009622 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed  
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 8009622:	b480      	push	{r7}
 8009624:	b087      	sub	sp, #28
 8009626:	af00      	add	r7, sp, #0
 8009628:	6078      	str	r0, [r7, #4]
 800962a:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800962c:	2300      	movs	r3, #0
 800962e:	73fb      	strb	r3, [r7, #15]
  uint8_t* x= NULL;
 8009630:	2300      	movs	r3, #0
 8009632:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	891b      	ldrh	r3, [r3, #8]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d101      	bne.n	8009640 <CircularQueue_Sense+0x1e>
 800963c:	2302      	movs	r3, #2
 800963e:	e000      	b.n	8009642 <CircularQueue_Sense+0x20>
 8009640:	2300      	movs	r3, #0
 8009642:	73fb      	strb	r3, [r7, #15]
  *elementSize = 0;
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	2200      	movs	r2, #0
 8009648:	801a      	strh	r2, [r3, #0]
  uint32_t FirstElemetPos = 0;
 800964a:	2300      	movs	r3, #0
 800964c:	613b      	str	r3, [r7, #16]
    
  if (q->byteCount > 0) 
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	695b      	ldr	r3, [r3, #20]
 8009652:	2b00      	cmp	r3, #0
 8009654:	f000 8093 	beq.w	800977e <CircularQueue_Sense+0x15c>
  {
    FirstElemetPos = q->first;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	68db      	ldr	r3, [r3, #12]
 800965c:	613b      	str	r3, [r7, #16]
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	891b      	ldrh	r3, [r3, #8]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d121      	bne.n	80096aa <CircularQueue_Sense+0x88>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681a      	ldr	r2, [r3, #0]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	68db      	ldr	r3, [r3, #12]
 800966e:	4413      	add	r3, r2
 8009670:	781b      	ldrb	r3, [r3, #0]
 8009672:	b29a      	uxth	r2, r3
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6819      	ldr	r1, [r3, #0]
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	68db      	ldr	r3, [r3, #12]
 800967c:	1c58      	adds	r0, r3, #1
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	685b      	ldr	r3, [r3, #4]
 8009682:	4298      	cmp	r0, r3
 8009684:	d306      	bcc.n	8009694 <CircularQueue_Sense+0x72>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	68d8      	ldr	r0, [r3, #12]
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	685b      	ldr	r3, [r3, #4]
 800968e:	1ac3      	subs	r3, r0, r3
 8009690:	3301      	adds	r3, #1
 8009692:	e002      	b.n	800969a <CircularQueue_Sense+0x78>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	68db      	ldr	r3, [r3, #12]
 8009698:	3301      	adds	r3, #1
 800969a:	440b      	add	r3, r1
 800969c:	781b      	ldrb	r3, [r3, #0]
 800969e:	b29b      	uxth	r3, r3
 80096a0:	021b      	lsls	r3, r3, #8
 80096a2:	b29b      	uxth	r3, r3
 80096a4:	4413      	add	r3, r2
 80096a6:	b29b      	uxth	r3, r3
 80096a8:	e001      	b.n	80096ae <CircularQueue_Sense+0x8c>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	891b      	ldrh	r3, [r3, #8]
 80096ae:	683a      	ldr	r2, [r7, #0]
 80096b0:	8013      	strh	r3, [r2, #0]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	7f1b      	ldrb	r3, [r3, #28]
 80096b6:	f003 0301 	and.w	r3, r3, #1
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d04a      	beq.n	8009754 <CircularQueue_Sense+0x132>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	7f1b      	ldrb	r3, [r3, #28]
 80096c2:	f003 0302 	and.w	r3, r3, #2
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d144      	bne.n	8009754 <CircularQueue_Sense+0x132>
    { 
      if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	881b      	ldrh	r3, [r3, #0]
 80096ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d103      	bne.n	80096de <CircularQueue_Sense+0xbc>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	891b      	ldrh	r3, [r3, #8]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d012      	beq.n	8009704 <CircularQueue_Sense+0xe2>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	68da      	ldr	r2, [r3, #12]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	691b      	ldr	r3, [r3, #16]
      if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 80096e6:	429a      	cmp	r2, r3
 80096e8:	d934      	bls.n	8009754 <CircularQueue_Sense+0x132>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	891b      	ldrh	r3, [r3, #8]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d030      	beq.n	8009754 <CircularQueue_Sense+0x132>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	685a      	ldr	r2, [r3, #4]
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	68db      	ldr	r3, [r3, #12]
 80096fa:	1ad3      	subs	r3, r2, r3
 80096fc:	687a      	ldr	r2, [r7, #4]
 80096fe:	8912      	ldrh	r2, [r2, #8]
 8009700:	4293      	cmp	r3, r2
 8009702:	d227      	bcs.n	8009754 <CircularQueue_Sense+0x132>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 8009704:	2300      	movs	r3, #0
 8009706:	613b      	str	r3, [r7, #16]

        /* retrieve the rigth size after the wrap [if varaible size element] */
        *elementSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	891b      	ldrh	r3, [r3, #8]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d11d      	bne.n	800974c <CircularQueue_Sense+0x12a>
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681a      	ldr	r2, [r3, #0]
 8009714:	693b      	ldr	r3, [r7, #16]
 8009716:	4413      	add	r3, r2
 8009718:	781b      	ldrb	r3, [r3, #0]
 800971a:	b29a      	uxth	r2, r3
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6819      	ldr	r1, [r3, #0]
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	1c58      	adds	r0, r3, #1
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	685b      	ldr	r3, [r3, #4]
 8009728:	4298      	cmp	r0, r3
 800972a:	d305      	bcc.n	8009738 <CircularQueue_Sense+0x116>
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	6938      	ldr	r0, [r7, #16]
 8009732:	1ac3      	subs	r3, r0, r3
 8009734:	3301      	adds	r3, #1
 8009736:	e001      	b.n	800973c <CircularQueue_Sense+0x11a>
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	3301      	adds	r3, #1
 800973c:	440b      	add	r3, r1
 800973e:	781b      	ldrb	r3, [r3, #0]
 8009740:	b29b      	uxth	r3, r3
 8009742:	021b      	lsls	r3, r3, #8
 8009744:	b29b      	uxth	r3, r3
 8009746:	4413      	add	r3, r2
 8009748:	b29b      	uxth	r3, r3
 800974a:	e001      	b.n	8009750 <CircularQueue_Sense+0x12e>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	891b      	ldrh	r3, [r3, #8]
 8009750:	683a      	ldr	r2, [r7, #0]
 8009752:	8013      	strh	r3, [r2, #0]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681a      	ldr	r2, [r3, #0]
 8009758:	7bf9      	ldrb	r1, [r7, #15]
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	4419      	add	r1, r3
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	685b      	ldr	r3, [r3, #4]
 8009762:	4299      	cmp	r1, r3
 8009764:	d306      	bcc.n	8009774 <CircularQueue_Sense+0x152>
 8009766:	7bf9      	ldrb	r1, [r7, #15]
 8009768:	693b      	ldr	r3, [r7, #16]
 800976a:	4419      	add	r1, r3
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	685b      	ldr	r3, [r3, #4]
 8009770:	1acb      	subs	r3, r1, r3
 8009772:	e002      	b.n	800977a <CircularQueue_Sense+0x158>
 8009774:	7bf9      	ldrb	r1, [r7, #15]
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	440b      	add	r3, r1
 800977a:	4413      	add	r3, r2
 800977c:	617b      	str	r3, [r7, #20]
  }
  return x;
 800977e:	697b      	ldr	r3, [r7, #20]
}
 8009780:	4618      	mov	r0, r3
 8009782:	371c      	adds	r7, #28
 8009784:	46bd      	mov	sp, r7
 8009786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978a:	4770      	bx	lr

0800978c <__errno>:
 800978c:	4b01      	ldr	r3, [pc, #4]	; (8009794 <__errno+0x8>)
 800978e:	6818      	ldr	r0, [r3, #0]
 8009790:	4770      	bx	lr
 8009792:	bf00      	nop
 8009794:	20000030 	.word	0x20000030

08009798 <__libc_init_array>:
 8009798:	b570      	push	{r4, r5, r6, lr}
 800979a:	4d0d      	ldr	r5, [pc, #52]	; (80097d0 <__libc_init_array+0x38>)
 800979c:	4c0d      	ldr	r4, [pc, #52]	; (80097d4 <__libc_init_array+0x3c>)
 800979e:	1b64      	subs	r4, r4, r5
 80097a0:	10a4      	asrs	r4, r4, #2
 80097a2:	2600      	movs	r6, #0
 80097a4:	42a6      	cmp	r6, r4
 80097a6:	d109      	bne.n	80097bc <__libc_init_array+0x24>
 80097a8:	4d0b      	ldr	r5, [pc, #44]	; (80097d8 <__libc_init_array+0x40>)
 80097aa:	4c0c      	ldr	r4, [pc, #48]	; (80097dc <__libc_init_array+0x44>)
 80097ac:	f000 fcf4 	bl	800a198 <_init>
 80097b0:	1b64      	subs	r4, r4, r5
 80097b2:	10a4      	asrs	r4, r4, #2
 80097b4:	2600      	movs	r6, #0
 80097b6:	42a6      	cmp	r6, r4
 80097b8:	d105      	bne.n	80097c6 <__libc_init_array+0x2e>
 80097ba:	bd70      	pop	{r4, r5, r6, pc}
 80097bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80097c0:	4798      	blx	r3
 80097c2:	3601      	adds	r6, #1
 80097c4:	e7ee      	b.n	80097a4 <__libc_init_array+0xc>
 80097c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80097ca:	4798      	blx	r3
 80097cc:	3601      	adds	r6, #1
 80097ce:	e7f2      	b.n	80097b6 <__libc_init_array+0x1e>
 80097d0:	0800a548 	.word	0x0800a548
 80097d4:	0800a548 	.word	0x0800a548
 80097d8:	0800a548 	.word	0x0800a548
 80097dc:	0800a54c 	.word	0x0800a54c

080097e0 <memcpy>:
 80097e0:	440a      	add	r2, r1
 80097e2:	4291      	cmp	r1, r2
 80097e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80097e8:	d100      	bne.n	80097ec <memcpy+0xc>
 80097ea:	4770      	bx	lr
 80097ec:	b510      	push	{r4, lr}
 80097ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80097f6:	4291      	cmp	r1, r2
 80097f8:	d1f9      	bne.n	80097ee <memcpy+0xe>
 80097fa:	bd10      	pop	{r4, pc}

080097fc <memset>:
 80097fc:	4402      	add	r2, r0
 80097fe:	4603      	mov	r3, r0
 8009800:	4293      	cmp	r3, r2
 8009802:	d100      	bne.n	8009806 <memset+0xa>
 8009804:	4770      	bx	lr
 8009806:	f803 1b01 	strb.w	r1, [r3], #1
 800980a:	e7f9      	b.n	8009800 <memset+0x4>

0800980c <_puts_r>:
 800980c:	b570      	push	{r4, r5, r6, lr}
 800980e:	460e      	mov	r6, r1
 8009810:	4605      	mov	r5, r0
 8009812:	b118      	cbz	r0, 800981c <_puts_r+0x10>
 8009814:	6983      	ldr	r3, [r0, #24]
 8009816:	b90b      	cbnz	r3, 800981c <_puts_r+0x10>
 8009818:	f000 fa48 	bl	8009cac <__sinit>
 800981c:	69ab      	ldr	r3, [r5, #24]
 800981e:	68ac      	ldr	r4, [r5, #8]
 8009820:	b913      	cbnz	r3, 8009828 <_puts_r+0x1c>
 8009822:	4628      	mov	r0, r5
 8009824:	f000 fa42 	bl	8009cac <__sinit>
 8009828:	4b2c      	ldr	r3, [pc, #176]	; (80098dc <_puts_r+0xd0>)
 800982a:	429c      	cmp	r4, r3
 800982c:	d120      	bne.n	8009870 <_puts_r+0x64>
 800982e:	686c      	ldr	r4, [r5, #4]
 8009830:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009832:	07db      	lsls	r3, r3, #31
 8009834:	d405      	bmi.n	8009842 <_puts_r+0x36>
 8009836:	89a3      	ldrh	r3, [r4, #12]
 8009838:	0598      	lsls	r0, r3, #22
 800983a:	d402      	bmi.n	8009842 <_puts_r+0x36>
 800983c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800983e:	f000 fad3 	bl	8009de8 <__retarget_lock_acquire_recursive>
 8009842:	89a3      	ldrh	r3, [r4, #12]
 8009844:	0719      	lsls	r1, r3, #28
 8009846:	d51d      	bpl.n	8009884 <_puts_r+0x78>
 8009848:	6923      	ldr	r3, [r4, #16]
 800984a:	b1db      	cbz	r3, 8009884 <_puts_r+0x78>
 800984c:	3e01      	subs	r6, #1
 800984e:	68a3      	ldr	r3, [r4, #8]
 8009850:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009854:	3b01      	subs	r3, #1
 8009856:	60a3      	str	r3, [r4, #8]
 8009858:	bb39      	cbnz	r1, 80098aa <_puts_r+0x9e>
 800985a:	2b00      	cmp	r3, #0
 800985c:	da38      	bge.n	80098d0 <_puts_r+0xc4>
 800985e:	4622      	mov	r2, r4
 8009860:	210a      	movs	r1, #10
 8009862:	4628      	mov	r0, r5
 8009864:	f000 f848 	bl	80098f8 <__swbuf_r>
 8009868:	3001      	adds	r0, #1
 800986a:	d011      	beq.n	8009890 <_puts_r+0x84>
 800986c:	250a      	movs	r5, #10
 800986e:	e011      	b.n	8009894 <_puts_r+0x88>
 8009870:	4b1b      	ldr	r3, [pc, #108]	; (80098e0 <_puts_r+0xd4>)
 8009872:	429c      	cmp	r4, r3
 8009874:	d101      	bne.n	800987a <_puts_r+0x6e>
 8009876:	68ac      	ldr	r4, [r5, #8]
 8009878:	e7da      	b.n	8009830 <_puts_r+0x24>
 800987a:	4b1a      	ldr	r3, [pc, #104]	; (80098e4 <_puts_r+0xd8>)
 800987c:	429c      	cmp	r4, r3
 800987e:	bf08      	it	eq
 8009880:	68ec      	ldreq	r4, [r5, #12]
 8009882:	e7d5      	b.n	8009830 <_puts_r+0x24>
 8009884:	4621      	mov	r1, r4
 8009886:	4628      	mov	r0, r5
 8009888:	f000 f888 	bl	800999c <__swsetup_r>
 800988c:	2800      	cmp	r0, #0
 800988e:	d0dd      	beq.n	800984c <_puts_r+0x40>
 8009890:	f04f 35ff 	mov.w	r5, #4294967295
 8009894:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009896:	07da      	lsls	r2, r3, #31
 8009898:	d405      	bmi.n	80098a6 <_puts_r+0x9a>
 800989a:	89a3      	ldrh	r3, [r4, #12]
 800989c:	059b      	lsls	r3, r3, #22
 800989e:	d402      	bmi.n	80098a6 <_puts_r+0x9a>
 80098a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098a2:	f000 faa2 	bl	8009dea <__retarget_lock_release_recursive>
 80098a6:	4628      	mov	r0, r5
 80098a8:	bd70      	pop	{r4, r5, r6, pc}
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	da04      	bge.n	80098b8 <_puts_r+0xac>
 80098ae:	69a2      	ldr	r2, [r4, #24]
 80098b0:	429a      	cmp	r2, r3
 80098b2:	dc06      	bgt.n	80098c2 <_puts_r+0xb6>
 80098b4:	290a      	cmp	r1, #10
 80098b6:	d004      	beq.n	80098c2 <_puts_r+0xb6>
 80098b8:	6823      	ldr	r3, [r4, #0]
 80098ba:	1c5a      	adds	r2, r3, #1
 80098bc:	6022      	str	r2, [r4, #0]
 80098be:	7019      	strb	r1, [r3, #0]
 80098c0:	e7c5      	b.n	800984e <_puts_r+0x42>
 80098c2:	4622      	mov	r2, r4
 80098c4:	4628      	mov	r0, r5
 80098c6:	f000 f817 	bl	80098f8 <__swbuf_r>
 80098ca:	3001      	adds	r0, #1
 80098cc:	d1bf      	bne.n	800984e <_puts_r+0x42>
 80098ce:	e7df      	b.n	8009890 <_puts_r+0x84>
 80098d0:	6823      	ldr	r3, [r4, #0]
 80098d2:	250a      	movs	r5, #10
 80098d4:	1c5a      	adds	r2, r3, #1
 80098d6:	6022      	str	r2, [r4, #0]
 80098d8:	701d      	strb	r5, [r3, #0]
 80098da:	e7db      	b.n	8009894 <_puts_r+0x88>
 80098dc:	0800a500 	.word	0x0800a500
 80098e0:	0800a520 	.word	0x0800a520
 80098e4:	0800a4e0 	.word	0x0800a4e0

080098e8 <puts>:
 80098e8:	4b02      	ldr	r3, [pc, #8]	; (80098f4 <puts+0xc>)
 80098ea:	4601      	mov	r1, r0
 80098ec:	6818      	ldr	r0, [r3, #0]
 80098ee:	f7ff bf8d 	b.w	800980c <_puts_r>
 80098f2:	bf00      	nop
 80098f4:	20000030 	.word	0x20000030

080098f8 <__swbuf_r>:
 80098f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098fa:	460e      	mov	r6, r1
 80098fc:	4614      	mov	r4, r2
 80098fe:	4605      	mov	r5, r0
 8009900:	b118      	cbz	r0, 800990a <__swbuf_r+0x12>
 8009902:	6983      	ldr	r3, [r0, #24]
 8009904:	b90b      	cbnz	r3, 800990a <__swbuf_r+0x12>
 8009906:	f000 f9d1 	bl	8009cac <__sinit>
 800990a:	4b21      	ldr	r3, [pc, #132]	; (8009990 <__swbuf_r+0x98>)
 800990c:	429c      	cmp	r4, r3
 800990e:	d12b      	bne.n	8009968 <__swbuf_r+0x70>
 8009910:	686c      	ldr	r4, [r5, #4]
 8009912:	69a3      	ldr	r3, [r4, #24]
 8009914:	60a3      	str	r3, [r4, #8]
 8009916:	89a3      	ldrh	r3, [r4, #12]
 8009918:	071a      	lsls	r2, r3, #28
 800991a:	d52f      	bpl.n	800997c <__swbuf_r+0x84>
 800991c:	6923      	ldr	r3, [r4, #16]
 800991e:	b36b      	cbz	r3, 800997c <__swbuf_r+0x84>
 8009920:	6923      	ldr	r3, [r4, #16]
 8009922:	6820      	ldr	r0, [r4, #0]
 8009924:	1ac0      	subs	r0, r0, r3
 8009926:	6963      	ldr	r3, [r4, #20]
 8009928:	b2f6      	uxtb	r6, r6
 800992a:	4283      	cmp	r3, r0
 800992c:	4637      	mov	r7, r6
 800992e:	dc04      	bgt.n	800993a <__swbuf_r+0x42>
 8009930:	4621      	mov	r1, r4
 8009932:	4628      	mov	r0, r5
 8009934:	f000 f926 	bl	8009b84 <_fflush_r>
 8009938:	bb30      	cbnz	r0, 8009988 <__swbuf_r+0x90>
 800993a:	68a3      	ldr	r3, [r4, #8]
 800993c:	3b01      	subs	r3, #1
 800993e:	60a3      	str	r3, [r4, #8]
 8009940:	6823      	ldr	r3, [r4, #0]
 8009942:	1c5a      	adds	r2, r3, #1
 8009944:	6022      	str	r2, [r4, #0]
 8009946:	701e      	strb	r6, [r3, #0]
 8009948:	6963      	ldr	r3, [r4, #20]
 800994a:	3001      	adds	r0, #1
 800994c:	4283      	cmp	r3, r0
 800994e:	d004      	beq.n	800995a <__swbuf_r+0x62>
 8009950:	89a3      	ldrh	r3, [r4, #12]
 8009952:	07db      	lsls	r3, r3, #31
 8009954:	d506      	bpl.n	8009964 <__swbuf_r+0x6c>
 8009956:	2e0a      	cmp	r6, #10
 8009958:	d104      	bne.n	8009964 <__swbuf_r+0x6c>
 800995a:	4621      	mov	r1, r4
 800995c:	4628      	mov	r0, r5
 800995e:	f000 f911 	bl	8009b84 <_fflush_r>
 8009962:	b988      	cbnz	r0, 8009988 <__swbuf_r+0x90>
 8009964:	4638      	mov	r0, r7
 8009966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009968:	4b0a      	ldr	r3, [pc, #40]	; (8009994 <__swbuf_r+0x9c>)
 800996a:	429c      	cmp	r4, r3
 800996c:	d101      	bne.n	8009972 <__swbuf_r+0x7a>
 800996e:	68ac      	ldr	r4, [r5, #8]
 8009970:	e7cf      	b.n	8009912 <__swbuf_r+0x1a>
 8009972:	4b09      	ldr	r3, [pc, #36]	; (8009998 <__swbuf_r+0xa0>)
 8009974:	429c      	cmp	r4, r3
 8009976:	bf08      	it	eq
 8009978:	68ec      	ldreq	r4, [r5, #12]
 800997a:	e7ca      	b.n	8009912 <__swbuf_r+0x1a>
 800997c:	4621      	mov	r1, r4
 800997e:	4628      	mov	r0, r5
 8009980:	f000 f80c 	bl	800999c <__swsetup_r>
 8009984:	2800      	cmp	r0, #0
 8009986:	d0cb      	beq.n	8009920 <__swbuf_r+0x28>
 8009988:	f04f 37ff 	mov.w	r7, #4294967295
 800998c:	e7ea      	b.n	8009964 <__swbuf_r+0x6c>
 800998e:	bf00      	nop
 8009990:	0800a500 	.word	0x0800a500
 8009994:	0800a520 	.word	0x0800a520
 8009998:	0800a4e0 	.word	0x0800a4e0

0800999c <__swsetup_r>:
 800999c:	4b32      	ldr	r3, [pc, #200]	; (8009a68 <__swsetup_r+0xcc>)
 800999e:	b570      	push	{r4, r5, r6, lr}
 80099a0:	681d      	ldr	r5, [r3, #0]
 80099a2:	4606      	mov	r6, r0
 80099a4:	460c      	mov	r4, r1
 80099a6:	b125      	cbz	r5, 80099b2 <__swsetup_r+0x16>
 80099a8:	69ab      	ldr	r3, [r5, #24]
 80099aa:	b913      	cbnz	r3, 80099b2 <__swsetup_r+0x16>
 80099ac:	4628      	mov	r0, r5
 80099ae:	f000 f97d 	bl	8009cac <__sinit>
 80099b2:	4b2e      	ldr	r3, [pc, #184]	; (8009a6c <__swsetup_r+0xd0>)
 80099b4:	429c      	cmp	r4, r3
 80099b6:	d10f      	bne.n	80099d8 <__swsetup_r+0x3c>
 80099b8:	686c      	ldr	r4, [r5, #4]
 80099ba:	89a3      	ldrh	r3, [r4, #12]
 80099bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80099c0:	0719      	lsls	r1, r3, #28
 80099c2:	d42c      	bmi.n	8009a1e <__swsetup_r+0x82>
 80099c4:	06dd      	lsls	r5, r3, #27
 80099c6:	d411      	bmi.n	80099ec <__swsetup_r+0x50>
 80099c8:	2309      	movs	r3, #9
 80099ca:	6033      	str	r3, [r6, #0]
 80099cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80099d0:	81a3      	strh	r3, [r4, #12]
 80099d2:	f04f 30ff 	mov.w	r0, #4294967295
 80099d6:	e03e      	b.n	8009a56 <__swsetup_r+0xba>
 80099d8:	4b25      	ldr	r3, [pc, #148]	; (8009a70 <__swsetup_r+0xd4>)
 80099da:	429c      	cmp	r4, r3
 80099dc:	d101      	bne.n	80099e2 <__swsetup_r+0x46>
 80099de:	68ac      	ldr	r4, [r5, #8]
 80099e0:	e7eb      	b.n	80099ba <__swsetup_r+0x1e>
 80099e2:	4b24      	ldr	r3, [pc, #144]	; (8009a74 <__swsetup_r+0xd8>)
 80099e4:	429c      	cmp	r4, r3
 80099e6:	bf08      	it	eq
 80099e8:	68ec      	ldreq	r4, [r5, #12]
 80099ea:	e7e6      	b.n	80099ba <__swsetup_r+0x1e>
 80099ec:	0758      	lsls	r0, r3, #29
 80099ee:	d512      	bpl.n	8009a16 <__swsetup_r+0x7a>
 80099f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80099f2:	b141      	cbz	r1, 8009a06 <__swsetup_r+0x6a>
 80099f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80099f8:	4299      	cmp	r1, r3
 80099fa:	d002      	beq.n	8009a02 <__swsetup_r+0x66>
 80099fc:	4630      	mov	r0, r6
 80099fe:	f000 fa59 	bl	8009eb4 <_free_r>
 8009a02:	2300      	movs	r3, #0
 8009a04:	6363      	str	r3, [r4, #52]	; 0x34
 8009a06:	89a3      	ldrh	r3, [r4, #12]
 8009a08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009a0c:	81a3      	strh	r3, [r4, #12]
 8009a0e:	2300      	movs	r3, #0
 8009a10:	6063      	str	r3, [r4, #4]
 8009a12:	6923      	ldr	r3, [r4, #16]
 8009a14:	6023      	str	r3, [r4, #0]
 8009a16:	89a3      	ldrh	r3, [r4, #12]
 8009a18:	f043 0308 	orr.w	r3, r3, #8
 8009a1c:	81a3      	strh	r3, [r4, #12]
 8009a1e:	6923      	ldr	r3, [r4, #16]
 8009a20:	b94b      	cbnz	r3, 8009a36 <__swsetup_r+0x9a>
 8009a22:	89a3      	ldrh	r3, [r4, #12]
 8009a24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009a28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a2c:	d003      	beq.n	8009a36 <__swsetup_r+0x9a>
 8009a2e:	4621      	mov	r1, r4
 8009a30:	4630      	mov	r0, r6
 8009a32:	f000 f9ff 	bl	8009e34 <__smakebuf_r>
 8009a36:	89a0      	ldrh	r0, [r4, #12]
 8009a38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a3c:	f010 0301 	ands.w	r3, r0, #1
 8009a40:	d00a      	beq.n	8009a58 <__swsetup_r+0xbc>
 8009a42:	2300      	movs	r3, #0
 8009a44:	60a3      	str	r3, [r4, #8]
 8009a46:	6963      	ldr	r3, [r4, #20]
 8009a48:	425b      	negs	r3, r3
 8009a4a:	61a3      	str	r3, [r4, #24]
 8009a4c:	6923      	ldr	r3, [r4, #16]
 8009a4e:	b943      	cbnz	r3, 8009a62 <__swsetup_r+0xc6>
 8009a50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009a54:	d1ba      	bne.n	80099cc <__swsetup_r+0x30>
 8009a56:	bd70      	pop	{r4, r5, r6, pc}
 8009a58:	0781      	lsls	r1, r0, #30
 8009a5a:	bf58      	it	pl
 8009a5c:	6963      	ldrpl	r3, [r4, #20]
 8009a5e:	60a3      	str	r3, [r4, #8]
 8009a60:	e7f4      	b.n	8009a4c <__swsetup_r+0xb0>
 8009a62:	2000      	movs	r0, #0
 8009a64:	e7f7      	b.n	8009a56 <__swsetup_r+0xba>
 8009a66:	bf00      	nop
 8009a68:	20000030 	.word	0x20000030
 8009a6c:	0800a500 	.word	0x0800a500
 8009a70:	0800a520 	.word	0x0800a520
 8009a74:	0800a4e0 	.word	0x0800a4e0

08009a78 <__sflush_r>:
 8009a78:	898a      	ldrh	r2, [r1, #12]
 8009a7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a7e:	4605      	mov	r5, r0
 8009a80:	0710      	lsls	r0, r2, #28
 8009a82:	460c      	mov	r4, r1
 8009a84:	d458      	bmi.n	8009b38 <__sflush_r+0xc0>
 8009a86:	684b      	ldr	r3, [r1, #4]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	dc05      	bgt.n	8009a98 <__sflush_r+0x20>
 8009a8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	dc02      	bgt.n	8009a98 <__sflush_r+0x20>
 8009a92:	2000      	movs	r0, #0
 8009a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a9a:	2e00      	cmp	r6, #0
 8009a9c:	d0f9      	beq.n	8009a92 <__sflush_r+0x1a>
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009aa4:	682f      	ldr	r7, [r5, #0]
 8009aa6:	602b      	str	r3, [r5, #0]
 8009aa8:	d032      	beq.n	8009b10 <__sflush_r+0x98>
 8009aaa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009aac:	89a3      	ldrh	r3, [r4, #12]
 8009aae:	075a      	lsls	r2, r3, #29
 8009ab0:	d505      	bpl.n	8009abe <__sflush_r+0x46>
 8009ab2:	6863      	ldr	r3, [r4, #4]
 8009ab4:	1ac0      	subs	r0, r0, r3
 8009ab6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ab8:	b10b      	cbz	r3, 8009abe <__sflush_r+0x46>
 8009aba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009abc:	1ac0      	subs	r0, r0, r3
 8009abe:	2300      	movs	r3, #0
 8009ac0:	4602      	mov	r2, r0
 8009ac2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ac4:	6a21      	ldr	r1, [r4, #32]
 8009ac6:	4628      	mov	r0, r5
 8009ac8:	47b0      	blx	r6
 8009aca:	1c43      	adds	r3, r0, #1
 8009acc:	89a3      	ldrh	r3, [r4, #12]
 8009ace:	d106      	bne.n	8009ade <__sflush_r+0x66>
 8009ad0:	6829      	ldr	r1, [r5, #0]
 8009ad2:	291d      	cmp	r1, #29
 8009ad4:	d82c      	bhi.n	8009b30 <__sflush_r+0xb8>
 8009ad6:	4a2a      	ldr	r2, [pc, #168]	; (8009b80 <__sflush_r+0x108>)
 8009ad8:	40ca      	lsrs	r2, r1
 8009ada:	07d6      	lsls	r6, r2, #31
 8009adc:	d528      	bpl.n	8009b30 <__sflush_r+0xb8>
 8009ade:	2200      	movs	r2, #0
 8009ae0:	6062      	str	r2, [r4, #4]
 8009ae2:	04d9      	lsls	r1, r3, #19
 8009ae4:	6922      	ldr	r2, [r4, #16]
 8009ae6:	6022      	str	r2, [r4, #0]
 8009ae8:	d504      	bpl.n	8009af4 <__sflush_r+0x7c>
 8009aea:	1c42      	adds	r2, r0, #1
 8009aec:	d101      	bne.n	8009af2 <__sflush_r+0x7a>
 8009aee:	682b      	ldr	r3, [r5, #0]
 8009af0:	b903      	cbnz	r3, 8009af4 <__sflush_r+0x7c>
 8009af2:	6560      	str	r0, [r4, #84]	; 0x54
 8009af4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009af6:	602f      	str	r7, [r5, #0]
 8009af8:	2900      	cmp	r1, #0
 8009afa:	d0ca      	beq.n	8009a92 <__sflush_r+0x1a>
 8009afc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b00:	4299      	cmp	r1, r3
 8009b02:	d002      	beq.n	8009b0a <__sflush_r+0x92>
 8009b04:	4628      	mov	r0, r5
 8009b06:	f000 f9d5 	bl	8009eb4 <_free_r>
 8009b0a:	2000      	movs	r0, #0
 8009b0c:	6360      	str	r0, [r4, #52]	; 0x34
 8009b0e:	e7c1      	b.n	8009a94 <__sflush_r+0x1c>
 8009b10:	6a21      	ldr	r1, [r4, #32]
 8009b12:	2301      	movs	r3, #1
 8009b14:	4628      	mov	r0, r5
 8009b16:	47b0      	blx	r6
 8009b18:	1c41      	adds	r1, r0, #1
 8009b1a:	d1c7      	bne.n	8009aac <__sflush_r+0x34>
 8009b1c:	682b      	ldr	r3, [r5, #0]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d0c4      	beq.n	8009aac <__sflush_r+0x34>
 8009b22:	2b1d      	cmp	r3, #29
 8009b24:	d001      	beq.n	8009b2a <__sflush_r+0xb2>
 8009b26:	2b16      	cmp	r3, #22
 8009b28:	d101      	bne.n	8009b2e <__sflush_r+0xb6>
 8009b2a:	602f      	str	r7, [r5, #0]
 8009b2c:	e7b1      	b.n	8009a92 <__sflush_r+0x1a>
 8009b2e:	89a3      	ldrh	r3, [r4, #12]
 8009b30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b34:	81a3      	strh	r3, [r4, #12]
 8009b36:	e7ad      	b.n	8009a94 <__sflush_r+0x1c>
 8009b38:	690f      	ldr	r7, [r1, #16]
 8009b3a:	2f00      	cmp	r7, #0
 8009b3c:	d0a9      	beq.n	8009a92 <__sflush_r+0x1a>
 8009b3e:	0793      	lsls	r3, r2, #30
 8009b40:	680e      	ldr	r6, [r1, #0]
 8009b42:	bf08      	it	eq
 8009b44:	694b      	ldreq	r3, [r1, #20]
 8009b46:	600f      	str	r7, [r1, #0]
 8009b48:	bf18      	it	ne
 8009b4a:	2300      	movne	r3, #0
 8009b4c:	eba6 0807 	sub.w	r8, r6, r7
 8009b50:	608b      	str	r3, [r1, #8]
 8009b52:	f1b8 0f00 	cmp.w	r8, #0
 8009b56:	dd9c      	ble.n	8009a92 <__sflush_r+0x1a>
 8009b58:	6a21      	ldr	r1, [r4, #32]
 8009b5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009b5c:	4643      	mov	r3, r8
 8009b5e:	463a      	mov	r2, r7
 8009b60:	4628      	mov	r0, r5
 8009b62:	47b0      	blx	r6
 8009b64:	2800      	cmp	r0, #0
 8009b66:	dc06      	bgt.n	8009b76 <__sflush_r+0xfe>
 8009b68:	89a3      	ldrh	r3, [r4, #12]
 8009b6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b6e:	81a3      	strh	r3, [r4, #12]
 8009b70:	f04f 30ff 	mov.w	r0, #4294967295
 8009b74:	e78e      	b.n	8009a94 <__sflush_r+0x1c>
 8009b76:	4407      	add	r7, r0
 8009b78:	eba8 0800 	sub.w	r8, r8, r0
 8009b7c:	e7e9      	b.n	8009b52 <__sflush_r+0xda>
 8009b7e:	bf00      	nop
 8009b80:	20400001 	.word	0x20400001

08009b84 <_fflush_r>:
 8009b84:	b538      	push	{r3, r4, r5, lr}
 8009b86:	690b      	ldr	r3, [r1, #16]
 8009b88:	4605      	mov	r5, r0
 8009b8a:	460c      	mov	r4, r1
 8009b8c:	b913      	cbnz	r3, 8009b94 <_fflush_r+0x10>
 8009b8e:	2500      	movs	r5, #0
 8009b90:	4628      	mov	r0, r5
 8009b92:	bd38      	pop	{r3, r4, r5, pc}
 8009b94:	b118      	cbz	r0, 8009b9e <_fflush_r+0x1a>
 8009b96:	6983      	ldr	r3, [r0, #24]
 8009b98:	b90b      	cbnz	r3, 8009b9e <_fflush_r+0x1a>
 8009b9a:	f000 f887 	bl	8009cac <__sinit>
 8009b9e:	4b14      	ldr	r3, [pc, #80]	; (8009bf0 <_fflush_r+0x6c>)
 8009ba0:	429c      	cmp	r4, r3
 8009ba2:	d11b      	bne.n	8009bdc <_fflush_r+0x58>
 8009ba4:	686c      	ldr	r4, [r5, #4]
 8009ba6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d0ef      	beq.n	8009b8e <_fflush_r+0xa>
 8009bae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009bb0:	07d0      	lsls	r0, r2, #31
 8009bb2:	d404      	bmi.n	8009bbe <_fflush_r+0x3a>
 8009bb4:	0599      	lsls	r1, r3, #22
 8009bb6:	d402      	bmi.n	8009bbe <_fflush_r+0x3a>
 8009bb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009bba:	f000 f915 	bl	8009de8 <__retarget_lock_acquire_recursive>
 8009bbe:	4628      	mov	r0, r5
 8009bc0:	4621      	mov	r1, r4
 8009bc2:	f7ff ff59 	bl	8009a78 <__sflush_r>
 8009bc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009bc8:	07da      	lsls	r2, r3, #31
 8009bca:	4605      	mov	r5, r0
 8009bcc:	d4e0      	bmi.n	8009b90 <_fflush_r+0xc>
 8009bce:	89a3      	ldrh	r3, [r4, #12]
 8009bd0:	059b      	lsls	r3, r3, #22
 8009bd2:	d4dd      	bmi.n	8009b90 <_fflush_r+0xc>
 8009bd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009bd6:	f000 f908 	bl	8009dea <__retarget_lock_release_recursive>
 8009bda:	e7d9      	b.n	8009b90 <_fflush_r+0xc>
 8009bdc:	4b05      	ldr	r3, [pc, #20]	; (8009bf4 <_fflush_r+0x70>)
 8009bde:	429c      	cmp	r4, r3
 8009be0:	d101      	bne.n	8009be6 <_fflush_r+0x62>
 8009be2:	68ac      	ldr	r4, [r5, #8]
 8009be4:	e7df      	b.n	8009ba6 <_fflush_r+0x22>
 8009be6:	4b04      	ldr	r3, [pc, #16]	; (8009bf8 <_fflush_r+0x74>)
 8009be8:	429c      	cmp	r4, r3
 8009bea:	bf08      	it	eq
 8009bec:	68ec      	ldreq	r4, [r5, #12]
 8009bee:	e7da      	b.n	8009ba6 <_fflush_r+0x22>
 8009bf0:	0800a500 	.word	0x0800a500
 8009bf4:	0800a520 	.word	0x0800a520
 8009bf8:	0800a4e0 	.word	0x0800a4e0

08009bfc <std>:
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	b510      	push	{r4, lr}
 8009c00:	4604      	mov	r4, r0
 8009c02:	e9c0 3300 	strd	r3, r3, [r0]
 8009c06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009c0a:	6083      	str	r3, [r0, #8]
 8009c0c:	8181      	strh	r1, [r0, #12]
 8009c0e:	6643      	str	r3, [r0, #100]	; 0x64
 8009c10:	81c2      	strh	r2, [r0, #14]
 8009c12:	6183      	str	r3, [r0, #24]
 8009c14:	4619      	mov	r1, r3
 8009c16:	2208      	movs	r2, #8
 8009c18:	305c      	adds	r0, #92	; 0x5c
 8009c1a:	f7ff fdef 	bl	80097fc <memset>
 8009c1e:	4b05      	ldr	r3, [pc, #20]	; (8009c34 <std+0x38>)
 8009c20:	6263      	str	r3, [r4, #36]	; 0x24
 8009c22:	4b05      	ldr	r3, [pc, #20]	; (8009c38 <std+0x3c>)
 8009c24:	62a3      	str	r3, [r4, #40]	; 0x28
 8009c26:	4b05      	ldr	r3, [pc, #20]	; (8009c3c <std+0x40>)
 8009c28:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009c2a:	4b05      	ldr	r3, [pc, #20]	; (8009c40 <std+0x44>)
 8009c2c:	6224      	str	r4, [r4, #32]
 8009c2e:	6323      	str	r3, [r4, #48]	; 0x30
 8009c30:	bd10      	pop	{r4, pc}
 8009c32:	bf00      	nop
 8009c34:	0800a029 	.word	0x0800a029
 8009c38:	0800a04b 	.word	0x0800a04b
 8009c3c:	0800a083 	.word	0x0800a083
 8009c40:	0800a0a7 	.word	0x0800a0a7

08009c44 <_cleanup_r>:
 8009c44:	4901      	ldr	r1, [pc, #4]	; (8009c4c <_cleanup_r+0x8>)
 8009c46:	f000 b8af 	b.w	8009da8 <_fwalk_reent>
 8009c4a:	bf00      	nop
 8009c4c:	08009b85 	.word	0x08009b85

08009c50 <__sfmoreglue>:
 8009c50:	b570      	push	{r4, r5, r6, lr}
 8009c52:	1e4a      	subs	r2, r1, #1
 8009c54:	2568      	movs	r5, #104	; 0x68
 8009c56:	4355      	muls	r5, r2
 8009c58:	460e      	mov	r6, r1
 8009c5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009c5e:	f000 f979 	bl	8009f54 <_malloc_r>
 8009c62:	4604      	mov	r4, r0
 8009c64:	b140      	cbz	r0, 8009c78 <__sfmoreglue+0x28>
 8009c66:	2100      	movs	r1, #0
 8009c68:	e9c0 1600 	strd	r1, r6, [r0]
 8009c6c:	300c      	adds	r0, #12
 8009c6e:	60a0      	str	r0, [r4, #8]
 8009c70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009c74:	f7ff fdc2 	bl	80097fc <memset>
 8009c78:	4620      	mov	r0, r4
 8009c7a:	bd70      	pop	{r4, r5, r6, pc}

08009c7c <__sfp_lock_acquire>:
 8009c7c:	4801      	ldr	r0, [pc, #4]	; (8009c84 <__sfp_lock_acquire+0x8>)
 8009c7e:	f000 b8b3 	b.w	8009de8 <__retarget_lock_acquire_recursive>
 8009c82:	bf00      	nop
 8009c84:	2000155c 	.word	0x2000155c

08009c88 <__sfp_lock_release>:
 8009c88:	4801      	ldr	r0, [pc, #4]	; (8009c90 <__sfp_lock_release+0x8>)
 8009c8a:	f000 b8ae 	b.w	8009dea <__retarget_lock_release_recursive>
 8009c8e:	bf00      	nop
 8009c90:	2000155c 	.word	0x2000155c

08009c94 <__sinit_lock_acquire>:
 8009c94:	4801      	ldr	r0, [pc, #4]	; (8009c9c <__sinit_lock_acquire+0x8>)
 8009c96:	f000 b8a7 	b.w	8009de8 <__retarget_lock_acquire_recursive>
 8009c9a:	bf00      	nop
 8009c9c:	20001557 	.word	0x20001557

08009ca0 <__sinit_lock_release>:
 8009ca0:	4801      	ldr	r0, [pc, #4]	; (8009ca8 <__sinit_lock_release+0x8>)
 8009ca2:	f000 b8a2 	b.w	8009dea <__retarget_lock_release_recursive>
 8009ca6:	bf00      	nop
 8009ca8:	20001557 	.word	0x20001557

08009cac <__sinit>:
 8009cac:	b510      	push	{r4, lr}
 8009cae:	4604      	mov	r4, r0
 8009cb0:	f7ff fff0 	bl	8009c94 <__sinit_lock_acquire>
 8009cb4:	69a3      	ldr	r3, [r4, #24]
 8009cb6:	b11b      	cbz	r3, 8009cc0 <__sinit+0x14>
 8009cb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cbc:	f7ff bff0 	b.w	8009ca0 <__sinit_lock_release>
 8009cc0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009cc4:	6523      	str	r3, [r4, #80]	; 0x50
 8009cc6:	4b13      	ldr	r3, [pc, #76]	; (8009d14 <__sinit+0x68>)
 8009cc8:	4a13      	ldr	r2, [pc, #76]	; (8009d18 <__sinit+0x6c>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	62a2      	str	r2, [r4, #40]	; 0x28
 8009cce:	42a3      	cmp	r3, r4
 8009cd0:	bf04      	itt	eq
 8009cd2:	2301      	moveq	r3, #1
 8009cd4:	61a3      	streq	r3, [r4, #24]
 8009cd6:	4620      	mov	r0, r4
 8009cd8:	f000 f820 	bl	8009d1c <__sfp>
 8009cdc:	6060      	str	r0, [r4, #4]
 8009cde:	4620      	mov	r0, r4
 8009ce0:	f000 f81c 	bl	8009d1c <__sfp>
 8009ce4:	60a0      	str	r0, [r4, #8]
 8009ce6:	4620      	mov	r0, r4
 8009ce8:	f000 f818 	bl	8009d1c <__sfp>
 8009cec:	2200      	movs	r2, #0
 8009cee:	60e0      	str	r0, [r4, #12]
 8009cf0:	2104      	movs	r1, #4
 8009cf2:	6860      	ldr	r0, [r4, #4]
 8009cf4:	f7ff ff82 	bl	8009bfc <std>
 8009cf8:	68a0      	ldr	r0, [r4, #8]
 8009cfa:	2201      	movs	r2, #1
 8009cfc:	2109      	movs	r1, #9
 8009cfe:	f7ff ff7d 	bl	8009bfc <std>
 8009d02:	68e0      	ldr	r0, [r4, #12]
 8009d04:	2202      	movs	r2, #2
 8009d06:	2112      	movs	r1, #18
 8009d08:	f7ff ff78 	bl	8009bfc <std>
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	61a3      	str	r3, [r4, #24]
 8009d10:	e7d2      	b.n	8009cb8 <__sinit+0xc>
 8009d12:	bf00      	nop
 8009d14:	0800a4dc 	.word	0x0800a4dc
 8009d18:	08009c45 	.word	0x08009c45

08009d1c <__sfp>:
 8009d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d1e:	4607      	mov	r7, r0
 8009d20:	f7ff ffac 	bl	8009c7c <__sfp_lock_acquire>
 8009d24:	4b1e      	ldr	r3, [pc, #120]	; (8009da0 <__sfp+0x84>)
 8009d26:	681e      	ldr	r6, [r3, #0]
 8009d28:	69b3      	ldr	r3, [r6, #24]
 8009d2a:	b913      	cbnz	r3, 8009d32 <__sfp+0x16>
 8009d2c:	4630      	mov	r0, r6
 8009d2e:	f7ff ffbd 	bl	8009cac <__sinit>
 8009d32:	3648      	adds	r6, #72	; 0x48
 8009d34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009d38:	3b01      	subs	r3, #1
 8009d3a:	d503      	bpl.n	8009d44 <__sfp+0x28>
 8009d3c:	6833      	ldr	r3, [r6, #0]
 8009d3e:	b30b      	cbz	r3, 8009d84 <__sfp+0x68>
 8009d40:	6836      	ldr	r6, [r6, #0]
 8009d42:	e7f7      	b.n	8009d34 <__sfp+0x18>
 8009d44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009d48:	b9d5      	cbnz	r5, 8009d80 <__sfp+0x64>
 8009d4a:	4b16      	ldr	r3, [pc, #88]	; (8009da4 <__sfp+0x88>)
 8009d4c:	60e3      	str	r3, [r4, #12]
 8009d4e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009d52:	6665      	str	r5, [r4, #100]	; 0x64
 8009d54:	f000 f847 	bl	8009de6 <__retarget_lock_init_recursive>
 8009d58:	f7ff ff96 	bl	8009c88 <__sfp_lock_release>
 8009d5c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009d60:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009d64:	6025      	str	r5, [r4, #0]
 8009d66:	61a5      	str	r5, [r4, #24]
 8009d68:	2208      	movs	r2, #8
 8009d6a:	4629      	mov	r1, r5
 8009d6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009d70:	f7ff fd44 	bl	80097fc <memset>
 8009d74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009d78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009d7c:	4620      	mov	r0, r4
 8009d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d80:	3468      	adds	r4, #104	; 0x68
 8009d82:	e7d9      	b.n	8009d38 <__sfp+0x1c>
 8009d84:	2104      	movs	r1, #4
 8009d86:	4638      	mov	r0, r7
 8009d88:	f7ff ff62 	bl	8009c50 <__sfmoreglue>
 8009d8c:	4604      	mov	r4, r0
 8009d8e:	6030      	str	r0, [r6, #0]
 8009d90:	2800      	cmp	r0, #0
 8009d92:	d1d5      	bne.n	8009d40 <__sfp+0x24>
 8009d94:	f7ff ff78 	bl	8009c88 <__sfp_lock_release>
 8009d98:	230c      	movs	r3, #12
 8009d9a:	603b      	str	r3, [r7, #0]
 8009d9c:	e7ee      	b.n	8009d7c <__sfp+0x60>
 8009d9e:	bf00      	nop
 8009da0:	0800a4dc 	.word	0x0800a4dc
 8009da4:	ffff0001 	.word	0xffff0001

08009da8 <_fwalk_reent>:
 8009da8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009dac:	4606      	mov	r6, r0
 8009dae:	4688      	mov	r8, r1
 8009db0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009db4:	2700      	movs	r7, #0
 8009db6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009dba:	f1b9 0901 	subs.w	r9, r9, #1
 8009dbe:	d505      	bpl.n	8009dcc <_fwalk_reent+0x24>
 8009dc0:	6824      	ldr	r4, [r4, #0]
 8009dc2:	2c00      	cmp	r4, #0
 8009dc4:	d1f7      	bne.n	8009db6 <_fwalk_reent+0xe>
 8009dc6:	4638      	mov	r0, r7
 8009dc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009dcc:	89ab      	ldrh	r3, [r5, #12]
 8009dce:	2b01      	cmp	r3, #1
 8009dd0:	d907      	bls.n	8009de2 <_fwalk_reent+0x3a>
 8009dd2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009dd6:	3301      	adds	r3, #1
 8009dd8:	d003      	beq.n	8009de2 <_fwalk_reent+0x3a>
 8009dda:	4629      	mov	r1, r5
 8009ddc:	4630      	mov	r0, r6
 8009dde:	47c0      	blx	r8
 8009de0:	4307      	orrs	r7, r0
 8009de2:	3568      	adds	r5, #104	; 0x68
 8009de4:	e7e9      	b.n	8009dba <_fwalk_reent+0x12>

08009de6 <__retarget_lock_init_recursive>:
 8009de6:	4770      	bx	lr

08009de8 <__retarget_lock_acquire_recursive>:
 8009de8:	4770      	bx	lr

08009dea <__retarget_lock_release_recursive>:
 8009dea:	4770      	bx	lr

08009dec <__swhatbuf_r>:
 8009dec:	b570      	push	{r4, r5, r6, lr}
 8009dee:	460e      	mov	r6, r1
 8009df0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009df4:	2900      	cmp	r1, #0
 8009df6:	b096      	sub	sp, #88	; 0x58
 8009df8:	4614      	mov	r4, r2
 8009dfa:	461d      	mov	r5, r3
 8009dfc:	da07      	bge.n	8009e0e <__swhatbuf_r+0x22>
 8009dfe:	2300      	movs	r3, #0
 8009e00:	602b      	str	r3, [r5, #0]
 8009e02:	89b3      	ldrh	r3, [r6, #12]
 8009e04:	061a      	lsls	r2, r3, #24
 8009e06:	d410      	bmi.n	8009e2a <__swhatbuf_r+0x3e>
 8009e08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e0c:	e00e      	b.n	8009e2c <__swhatbuf_r+0x40>
 8009e0e:	466a      	mov	r2, sp
 8009e10:	f000 f970 	bl	800a0f4 <_fstat_r>
 8009e14:	2800      	cmp	r0, #0
 8009e16:	dbf2      	blt.n	8009dfe <__swhatbuf_r+0x12>
 8009e18:	9a01      	ldr	r2, [sp, #4]
 8009e1a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009e1e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009e22:	425a      	negs	r2, r3
 8009e24:	415a      	adcs	r2, r3
 8009e26:	602a      	str	r2, [r5, #0]
 8009e28:	e7ee      	b.n	8009e08 <__swhatbuf_r+0x1c>
 8009e2a:	2340      	movs	r3, #64	; 0x40
 8009e2c:	2000      	movs	r0, #0
 8009e2e:	6023      	str	r3, [r4, #0]
 8009e30:	b016      	add	sp, #88	; 0x58
 8009e32:	bd70      	pop	{r4, r5, r6, pc}

08009e34 <__smakebuf_r>:
 8009e34:	898b      	ldrh	r3, [r1, #12]
 8009e36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009e38:	079d      	lsls	r5, r3, #30
 8009e3a:	4606      	mov	r6, r0
 8009e3c:	460c      	mov	r4, r1
 8009e3e:	d507      	bpl.n	8009e50 <__smakebuf_r+0x1c>
 8009e40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009e44:	6023      	str	r3, [r4, #0]
 8009e46:	6123      	str	r3, [r4, #16]
 8009e48:	2301      	movs	r3, #1
 8009e4a:	6163      	str	r3, [r4, #20]
 8009e4c:	b002      	add	sp, #8
 8009e4e:	bd70      	pop	{r4, r5, r6, pc}
 8009e50:	ab01      	add	r3, sp, #4
 8009e52:	466a      	mov	r2, sp
 8009e54:	f7ff ffca 	bl	8009dec <__swhatbuf_r>
 8009e58:	9900      	ldr	r1, [sp, #0]
 8009e5a:	4605      	mov	r5, r0
 8009e5c:	4630      	mov	r0, r6
 8009e5e:	f000 f879 	bl	8009f54 <_malloc_r>
 8009e62:	b948      	cbnz	r0, 8009e78 <__smakebuf_r+0x44>
 8009e64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e68:	059a      	lsls	r2, r3, #22
 8009e6a:	d4ef      	bmi.n	8009e4c <__smakebuf_r+0x18>
 8009e6c:	f023 0303 	bic.w	r3, r3, #3
 8009e70:	f043 0302 	orr.w	r3, r3, #2
 8009e74:	81a3      	strh	r3, [r4, #12]
 8009e76:	e7e3      	b.n	8009e40 <__smakebuf_r+0xc>
 8009e78:	4b0d      	ldr	r3, [pc, #52]	; (8009eb0 <__smakebuf_r+0x7c>)
 8009e7a:	62b3      	str	r3, [r6, #40]	; 0x28
 8009e7c:	89a3      	ldrh	r3, [r4, #12]
 8009e7e:	6020      	str	r0, [r4, #0]
 8009e80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e84:	81a3      	strh	r3, [r4, #12]
 8009e86:	9b00      	ldr	r3, [sp, #0]
 8009e88:	6163      	str	r3, [r4, #20]
 8009e8a:	9b01      	ldr	r3, [sp, #4]
 8009e8c:	6120      	str	r0, [r4, #16]
 8009e8e:	b15b      	cbz	r3, 8009ea8 <__smakebuf_r+0x74>
 8009e90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e94:	4630      	mov	r0, r6
 8009e96:	f000 f93f 	bl	800a118 <_isatty_r>
 8009e9a:	b128      	cbz	r0, 8009ea8 <__smakebuf_r+0x74>
 8009e9c:	89a3      	ldrh	r3, [r4, #12]
 8009e9e:	f023 0303 	bic.w	r3, r3, #3
 8009ea2:	f043 0301 	orr.w	r3, r3, #1
 8009ea6:	81a3      	strh	r3, [r4, #12]
 8009ea8:	89a0      	ldrh	r0, [r4, #12]
 8009eaa:	4305      	orrs	r5, r0
 8009eac:	81a5      	strh	r5, [r4, #12]
 8009eae:	e7cd      	b.n	8009e4c <__smakebuf_r+0x18>
 8009eb0:	08009c45 	.word	0x08009c45

08009eb4 <_free_r>:
 8009eb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009eb6:	2900      	cmp	r1, #0
 8009eb8:	d048      	beq.n	8009f4c <_free_r+0x98>
 8009eba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ebe:	9001      	str	r0, [sp, #4]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	f1a1 0404 	sub.w	r4, r1, #4
 8009ec6:	bfb8      	it	lt
 8009ec8:	18e4      	addlt	r4, r4, r3
 8009eca:	f000 f947 	bl	800a15c <__malloc_lock>
 8009ece:	4a20      	ldr	r2, [pc, #128]	; (8009f50 <_free_r+0x9c>)
 8009ed0:	9801      	ldr	r0, [sp, #4]
 8009ed2:	6813      	ldr	r3, [r2, #0]
 8009ed4:	4615      	mov	r5, r2
 8009ed6:	b933      	cbnz	r3, 8009ee6 <_free_r+0x32>
 8009ed8:	6063      	str	r3, [r4, #4]
 8009eda:	6014      	str	r4, [r2, #0]
 8009edc:	b003      	add	sp, #12
 8009ede:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ee2:	f000 b941 	b.w	800a168 <__malloc_unlock>
 8009ee6:	42a3      	cmp	r3, r4
 8009ee8:	d90b      	bls.n	8009f02 <_free_r+0x4e>
 8009eea:	6821      	ldr	r1, [r4, #0]
 8009eec:	1862      	adds	r2, r4, r1
 8009eee:	4293      	cmp	r3, r2
 8009ef0:	bf04      	itt	eq
 8009ef2:	681a      	ldreq	r2, [r3, #0]
 8009ef4:	685b      	ldreq	r3, [r3, #4]
 8009ef6:	6063      	str	r3, [r4, #4]
 8009ef8:	bf04      	itt	eq
 8009efa:	1852      	addeq	r2, r2, r1
 8009efc:	6022      	streq	r2, [r4, #0]
 8009efe:	602c      	str	r4, [r5, #0]
 8009f00:	e7ec      	b.n	8009edc <_free_r+0x28>
 8009f02:	461a      	mov	r2, r3
 8009f04:	685b      	ldr	r3, [r3, #4]
 8009f06:	b10b      	cbz	r3, 8009f0c <_free_r+0x58>
 8009f08:	42a3      	cmp	r3, r4
 8009f0a:	d9fa      	bls.n	8009f02 <_free_r+0x4e>
 8009f0c:	6811      	ldr	r1, [r2, #0]
 8009f0e:	1855      	adds	r5, r2, r1
 8009f10:	42a5      	cmp	r5, r4
 8009f12:	d10b      	bne.n	8009f2c <_free_r+0x78>
 8009f14:	6824      	ldr	r4, [r4, #0]
 8009f16:	4421      	add	r1, r4
 8009f18:	1854      	adds	r4, r2, r1
 8009f1a:	42a3      	cmp	r3, r4
 8009f1c:	6011      	str	r1, [r2, #0]
 8009f1e:	d1dd      	bne.n	8009edc <_free_r+0x28>
 8009f20:	681c      	ldr	r4, [r3, #0]
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	6053      	str	r3, [r2, #4]
 8009f26:	4421      	add	r1, r4
 8009f28:	6011      	str	r1, [r2, #0]
 8009f2a:	e7d7      	b.n	8009edc <_free_r+0x28>
 8009f2c:	d902      	bls.n	8009f34 <_free_r+0x80>
 8009f2e:	230c      	movs	r3, #12
 8009f30:	6003      	str	r3, [r0, #0]
 8009f32:	e7d3      	b.n	8009edc <_free_r+0x28>
 8009f34:	6825      	ldr	r5, [r4, #0]
 8009f36:	1961      	adds	r1, r4, r5
 8009f38:	428b      	cmp	r3, r1
 8009f3a:	bf04      	itt	eq
 8009f3c:	6819      	ldreq	r1, [r3, #0]
 8009f3e:	685b      	ldreq	r3, [r3, #4]
 8009f40:	6063      	str	r3, [r4, #4]
 8009f42:	bf04      	itt	eq
 8009f44:	1949      	addeq	r1, r1, r5
 8009f46:	6021      	streq	r1, [r4, #0]
 8009f48:	6054      	str	r4, [r2, #4]
 8009f4a:	e7c7      	b.n	8009edc <_free_r+0x28>
 8009f4c:	b003      	add	sp, #12
 8009f4e:	bd30      	pop	{r4, r5, pc}
 8009f50:	20001300 	.word	0x20001300

08009f54 <_malloc_r>:
 8009f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f56:	1ccd      	adds	r5, r1, #3
 8009f58:	f025 0503 	bic.w	r5, r5, #3
 8009f5c:	3508      	adds	r5, #8
 8009f5e:	2d0c      	cmp	r5, #12
 8009f60:	bf38      	it	cc
 8009f62:	250c      	movcc	r5, #12
 8009f64:	2d00      	cmp	r5, #0
 8009f66:	4606      	mov	r6, r0
 8009f68:	db01      	blt.n	8009f6e <_malloc_r+0x1a>
 8009f6a:	42a9      	cmp	r1, r5
 8009f6c:	d903      	bls.n	8009f76 <_malloc_r+0x22>
 8009f6e:	230c      	movs	r3, #12
 8009f70:	6033      	str	r3, [r6, #0]
 8009f72:	2000      	movs	r0, #0
 8009f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f76:	f000 f8f1 	bl	800a15c <__malloc_lock>
 8009f7a:	4921      	ldr	r1, [pc, #132]	; (800a000 <_malloc_r+0xac>)
 8009f7c:	680a      	ldr	r2, [r1, #0]
 8009f7e:	4614      	mov	r4, r2
 8009f80:	b99c      	cbnz	r4, 8009faa <_malloc_r+0x56>
 8009f82:	4f20      	ldr	r7, [pc, #128]	; (800a004 <_malloc_r+0xb0>)
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	b923      	cbnz	r3, 8009f92 <_malloc_r+0x3e>
 8009f88:	4621      	mov	r1, r4
 8009f8a:	4630      	mov	r0, r6
 8009f8c:	f000 f83c 	bl	800a008 <_sbrk_r>
 8009f90:	6038      	str	r0, [r7, #0]
 8009f92:	4629      	mov	r1, r5
 8009f94:	4630      	mov	r0, r6
 8009f96:	f000 f837 	bl	800a008 <_sbrk_r>
 8009f9a:	1c43      	adds	r3, r0, #1
 8009f9c:	d123      	bne.n	8009fe6 <_malloc_r+0x92>
 8009f9e:	230c      	movs	r3, #12
 8009fa0:	6033      	str	r3, [r6, #0]
 8009fa2:	4630      	mov	r0, r6
 8009fa4:	f000 f8e0 	bl	800a168 <__malloc_unlock>
 8009fa8:	e7e3      	b.n	8009f72 <_malloc_r+0x1e>
 8009faa:	6823      	ldr	r3, [r4, #0]
 8009fac:	1b5b      	subs	r3, r3, r5
 8009fae:	d417      	bmi.n	8009fe0 <_malloc_r+0x8c>
 8009fb0:	2b0b      	cmp	r3, #11
 8009fb2:	d903      	bls.n	8009fbc <_malloc_r+0x68>
 8009fb4:	6023      	str	r3, [r4, #0]
 8009fb6:	441c      	add	r4, r3
 8009fb8:	6025      	str	r5, [r4, #0]
 8009fba:	e004      	b.n	8009fc6 <_malloc_r+0x72>
 8009fbc:	6863      	ldr	r3, [r4, #4]
 8009fbe:	42a2      	cmp	r2, r4
 8009fc0:	bf0c      	ite	eq
 8009fc2:	600b      	streq	r3, [r1, #0]
 8009fc4:	6053      	strne	r3, [r2, #4]
 8009fc6:	4630      	mov	r0, r6
 8009fc8:	f000 f8ce 	bl	800a168 <__malloc_unlock>
 8009fcc:	f104 000b 	add.w	r0, r4, #11
 8009fd0:	1d23      	adds	r3, r4, #4
 8009fd2:	f020 0007 	bic.w	r0, r0, #7
 8009fd6:	1ac2      	subs	r2, r0, r3
 8009fd8:	d0cc      	beq.n	8009f74 <_malloc_r+0x20>
 8009fda:	1a1b      	subs	r3, r3, r0
 8009fdc:	50a3      	str	r3, [r4, r2]
 8009fde:	e7c9      	b.n	8009f74 <_malloc_r+0x20>
 8009fe0:	4622      	mov	r2, r4
 8009fe2:	6864      	ldr	r4, [r4, #4]
 8009fe4:	e7cc      	b.n	8009f80 <_malloc_r+0x2c>
 8009fe6:	1cc4      	adds	r4, r0, #3
 8009fe8:	f024 0403 	bic.w	r4, r4, #3
 8009fec:	42a0      	cmp	r0, r4
 8009fee:	d0e3      	beq.n	8009fb8 <_malloc_r+0x64>
 8009ff0:	1a21      	subs	r1, r4, r0
 8009ff2:	4630      	mov	r0, r6
 8009ff4:	f000 f808 	bl	800a008 <_sbrk_r>
 8009ff8:	3001      	adds	r0, #1
 8009ffa:	d1dd      	bne.n	8009fb8 <_malloc_r+0x64>
 8009ffc:	e7cf      	b.n	8009f9e <_malloc_r+0x4a>
 8009ffe:	bf00      	nop
 800a000:	20001300 	.word	0x20001300
 800a004:	20001304 	.word	0x20001304

0800a008 <_sbrk_r>:
 800a008:	b538      	push	{r3, r4, r5, lr}
 800a00a:	4d06      	ldr	r5, [pc, #24]	; (800a024 <_sbrk_r+0x1c>)
 800a00c:	2300      	movs	r3, #0
 800a00e:	4604      	mov	r4, r0
 800a010:	4608      	mov	r0, r1
 800a012:	602b      	str	r3, [r5, #0]
 800a014:	f7f8 f95e 	bl	80022d4 <_sbrk>
 800a018:	1c43      	adds	r3, r0, #1
 800a01a:	d102      	bne.n	800a022 <_sbrk_r+0x1a>
 800a01c:	682b      	ldr	r3, [r5, #0]
 800a01e:	b103      	cbz	r3, 800a022 <_sbrk_r+0x1a>
 800a020:	6023      	str	r3, [r4, #0]
 800a022:	bd38      	pop	{r3, r4, r5, pc}
 800a024:	20001560 	.word	0x20001560

0800a028 <__sread>:
 800a028:	b510      	push	{r4, lr}
 800a02a:	460c      	mov	r4, r1
 800a02c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a030:	f000 f8a0 	bl	800a174 <_read_r>
 800a034:	2800      	cmp	r0, #0
 800a036:	bfab      	itete	ge
 800a038:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a03a:	89a3      	ldrhlt	r3, [r4, #12]
 800a03c:	181b      	addge	r3, r3, r0
 800a03e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a042:	bfac      	ite	ge
 800a044:	6563      	strge	r3, [r4, #84]	; 0x54
 800a046:	81a3      	strhlt	r3, [r4, #12]
 800a048:	bd10      	pop	{r4, pc}

0800a04a <__swrite>:
 800a04a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a04e:	461f      	mov	r7, r3
 800a050:	898b      	ldrh	r3, [r1, #12]
 800a052:	05db      	lsls	r3, r3, #23
 800a054:	4605      	mov	r5, r0
 800a056:	460c      	mov	r4, r1
 800a058:	4616      	mov	r6, r2
 800a05a:	d505      	bpl.n	800a068 <__swrite+0x1e>
 800a05c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a060:	2302      	movs	r3, #2
 800a062:	2200      	movs	r2, #0
 800a064:	f000 f868 	bl	800a138 <_lseek_r>
 800a068:	89a3      	ldrh	r3, [r4, #12]
 800a06a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a06e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a072:	81a3      	strh	r3, [r4, #12]
 800a074:	4632      	mov	r2, r6
 800a076:	463b      	mov	r3, r7
 800a078:	4628      	mov	r0, r5
 800a07a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a07e:	f000 b817 	b.w	800a0b0 <_write_r>

0800a082 <__sseek>:
 800a082:	b510      	push	{r4, lr}
 800a084:	460c      	mov	r4, r1
 800a086:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a08a:	f000 f855 	bl	800a138 <_lseek_r>
 800a08e:	1c43      	adds	r3, r0, #1
 800a090:	89a3      	ldrh	r3, [r4, #12]
 800a092:	bf15      	itete	ne
 800a094:	6560      	strne	r0, [r4, #84]	; 0x54
 800a096:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a09a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a09e:	81a3      	strheq	r3, [r4, #12]
 800a0a0:	bf18      	it	ne
 800a0a2:	81a3      	strhne	r3, [r4, #12]
 800a0a4:	bd10      	pop	{r4, pc}

0800a0a6 <__sclose>:
 800a0a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0aa:	f000 b813 	b.w	800a0d4 <_close_r>
	...

0800a0b0 <_write_r>:
 800a0b0:	b538      	push	{r3, r4, r5, lr}
 800a0b2:	4d07      	ldr	r5, [pc, #28]	; (800a0d0 <_write_r+0x20>)
 800a0b4:	4604      	mov	r4, r0
 800a0b6:	4608      	mov	r0, r1
 800a0b8:	4611      	mov	r1, r2
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	602a      	str	r2, [r5, #0]
 800a0be:	461a      	mov	r2, r3
 800a0c0:	f7fe fbb6 	bl	8008830 <_write>
 800a0c4:	1c43      	adds	r3, r0, #1
 800a0c6:	d102      	bne.n	800a0ce <_write_r+0x1e>
 800a0c8:	682b      	ldr	r3, [r5, #0]
 800a0ca:	b103      	cbz	r3, 800a0ce <_write_r+0x1e>
 800a0cc:	6023      	str	r3, [r4, #0]
 800a0ce:	bd38      	pop	{r3, r4, r5, pc}
 800a0d0:	20001560 	.word	0x20001560

0800a0d4 <_close_r>:
 800a0d4:	b538      	push	{r3, r4, r5, lr}
 800a0d6:	4d06      	ldr	r5, [pc, #24]	; (800a0f0 <_close_r+0x1c>)
 800a0d8:	2300      	movs	r3, #0
 800a0da:	4604      	mov	r4, r0
 800a0dc:	4608      	mov	r0, r1
 800a0de:	602b      	str	r3, [r5, #0]
 800a0e0:	f7f8 f8c3 	bl	800226a <_close>
 800a0e4:	1c43      	adds	r3, r0, #1
 800a0e6:	d102      	bne.n	800a0ee <_close_r+0x1a>
 800a0e8:	682b      	ldr	r3, [r5, #0]
 800a0ea:	b103      	cbz	r3, 800a0ee <_close_r+0x1a>
 800a0ec:	6023      	str	r3, [r4, #0]
 800a0ee:	bd38      	pop	{r3, r4, r5, pc}
 800a0f0:	20001560 	.word	0x20001560

0800a0f4 <_fstat_r>:
 800a0f4:	b538      	push	{r3, r4, r5, lr}
 800a0f6:	4d07      	ldr	r5, [pc, #28]	; (800a114 <_fstat_r+0x20>)
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	4604      	mov	r4, r0
 800a0fc:	4608      	mov	r0, r1
 800a0fe:	4611      	mov	r1, r2
 800a100:	602b      	str	r3, [r5, #0]
 800a102:	f7f8 f8be 	bl	8002282 <_fstat>
 800a106:	1c43      	adds	r3, r0, #1
 800a108:	d102      	bne.n	800a110 <_fstat_r+0x1c>
 800a10a:	682b      	ldr	r3, [r5, #0]
 800a10c:	b103      	cbz	r3, 800a110 <_fstat_r+0x1c>
 800a10e:	6023      	str	r3, [r4, #0]
 800a110:	bd38      	pop	{r3, r4, r5, pc}
 800a112:	bf00      	nop
 800a114:	20001560 	.word	0x20001560

0800a118 <_isatty_r>:
 800a118:	b538      	push	{r3, r4, r5, lr}
 800a11a:	4d06      	ldr	r5, [pc, #24]	; (800a134 <_isatty_r+0x1c>)
 800a11c:	2300      	movs	r3, #0
 800a11e:	4604      	mov	r4, r0
 800a120:	4608      	mov	r0, r1
 800a122:	602b      	str	r3, [r5, #0]
 800a124:	f7f8 f8bd 	bl	80022a2 <_isatty>
 800a128:	1c43      	adds	r3, r0, #1
 800a12a:	d102      	bne.n	800a132 <_isatty_r+0x1a>
 800a12c:	682b      	ldr	r3, [r5, #0]
 800a12e:	b103      	cbz	r3, 800a132 <_isatty_r+0x1a>
 800a130:	6023      	str	r3, [r4, #0]
 800a132:	bd38      	pop	{r3, r4, r5, pc}
 800a134:	20001560 	.word	0x20001560

0800a138 <_lseek_r>:
 800a138:	b538      	push	{r3, r4, r5, lr}
 800a13a:	4d07      	ldr	r5, [pc, #28]	; (800a158 <_lseek_r+0x20>)
 800a13c:	4604      	mov	r4, r0
 800a13e:	4608      	mov	r0, r1
 800a140:	4611      	mov	r1, r2
 800a142:	2200      	movs	r2, #0
 800a144:	602a      	str	r2, [r5, #0]
 800a146:	461a      	mov	r2, r3
 800a148:	f7f8 f8b6 	bl	80022b8 <_lseek>
 800a14c:	1c43      	adds	r3, r0, #1
 800a14e:	d102      	bne.n	800a156 <_lseek_r+0x1e>
 800a150:	682b      	ldr	r3, [r5, #0]
 800a152:	b103      	cbz	r3, 800a156 <_lseek_r+0x1e>
 800a154:	6023      	str	r3, [r4, #0]
 800a156:	bd38      	pop	{r3, r4, r5, pc}
 800a158:	20001560 	.word	0x20001560

0800a15c <__malloc_lock>:
 800a15c:	4801      	ldr	r0, [pc, #4]	; (800a164 <__malloc_lock+0x8>)
 800a15e:	f7ff be43 	b.w	8009de8 <__retarget_lock_acquire_recursive>
 800a162:	bf00      	nop
 800a164:	20001558 	.word	0x20001558

0800a168 <__malloc_unlock>:
 800a168:	4801      	ldr	r0, [pc, #4]	; (800a170 <__malloc_unlock+0x8>)
 800a16a:	f7ff be3e 	b.w	8009dea <__retarget_lock_release_recursive>
 800a16e:	bf00      	nop
 800a170:	20001558 	.word	0x20001558

0800a174 <_read_r>:
 800a174:	b538      	push	{r3, r4, r5, lr}
 800a176:	4d07      	ldr	r5, [pc, #28]	; (800a194 <_read_r+0x20>)
 800a178:	4604      	mov	r4, r0
 800a17a:	4608      	mov	r0, r1
 800a17c:	4611      	mov	r1, r2
 800a17e:	2200      	movs	r2, #0
 800a180:	602a      	str	r2, [r5, #0]
 800a182:	461a      	mov	r2, r3
 800a184:	f7f8 f854 	bl	8002230 <_read>
 800a188:	1c43      	adds	r3, r0, #1
 800a18a:	d102      	bne.n	800a192 <_read_r+0x1e>
 800a18c:	682b      	ldr	r3, [r5, #0]
 800a18e:	b103      	cbz	r3, 800a192 <_read_r+0x1e>
 800a190:	6023      	str	r3, [r4, #0]
 800a192:	bd38      	pop	{r3, r4, r5, pc}
 800a194:	20001560 	.word	0x20001560

0800a198 <_init>:
 800a198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a19a:	bf00      	nop
 800a19c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a19e:	bc08      	pop	{r3}
 800a1a0:	469e      	mov	lr, r3
 800a1a2:	4770      	bx	lr

0800a1a4 <_fini>:
 800a1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1a6:	bf00      	nop
 800a1a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1aa:	bc08      	pop	{r3}
 800a1ac:	469e      	mov	lr, r3
 800a1ae:	4770      	bx	lr
